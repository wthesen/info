TechlogPlot
Adjust
TechlogPlot.adjustH(plotID: Number)→ bool
Adjust a cross-plot or a logview horizontally

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.adjustHV(plotID: Number)→ bool
Adjust a cross-plot or a logview horizontally and vertically

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.adjustV(plotID: Number)→ bool
Adjust a cross-plot or a logview vertically

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

BaseMap
TechlogPlot.baseMapAddChart(plotID: Number, cn: str)→ bool
Add chart to the basemap

Parameters
:
plotID (Number) – basemap window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAddMap(plotID: Number, name: str)→ bool
Add a map to an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – map name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAddWell(plotID: Number, name: str)→ bool
Add a well to an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAdjustToMap(plotID: Number)→ bool
Adjust the basemap to the map

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapCreate(n: str, xn: list = None, map: str = None)→ Number
Create a basemap

Parameters
:
n (str) – plot name

xn (list) – Optional; list of well name

map (str) – Optional; map name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.baseMapOpen(n: str, f: str = None)→ Number
Open an existing basemap

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.baseMapRemoveMap(plotID: Number)→ bool
Remove the map from an existing basemap

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapRemoveWell(plotID: Number, name: str)→ bool
Remove a well from an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSave(plotID: Number, n: str, f: str = '')→ bool
Save the basemap

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSaveMap(plotID: Number, n: str, f: str = '')→ bool
Save the map of a basemap

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the contour color on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourColorMode(plotID: Number, mode: str = 'UNIFORM')→ bool
Set the contour color mode on basemap

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘UNIFORM’, ‘PALETTE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourComputationStep(plotID: Number, value: Number)→ bool
Set the contour computation step on basemap

Parameters
:
plotID (Number) – plot window ID

value (Number) – step value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourThickness(plotID: Number, value: Number)→ bool
Set the contour thickness on basemap

Parameters
:
plotID (Number) – plot window ID

value (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourValueVisible(plotID: Number, b: bool)→ bool
Set the contour value visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour value visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourVisible(plotID: Number, b: bool)→ bool
Set the contour visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourWithData(plotID: Number, b: bool)→ bool
Set the contour with data on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour with data if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensitySmooth(plotID: Number, b: bool)→ bool
Set the smooth density visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – smooth density visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensityValuesVisible(plotID: Number, b: bool)→ bool
Set the density values visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – density values visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensityVisible(plotID: Number, b: bool)→ bool
Set the density visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – density visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDerrickColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the derrick on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDerrickSize(plotID: Number, size: Number)→ bool
Set the size of the derrick on basemap

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetKeepProportion(plotID: Number, b: bool)→ bool
Set the keep proportion on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – keep proportion if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelBackgroundVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the background of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; background visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelDisplayMode(plotID: Number, type: str = 'WELL')→ bool
Set the display mode of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘WELL’, ‘CUSTOM’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelPositionType(plotID: Number, type: str = 'TOP')→ bool
Set the position type of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘NONE’, ‘TOP’, ‘BOTTOM’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelWellProperties(plotID: Number, s: str)→ bool
Set the well properties of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

s (str) – well properties

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetOpacityActivated(plotID: Number, b: bool)→ bool
Set the opacity activation on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – opacity activated if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetOpacityValue(plotID: Number, f: Number)→ bool
Set the opacity value on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – opacity value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the border color of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialPosition(plotID: Number, x: Number, y: Number)→ bool
Set the position of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

x (Number) – x position

y (Number) – y position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialSize(plotID: Number, f: Number)→ bool
Set the size of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialVisible(plotID: Number, b: bool)→ bool
Set the visibility of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; scale visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolDisplayMode(plotID: Number, type: str = 'DERRICK')→ bool
Set the symbol display mode on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘DERRICK’, ‘STATUS’, ‘CUSTOM’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolSize(plotID: Number, size: Number)→ bool
Set the symbol size on basemap

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolWellProperties(plotID: Number, s: str)→ bool
Set the symbol well properties on basemap

Parameters
:
plotID (Number) – plot window ID

s (str) – well properties

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryMappedValue(plotID: Number, visible: bool = False)→ bool
Set the visibility of the mapped value on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; mapped value visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; trajectory visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetWellColorVisible(plotID: Number, b: bool)→ bool
Set the well color visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – well color visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisGraduations(plotID: Number, f: Number)→ bool
Set x axis graduations on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set x axis type on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set x axis user limits on basemap

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user value

max (Number) – max user value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXYUnit(plotID: Number, unit: str)→ bool
Set x and y unit on basemap

Parameters
:
plotID (Number) – plot window ID

unit (str) – unit value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisGraduations(plotID: Number, f: Number)→ bool
Set y axis graduations on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set y axis type on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set y axis user limits on basemap

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user value

max (Number) – max user value

Returns
:
operation exit status

Return type
:
bool

Box Plot
TechlogPlot.boxPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotApplyTo(plotID: Number, ds: list)→ list
Apply the box-plot to a data set list

Parameters
:
plotID (Number) – box-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.boxPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new box-plot

Parameters
:
n (str) – box-plot window name

vl (list) – Optional; variable list

f (str) – Optional; filter variable ID

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotDeleteVariables(plotID: Number, vn: list)→ bool
Delete the variable list of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotDuplicate(plotID: Number)→ Number
Duplicate the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.boxPlotGetIdByName(n: str)→ Number
Find the ID of a name-known box-plot

Parameters
:
n (str) – box-plot name

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMeanColor instead) Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change mean markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanStdDeviation(plotID: Number, show: bool)→ bool
Mean & standard deviation display in box-plot

Parameters
:
plotID (Number) – box-plot window ID

show (bool) – True if show, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellAddData(plotID: Number, ds: str)→ bool
Add a dataset to a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCreate(ml: list)→ Number
Create a multi well box-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.boxPlotMultiWellDuplicate(plotID: Number)→ Number
Duplicate the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.boxPlotMultiWellGetIdByName(n: str)→ Number
Find the ID of a name-known box-plot

Parameters
:
n (str) – box-plot name

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotMultiWellMeanColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (Use boxPlotMultiWellMeanColor instead) Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change mean markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanStdDeviation(plotID: Number, show: bool)→ bool
Mean & standard deviation display in box-plot

Parameters
:
plotID (Number) – box-plot window ID

show (bool) – True if show, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellOpen(n: str, f: str = '')→ bool
Open an existing box-plot

Parameters
:
n (str) – box-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – box-plot window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – box-plot window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – box-plot window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – box-plot window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the box-plot quantiles

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – box-plot window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use boxPlotMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetAxisInverse(plotID: Number, inv: bool)→ bool
Inverse a box-plot variable scale

Parameters
:
plotID (Number) – box-plot window ID

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change boxes border color

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMultiWellSetBoxColor instead) Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxDisplay(plotID: Number, type: int, size: Number = 8)→ bool
Change boxes general display

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – new box-plot window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisScale(plotID: Number, sc: int)→ bool
Change a box-plot variable Y axis scale

Parameters
:
plotID (Number) – box-plot window ID

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisType(plotID: Number, t: int)→ bool
Change the type of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

t (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisUnit(plotID: Number, u: str)→ bool
Change the unit of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

u (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set min & max values of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

min (Number) – Y axis minimum

max (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMultiWellStdDevColor instead) Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStddevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
[DEPRECATED] (use boxPlotMultiWellStdDevMarkers instead) Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotOpen(n: str, f: str = '')→ bool
Open an existing box-plot

Parameters
:
n (str) – box-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – box-plot window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – box-plot window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – box-plot window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – box-plot window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the box-plot quantiles

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – box-plot window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – box-plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a box-plot variable scale

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change boxes border color

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotSetBoxColor instead) Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxDisplay(plotID: Number, type: int, size: Number = 8)→ bool
Change boxes general display

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetDatum(plotID: Number, lim: bool, min: Number = 0, max: Number = 0)→ bool
Change the reference limitation on box-plot

Parameters
:
plotID (Number) – box-plot window ID

lim (bool) – True for user’s limitaion, False else

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – box-plot window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetName(plotID: Number, n: str)→ bool
Change the name of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – new box-plot window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a box-plot variable Y axis scale

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

t (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

u (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

min (Number) – X axis minimum

max (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotStdDevColor instead) Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStddevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
[DEPRECATED] (use boxPlotStdDevMarkers instead) Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

Composite Printing
TechlogPlot.compositePrintingAddObject(composerID: Number, name: str, type: Number, folder: str = None)→ bool
Add an object to the composer

Parameters
:
composerID (Number) – composer window ID

name (str) – object name

type (Number) – 0 = Header; 1 = Layout; 2 = CrossPlot; 3 = Histogram; 4 = Picture

folder (str) – Optional; object folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingCreate()→ Number
Create a new composer

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingLayoutObjectScale(composerID: Number, objectIndex: Number, scale: Number)→ bool
Change the scale of a layout object of the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

scale (Number) – new scale of the layout

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingMoveObjectDown(composerID: Number, objectIndex: Number)→ bool
Move an object down in the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingMoveObjectUp(composerID: Number, objectIndex: Number)→ bool
Move an object up in the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingNew(composerID: Number)→ bool
Reset the composer

Parameters
:
composerID (Number) – composer window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingObjectApplyTo(composerID: Number, objectIndex: Number, well: str = None, dataset: str = None)→ Number
Apply the object preview of the composer to a particular well and dataset

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingOpen(n: str, f: str = None)→ Number
Open an existing composer

Parameters
:
n (str) – composer name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreview(composerID: Number)→ bool
Preview the composer

Parameters
:
composerID (Number) – composer window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewApplyTo(composerID: Number, well: str = None, dataset: str = None)→ Number
Apply the composer preview to a particular well and dataset

Parameters
:
composerID (Number) – composer window ID

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreviewGet()→ Number
Get the plot ID of the composer preview

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreviewPrint(hideDialog: bool)→ bool
Print the composer preview

Parameters
:
hideDialog (bool) – 1 = hide dialog box; 0 = show dialog box

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetHorizontalRulerVisibility(visible: bool)→ bool
Change the horizontal ruler visibility of the composer preview

Parameters
:
visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetUnit(unit: str)→ bool
Set the unit of the composer preview

Parameters
:
unit (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetVerticalRulerVisibility(visible: bool)→ bool
Change the vertical ruler visibility of the composer preview

Parameters
:
visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingRemoveObject(composerID: Number, objectIndex: Number)→ bool
Remove an object from composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingSave(composerID: Number, n: str, f: str = None)→ bool
Save the composer

Parameters
:
composerID (Number) – composer window ID

n (str) – composer name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

Container
TechlogPlot.containerAddCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
Add the cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

row (Number) – cell row

column (Number) – cell column

rowSpan (Number) – [optional] cell row span

columnSpan (Number) – [optional] cell column span

TechlogPlot.containerCellExist(containerID: Number, cellID: Number)→ bool
Check if the cell exist or not

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

Returns
:
cell exist (true) or not

Return type
:
bool

TechlogPlot.containerCreate(name: str, title: str)→ Number
Create a new container

Parameters
:
name (str) – container name

title (str) – container title

Returns
:
container ID

Return type
:
Number

TechlogPlot.containerFindCell(containerID: Number, cellID: Number)→ bool or Position
Find container cell by column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

Returns
:
if cell exist position (0 -> column, 1 -> row) else False

Return type
:
bool or Position

TechlogPlot.containerGetCell(containerID: Number, row: Number, column: Number)→ Number
Get container cell by row and column

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

Returns
:
cell ID

Return type
:
Number

TechlogPlot.containerGetTitle(containerID: Number)→ str
Get container title

Parameters
:
containerID (Number) – container instance ID

Returns
:
container title

Return type
:
str

TechlogPlot.containerGetTitleAreaHeight(containerID: Number)→ Number
Get container title height

Parameters
:
containerID (Number) – container instance ID

Returns
:
container title height

Return type
:
Number

TechlogPlot.containerGetTitleVisible(containerID: Number)→ bool
Get container visibility

Parameters
:
containerID (Number) – container instance ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.containerMoveCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
Move the cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

row (Number) – cell row

column (Number) – cell column

rowSpan (Number) – [optional] cell row span

columnSpan (Number) – [optional] cell column span

TechlogPlot.containerRemoveCell(containerID: Number, cellID: Number)
Remove specified cell by ID

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

TechlogPlot.containerRemoveCellFromPos(containerID: Number, row: Number, column: Number)
[DEPRECATED] (use containerRemoveCellFromPosition instead) Remove cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

TechlogPlot.containerRemoveCellFromPosition(containerID: Number, row: Number, column: Number)
[DEPRECATED] Remove cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

TechlogPlot.containerSetTitle(containerID: Number, title: str)
Set container title

Parameters
:
containerID (Number) – container instance ID

title (str) – container title

TechlogPlot.containerSetTitleVisible(containerID: Number, visible: bool)
Set container visibility

Parameters
:
containerID (Number) – container instance ID

visible (bool) – visibility state

Cross Plot
TechlogPlot.crossPlot2ndScaleMarkers(plotID: Number, type: int, size: Number = 5)→ bool
[DEPRECATED] Set type & size of cross-plot second scale’s markers

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot2ndScaleMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] Choose the cross-plot second scale’s markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot2ndScaleMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlot2ndScaleMarkersColor instead) Choose the cross-plot second scale’s markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot3DMonoWellDuplicate(plotID: Number)→ Number
Duplicate the 3D cross-plot

Parameters
:
plotID (Number) – 3D cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlot3DMultiWellDuplicate(plotID: Number)→ Number
Duplicate the 3D cross-plot

Parameters
:
plotID (Number) – 3D cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation on cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAA & sets the color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAAddZone(plotID: Number, z: str)→ bool
Display of a zone from cross-plotAA dataset zonation

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plot AA to a data set list

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotAACleanZonation(plotID: Number, ds: str)→ bool
Remove a zonation dataset from cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (str) – zonation dataset

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAACleanZone(plotID: Number, z: str)→ bool
Remove the display of a zone from cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAACreate(n: str, xn: str = '', yn: str = '', f: str = '', xn2: str = '', yn2: str = '', matrixID: Number = None)→ Number
Create a new cross-plot AA

Parameters
:
n (str) – cross-plotAA window name

xn (str) – Optional; array X name

yn (str) – Optional; array Y name

f (str) – Optional; filter variable name

xn2 (str) – Optional; second X array name

yn2 (str) – Optional; second Y array name

matrixID (Number) – Optional; if the cross-plot will be inserted into a matrix, give matrix ID

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAADeleteColor2Values(plotID: Number)→ bool
Delete the variable present on the second color scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteColorValues(plotID: Number)→ bool
Delete the variable present on the color scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteLabelValues(plotID: Number)→ bool
Delete the variable present on the label scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteX2Values(plotID: Number)→ bool
Delete the variable present on the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteXValues(plotID: Number)→ bool
Delete the variable present on the X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteY2Values(plotID: Number)→ bool
Delete the variable present on the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteYValues(plotID: Number)→ bool
Delete the variable present on the Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plotAA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADisplaySecondVarOver(plotID: Number, activate: bool)→ bool
[DEPRECATED] (use crossPlotAADisplaySecondVariableOver instead) Display cross-plotAA second axis over the first axis

Parameters
:
plotID (Number) – cross-plotAA window ID

activate (bool) – True if activated, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADisplaySecondVariableOver(plotID: Number, activate: bool)→ bool
Display cross-plotAA second axis over the first axis

Parameters
:
plotID (Number) – cross-plotAA window ID

activate (bool) – True if activated, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADuplicate(plotID: Number)→ Number
Duplicate the cross-plot AA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotAAGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot AA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotAALinkThickness(plotID: Number, thk: Number = 0)→ Number
Link thickness cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

thk (Number) – Optional; link thikness

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotAALockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAV

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScale(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAA second scale markers

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScaleColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAA second scale markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScaleColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAAMarkers2ndScaleColor instead) Choose the cross-plotAA second scale markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAA markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAAMarkersColor instead) Choose the cross-plotAA markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersDisplay(plotID: Number, display: bool = True)→ Number
Display of cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

display (bool) – Optional; markers display

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAA & sets the color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegressionByWell(plotID: Number)→ bool
Add a regression by well in a cross-plotAA

Parameters
:
plotID (Number) – cross-plot windowAA ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCreate(ml: list)→ Number
Create a multi well cross-plotAA

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plotAA in normal or density type

Parameters
:
plotID (Number) – cross-plotAA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDuplicate(plotID: Number)→ Number
Duplicate the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plotAA

Parameters
:
n (str) – cross-plotAA window name

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAV

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellOpen(n: str, f: str = None)→ bool
Open an existing cross-plotAA multi-well

Parameters
:
n (str) – cross-plotAA multi-well name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveDataset(plotID: Number, we: str)→ bool
Remove a dataset from a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAA axes

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – cross-plotAA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of multiwell cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – new cross-plotAA name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAA X axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAA Y axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAOpen(n: str, f: str = '')→ bool
Open an existing cross-plotAA

Parameters
:
n (str) – cross-plotAA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAARemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAARemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAA axes

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASave(plotID: Number, n: str, f: str = '')→ bool
Save a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – saving name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plotAA window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetColor(plotID: Number, vn: str)→ bool
Set a color variable to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetColor2(plotID: Number, vn: str)→ bool
Set a color variable to the second axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetDatum(plotID: Number, lim: bool, min: Number=0, max: Number)→ bool
Change the reference limitation on cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

lim (bool) – True for user’s limitaion, False else

min (Number) – Optional; top limit

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetFilter(plotID: Number, vn: str)→ bool
Set filter to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetLabel(plotID: Number, vn: str)→ bool
Set a label variable to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetName(plotID: Number, n: str)→ bool
Change cross-plotAA window name

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – new name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetSecondYScale(plotID: Number, vn: str)→ bool
Set array variable to second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX(plotID: Number, vn: str)→ bool
Set array variable to X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX2(plotID: Number, vn: str)→ bool
Set array variable to the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAA X axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY(plotID: Number, vn: str)→ bool
Set array variable to Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY2(plotID: Number, vn: str)→ bool
Set array variable to the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAA Y axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetZonation(plotID: Number, ds: str)→ bool
Apply a zonation dataset to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (str) – zonation dataset

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAVA & sets the color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plotAVAto a data set list

Parameters
:
plotID (Number) – cross-plotAVA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotAVACleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVACleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVACreate(n: str, xn: str = '', yn: str = '', f: str = '', matrixID: Number = None)→ Number
Create a new cross-plotAVA

Parameters
:
n (str) – cross-plotAVA window name

xn (str) – Optional; variable X name

yn (str) – Optional; variable Y name

f (str) – Optional; filter variable name

matrixID (Number) – Optional; if the cross-plot will be inserted into a matrix, give matrix ID

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVADeleteColorValues(plotID: Number)→ bool
Delete the variable present on the color scale of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteXValues(plotID: Number)→ bool
Delete the variable present on the X axis of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteYValues(plotID: Number)→ bool
Delete the variable present on the Y axis of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAVA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plotAVA in normal or density type

Parameters
:
plotID (Number) – cross-plotAVA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAVA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADuplicate(plotID: Number)→ Number
Duplicate the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAVAGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotAVAGetIdByName(n: str)→ Number
Find the ID of a name-known cross-plotAVA

Parameters
:
n (str) – cross-plotAVA window name

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVAGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot AVA

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotAVALockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAVA markers

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAVA markers color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAVAMarkersColor instead) Choose the cross-plotAVA markers color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAOpen(n: str, f: str = '')→ Number
Open an existing cross-plotAVA

Parameters
:
n (str) – cross-plotAVA name

f (str) – Optional; folder

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVARemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVARemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAVA axes

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

n (str) – cross-plotAVA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plotAVA window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetColor(plotID: Number, Vname: str)→ bool
Set the color to an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable name for the color

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetFilter(plotID: Number, Vname: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – filter variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetName(plotID: Number, n: str)→ bool
Change the name of mono cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

n (str) – new cross-plotAVAname

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetX(plotID: Number, Vname: str)→ bool
Set the variable to X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable X name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAVA X axis scale

Parameters
:
plotID (Number) – cross-plotAVA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetY(plotID: Number, Vname: str)→ bool
Set the variable to Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable Y name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAVA Y axis scale

Parameters
:
plotID (Number) – cross-plotAVA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plotAVA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotActivateSecondAxe(plotID: Number, activate: bool = False)→ bool
[DEPRECATED] Activate the second axis in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

activate (bool) – Optional; activate

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddChart(plotID: Number, cn: str)→ bool
Add a chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Y parameter

val1 (Number) – value of Y parameter

min1 (Number) – minimum of Y parameter

max1 (Number) – maximum of Y parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number = 0)→ bool
Add a link between two parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – first parameter point id

ppid2 (str) – second parameter point id

lt (Number) – Optional; link style {0 = ‘AtoB’, 1 = ‘BtoA’, 2 = ‘BOTH’, 3 = ‘NOARROW’

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.crossPlotAddRegressionByFilter(plotID: Number)→ bool
Add a regression by filter in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plot to a data set list

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotChartList()
Return the list of available charts

TechlogPlot.crossPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotCreate(n: str, xn: str = '', yn: str = '', f: str = '', xn2: str = '', yn2: str = '', widgetID: Number = None)→ Number
Create a new cross-plot

Parameters
:
n (str) – cross-plot window name

xn (str) – Optional; variable X name

yn (str) – Optional; variable Y name

f (str) – Optional; filter variable name

xn2 (str) – Optional; [DEPRECATED] second X variable name (unused since 2011.2)

yn2 (str) – Optional; [DEPRECATED] second Y variable name (unused since 2011.2)

widgetID (Number) – Optional; if the cross-plot will be inserted into a widget, give widget ID

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotDeleteColor2Values(plotID: Number)→ bool
[DEPRECATED] Delete the variable present on the second color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteColorValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteLabelValues(plotID: Number)→ bool
Delete the label variable of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeletePointSizeValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the point size scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteX2Values(plotID: Number)→ bool
Delete the variable present on the second X axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteXValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the X axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteY2Values(plotID: Number)→ bool
Delete the variable present on the second Y axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteYValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the Y axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plot window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDuplicate(plotID: Number)→ Number
Duplicate the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotGetChartPolylinesInfo(plotID: Number)
Get the polylines information of all the charts loaded in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Output dict:
str: chart levelchart name str: polyline id if defined str: polyline name if defined list: list of X coordinate of the polyline points in the cross-plot X axis unit list: list of Y coordinate of the polyline points in the cross-plot Y axis unit list: list of the graduation values for each polyline points Number: value of the first constant of the polyline indexed by its name Number: value of the … constant of the polyline indexed by its name Number: value of the first parameter of the polyline indexed by its name Number: value of the … parameter of the polyline indexed by its name

TechlogPlot.crossPlotGetColorVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “color” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the color variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetLabelVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “label” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the label variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.crossPlotGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.crossPlotGetPointSizeVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “point size” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the point size variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotGetScaleList(plotID: int)→ List[str]
Get the list of scale names of a single well cross plot

Parameters
:
plotID (int) – cross plot window ID

Returns
:
list of scale names

Return type
:
List[str]

TechlogPlot.crossPlotGetXHistogramBinCount(plotID: Number)→ int
Getter for bin count on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram horizontal bin count (NONE if the given plotID doesn’t exist)}

Return type
:
int

TechlogPlot.crossPlotGetXVariableList(plotID: int, ScaleId: str = '')→ List[str]
Get the name of the variables of the axis “x” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
list of variable names in x [“Well.Dataset.Variable”]

Return type
:
List[str]

TechlogPlot.crossPlotGetYHistogramBinCount(plotID: Number)→ int
Getter for bin count on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram vertical bin count (NONE if the given plotID doesn’t exist)}

Return type
:
int

TechlogPlot.crossPlotGetYVariableList(plotID: int, ScaleId: str = '')→ List[str]
Get the name of the variables of the axis “y” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
list of variable names in y [“Well.Dataset.Variable”]

Return type
:
List[str]

TechlogPlot.crossPlotIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotIsXHistogramCumulativeFrequencyVisible(plotID: Number)→ bool
Getter for cumulative frequency visibility state on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram horizontal cumulative frequency visibility state (NONE if the given plotID doesn’t exist)}

Return type
:
bool

TechlogPlot.crossPlotIsYHistogramCumulativeFrequencyVisible(plotID: Number)→ bool
Getter for cumulative frequency visibility state on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram vertical cumulative frequency visibility state (NONE if the given plotID doesn’t exist)}

Return type
:
bool

TechlogPlot.crossPlotLink(plotID: Number, link: bool)→ Number
Link cross-plot markers

Parameters
:
plotID (Number) – cross-plot window ID

link (bool) – True if linked, False else

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plot markers

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plot markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotMarkersColor instead) Choose the cross-plot markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddChart(plotID: Number, cn: str)→ bool
Add chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotMultiWellAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Y parameter

val1 (Number) – value of Y parameter

min1 (Number) – minimum of Y parameter

max1 (Number) – maximum of Y parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotMultiWellAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number = 0)→ bool
Add a link between two parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – first parameter point id

ppid2 (str) – second parameter point id

lt (Number) – Optional; link style {0 = ‘AtoB’, 1 = ‘BtoA’, 2 = ‘BOTH’, 3 = ‘NOARROW’

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.crossPlotMultiWellAddRegressionByFilter(plotID: Number)→ bool
Add a regression by filter in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddRegressionByWell(plotID: Number)→ bool
Add a regression by well in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellChartList()
Return the list of available charts

TechlogPlot.crossPlotMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellCreate(ml: list)→ Number
Create a multi well cross-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plot window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDuplicate(plotID: Number)→ Number
Duplicate the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotMultiWellGetChartPolylinesInfo(plotID: Number)
Get the polylines information of all the charts loaded in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Output dict:
str: chart levelchart name str: polyline id if defined str: polyline name if defined list: list of X coordinate of the polyline points in the cross-plot X axis unit list: list of Y coordinate of the polyline points in the cross-plot Y axis unit list: list of the graduation values for each polyline points Number: value of the first constant of the polyline indexed by its name Number: value of the … constant of the polyline indexed by its name Number: value of the first parameter of the polyline indexed by its name Number: value of the … parameter of the polyline indexed by its name

TechlogPlot.crossPlotMultiWellGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot multi well

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotMultiWellIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellOpen(n: str, f: str = '')→ Number
Open an existing cross-plot

Parameters
:
n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterLineY(plotID: Number, ppid1: str)→ bool
Remove a parameter line Y in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellReverseAxes(plotID: Number)→ bool
Reverse the cross-plot axes

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use crossPlotMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str = '', yunit: str = '', zunit: str = '')→ bool
Set the density values of a multi-well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

xpos (list) – list of x positions values

ypos (list) – list of y positions values

zdata (list) – list of data density values (zsize = (xsize-1)*(ysize-1))

xunit (str) – Optional; x unit

yunit (str) – Optional; y unit

zunit (str) – Optional; z unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetHistogramVisible(plotID: Number, cf: bool)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (bool) – {0 = ‘remove the histograms’, 1 = ‘display the histograms’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of multiwell cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisScale(plotID: Number, psasc: int)→ bool
Set the cross-plot point size axis scale

Parameters
:
plotID (Number) – cross-plot window ID

psasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max sizes of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum size

psamax (Number) – point size axis maximum size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisType(plotID: Number, psat: int)→ bool
Change the type of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psat (int) – point size axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max values of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum

psamax (Number) – point size axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotOpen(n: str, f: str = '')→ Number
Open an existing cross-plot

Parameters
:
n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.crossPlotPointSizeChange(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the point size to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable point size name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveChart(plotID: Number, cn: str)→ bool
Remove a chart from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterLineY(plotID: Number, ppid1: str)→ bool
Remove a parameter line Y in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotReverseAxes(plotID: Number)→ bool
Reverse the cross-plot axes

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColor(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the color to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable name for the color

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColor2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the second color to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable second color name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColorValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColour2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColourValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
[DEPRECATED] (use crossPlotSetColorValues instead) Set a fictive set of user variables to the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str = '', yunit: str = '', zunit: str = '')→ bool
Set the density values of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

xpos (list) – list of x positions values

ypos (list) – list of y positions values

zdata (list) – list of data density values (zsize = (xsize-1)*(ysize-1))

xunit (str) – Optional; x unit

yunit (str) – Optional; y unit

zunit (str) – Optional; z unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFilter(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – filter variable name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFilterValues(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – spectrum window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFirstScaleName(plotID: Number, n: str)→ bool
Change the name of first scale in a mono cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new first scale name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetGridVisible(plotID: Number, grid_X: int = 2, grid_Y: int = 2)→ bool
Hide or Display the Grid in all plots

Parameters
:
plotID (Number) – window ID

grid_X (int) – Optional; X grid visibility state: {0 = ‘HIDDEN’, 1 = ‘ONLY_PRIMARY’, 2 = ‘BOTH’}

grid_Y (int) – Optional; Y grid visibility state: {0 = ‘HIDDEN’, 1 = ‘ONLY_PRIMARY’, 2 = ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetHistogramVisible(plotID: Number, cf: bool)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (bool) – {0 = ‘remove the histograms’, 1 = ‘display the histograms’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetHistogramXYVisible(plotID: Number, cf: str)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (str) – {‘NONE’ = ‘remove the histograms’, ‘HISTO_X’ = ‘display the histogram for X axis’,

axis' ('HISTO_Y' = 'display the histogram for Y)

histograms'} ('BOTH' = 'display the)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabel(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the a label to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable label name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabel2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the a second label to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window windowID

Vname (str) – variable second label name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabelValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the label axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLegendX(plotID: Number, legendx: str)→ bool
Set the cross-plot legend for X axis

Parameters
:
plotID (Number) – cross-plot window ID

legendx (str) – legendx

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLegendY(plotID: Number, legendy: str)→ bool
Set the cross-plot legend for Y axis

Parameters
:
plotID (Number) – cross-plot window ID

legendy (str) – legendy

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetName(plotID: Number, n: str)→ bool
Change the name of mono cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPaletteBoundaries(plotID: Number, min: Number, max: Number)→ bool
Set the boundaries of the palette for a single-well cross plot.

Parameters
:
plotID (Number) – plot window ID

min (Number) – minimum of the palette

max (Number) – maximum of the palette

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisScale(plotID: Number, psasc: int)→ bool
Set the cross-plot point size axis scale

Parameters
:
plotID (Number) – cross-plot window ID

psasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max sizes of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum size

psamax (Number) – point size axis maximum size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisType(plotID: Number, psat: int)→ bool
Change the type of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psat (int) – point size axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max values of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum

psamax (Number) – point size axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetSubtitle(plotID: Number, subtitle: str)→ bool
Set the cross-plot subtitle

Parameters
:
plotID (Number) – cross-plot window ID

subtitle (str) – subtitle

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetTitle(plotID: Number, title: str)→ bool
Set the cross-plot title

Parameters
:
plotID (Number) – cross-plot window ID

title (str) – title

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable to X axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable X name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the variable to the second X axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable X2 name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second X axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisType(plotID: Number, xat: int, ScaleId: str = '')→ bool
Change the type of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number, scaleID: str = None)→ bool
Set min & max values of cross-plot X axis for the given scale

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

scaleID (str) – Optional; scale ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXHistogramBinCount(plotID: Number, binCount: int)→ bool
Change the bin count on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

binCount (int) – the new bin count

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetXHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool)→ bool
Change the cumulative frequency visibility state on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

binCount (bool) – new visibility state

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetXValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the X axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable to Y axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable Y name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the variable to the second Y axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable Y2 name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second Y axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisType(plotID: Number, yat: int, ScaleId: str = '')→ bool
Change the type of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number, scaleID: str = None)→ bool
Set min & max values of cross-plot Y axis for the given scale

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

scaleID (str) – Optional; scale ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYHistogramBinCount(plotID: Number, binCount: int)→ bool
Change the bin count on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

binCount (int) – the new bin count

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetYHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool)→ bool
Change the cumulative frequency visibility state on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

binCount (bool) – new visibility state

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetYValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the Y axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Cumulative Dip Plot
TechlogPlot.cumulativeDipPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotApplyTo(plotID: Number, ds: list)→ bool
Apply the cumulative dip-plot to a data set list

Parameters
:
plotID (Number) – plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cumulative dip-plot - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new cumulative dip-plot

Parameters
:
n (str) – plot window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteDip(plotID: Number)→ bool
Delete the dip variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDuplicate(plotID: Number)→ Number
Duplicate the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.cumulativeDipPlotGetIdByName(n: str)→ Number
Find the ID of a name-known cumulative dip-plot

Parameters
:
n (str) – plot name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotOpen(n: str, f: str = None)→ Number
Open an existing cumulative dip plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotOpenWalkoutPlot(plotID: Number)→ Number
Open a walkout-plot

Parameters
:
plotID (Number) – cumulative dip-plot window ID

Returns
:
walkout-plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetAutomaticAdjustment(plotID: Number, b: bool)→ bool
Set the automatic adjustment on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True for automatic adjustment, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColor(plotID: Number, color: str)→ bool
Set the color variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColorMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
Set the color mode on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColourMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
[DEPRECATED] (use cumulativeDipPlotSetColorMode instead) Set the color mode on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use cumulativeDipPlotSetMarkersColor instead) Set the makers color on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetName(plotID: Number, n: str)→ bool
Change the name of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – new plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisGraduations(plotID: Number, f: Number)→ bool
Set the x axis graduations of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisInverse(plotID: Number, b: bool)→ bool
Set the x axis inverse of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set the x axis type of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; axis type {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the x axis user limits of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisGraduations(plotID: Number, f: Number)→ bool
Set the y axis graduations of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisInverse(plotID: Number, b: bool)→ bool
Set the y axis inverse of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set the y axis type of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; axis type {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the y axis user limits of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Custom Plot
TechlogPlot.customPlotAddAction(plotID: Number, ActionName: str, Location: int, GlobalPosition: int=4, ActionAfter: str)→ bool
Add an action to toolbar, mouseMode and/or contextMenu with the given position (begin, middle or end)

Parameters
:
plotID (Number) – custom-plot window ID

ActionName (str) – Name of action

Location (int) – Location of action : Tool-bar = 1,Mouse-mode = 2, Context-menu = 4. You can associate it.

GlobalPosition (int) – Optional; Global position of action : Begin = 1, Middle = 2, End = 4.

ActionAfter (str) – [=]: Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToCreatedMenu(plotID: Number, MenuName: str, ActionName: str, ActionAfter: str)→ bool
Add action to existing menu before the given action name.

Parameters
:
plotID (Number) – custom-plot window ID

MenuName (str) – Name of menu.

ActionName (str) – Name of action.

ActionAfter (str) – [=]: Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToDefaultMenu(plotID: Number, Menu: int, ActionName: str, GlobalPosition: int)→ bool
Add action to existing menu.

Parameters
:
plotID (Number) – custom-plot window ID

Menu (int) – Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.

ActionName (str) – Name of action.

GlobalPosition (int) – Global position of action : Begin = 1, Middle = 2, End = 4.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToDefaultMenuDynamic(plotID: Number, Menu: int, ActionName: str, ActionAfter: str)→ bool
Add action to existing menu.

Parameters
:
plotID (Number) – custom-plot window ID

Menu (int) – Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.

ActionName (str) – Name of action.

ActionAfter (str) – Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddNewMenu(plotID: Number, MenuName: str, ActionList: list)→ bool
Add a menu.

Parameters
:
plotID (Number) – custom-plot window ID.

MenuName (str) – Name of menu.

ActionList (list) – List of action we want to add to menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddNewTable(plotID: Number, TableName: str)→ bool
Add a new table widget on left part of custom plot. (Here for this exemple, the widget are empty)

Parameters
:
plotID (Number) – custom-plot window ID

TableName (str) – Name of table.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddPlotToWorkspace(plotID: Number)→ bool
Add the plot to workspace.

Parameters
:
plotID (Number) – custom-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotCreate(n: str)→ Number
Create a custom plot, you have to add it to workspace for see it.

Parameters
:
n (str) – custom plot window name

Returns
:
custom-plot window ID

Return type
:
Number

TechlogPlot.customPlotDisplayDefaultActions(plotID: Number, IsDisplay: bool)→ bool
Say if you want to display default action.

Parameters
:
plotID (Number) – custom-plot window ID

IsDisplay (bool) – True if you want to display default menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotDisplayMenu(plotID: Number, IsDisplay: bool)→ bool
Say if you want to hide menu when they are empty.

Parameters
:
plotID (Number) – custom-plot window ID

IsDisplay (bool) – True if you want to display default menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotInsertChart(plotID: Number, chartFile: str)→ bool
Insert a chart in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chartFile (str) – Name of chart we want to insert

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotInsertDynamicChart(plotID: Number, chart: str, chartName: str)→ bool
Insert a chart dynamically in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chart (str) – Chart we want to insert

chartName (str) – Title of chart

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotRemoveChart(plotID: Number, chartFile: str)→ bool
Remove a chart in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chartFile (str) – Name of chart we want to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotResize(plotID: Number, width: Number, height: Number)→ bool
Resize the widget

Parameters
:
plotID (Number) – custom-plot window ID

width (Number) – Width of widget after resize

height (Number) – Height of widget after resize

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetCursorToAction(plotID: Number, ActionName: str, Cursor: int)→ bool
Associate a cursor for a given action when you are in viewer. (Here for this exemple, create an action in Mouse Mode begin)

Parameters
:
plotID (Number) – custom-plot window ID

ActionName (str) – Name of action

Cursor (int) – Qt::CursorShape, see website for number.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetHorizontalLegendName(plotID: Number, legendY: str)→ bool
Set the name of the horizontal legend

Parameters
:
plotID (Number) – custom-plot window ID

legendY (str) – Name of legend on Y

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetPlotSubTitle(plotID: Number, subtitle: str)→ bool
Set a subtitle to plot

Parameters
:
plotID (Number) – custom-plot window ID

subtitle (str) – Name of subtitle

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetPlotTitle(plotID: Number, title: str)→ bool
Set a title to plot

Parameters
:
plotID (Number) – custom-plot window ID

title (str) – Name of title

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetVerticalLegendName(plotID: Number, legendY: str)→ bool
Set the name of the vertical legend

Parameters
:
plotID (Number) – custom-plot window ID

legendY (str) – Name of legend on Y

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetWindowTitle(plotID: Number, title: str)→ bool
Set a title to window

Parameters
:
plotID (Number) – custom-plot window ID

title (str) – Name of title

Returns
:
operation exit status

Return type
:
bool

Depth Array Plot
TechlogPlot.depthArrayPlotDuplicate(plotID: Number)→ Number
Duplicate an existing depth array plot

Parameters
:
plotID (Number) – plot Id to duplicate

Returns
:
plot ID

Return type
:
Number

TechlogPlot.depthArrayPlotOpen(n: str, f: str = None)→ Number
Open an existing depth array plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

Depth Map Plot
TechlogPlot.depthMapPlotCreate(n: str)→ Number
Create a new depth map plot

Parameters
:
n (str) – plot name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.depthMapPlotSetData(plotID: Number, fileName: str, t: list, nbL: Number, nbC: Number, minX: Number, stepX: Number, unitX: str, minY: Number, stepY: Number, unitY: str, referenceValues: list, referenceName: str, referenceUnit: str, referenceFamily: str)→ bool
Set the data of a depth map plot

Parameters
:
plotID (Number) – plot window ID

fileName (str) – name for the reference

t (list) – list of the map data

nbL (Number) – number of row

nbC (Number) – number of column

minX (Number) – minimum X axis

stepX (Number) – step X axis

unitX (str) – unit X axis

minY (Number) – minimum Y axis

stepY (Number) – step Y axis

unitY (str) – unit Y axis

referenceValues (list) – list of reference values

referenceName (str) – name of the reference variable

referenceUnit (str) – unit of the reference variable

referenceFamily (str) – reference Family

Returns
:
operation exit status

Return type
:
bool

Geometry
TechlogPlot.geometryAddBasePolygon(ID: Number, points: list)→ bool
add a new base polygon in the geometry engine. If new polygon intersect geometry, operation fails

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

points (list) – polygon points [(x1, y1), (x2, y2), …], for polygon ABCDA, user should only provide A, B, C, D points

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryAddBoundary(ID: Number, points: list)→ bool
Split the geometry with a new boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

points (list) – boundary points list [(x1, y1), (x2, y2), …]

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryAddProperty(ID: Number, propertyName: str, measurement: str, unit: str, paletteName: str)→ bool
Add a new property family to the geometry.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to add

measurement (str) – measurement name

unit (str) – unit of the family values

paletteName (str) – name of the palette to use for displaying the family

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeleteBoundary(ID: Number, point: tuple)→ bool
Delete a geometry boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point selection for boundary

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeletePoint(ID: Number, point: tuple)→ bool
Delete a geometry point.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point position

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeleteProperty(ID: Number, propertyName: str)→ bool
Delete a property family.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to delete

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryGetPolygons(ID: Number)→ list
Get all geometry polygons.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

Returns
:
list of list of point(x,y)

Return type
:
list

TechlogPlot.geometryMoveBoundary(ID: Number, point: tuple, point: tuple)→ bool
Move a geometry boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – boundary point initial position

point – translation vector

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryMovePoint(ID: Number, point: tuple, point: tuple)→ bool
Move a geometry point.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point initial position

point – point destination position

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryReset(ID: Number)→ bool
delete all geometry features of the geometric engine.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryRotateBoundary(ID: Number, point: tuple, center: tuple, angle: Number)→ bool
Rotate a geometry Boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – Boundary point selection

center (tuple) – rotation center

angle (Number) – rotation angle in degree

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometrySelectProperty(ID: Number, propertyName: str)→ bool
select the property family to display.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to display

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometrySetPolygonProperty(ID: Number, point: tuple, propertyName: str, propertyValue: Number)→ bool
Set polygon property.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point selection for polygon

propertyName (str) – name of the property family to delete

propertyValue (Number) – new value for the property family of the selected polygon

Returns
:
True if operation is done else exception

Return type
:
bool

Header Editor
TechlogPlot.headerEditorAddBox(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number)→ Number
Add a box to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x (Number) – left coordinate of the box

y (Number) – top coordinate of the box

w (Number) – width of the box

h (Number) – height of the box

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddHeader(headerEditorID: Number, n: str, f: str = None)→ Number
Add an existing header to the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

n (str) – header name

f (str) – Optional; folder

Returns
:
header ID

Return type
:
Number

TechlogPlot.headerEditorAddImage(headerEditorID: Number, path: str, x: Number = 0, y: Number = 0)→ Number
Add an image to the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

path (str) – image path

x (Number) – Optional; left coordinate of the image

y (Number) – Optional; top coordinate of the image

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddImageFromProperty(headerEditorID: Number, path: str, x: Number = 0, y: Number = 0)→ Number
Add an image to the header editor using properties

Parameters
:
headerEditorID (Number) – header editor window ID

path (str) – image path using properties

x (Number) – Optional; left coordinate of the image

y (Number) – Optional; top coordinate of the image

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddLine(headerEditorID: Number, x1: Number, y1: Number, x2: Number, y2: Number)→ Number
Add a line to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x1 (Number) – x coordinate of the first extremity of the line

y1 (Number) – y coordinate of the first extremity of the line

x2 (Number) – x coordinate of the second extremity of the line

y2 (Number) – y coordinate of the second extremity of the line

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddProperty(headerEditorID: Number, objectID: Number, text: str)→ bool
Add a property to the header object

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

text (str) – text of the property (using ‘%’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorAddTable(headerEditorID: Number, rowCount: Number, columnCount: Number)→ Number
Add a table to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

rowCount (Number) – Number of row of the table

columnCount (Number) – Number of column of the table

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddText(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number, text: str = None)→ Number
Add a text to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x (Number) – left coordinate of the text

y (Number) – top coordinate of the text

w (Number) – width of the text

h (Number) – height of the text

text (str) – Optional; text

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAlignObjectsOnTheGrid(headerEditorID: Number, align: bool)→ bool
Enable to align objects on the grid

Parameters
:
headerEditorID (Number) – header editor window ID

align (bool) – 1 = align; 0 = don’t align

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorApplyPropertiesTo(headerEditorID: Number, well: str = None, dataset: str = None)→ bool
Apply the properties (tags) of the header to a particular well and dataset

Parameters
:
headerEditorID (Number) – header editor window ID

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorChangeDisplayMode(headerEditorID: Number, result: bool)→ bool
Change the display mode

Parameters
:
headerEditorID (Number) – header editor window ID

result (bool) – 1 = display result texts; 0 = display tags

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorCreate()→ Number
Create a new header editor

Returns
:
header editor ID

Return type
:
Number

TechlogPlot.headerEditorNew(headerEditorID: Number)→ bool
Reset a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectBringForward(headerEditorID: Number, objectID: Number)→ bool
Bring forward an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectBringToFront(headerEditorID: Number, objectID: Number)→ bool
Bring to front an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectSendBackward(headerEditorID: Number, objectID: Number)→ bool
Send backward an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectSendToBack(headerEditorID: Number, objectID: Number)→ bool
Send to back an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorOpen(n: str, f: str = None)→ Number
Open an existing header editor

Parameters
:
n (str) – header name

f (str) – Optional; folder

Returns
:
header editor ID

Return type
:
Number

TechlogPlot.headerEditorRemoveHeader(headerEditorID: Number, headerID: Number)→ bool
Remove an existing header from the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

headerID (Number) – header ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorRemoveObject(headerEditorID: Number, objectID: Number)→ bool
Remove an object from the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSave(headerEditorID: Number, n: str, f: str = None, Copy_pictures: bool = True)→ bool
Save a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

n (str) – header editor name

f (str) – Optional; folder

Copy_pictures (bool) – Optional; True to copy the pictures if needed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBackgroundColor(headerEditorID: Number, r: Number, g: Number, b: Number)→ bool
Change the background color of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBoxAreaFill(headerEditorID: Number, objectID: Number, filled: bool)→ bool
Set if the box is transparent

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the box

filled (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBoxAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the text field background color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the box

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetCurrentHeader(headerEditorID: Number, headerID: Number)→ bool
Change the header used for modifications by other header editor functions

Parameters
:
headerEditorID (Number) – header editor window ID

headerID (Number) – header ID (first header ID is 0, and so on…)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetGridVisibility(headerEditorID: Number, visible: bool)→ bool
Change the grid visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetHeight(headerEditorID: Number, height: Number)→ bool
Set the height of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

height (Number) – new height in the current header editor unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetHorizontalRulerVisibility(headerEditorID: Number, visible: bool)→ bool
Change the horizontal ruler visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageKeepProportions(headerEditorID: Number, objectID: Number, keep: bool)→ bool
Set if the image has to keep its original proportions

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

keep (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageOpacity(headerEditorID: Number, objectID: Number, opacity: Number)→ bool
Set the opacity of an image

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

opacity (Number) – between 0 (fully transparent) and 1 (fully opaque)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageOriginalSize(headerEditorID: Number, objectID: Number, keep: bool)→ bool
Set if the image has to keep its original size

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

keep (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageRotation(headerEditorID: Number, objectID: Number, rotation: Number)→ bool
Set the orientation of an image

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

rotation (Number) – rotation in ° (0, 90, 180 or 270)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectAlignment(headerEditorID: Number, objectID: Number, position: Number)→ bool
Change the header object alignment

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

position (Number) – 0 = left; 1 = center; 2 = right

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectBorderColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the header object border color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectBorderWidth(headerEditorID: Number, objectID: Number, width: Number)→ bool
Change the header object border width

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

width (Number) – width of the border

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectPosition(headerEditorID: Number, objectID: Number, x: Number, y: Number)→ bool
Change the header object position

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

x (Number) – horizontal position

y (Number) – vertical position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectSize(headerEditorID: Number, objectID: Number, w: Number, h: Number)→ bool
Change the header object size

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

w (Number) – horizontal size

h (Number) – vertical size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetText(headerEditorID: Number, objectID: Number, text: str)→ bool
Set the text of a text field

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

text (str) – text to set

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAllWidthAvailable(headerEditorID: Number, objectID: Number, all: bool)→ bool
Set if the text has to use all the width available

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

all (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAreaFill(headerEditorID: Number, objectID: Number, filled: bool)→ bool
Set if the text field is transparent

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

filled (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the text field background color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextOrientation(headerEditorID: Number, objectID: Number, orientation: Number)→ bool
Set the orientation of a text field

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

orientation (Number) – orientation in ° (0, 90, 180 or 270)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetUnit(headerEditorID: Number, unit: str)→ bool
Set the unit of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

unit (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetVerticalRulerVisibility(headerEditorID: Number, visible: bool)→ bool
Change the vertical ruler visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableAddColumn(headerEditorID: Number, objectID: Number)→ bool
Add a column to the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableAddRow(headerEditorID: Number, objectID: Number)→ bool
Add a row to the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableDeleteColumn(headerEditorID: Number, objectID: Number, column_index: Number)→ bool
Delete a column of the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

column_index (Number) – index of the column (from 0) to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableDeleteRow(headerEditorID: Number, objectID: Number, row_index: Number)→ bool
Delete a row of the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

row_index (Number) – index of the row (from 0) to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableInsertColumn(headerEditorID: Number, objectID: Number, column_index: Number)→ bool
Insert a column in the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

column_index (Number) – index of the column (from 0) where the new one has to be inserted

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableInsertRow(headerEditorID: Number, objectID: Number, row_index: Number)→ bool
Insert a row in the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

row_index (Number) – index of the row (from 0) where the new one has to be inserted

Returns
:
operation exit status

Return type
:
bool

Histogram
TechlogPlot.histogramAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of X parameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.histogramAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.histogramAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramApplyTo(plotID: Number, ds: list)→ list
Apply the histogram to a data set list

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.histogramCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new histogram

Parameters
:
n (str) – histogram window name

vl (list) – Optional; variable list name

f (str) – Optional; filter variable name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramDeleteVariables(plotID: Number, vn: list)→ bool
Delete the variable list of the histogram

Parameters
:
plotID (Number) – histogram window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramDuplicate(plotID: Number)→ Number
Duplicate the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.histogramGetIdByName(n: str)→ Number
Returns the ID of a name-known histogram

Parameters
:
n (str) – histogram name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.histogramGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.histogramLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.histogramMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.histogramMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCreate(ml: list)→ Number
Create a multi well histogram

Parameters
:
ml (list) – mnemonic list

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellDuplicate(plotID: Number)→ Number
Duplicate the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.histogramMultiWellGetIdByName(n: str)→ Number
Returns the ID of a name-known histogram

Parameters
:
n (str) – histogram name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.histogramMultiWellGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.histogramMultiWellOpen(n: str, f: str = '')→ Number
Open an existing histogram

Parameters
:
n (str) – histogram wname

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – histogram window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – histogram window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – histogram window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – histogram window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantileDisplay(plotID: Number, quant: bool, line: bool = False)→ bool
Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram

Parameters
:
plotID (Number) – histogram window ID

quant (bool) – 1 = quantiles display else 0

line (bool) – Optional; = 1 if display quantiles by lines

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the histogram quantiles

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot
Adjust
TechlogPlot.adjustH(plotID: Number)→ bool
Adjust a cross-plot or a logview horizontally

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.adjustHV(plotID: Number)→ bool
Adjust a cross-plot or a logview horizontally and vertically

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.adjustV(plotID: Number)→ bool
Adjust a cross-plot or a logview vertically

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

BaseMap
TechlogPlot.baseMapAddChart(plotID: Number, cn: str)→ bool
Add chart to the basemap

Parameters
:
plotID (Number) – basemap window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAddMap(plotID: Number, name: str)→ bool
Add a map to an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – map name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAddWell(plotID: Number, name: str)→ bool
Add a well to an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAdjustToMap(plotID: Number)→ bool
Adjust the basemap to the map

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapCreate(n: str, xn: list = None, map: str = None)→ Number
Create a basemap

Parameters
:
n (str) – plot name

xn (list) – Optional; list of well name

map (str) – Optional; map name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.baseMapOpen(n: str, f: str = None)→ Number
Open an existing basemap

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.baseMapRemoveMap(plotID: Number)→ bool
Remove the map from an existing basemap

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapRemoveWell(plotID: Number, name: str)→ bool
Remove a well from an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSave(plotID: Number, n: str, f: str = '')→ bool
Save the basemap

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSaveMap(plotID: Number, n: str, f: str = '')→ bool
Save the map of a basemap

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the contour color on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourColorMode(plotID: Number, mode: str = 'UNIFORM')→ bool
Set the contour color mode on basemap

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘UNIFORM’, ‘PALETTE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourComputationStep(plotID: Number, value: Number)→ bool
Set the contour computation step on basemap

Parameters
:
plotID (Number) – plot window ID

value (Number) – step value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourThickness(plotID: Number, value: Number)→ bool
Set the contour thickness on basemap

Parameters
:
plotID (Number) – plot window ID

value (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourValueVisible(plotID: Number, b: bool)→ bool
Set the contour value visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour value visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourVisible(plotID: Number, b: bool)→ bool
Set the contour visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourWithData(plotID: Number, b: bool)→ bool
Set the contour with data on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour with data if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensitySmooth(plotID: Number, b: bool)→ bool
Set the smooth density visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – smooth density visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensityValuesVisible(plotID: Number, b: bool)→ bool
Set the density values visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – density values visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensityVisible(plotID: Number, b: bool)→ bool
Set the density visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – density visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDerrickColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the derrick on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDerrickSize(plotID: Number, size: Number)→ bool
Set the size of the derrick on basemap

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetKeepProportion(plotID: Number, b: bool)→ bool
Set the keep proportion on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – keep proportion if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelBackgroundVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the background of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; background visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelDisplayMode(plotID: Number, type: str = 'WELL')→ bool
Set the display mode of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘WELL’, ‘CUSTOM’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelPositionType(plotID: Number, type: str = 'TOP')→ bool
Set the position type of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘NONE’, ‘TOP’, ‘BOTTOM’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelWellProperties(plotID: Number, s: str)→ bool
Set the well properties of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

s (str) – well properties

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetOpacityActivated(plotID: Number, b: bool)→ bool
Set the opacity activation on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – opacity activated if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetOpacityValue(plotID: Number, f: Number)→ bool
Set the opacity value on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – opacity value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the border color of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialPosition(plotID: Number, x: Number, y: Number)→ bool
Set the position of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

x (Number) – x position

y (Number) – y position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialSize(plotID: Number, f: Number)→ bool
Set the size of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialVisible(plotID: Number, b: bool)→ bool
Set the visibility of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; scale visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolDisplayMode(plotID: Number, type: str = 'DERRICK')→ bool
Set the symbol display mode on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘DERRICK’, ‘STATUS’, ‘CUSTOM’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolSize(plotID: Number, size: Number)→ bool
Set the symbol size on basemap

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolWellProperties(plotID: Number, s: str)→ bool
Set the symbol well properties on basemap

Parameters
:
plotID (Number) – plot window ID

s (str) – well properties

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryMappedValue(plotID: Number, visible: bool = False)→ bool
Set the visibility of the mapped value on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; mapped value visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; trajectory visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetWellColorVisible(plotID: Number, b: bool)→ bool
Set the well color visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – well color visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisGraduations(plotID: Number, f: Number)→ bool
Set x axis graduations on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set x axis type on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set x axis user limits on basemap

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user value

max (Number) – max user value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXYUnit(plotID: Number, unit: str)→ bool
Set x and y unit on basemap

Parameters
:
plotID (Number) – plot window ID

unit (str) – unit value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisGraduations(plotID: Number, f: Number)→ bool
Set y axis graduations on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set y axis type on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set y axis user limits on basemap

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user value

max (Number) – max user value

Returns
:
operation exit status

Return type
:
bool

Box Plot
TechlogPlot.boxPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotApplyTo(plotID: Number, ds: list)→ list
Apply the box-plot to a data set list

Parameters
:
plotID (Number) – box-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.boxPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new box-plot

Parameters
:
n (str) – box-plot window name

vl (list) – Optional; variable list

f (str) – Optional; filter variable ID

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotDeleteVariables(plotID: Number, vn: list)→ bool
Delete the variable list of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotDuplicate(plotID: Number)→ Number
Duplicate the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.boxPlotGetIdByName(n: str)→ Number
Find the ID of a name-known box-plot

Parameters
:
n (str) – box-plot name

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMeanColor instead) Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change mean markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanStdDeviation(plotID: Number, show: bool)→ bool
Mean & standard deviation display in box-plot

Parameters
:
plotID (Number) – box-plot window ID

show (bool) – True if show, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellAddData(plotID: Number, ds: str)→ bool
Add a dataset to a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCreate(ml: list)→ Number
Create a multi well box-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.boxPlotMultiWellDuplicate(plotID: Number)→ Number
Duplicate the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.boxPlotMultiWellGetIdByName(n: str)→ Number
Find the ID of a name-known box-plot

Parameters
:
n (str) – box-plot name

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotMultiWellMeanColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (Use boxPlotMultiWellMeanColor instead) Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change mean markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanStdDeviation(plotID: Number, show: bool)→ bool
Mean & standard deviation display in box-plot

Parameters
:
plotID (Number) – box-plot window ID

show (bool) – True if show, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellOpen(n: str, f: str = '')→ bool
Open an existing box-plot

Parameters
:
n (str) – box-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – box-plot window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – box-plot window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – box-plot window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – box-plot window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the box-plot quantiles

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – box-plot window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use boxPlotMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetAxisInverse(plotID: Number, inv: bool)→ bool
Inverse a box-plot variable scale

Parameters
:
plotID (Number) – box-plot window ID

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change boxes border color

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMultiWellSetBoxColor instead) Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxDisplay(plotID: Number, type: int, size: Number = 8)→ bool
Change boxes general display

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – new box-plot window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisScale(plotID: Number, sc: int)→ bool
Change a box-plot variable Y axis scale

Parameters
:
plotID (Number) – box-plot window ID

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisType(plotID: Number, t: int)→ bool
Change the type of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

t (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisUnit(plotID: Number, u: str)→ bool
Change the unit of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

u (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set min & max values of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

min (Number) – Y axis minimum

max (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMultiWellStdDevColor instead) Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStddevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
[DEPRECATED] (use boxPlotMultiWellStdDevMarkers instead) Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotOpen(n: str, f: str = '')→ bool
Open an existing box-plot

Parameters
:
n (str) – box-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – box-plot window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – box-plot window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – box-plot window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – box-plot window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the box-plot quantiles

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – box-plot window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – box-plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a box-plot variable scale

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change boxes border color

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotSetBoxColor instead) Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxDisplay(plotID: Number, type: int, size: Number = 8)→ bool
Change boxes general display

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetDatum(plotID: Number, lim: bool, min: Number = 0, max: Number = 0)→ bool
Change the reference limitation on box-plot

Parameters
:
plotID (Number) – box-plot window ID

lim (bool) – True for user’s limitaion, False else

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – box-plot window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetName(plotID: Number, n: str)→ bool
Change the name of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – new box-plot window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a box-plot variable Y axis scale

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

t (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

u (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

min (Number) – X axis minimum

max (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotStdDevColor instead) Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStddevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
[DEPRECATED] (use boxPlotStdDevMarkers instead) Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

Composite Printing
TechlogPlot.compositePrintingAddObject(composerID: Number, name: str, type: Number, folder: str = None)→ bool
Add an object to the composer

Parameters
:
composerID (Number) – composer window ID

name (str) – object name

type (Number) – 0 = Header; 1 = Layout; 2 = CrossPlot; 3 = Histogram; 4 = Picture

folder (str) – Optional; object folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingCreate()→ Number
Create a new composer

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingLayoutObjectScale(composerID: Number, objectIndex: Number, scale: Number)→ bool
Change the scale of a layout object of the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

scale (Number) – new scale of the layout

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingMoveObjectDown(composerID: Number, objectIndex: Number)→ bool
Move an object down in the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingMoveObjectUp(composerID: Number, objectIndex: Number)→ bool
Move an object up in the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingNew(composerID: Number)→ bool
Reset the composer

Parameters
:
composerID (Number) – composer window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingObjectApplyTo(composerID: Number, objectIndex: Number, well: str = None, dataset: str = None)→ Number
Apply the object preview of the composer to a particular well and dataset

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingOpen(n: str, f: str = None)→ Number
Open an existing composer

Parameters
:
n (str) – composer name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreview(composerID: Number)→ bool
Preview the composer

Parameters
:
composerID (Number) – composer window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewApplyTo(composerID: Number, well: str = None, dataset: str = None)→ Number
Apply the composer preview to a particular well and dataset

Parameters
:
composerID (Number) – composer window ID

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreviewGet()→ Number
Get the plot ID of the composer preview

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreviewPrint(hideDialog: bool)→ bool
Print the composer preview

Parameters
:
hideDialog (bool) – 1 = hide dialog box; 0 = show dialog box

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetHorizontalRulerVisibility(visible: bool)→ bool
Change the horizontal ruler visibility of the composer preview

Parameters
:
visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetUnit(unit: str)→ bool
Set the unit of the composer preview

Parameters
:
unit (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetVerticalRulerVisibility(visible: bool)→ bool
Change the vertical ruler visibility of the composer preview

Parameters
:
visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingRemoveObject(composerID: Number, objectIndex: Number)→ bool
Remove an object from composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingSave(composerID: Number, n: str, f: str = None)→ bool
Save the composer

Parameters
:
composerID (Number) – composer window ID

n (str) – composer name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

Container
TechlogPlot.containerAddCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
Add the cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

row (Number) – cell row

column (Number) – cell column

rowSpan (Number) – [optional] cell row span

columnSpan (Number) – [optional] cell column span

TechlogPlot.containerCellExist(containerID: Number, cellID: Number)→ bool
Check if the cell exist or not

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

Returns
:
cell exist (true) or not

Return type
:
bool

TechlogPlot.containerCreate(name: str, title: str)→ Number
Create a new container

Parameters
:
name (str) – container name

title (str) – container title

Returns
:
container ID

Return type
:
Number

TechlogPlot.containerFindCell(containerID: Number, cellID: Number)→ bool or Position
Find container cell by column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

Returns
:
if cell exist position (0 -> column, 1 -> row) else False

Return type
:
bool or Position

TechlogPlot.containerGetCell(containerID: Number, row: Number, column: Number)→ Number
Get container cell by row and column

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

Returns
:
cell ID

Return type
:
Number

TechlogPlot.containerGetTitle(containerID: Number)→ str
Get container title

Parameters
:
containerID (Number) – container instance ID

Returns
:
container title

Return type
:
str

TechlogPlot.containerGetTitleAreaHeight(containerID: Number)→ Number
Get container title height

Parameters
:
containerID (Number) – container instance ID

Returns
:
container title height

Return type
:
Number

TechlogPlot.containerGetTitleVisible(containerID: Number)→ bool
Get container visibility

Parameters
:
containerID (Number) – container instance ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.containerMoveCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
Move the cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

row (Number) – cell row

column (Number) – cell column

rowSpan (Number) – [optional] cell row span

columnSpan (Number) – [optional] cell column span

TechlogPlot.containerRemoveCell(containerID: Number, cellID: Number)
Remove specified cell by ID

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

TechlogPlot.containerRemoveCellFromPos(containerID: Number, row: Number, column: Number)
[DEPRECATED] (use containerRemoveCellFromPosition instead) Remove cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

TechlogPlot.containerRemoveCellFromPosition(containerID: Number, row: Number, column: Number)
[DEPRECATED] Remove cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

TechlogPlot.containerSetTitle(containerID: Number, title: str)
Set container title

Parameters
:
containerID (Number) – container instance ID

title (str) – container title

TechlogPlot.containerSetTitleVisible(containerID: Number, visible: bool)
Set container visibility

Parameters
:
containerID (Number) – container instance ID

visible (bool) – visibility state

Cross Plot
TechlogPlot.crossPlot2ndScaleMarkers(plotID: Number, type: int, size: Number = 5)→ bool
[DEPRECATED] Set type & size of cross-plot second scale’s markers

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot2ndScaleMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] Choose the cross-plot second scale’s markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot2ndScaleMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlot2ndScaleMarkersColor instead) Choose the cross-plot second scale’s markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot3DMonoWellDuplicate(plotID: Number)→ Number
Duplicate the 3D cross-plot

Parameters
:
plotID (Number) – 3D cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlot3DMultiWellDuplicate(plotID: Number)→ Number
Duplicate the 3D cross-plot

Parameters
:
plotID (Number) – 3D cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation on cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAA & sets the color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAAddZone(plotID: Number, z: str)→ bool
Display of a zone from cross-plotAA dataset zonation

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plot AA to a data set list

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotAACleanZonation(plotID: Number, ds: str)→ bool
Remove a zonation dataset from cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (str) – zonation dataset

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAACleanZone(plotID: Number, z: str)→ bool
Remove the display of a zone from cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAACreate(n: str, xn: str = '', yn: str = '', f: str = '', xn2: str = '', yn2: str = '', matrixID: Number = None)→ Number
Create a new cross-plot AA

Parameters
:
n (str) – cross-plotAA window name

xn (str) – Optional; array X name

yn (str) – Optional; array Y name

f (str) – Optional; filter variable name

xn2 (str) – Optional; second X array name

yn2 (str) – Optional; second Y array name

matrixID (Number) – Optional; if the cross-plot will be inserted into a matrix, give matrix ID

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAADeleteColor2Values(plotID: Number)→ bool
Delete the variable present on the second color scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteColorValues(plotID: Number)→ bool
Delete the variable present on the color scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteLabelValues(plotID: Number)→ bool
Delete the variable present on the label scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteX2Values(plotID: Number)→ bool
Delete the variable present on the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteXValues(plotID: Number)→ bool
Delete the variable present on the X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteY2Values(plotID: Number)→ bool
Delete the variable present on the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteYValues(plotID: Number)→ bool
Delete the variable present on the Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plotAA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADisplaySecondVarOver(plotID: Number, activate: bool)→ bool
[DEPRECATED] (use crossPlotAADisplaySecondVariableOver instead) Display cross-plotAA second axis over the first axis

Parameters
:
plotID (Number) – cross-plotAA window ID

activate (bool) – True if activated, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADisplaySecondVariableOver(plotID: Number, activate: bool)→ bool
Display cross-plotAA second axis over the first axis

Parameters
:
plotID (Number) – cross-plotAA window ID

activate (bool) – True if activated, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADuplicate(plotID: Number)→ Number
Duplicate the cross-plot AA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotAAGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot AA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotAALinkThickness(plotID: Number, thk: Number = 0)→ Number
Link thickness cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

thk (Number) – Optional; link thikness

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotAALockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAV

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScale(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAA second scale markers

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScaleColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAA second scale markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScaleColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAAMarkers2ndScaleColor instead) Choose the cross-plotAA second scale markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAA markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAAMarkersColor instead) Choose the cross-plotAA markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersDisplay(plotID: Number, display: bool = True)→ Number
Display of cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

display (bool) – Optional; markers display

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAA & sets the color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegressionByWell(plotID: Number)→ bool
Add a regression by well in a cross-plotAA

Parameters
:
plotID (Number) – cross-plot windowAA ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCreate(ml: list)→ Number
Create a multi well cross-plotAA

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plotAA in normal or density type

Parameters
:
plotID (Number) – cross-plotAA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDuplicate(plotID: Number)→ Number
Duplicate the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plotAA

Parameters
:
n (str) – cross-plotAA window name

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAV

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellOpen(n: str, f: str = None)→ bool
Open an existing cross-plotAA multi-well

Parameters
:
n (str) – cross-plotAA multi-well name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveDataset(plotID: Number, we: str)→ bool
Remove a dataset from a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAA axes

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – cross-plotAA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of multiwell cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – new cross-plotAA name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAA X axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAA Y axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAOpen(n: str, f: str = '')→ bool
Open an existing cross-plotAA

Parameters
:
n (str) – cross-plotAA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAARemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAARemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAA axes

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASave(plotID: Number, n: str, f: str = '')→ bool
Save a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – saving name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plotAA window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetColor(plotID: Number, vn: str)→ bool
Set a color variable to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetColor2(plotID: Number, vn: str)→ bool
Set a color variable to the second axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetDatum(plotID: Number, lim: bool, min: Number=0, max: Number)→ bool
Change the reference limitation on cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

lim (bool) – True for user’s limitaion, False else

min (Number) – Optional; top limit

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetFilter(plotID: Number, vn: str)→ bool
Set filter to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetLabel(plotID: Number, vn: str)→ bool
Set a label variable to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetName(plotID: Number, n: str)→ bool
Change cross-plotAA window name

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – new name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetSecondYScale(plotID: Number, vn: str)→ bool
Set array variable to second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX(plotID: Number, vn: str)→ bool
Set array variable to X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX2(plotID: Number, vn: str)→ bool
Set array variable to the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAA X axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY(plotID: Number, vn: str)→ bool
Set array variable to Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY2(plotID: Number, vn: str)→ bool
Set array variable to the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAA Y axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetZonation(plotID: Number, ds: str)→ bool
Apply a zonation dataset to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (str) – zonation dataset

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAVA & sets the color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plotAVAto a data set list

Parameters
:
plotID (Number) – cross-plotAVA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotAVACleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVACleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVACreate(n: str, xn: str = '', yn: str = '', f: str = '', matrixID: Number = None)→ Number
Create a new cross-plotAVA

Parameters
:
n (str) – cross-plotAVA window name

xn (str) – Optional; variable X name

yn (str) – Optional; variable Y name

f (str) – Optional; filter variable name

matrixID (Number) – Optional; if the cross-plot will be inserted into a matrix, give matrix ID

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVADeleteColorValues(plotID: Number)→ bool
Delete the variable present on the color scale of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteXValues(plotID: Number)→ bool
Delete the variable present on the X axis of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteYValues(plotID: Number)→ bool
Delete the variable present on the Y axis of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAVA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plotAVA in normal or density type

Parameters
:
plotID (Number) – cross-plotAVA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAVA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADuplicate(plotID: Number)→ Number
Duplicate the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAVAGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotAVAGetIdByName(n: str)→ Number
Find the ID of a name-known cross-plotAVA

Parameters
:
n (str) – cross-plotAVA window name

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVAGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot AVA

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotAVALockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAVA markers

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAVA markers color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAVAMarkersColor instead) Choose the cross-plotAVA markers color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAOpen(n: str, f: str = '')→ Number
Open an existing cross-plotAVA

Parameters
:
n (str) – cross-plotAVA name

f (str) – Optional; folder

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVARemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVARemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAVA axes

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

n (str) – cross-plotAVA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plotAVA window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetColor(plotID: Number, Vname: str)→ bool
Set the color to an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable name for the color

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetFilter(plotID: Number, Vname: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – filter variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetName(plotID: Number, n: str)→ bool
Change the name of mono cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

n (str) – new cross-plotAVAname

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetX(plotID: Number, Vname: str)→ bool
Set the variable to X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable X name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAVA X axis scale

Parameters
:
plotID (Number) – cross-plotAVA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetY(plotID: Number, Vname: str)→ bool
Set the variable to Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable Y name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAVA Y axis scale

Parameters
:
plotID (Number) – cross-plotAVA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plotAVA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotActivateSecondAxe(plotID: Number, activate: bool = False)→ bool
[DEPRECATED] Activate the second axis in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

activate (bool) – Optional; activate

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddChart(plotID: Number, cn: str)→ bool
Add a chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Y parameter

val1 (Number) – value of Y parameter

min1 (Number) – minimum of Y parameter

max1 (Number) – maximum of Y parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number = 0)→ bool
Add a link between two parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – first parameter point id

ppid2 (str) – second parameter point id

lt (Number) – Optional; link style {0 = ‘AtoB’, 1 = ‘BtoA’, 2 = ‘BOTH’, 3 = ‘NOARROW’

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.crossPlotAddRegressionByFilter(plotID: Number)→ bool
Add a regression by filter in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plot to a data set list

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotChartList()
Return the list of available charts

TechlogPlot.crossPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotCreate(n: str, xn: str = '', yn: str = '', f: str = '', xn2: str = '', yn2: str = '', widgetID: Number = None)→ Number
Create a new cross-plot

Parameters
:
n (str) – cross-plot window name

xn (str) – Optional; variable X name

yn (str) – Optional; variable Y name

f (str) – Optional; filter variable name

xn2 (str) – Optional; [DEPRECATED] second X variable name (unused since 2011.2)

yn2 (str) – Optional; [DEPRECATED] second Y variable name (unused since 2011.2)

widgetID (Number) – Optional; if the cross-plot will be inserted into a widget, give widget ID

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotDeleteColor2Values(plotID: Number)→ bool
[DEPRECATED] Delete the variable present on the second color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteColorValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteLabelValues(plotID: Number)→ bool
Delete the label variable of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeletePointSizeValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the point size scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteX2Values(plotID: Number)→ bool
Delete the variable present on the second X axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteXValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the X axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteY2Values(plotID: Number)→ bool
Delete the variable present on the second Y axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteYValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the Y axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plot window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDuplicate(plotID: Number)→ Number
Duplicate the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotGetChartPolylinesInfo(plotID: Number)
Get the polylines information of all the charts loaded in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Output dict:
str: chart levelchart name str: polyline id if defined str: polyline name if defined list: list of X coordinate of the polyline points in the cross-plot X axis unit list: list of Y coordinate of the polyline points in the cross-plot Y axis unit list: list of the graduation values for each polyline points Number: value of the first constant of the polyline indexed by its name Number: value of the … constant of the polyline indexed by its name Number: value of the first parameter of the polyline indexed by its name Number: value of the … parameter of the polyline indexed by its name

TechlogPlot.crossPlotGetColorVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “color” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the color variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetLabelVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “label” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the label variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.crossPlotGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.crossPlotGetPointSizeVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “point size” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the point size variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotGetScaleList(plotID: int)→ List[str]
Get the list of scale names of a single well cross plot

Parameters
:
plotID (int) – cross plot window ID

Returns
:
list of scale names

Return type
:
List[str]

TechlogPlot.crossPlotGetXHistogramBinCount(plotID: Number)→ int
Getter for bin count on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram horizontal bin count (NONE if the given plotID doesn’t exist)}

Return type
:
int

TechlogPlot.crossPlotGetXVariableList(plotID: int, ScaleId: str = '')→ List[str]
Get the name of the variables of the axis “x” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
list of variable names in x [“Well.Dataset.Variable”]

Return type
:
List[str]

TechlogPlot.crossPlotGetYHistogramBinCount(plotID: Number)→ int
Getter for bin count on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram vertical bin count (NONE if the given plotID doesn’t exist)}

Return type
:
int

TechlogPlot.crossPlotGetYVariableList(plotID: int, ScaleId: str = '')→ List[str]
Get the name of the variables of the axis “y” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
list of variable names in y [“Well.Dataset.Variable”]

Return type
:
List[str]

TechlogPlot.crossPlotIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotIsXHistogramCumulativeFrequencyVisible(plotID: Number)→ bool
Getter for cumulative frequency visibility state on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram horizontal cumulative frequency visibility state (NONE if the given plotID doesn’t exist)}

Return type
:
bool

TechlogPlot.crossPlotIsYHistogramCumulativeFrequencyVisible(plotID: Number)→ bool
Getter for cumulative frequency visibility state on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram vertical cumulative frequency visibility state (NONE if the given plotID doesn’t exist)}

Return type
:
bool

TechlogPlot.crossPlotLink(plotID: Number, link: bool)→ Number
Link cross-plot markers

Parameters
:
plotID (Number) – cross-plot window ID

link (bool) – True if linked, False else

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plot markers

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plot markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotMarkersColor instead) Choose the cross-plot markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddChart(plotID: Number, cn: str)→ bool
Add chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotMultiWellAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Y parameter

val1 (Number) – value of Y parameter

min1 (Number) – minimum of Y parameter

max1 (Number) – maximum of Y parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotMultiWellAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number = 0)→ bool
Add a link between two parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – first parameter point id

ppid2 (str) – second parameter point id

lt (Number) – Optional; link style {0 = ‘AtoB’, 1 = ‘BtoA’, 2 = ‘BOTH’, 3 = ‘NOARROW’

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.crossPlotMultiWellAddRegressionByFilter(plotID: Number)→ bool
Add a regression by filter in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddRegressionByWell(plotID: Number)→ bool
Add a regression by well in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellChartList()
Return the list of available charts

TechlogPlot.crossPlotMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellCreate(ml: list)→ Number
Create a multi well cross-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plot window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDuplicate(plotID: Number)→ Number
Duplicate the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotMultiWellGetChartPolylinesInfo(plotID: Number)
Get the polylines information of all the charts loaded in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Output dict:
str: chart levelchart name str: polyline id if defined str: polyline name if defined list: list of X coordinate of the polyline points in the cross-plot X axis unit list: list of Y coordinate of the polyline points in the cross-plot Y axis unit list: list of the graduation values for each polyline points Number: value of the first constant of the polyline indexed by its name Number: value of the … constant of the polyline indexed by its name Number: value of the first parameter of the polyline indexed by its name Number: value of the … parameter of the polyline indexed by its name

TechlogPlot.crossPlotMultiWellGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot multi well

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotMultiWellIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellOpen(n: str, f: str = '')→ Number
Open an existing cross-plot

Parameters
:
n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterLineY(plotID: Number, ppid1: str)→ bool
Remove a parameter line Y in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellReverseAxes(plotID: Number)→ bool
Reverse the cross-plot axes

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use crossPlotMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str = '', yunit: str = '', zunit: str = '')→ bool
Set the density values of a multi-well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

xpos (list) – list of x positions values

ypos (list) – list of y positions values

zdata (list) – list of data density values (zsize = (xsize-1)*(ysize-1))

xunit (str) – Optional; x unit

yunit (str) – Optional; y unit

zunit (str) – Optional; z unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetHistogramVisible(plotID: Number, cf: bool)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (bool) – {0 = ‘remove the histograms’, 1 = ‘display the histograms’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of multiwell cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisScale(plotID: Number, psasc: int)→ bool
Set the cross-plot point size axis scale

Parameters
:
plotID (Number) – cross-plot window ID

psasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max sizes of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum size

psamax (Number) – point size axis maximum size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisType(plotID: Number, psat: int)→ bool
Change the type of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psat (int) – point size axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max values of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum

psamax (Number) – point size axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotOpen(n: str, f: str = '')→ Number
Open an existing cross-plot

Parameters
:
n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.crossPlotPointSizeChange(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the point size to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable point size name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveChart(plotID: Number, cn: str)→ bool
Remove a chart from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterLineY(plotID: Number, ppid1: str)→ bool
Remove a parameter line Y in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotReverseAxes(plotID: Number)→ bool
Reverse the cross-plot axes

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColor(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the color to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable name for the color

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColor2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the second color to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable second color name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColorValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColour2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColourValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
[DEPRECATED] (use crossPlotSetColorValues instead) Set a fictive set of user variables to the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str = '', yunit: str = '', zunit: str = '')→ bool
Set the density values of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

xpos (list) – list of x positions values

ypos (list) – list of y positions values

zdata (list) – list of data density values (zsize = (xsize-1)*(ysize-1))

xunit (str) – Optional; x unit

yunit (str) – Optional; y unit

zunit (str) – Optional; z unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFilter(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – filter variable name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFilterValues(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – spectrum window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFirstScaleName(plotID: Number, n: str)→ bool
Change the name of first scale in a mono cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new first scale name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetGridVisible(plotID: Number, grid_X: int = 2, grid_Y: int = 2)→ bool
Hide or Display the Grid in all plots

Parameters
:
plotID (Number) – window ID

grid_X (int) – Optional; X grid visibility state: {0 = ‘HIDDEN’, 1 = ‘ONLY_PRIMARY’, 2 = ‘BOTH’}

grid_Y (int) – Optional; Y grid visibility state: {0 = ‘HIDDEN’, 1 = ‘ONLY_PRIMARY’, 2 = ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetHistogramVisible(plotID: Number, cf: bool)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (bool) – {0 = ‘remove the histograms’, 1 = ‘display the histograms’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetHistogramXYVisible(plotID: Number, cf: str)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (str) – {‘NONE’ = ‘remove the histograms’, ‘HISTO_X’ = ‘display the histogram for X axis’,

axis' ('HISTO_Y' = 'display the histogram for Y)

histograms'} ('BOTH' = 'display the)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabel(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the a label to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable label name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabel2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the a second label to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window windowID

Vname (str) – variable second label name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabelValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the label axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLegendX(plotID: Number, legendx: str)→ bool
Set the cross-plot legend for X axis

Parameters
:
plotID (Number) – cross-plot window ID

legendx (str) – legendx

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLegendY(plotID: Number, legendy: str)→ bool
Set the cross-plot legend for Y axis

Parameters
:
plotID (Number) – cross-plot window ID

legendy (str) – legendy

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetName(plotID: Number, n: str)→ bool
Change the name of mono cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPaletteBoundaries(plotID: Number, min: Number, max: Number)→ bool
Set the boundaries of the palette for a single-well cross plot.

Parameters
:
plotID (Number) – plot window ID

min (Number) – minimum of the palette

max (Number) – maximum of the palette

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisScale(plotID: Number, psasc: int)→ bool
Set the cross-plot point size axis scale

Parameters
:
plotID (Number) – cross-plot window ID

psasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max sizes of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum size

psamax (Number) – point size axis maximum size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisType(plotID: Number, psat: int)→ bool
Change the type of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psat (int) – point size axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max values of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum

psamax (Number) – point size axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetSubtitle(plotID: Number, subtitle: str)→ bool
Set the cross-plot subtitle

Parameters
:
plotID (Number) – cross-plot window ID

subtitle (str) – subtitle

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetTitle(plotID: Number, title: str)→ bool
Set the cross-plot title

Parameters
:
plotID (Number) – cross-plot window ID

title (str) – title

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable to X axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable X name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the variable to the second X axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable X2 name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second X axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisType(plotID: Number, xat: int, ScaleId: str = '')→ bool
Change the type of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number, scaleID: str = None)→ bool
Set min & max values of cross-plot X axis for the given scale

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

scaleID (str) – Optional; scale ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXHistogramBinCount(plotID: Number, binCount: int)→ bool
Change the bin count on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

binCount (int) – the new bin count

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetXHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool)→ bool
Change the cumulative frequency visibility state on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

binCount (bool) – new visibility state

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetXValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the X axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable to Y axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable Y name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the variable to the second Y axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable Y2 name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second Y axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisType(plotID: Number, yat: int, ScaleId: str = '')→ bool
Change the type of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number, scaleID: str = None)→ bool
Set min & max values of cross-plot Y axis for the given scale

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

scaleID (str) – Optional; scale ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYHistogramBinCount(plotID: Number, binCount: int)→ bool
Change the bin count on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

binCount (int) – the new bin count

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetYHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool)→ bool
Change the cumulative frequency visibility state on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

binCount (bool) – new visibility state

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetYValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the Y axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Cumulative Dip Plot
TechlogPlot.cumulativeDipPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotApplyTo(plotID: Number, ds: list)→ bool
Apply the cumulative dip-plot to a data set list

Parameters
:
plotID (Number) – plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cumulative dip-plot - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new cumulative dip-plot

Parameters
:
n (str) – plot window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteDip(plotID: Number)→ bool
Delete the dip variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDuplicate(plotID: Number)→ Number
Duplicate the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.cumulativeDipPlotGetIdByName(n: str)→ Number
Find the ID of a name-known cumulative dip-plot

Parameters
:
n (str) – plot name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotOpen(n: str, f: str = None)→ Number
Open an existing cumulative dip plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotOpenWalkoutPlot(plotID: Number)→ Number
Open a walkout-plot

Parameters
:
plotID (Number) – cumulative dip-plot window ID

Returns
:
walkout-plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetAutomaticAdjustment(plotID: Number, b: bool)→ bool
Set the automatic adjustment on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True for automatic adjustment, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColor(plotID: Number, color: str)→ bool
Set the color variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColorMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
Set the color mode on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColourMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
[DEPRECATED] (use cumulativeDipPlotSetColorMode instead) Set the color mode on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use cumulativeDipPlotSetMarkersColor instead) Set the makers color on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetName(plotID: Number, n: str)→ bool
Change the name of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – new plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisGraduations(plotID: Number, f: Number)→ bool
Set the x axis graduations of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisInverse(plotID: Number, b: bool)→ bool
Set the x axis inverse of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set the x axis type of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; axis type {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the x axis user limits of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisGraduations(plotID: Number, f: Number)→ bool
Set the y axis graduations of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisInverse(plotID: Number, b: bool)→ bool
Set the y axis inverse of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set the y axis type of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; axis type {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the y axis user limits of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Custom Plot
TechlogPlot.customPlotAddAction(plotID: Number, ActionName: str, Location: int, GlobalPosition: int=4, ActionAfter: str)→ bool
Add an action to toolbar, mouseMode and/or contextMenu with the given position (begin, middle or end)

Parameters
:
plotID (Number) – custom-plot window ID

ActionName (str) – Name of action

Location (int) – Location of action : Tool-bar = 1,Mouse-mode = 2, Context-menu = 4. You can associate it.

GlobalPosition (int) – Optional; Global position of action : Begin = 1, Middle = 2, End = 4.

ActionAfter (str) – [=]: Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToCreatedMenu(plotID: Number, MenuName: str, ActionName: str, ActionAfter: str)→ bool
Add action to existing menu before the given action name.

Parameters
:
plotID (Number) – custom-plot window ID

MenuName (str) – Name of menu.

ActionName (str) – Name of action.

ActionAfter (str) – [=]: Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToDefaultMenu(plotID: Number, Menu: int, ActionName: str, GlobalPosition: int)→ bool
Add action to existing menu.

Parameters
:
plotID (Number) – custom-plot window ID

Menu (int) – Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.

ActionName (str) – Name of action.

GlobalPosition (int) – Global position of action : Begin = 1, Middle = 2, End = 4.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToDefaultMenuDynamic(plotID: Number, Menu: int, ActionName: str, ActionAfter: str)→ bool
Add action to existing menu.

Parameters
:
plotID (Number) – custom-plot window ID

Menu (int) – Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.

ActionName (str) – Name of action.

ActionAfter (str) – Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddNewMenu(plotID: Number, MenuName: str, ActionList: list)→ bool
Add a menu.

Parameters
:
plotID (Number) – custom-plot window ID.

MenuName (str) – Name of menu.

ActionList (list) – List of action we want to add to menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddNewTable(plotID: Number, TableName: str)→ bool
Add a new table widget on left part of custom plot. (Here for this exemple, the widget are empty)

Parameters
:
plotID (Number) – custom-plot window ID

TableName (str) – Name of table.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddPlotToWorkspace(plotID: Number)→ bool
Add the plot to workspace.

Parameters
:
plotID (Number) – custom-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotCreate(n: str)→ Number
Create a custom plot, you have to add it to workspace for see it.

Parameters
:
n (str) – custom plot window name

Returns
:
custom-plot window ID

Return type
:
Number

TechlogPlot.customPlotDisplayDefaultActions(plotID: Number, IsDisplay: bool)→ bool
Say if you want to display default action.

Parameters
:
plotID (Number) – custom-plot window ID

IsDisplay (bool) – True if you want to display default menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotDisplayMenu(plotID: Number, IsDisplay: bool)→ bool
Say if you want to hide menu when they are empty.

Parameters
:
plotID (Number) – custom-plot window ID

IsDisplay (bool) – True if you want to display default menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotInsertChart(plotID: Number, chartFile: str)→ bool
Insert a chart in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chartFile (str) – Name of chart we want to insert

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotInsertDynamicChart(plotID: Number, chart: str, chartName: str)→ bool
Insert a chart dynamically in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chart (str) – Chart we want to insert

chartName (str) – Title of chart

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotRemoveChart(plotID: Number, chartFile: str)→ bool
Remove a chart in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chartFile (str) – Name of chart we want to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotResize(plotID: Number, width: Number, height: Number)→ bool
Resize the widget

Parameters
:
plotID (Number) – custom-plot window ID

width (Number) – Width of widget after resize

height (Number) – Height of widget after resize

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetCursorToAction(plotID: Number, ActionName: str, Cursor: int)→ bool
Associate a cursor for a given action when you are in viewer. (Here for this exemple, create an action in Mouse Mode begin)

Parameters
:
plotID (Number) – custom-plot window ID

ActionName (str) – Name of action

Cursor (int) – Qt::CursorShape, see website for number.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetHorizontalLegendName(plotID: Number, legendY: str)→ bool
Set the name of the horizontal legend

Parameters
:
plotID (Number) – custom-plot window ID

legendY (str) – Name of legend on Y

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetPlotSubTitle(plotID: Number, subtitle: str)→ bool
Set a subtitle to plot

Parameters
:
plotID (Number) – custom-plot window ID

subtitle (str) – Name of subtitle

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetPlotTitle(plotID: Number, title: str)→ bool
Set a title to plot

Parameters
:
plotID (Number) – custom-plot window ID

title (str) – Name of title

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetVerticalLegendName(plotID: Number, legendY: str)→ bool
Set the name of the vertical legend

Parameters
:
plotID (Number) – custom-plot window ID

legendY (str) – Name of legend on Y

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetWindowTitle(plotID: Number, title: str)→ bool
Set a title to window

Parameters
:
plotID (Number) – custom-plot window ID

title (str) – Name of title

Returns
:
operation exit status

Return type
:
bool

Depth Array Plot
TechlogPlot.depthArrayPlotDuplicate(plotID: Number)→ Number
Duplicate an existing depth array plot

Parameters
:
plotID (Number) – plot Id to duplicate

Returns
:
plot ID

Return type
:
Number

TechlogPlot.depthArrayPlotOpen(n: str, f: str = None)→ Number
Open an existing depth array plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

Depth Map Plot
TechlogPlot.depthMapPlotCreate(n: str)→ Number
Create a new depth map plot

Parameters
:
n (str) – plot name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.depthMapPlotSetData(plotID: Number, fileName: str, t: list, nbL: Number, nbC: Number, minX: Number, stepX: Number, unitX: str, minY: Number, stepY: Number, unitY: str, referenceValues: list, referenceName: str, referenceUnit: str, referenceFamily: str)→ bool
Set the data of a depth map plot

Parameters
:
plotID (Number) – plot window ID

fileName (str) – name for the reference

t (list) – list of the map data

nbL (Number) – number of row

nbC (Number) – number of column

minX (Number) – minimum X axis

stepX (Number) – step X axis

unitX (str) – unit X axis

minY (Number) – minimum Y axis

stepY (Number) – step Y axis

unitY (str) – unit Y axis

referenceValues (list) – list of reference values

referenceName (str) – name of the reference variable

referenceUnit (str) – unit of the reference variable

referenceFamily (str) – reference Family

Returns
:
operation exit status

Return type
:
bool

Geometry
TechlogPlot.geometryAddBasePolygon(ID: Number, points: list)→ bool
add a new base polygon in the geometry engine. If new polygon intersect geometry, operation fails

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

points (list) – polygon points [(x1, y1), (x2, y2), …], for polygon ABCDA, user should only provide A, B, C, D points

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryAddBoundary(ID: Number, points: list)→ bool
Split the geometry with a new boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

points (list) – boundary points list [(x1, y1), (x2, y2), …]

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryAddProperty(ID: Number, propertyName: str, measurement: str, unit: str, paletteName: str)→ bool
Add a new property family to the geometry.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to add

measurement (str) – measurement name

unit (str) – unit of the family values

paletteName (str) – name of the palette to use for displaying the family

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeleteBoundary(ID: Number, point: tuple)→ bool
Delete a geometry boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point selection for boundary

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeletePoint(ID: Number, point: tuple)→ bool
Delete a geometry point.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point position

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeleteProperty(ID: Number, propertyName: str)→ bool
Delete a property family.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to delete

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryGetPolygons(ID: Number)→ list
Get all geometry polygons.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

Returns
:
list of list of point(x,y)

Return type
:
list

TechlogPlot.geometryMoveBoundary(ID: Number, point: tuple, point: tuple)→ bool
Move a geometry boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – boundary point initial position

point – translation vector

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryMovePoint(ID: Number, point: tuple, point: tuple)→ bool
Move a geometry point.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point initial position

point – point destination position

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryReset(ID: Number)→ bool
delete all geometry features of the geometric engine.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryRotateBoundary(ID: Number, point: tuple, center: tuple, angle: Number)→ bool
Rotate a geometry Boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – Boundary point selection

center (tuple) – rotation center

angle (Number) – rotation angle in degree

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometrySelectProperty(ID: Number, propertyName: str)→ bool
select the property family to display.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to display

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometrySetPolygonProperty(ID: Number, point: tuple, propertyName: str, propertyValue: Number)→ bool
Set polygon property.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point selection for polygon

propertyName (str) – name of the property family to delete

propertyValue (Number) – new value for the property family of the selected polygon

Returns
:
True if operation is done else exception

Return type
:
bool

Header Editor
TechlogPlot.headerEditorAddBox(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number)→ Number
Add a box to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x (Number) – left coordinate of the box

y (Number) – top coordinate of the box

w (Number) – width of the box

h (Number) – height of the box

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddHeader(headerEditorID: Number, n: str, f: str = None)→ Number
Add an existing header to the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

n (str) – header name

f (str) – Optional; folder

Returns
:
header ID

Return type
:
Number

TechlogPlot.headerEditorAddImage(headerEditorID: Number, path: str, x: Number = 0, y: Number = 0)→ Number
Add an image to the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

path (str) – image path

x (Number) – Optional; left coordinate of the image

y (Number) – Optional; top coordinate of the image

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddImageFromProperty(headerEditorID: Number, path: str, x: Number = 0, y: Number = 0)→ Number
Add an image to the header editor using properties

Parameters
:
headerEditorID (Number) – header editor window ID

path (str) – image path using properties

x (Number) – Optional; left coordinate of the image

y (Number) – Optional; top coordinate of the image

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddLine(headerEditorID: Number, x1: Number, y1: Number, x2: Number, y2: Number)→ Number
Add a line to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x1 (Number) – x coordinate of the first extremity of the line

y1 (Number) – y coordinate of the first extremity of the line

x2 (Number) – x coordinate of the second extremity of the line

y2 (Number) – y coordinate of the second extremity of the line

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddProperty(headerEditorID: Number, objectID: Number, text: str)→ bool
Add a property to the header object

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

text (str) – text of the property (using ‘%’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorAddTable(headerEditorID: Number, rowCount: Number, columnCount: Number)→ Number
Add a table to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

rowCount (Number) – Number of row of the table

columnCount (Number) – Number of column of the table

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddText(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number, text: str = None)→ Number
Add a text to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x (Number) – left coordinate of the text

y (Number) – top coordinate of the text

w (Number) – width of the text

h (Number) – height of the text

text (str) – Optional; text

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAlignObjectsOnTheGrid(headerEditorID: Number, align: bool)→ bool
Enable to align objects on the grid

Parameters
:
headerEditorID (Number) – header editor window ID

align (bool) – 1 = align; 0 = don’t align

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorApplyPropertiesTo(headerEditorID: Number, well: str = None, dataset: str = None)→ bool
Apply the properties (tags) of the header to a particular well and dataset

Parameters
:
headerEditorID (Number) – header editor window ID

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorChangeDisplayMode(headerEditorID: Number, result: bool)→ bool
Change the display mode

Parameters
:
headerEditorID (Number) – header editor window ID

result (bool) – 1 = display result texts; 0 = display tags

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorCreate()→ Number
Create a new header editor

Returns
:
header editor ID

Return type
:
Number

TechlogPlot.headerEditorNew(headerEditorID: Number)→ bool
Reset a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectBringForward(headerEditorID: Number, objectID: Number)→ bool
Bring forward an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectBringToFront(headerEditorID: Number, objectID: Number)→ bool
Bring to front an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectSendBackward(headerEditorID: Number, objectID: Number)→ bool
Send backward an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectSendToBack(headerEditorID: Number, objectID: Number)→ bool
Send to back an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorOpen(n: str, f: str = None)→ Number
Open an existing header editor

Parameters
:
n (str) – header name

f (str) – Optional; folder

Returns
:
header editor ID

Return type
:
Number

TechlogPlot.headerEditorRemoveHeader(headerEditorID: Number, headerID: Number)→ bool
Remove an existing header from the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

headerID (Number) – header ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorRemoveObject(headerEditorID: Number, objectID: Number)→ bool
Remove an object from the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSave(headerEditorID: Number, n: str, f: str = None, Copy_pictures: bool = True)→ bool
Save a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

n (str) – header editor name

f (str) – Optional; folder

Copy_pictures (bool) – Optional; True to copy the pictures if needed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBackgroundColor(headerEditorID: Number, r: Number, g: Number, b: Number)→ bool
Change the background color of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBoxAreaFill(headerEditorID: Number, objectID: Number, filled: bool)→ bool
Set if the box is transparent

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the box

filled (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBoxAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the text field background color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the box

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetCurrentHeader(headerEditorID: Number, headerID: Number)→ bool
Change the header used for modifications by other header editor functions

Parameters
:
headerEditorID (Number) – header editor window ID

headerID (Number) – header ID (first header ID is 0, and so on…)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetGridVisibility(headerEditorID: Number, visible: bool)→ bool
Change the grid visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetHeight(headerEditorID: Number, height: Number)→ bool
Set the height of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

height (Number) – new height in the current header editor unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetHorizontalRulerVisibility(headerEditorID: Number, visible: bool)→ bool
Change the horizontal ruler visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageKeepProportions(headerEditorID: Number, objectID: Number, keep: bool)→ bool
Set if the image has to keep its original proportions

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

keep (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageOpacity(headerEditorID: Number, objectID: Number, opacity: Number)→ bool
Set the opacity of an image

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

opacity (Number) – between 0 (fully transparent) and 1 (fully opaque)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageOriginalSize(headerEditorID: Number, objectID: Number, keep: bool)→ bool
Set if the image has to keep its original size

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

keep (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageRotation(headerEditorID: Number, objectID: Number, rotation: Number)→ bool
Set the orientation of an image

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

rotation (Number) – rotation in ° (0, 90, 180 or 270)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectAlignment(headerEditorID: Number, objectID: Number, position: Number)→ bool
Change the header object alignment

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

position (Number) – 0 = left; 1 = center; 2 = right

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectBorderColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the header object border color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectBorderWidth(headerEditorID: Number, objectID: Number, width: Number)→ bool
Change the header object border width

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

width (Number) – width of the border

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectPosition(headerEditorID: Number, objectID: Number, x: Number, y: Number)→ bool
Change the header object position

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

x (Number) – horizontal position

y (Number) – vertical position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectSize(headerEditorID: Number, objectID: Number, w: Number, h: Number)→ bool
Change the header object size

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

w (Number) – horizontal size

h (Number) – vertical size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetText(headerEditorID: Number, objectID: Number, text: str)→ bool
Set the text of a text field

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

text (str) – text to set

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAllWidthAvailable(headerEditorID: Number, objectID: Number, all: bool)→ bool
Set if the text has to use all the width available

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

all (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAreaFill(headerEditorID: Number, objectID: Number, filled: bool)→ bool
Set if the text field is transparent

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

filled (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the text field background color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextOrientation(headerEditorID: Number, objectID: Number, orientation: Number)→ bool
Set the orientation of a text field

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

orientation (Number) – orientation in ° (0, 90, 180 or 270)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetUnit(headerEditorID: Number, unit: str)→ bool
Set the unit of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

unit (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetVerticalRulerVisibility(headerEditorID: Number, visible: bool)→ bool
Change the vertical ruler visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableAddColumn(headerEditorID: Number, objectID: Number)→ bool
Add a column to the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableAddRow(headerEditorID: Number, objectID: Number)→ bool
Add a row to the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableDeleteColumn(headerEditorID: Number, objectID: Number, column_index: Number)→ bool
Delete a column of the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

column_index (Number) – index of the column (from 0) to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableDeleteRow(headerEditorID: Number, objectID: Number, row_index: Number)→ bool
Delete a row of the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

row_index (Number) – index of the row (from 0) to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableInsertColumn(headerEditorID: Number, objectID: Number, column_index: Number)→ bool
Insert a column in the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

column_index (Number) – index of the column (from 0) where the new one has to be inserted

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableInsertRow(headerEditorID: Number, objectID: Number, row_index: Number)→ bool
Insert a row in the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

row_index (Number) – index of the row (from 0) where the new one has to be inserted

Returns
:
operation exit status

Return type
:
bool

Histogram
TechlogPlot.histogramAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of X parameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.histogramAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.histogramAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramApplyTo(plotID: Number, ds: list)→ list
Apply the histogram to a data set list

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.histogramCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new histogram

Parameters
:
n (str) – histogram window name

vl (list) – Optional; variable list name

f (str) – Optional; filter variable name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramDeleteVariables(plotID: Number, vn: list)→ bool
Delete the variable list of the histogram

Parameters
:
plotID (Number) – histogram window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramDuplicate(plotID: Number)→ Number
Duplicate the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.histogramGetIdByName(n: str)→ Number
Returns the ID of a name-known histogram

Parameters
:
n (str) – histogram name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.histogramGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.histogramLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.histogramMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.histogramMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCreate(ml: list)→ Number
Create a multi well histogram

Parameters
:
ml (list) – mnemonic list

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellDuplicate(plotID: Number)→ Number
Duplicate the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.histogramMultiWellGetIdByName(n: str)→ Number
Returns the ID of a name-known histogram

Parameters
:
n (str) – histogram name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.histogramMultiWellGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.histogramMultiWellOpen(n: str, f: str = '')→ Number
Open an existing histogram

Parameters
:
n (str) – histogram wname

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – histogram window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – histogram window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – histogram window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – histogram window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantileDisplay(plotID: Number, quant: bool, line: bool = False)→ bool
Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram

Parameters
:
plotID (Number) – histogram window ID

quant (bool) – 1 = quantiles display else 0

line (bool) – Optional; = 1 if display quantiles by lines

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the histogram quantiles

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool
TechlogPlot.histogramMultiWellRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – histogram window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use histogramMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetCumul(plotID: Number, cf: bool)→ bool
Display of cumulative frequencies on the histogram

Parameters
:
plotID (Number) – histogram window ID

cf (bool) – {0 = ‘remove cumulative frequencies’, 1 = ‘display of cumulative frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetCumulate(plotID: Number, cum: bool = True)→ bool
Cumul of the histogram values

Parameters
:
plotID (Number) – histogram window ID

cum (bool) – Optional; 1 = cumulate histo else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetFill(plotID: Number, fill: bool)→ bool
Filling of histogram crenels

Parameters
:
plotID (Number) – histogram window ID

fill (bool) – {0 = ‘remove filling’, 1 = ‘display filling’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetFillingColor(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Choose the histogram filling color

Parameters
:
plotID (Number) – histogram window ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetFillingColour(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
[DEPRECATED] (use histogramMultiWellSetFillingColor instead) Choose the histogram filling color

Parameters
:
plotID (Number) – histogram window ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – new histogram window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetPrecision(plotID: Number, bins: Number)→ bool
Change number of bins on the histogram

Parameters
:
plotID (Number) – histogram window ID

bins (Number) – number of bins

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetStandardise(plotID: Number, std: bool)→ bool
[DEPRECATED] (use histogramMultiWellSetStandardize instead) Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetStandardize(plotID: Number, std: bool)→ bool
Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetStyle(plotID: Number, st: int)→ bool
Change the style of display of the histogram

Parameters
:
plotID (Number) – histogram window ID

st (int) – display style: {0 = ‘CRENEL_CLOSE’, 1 = ‘CRENEL_OPEN’, 2 = ‘CONTINUOUS_LINE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetType(plotID: Number, ty: int)→ bool
Change histogram type

Parameters
:
plotID (Number) – histogram window ID

ty (int) – histogram type: {0 = ‘VARIABLES’, 1 = ‘FILTER’, 2 = ‘ZONATION’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Change the histogram X axis scale

Parameters
:
plotID (Number) – histogram window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetYAxisMinMax(plotID: Number, ymin: Number, ymax: Number)→ bool
Set min & max values of histogram Y axis

Parameters
:
plotID (Number) – histogram window ID

ymin (Number) – Y axis minimum

ymax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramOpen(n: str, f: str = '')→ Number
Open an existing histogram

Parameters
:
n (str) – histogram name

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – histogram window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – histogram window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – histogram window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – histogram window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantileDisplay(plotID: Number, quant: bool, line: bool = False)→ bool
Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram

Parameters
:
plotID (Number) – histogram window ID

quant (bool) – 1 = quantiles display else 0

line (bool) – Optional; = 1 if display quantiles by lines

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the histogram quantiles

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSave(plotID: Number, n: str, f: str = '')→ bool
Save the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – histogram window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – histogram window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetCumul(plotID: Number, cf: bool)→ bool
[DEPRECATED] (use histogramSetCumulative instead) Display of cumulative frequencies on the histogram

Parameters
:
plotID (Number) – histogram window ID

cf (bool) – {0 = ‘remove cumulative frequencies’, 1 = ‘display of cumulative frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetCumulate(plotID: Number, cum: bool = True)→ bool
Cumul of the histogram values

Parameters
:
plotID (Number) – histogram window ID

cum (bool) – Optional; True = cumulate histo else False

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetCumulative(plotID: Number, cf: bool)→ bool
Display of cumulative frequencies on the histogram

Parameters
:
plotID (Number) – histogram window ID

cf (bool) – {0 = ‘remove cumulative frequencies’, 1 = ‘display of cumulative frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on histogram

Parameters
:
plotID (Number) – histogram window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFill(plotID: Number, fill: bool)→ bool
Filling of histogram crenels

Parameters
:
plotID (Number) – histogram window ID

fill (bool) – {0 = ‘remove filling’, 1 = ‘display filling’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFillingColor(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Choose the histogram filling color

Parameters
:
plotID (Number) – plot ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFillingColour(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
[DEPRECATED] (use histogramSetFillingColor instead) Choose the histogram filling color

Parameters
:
plotID (Number) – plot ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – histogram window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetName(plotID: Number, n: str)→ bool
Change the name of the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – new histogram window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetPrecision(plotID: Number, bins: Number)→ bool
Change number of bins on the histogram

Parameters
:
plotID (Number) – histogram window ID

bins (Number) – number of bins

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetStandardise(plotID: Number, std: bool)→ bool
[DEPRECATED] (use histogramSetStandardize instead) Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetStandardize(plotID: Number, std: bool)→ bool
Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetStyle(plotID: Number, st: int)→ bool
Change the style of display of the histogram

Parameters
:
plotID (Number) – histogram window ID

st (int) – display style: {0 = ‘CRENEL_CLOSE’, 1 = ‘CRENEL_OPEN’, 2 = ‘CONTINUOUS_LINE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetType(plotID: Number, ty: int)→ bool
Change histogram type

Parameters
:
plotID (Number) – histogram window ID

ty (int) – histogram type: {0 = ‘VARIABLES’, 1 = ‘FILTER’, 2 = ‘ZONATION’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the histogram

Parameters
:
plotID (Number) – histogram window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetVariablesValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the X axis of a histogram

Parameters
:
plotID (Number) – histogram window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisScale(plotID: Number, xasc: int)→ bool
Change the histogram X axis scale

Parameters
:
plotID (Number) – histogram window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetYAxisMinMax(plotID: Number, ymin: Number, ymax: Number)→ bool
Set min & max values of histogram Y axis

Parameters
:
plotID (Number) – histogram window ID

ymin (Number) – Y axis minimum

ymax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramVAOpen(n: str, f: str = '')→ Number
Open an existing histogram VA

Parameters
:
n (str) – histogram name

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

Logview
TechlogPlot.logViewAddAnnotationsByTrack(plotID: Number, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, listFamilyFont: list = 'Verdana', listSize: list = 12, listBold: list = None, listItalic: list = None, listUnderline: list = None)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

listFamilyFont (list) – Optional; family font list for annotations

listSize (list) – Optional; font size list for annotations

listBold (list) – Optional; bold state list for annotations fonts

listItalic (list) – Optional; italic state list for annotations fonts

listUnderline (list) – Optional; underline state list for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddAnnotationsByTrackWithSameFont(plotID: Number, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, FamilyFont: str, Size: Number, Bold: bool = False, Italic: bool = False, Underline: bool = False)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

FamilyFont (str) – family font for annotations fonts

Size (Number) – font size for annotations fonts

Bold (bool) – Optional; bold state for annotations fonts

Italic (bool) – Optional; italic state for annotations fonts

Underline (bool) – Optional; underline state for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddAnnotationsByWell(plotID: Number, w: str, groupName: str, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, listBackgroundColour: list = None, listBorderColour: list = None, listHorizontalTextAlignment: list = 'CENTER', listVerticalTextAlignment: list = 'TOP', listTextOrientation: list = 'HORIZONTAL', listFamilyFont: list = 'Verdana', listSize: list = 12, listBold: list = None, listItalic: list = None, listUnderline: list = None)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

groupName (str) – name of the annotations group

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

listBackgroundColour (list) – Optional; background color (hexadecimal code) list for annotations

listBorderColour (list) – Optional; border color (hexadecimal code) list for annotations

listHorizontalTextAlignment (list) – Optional; list of string enum for the horizontal alignment of each annotation, {‘LEFT’, ‘CENTER’, ‘RIGHT’}

listVerticalTextAlignment (list) – Optional; list of string enum for the vertical alignment of each annotation, {‘TOP’, ‘CENTER’, ‘BOTTOM’}

listTextOrientation (list) – Optional; list of string enum for the orientation of each annotation, {‘HORIZONTAL’, ‘VERTICAL’}

listFamilyFont (list) – Optional; family font list for annotations fonts

listSize (list) – Optional; font size list for annotations fonts

listBold (list) – Optional; bold state list for annotations fonts

listItalic (list) – Optional; italic state list for annotations fonts

listUnderline (list) – Optional; underline state list for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddAnnotationsByWellWithSameFont(plotID: Number, w: str, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, FamilyFont: str, Size: Number, Bold: bool = False, Italic: bool = False, Underline: bool = False)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

FamilyFont (str) – family font for annotations fonts

Size (Number) – font size for annotations fonts

Bold (bool) – Optional; bold state for annotations fonts

Italic (bool) – Optional; italic state for annotations fonts

Underline (bool) – Optional; underline state for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddFooters(plotID: Number, footers: str | list)→ bool
Add footers to the layout

Parameters
:
plotID (Number) – logview window ID

footers (Union[str, list]) – footer(s) name (Folder.FooterName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddHeaders(plotID: Number, headers: str | list)→ bool
Add headers to the layout

Parameters
:
plotID (Number) – logview window ID

headers (Union[str, list]) – header(s) name (Folder.HeaderName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddMultipleTopHeaderNoteByTrack(plotID: Number, listPos: list, text: str, centered: bool = True)→ bool
Add a top header note for multiple tracks in the logview

Parameters
:
plotID (Number) – logview window ID

listPos (list) – track position for starting and finishing top header

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddMultipleTrackTopHeaderNoteByWell(plotID: Number, w: str, listPos: list, text: str, centered: bool = True)→ bool
Add a top header note for multiple tracks in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

listPos (list) – track position for starting and finishing top header

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddTopHeaderNoteByTrack(plotID: Number, pos: Number, text: str, centered: bool = True)→ bool
Add a top header note for a track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddTrackTopHeaderNoteByWell(plotID: Number, w: str, pos: Number, text: str, centered: bool = True)→ bool
Add a top header note for a track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddZone(plotID: Number, z: str)→ bool
Display of one zone of the zonation set of the logview

Parameters
:
plotID (Number) – logview window ID

z (str) – name of the zone to display

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewApplyTemplate(nameTemplate: str, nameObject: str, set: bool)→ Number
Apply a layout template to a dataset or a well

Parameters
:
nameTemplate (str) – layout template name (level can be set in the name by following the syntax: ‘levelfilename.xml’)

nameObject (str) – well name if the template is applied by well. Well and dataset name (with the syntax ‘wellName_datasetName’) if the template is applied by dataset

set (bool) – True if dataset, False else

Returns
:
layout window ID

Return type
:
Number

TechlogPlot.logViewCreate(n: str, vl: list = None, mw: bool = True)→ Number
Create a new logview

Parameters
:
n (str) – logview window name

vl (list) – Optional; variable list

mw (bool) – Optional; True = multiwell else False

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewCreateBoreholeShape(plotID: Number, wellName: str, datasetName: str, varNameList: list, padAAzimuthName: str = '', relativeBearingName: str = '', useAsCaliper: bool = True)→ bool
Create and insert a borehole shape in an existing logview

Parameters
:
plotID (Number) – logview window ID

wellName (str) – name of the well

datasetName (str) – name of the dataset

varNameList (list) – list of calipers or radius names

padAAzimuthName (str) – Optional; name of the pad A azimuth

relativeBearingName (str) – Optional; name of the relative bearing

useAsCaliper (bool) – Optional; use the variable list as calipers if True, else use the variable list as radius

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewCreateCrossReference(plotID: Number, reference: str, variable: str, track: Number, type: int, color: str='black', type: int='MARKER_CIRCLE', size: Number=5)→ bool
Create a cross reference object.

Parameters
:
plotID (Number) – logview window ID

reference (str) – Custom reference WellName.DatasetName.VariableName

variable (str) – Variable WellName.DatasetName.VariableName

track (Number) – Position of the track in the logview

type (int) – 0: Cloud, 1: Mean

color (str) – Optional; Point color

type – Optional; markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewCreateDipMeters(plotID: Number, wellName: str, datasetName: str, varName: str, toolName: str, varNameList: list, orientationVar: str, doi: float = 0.0, associatedCaliperVar: str = '', associatedHoleAzimuthVar: str = '', associatedHoleDeviationVar: str = '')→ bool
Create and insert a dip meters in an existing logview

Parameters
:
plotID (Number) – logview window ID

wellName (str) – name of the well

datasetName (str) – name of the dataset

varName (str) – name of the variable

toolName (str) – name of the tool (ARMS_4, ARMS_6, SHDT)

varNameList (list) – list of arms names

orientationVar (str) – name of the orientation variable

doi (float) – Optional; depth of investigation

associatedCaliperVar (str) – Optional; name of the associated caliper

associatedHoleAzimuthVar (str) – Optional; name of the associated hole azimuth

associatedHoleDeviationVar (str) – Optional; name of the associated hole deviation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewDelta(plotID: Number, log1: str, log2: str)→ bool
Delta computation between two log lines (same well) or arrays (same well and dataset). Computed log is added to the current layout with name ‘Delta_log1name_log2name’

Parameters
:
plotID (Number) – logview window ID

log1 (str) – first variable name

log2 (str) – second variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewDuplicate(plotID: Number)→ Number
Duplicate the logview

Parameters
:
plotID (Number) – logview window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.logViewFillWithColor(plotID: Number, v: str, left: bool, r: Number, g: Number, b: Number)→ bool
Add a filling to variable with color

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

left (bool) – 1 = fill left, 0 else

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewFillWithPalette(plotID: Number, v: str, left: bool, pal: str)→ bool
Add a filling to variable with palette

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

left (bool) – 1 = fill left, 0 else

pal (str) – palette name (level can be set in the name by following the syntax: ‘levelpalette’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewFillWithPattern(plotID: Number, v: str, left: bool, pal: str)→ bool
Add a filling to variable with pattern

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

left (bool) – 1 = fill left, 0 else

pal (str) – pattern name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewGetApplyTheFamilyPropertiesStatus(plotID: Number)→ bool
Get the Property Apply the family properties status.

Parameters
:
plotID (Number) – logview window ID

Returns
:
True if the property is applied, false otherwise

Return type
:
bool

TechlogPlot.logViewGetAxeUnitByVariable(plotID: Number, v: str)→ str
Get a variable axis unit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

Returns
:
unit of the first log found for the given variable

Return type
:
str

TechlogPlot.logViewGetIdByName(n: str)→ Number
Find the ID of a name-known logview

Parameters
:
n (str) – logview name

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewGetVariableListByTrack(plotID: int)→ dict
Get the list of variables by track in a layout

Parameters
:
plotID (int) – logview window ID

Returns
:
A dictionary with track index as key and a list [Well.Dataset.Variable] as value

Return type
:
dict

TechlogPlot.logViewHorizontalGridDisplay(plotID: Number, w: str, pos: Number, g: int = 0)→ bool
Change horizontal grid display in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

g (int) – Optional; display type {0 = ‘HORIZONTAL_BELOW’, 1 = ‘HORIZONTAL_TOP’, 2 = ‘HORIZONTAL_NONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertBaseline(plotID: Number, v: str, val: Number)→ bool
Display of a baseline on the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

val (Number) – baseline value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertCrossPlot(plotID: Number, var1: str, var2: str, top: Number, bottom: Number, var3: str = None)→ bool
Insert a cross-plot object in the logview

Parameters
:
plotID (Number) – logview window ID

var1 (str) – X variable name

var2 (str) – Y variable name

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var3 (str) – Optional; color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertCrossPlotByDepth(plotID: Number, var1: str, var2: str, step: Number, top: Number, bottom: Number, var3: str = None)→ bool
Insert cross-plot object by depth in the logview

Parameters
:
plotID (Number) – logview window ID

var1 (str) – X variable name

var2 (str) – Y variable name

step (Number) – step for inserting cross-plot

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var3 (str) – Optional; color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertCrossPlotByZone(plotID: Number, var1: str, var2: str, zn: str, var3: str = None)→ bool
Insert cross-plot object by zone in the logview

Parameters
:
plotID (Number) – logview window ID

var1 (str) – X variable name

var2 (str) – Y variable name

zn (str) – zonation name

var3 (str) – Optional; color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertHistogram(plotID: Number, var: str, top: Number, bottom: Number)→ bool
Insert a histogram object in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – variable name

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertHistogramByDepth(plotID: Number, var: str, step: Number, top: Number, bottom: Number)→ bool
Insert histogram object by depth in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – variable name

step (Number) – step for inserting histogram

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertHistogramByZone(plotID: Number, var: str, zn: str)→ bool
Insert histogram object by zone in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – variable name

zn (str) – zonation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertStereonet(plotID: Number, var: str, top: Number, bottom: Number, var2: str = None)→ bool
Insert a stereonet object in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – dip variable name or angular variable name for azimuth

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var2 (str) – Optional; second angular variable name for dip

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertStereonetByDepth(plotID: Number, var: str, step: Number, top: Number, bottom: Number, var2: str = None)→ bool
Insert stereonet object by depth in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – dip variable name or angular variable name for azimuth

step (Number) – step for inserting steronet

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var2 (str) – Optional; second angular variable name for dip

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertStereonetByZone(plotID: Number, var: str, zn: str, var2: str = None)→ bool
Insert stereonet object by zone in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – dip variable name or angular variable name for azimuth

zn (str) – zonation name

var2 (str) – Optional; second angular variable name for dip

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertTrack(plotID: Number, tr: int, pos: Number = 0)→ Number
Insert any type of track in a logview

Parameters
:
plotID (Number) – logview window ID

tr (int) – track type {‘NORMAL’, ‘REFERENCE’, ‘SEPARATOR’,

'PLOT'

'ZONATION'

'ANNOTATION'

'ARRAY'}

pos (Number) – Optional; position of the track in the layout

Returns
:
reference number of the track if success, else -1

Return type
:
Number

TechlogPlot.logViewInsertTrackByWell(plotID: Number, n: str, tr: int, pos: Number = 0, zs: str = '')→ Number
Insert any type of track in a multiwell logview

Parameters
:
plotID (Number) – logview window ID

n (str) – well name

tr (int) – track type {‘NORMAL’, ‘REFERENCE’, ‘SEPARATOR’,

'PLOT'

'ZONATION'

'ANNOTATION'

'ARRAY'}

pos (Number) – Optional; position of the track in the layout

zs (str) – Optional; zonation set (if insertion of a zonation track)

Returns
:
reference number of the track if success, else -1

Return type
:
Number

TechlogPlot.logViewInsertUncertaintyConstant(plotID: Number, v: str, lowerBound: Number, upperBound: Number, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

lowerBound (Number) – lower limit for uncertainty value

upperBound (Number) – upper limit for uncertainty value

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertUncertaintyVariable(plotID: Number, v: str, variableLowerBound: str, variableUpperBound: str, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

variableLowerBound (str) – lower limit for uncertainty values

variableUpperBound (str) – upper limit for uncertainty values

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariable(plotID: Number, vl: list, tr: Number = None)→ bool
Insert a new logs in a layout - it is possible to specify a track by its position to insert logs

Parameters
:
plotID (Number) – logview window ID

vl (list) – variables list to insert

tr (Number) – Optional; position of the track

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariableInTrack(plotID: Number, var: str, newvar: list)→ bool
Insert a new logs in a track already existing & containing log(s) in the layout - takes a variable already in the wanted track to find it

Parameters
:
plotID (Number) – logview window ID

var (str) – name of one variable which log is in the track

newvar (list) – new variable or variables list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariablesInCumulatedTrack(plotID: Number, varlist: list, pos: Number = -1, colorlist: list = None, patternlist: list = None, lock: bool = False)→ bool
Insert variables in a cumulated track - it is possible to specify the track position

Parameters
:
plotID (Number) – logview window ID

varlist (list) – variables list to insert

pos (Number) – Optional; position of the track

colorlist (list) – Optional; colors list

patternlist (list) – Optional; patterns list

lock (bool) – Optional; {False = ‘Cumulate the variables’, True = ‘Lock the track. Does not cumulate the variables’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariablesInCumulatedTrackByWell(plotID: Number, well: str, varlist: list, pos: Number = -1, colorlist: list = None, patternlist: list = None, noCumulVarList: list = None)→ bool
Insert variables in a cumulated track in a specified well - it is possible to specify the track position according to the well

Parameters
:
plotID (Number) – logview window ID

well (str) – well name

varlist (list) – variables list to insert

pos (Number) – Optional; position of the track

colorlist (list) – Optional; colors list

patternlist (list) – Optional; patterns list

noCumulVarList (list) – Optional; variables list to insert without cumulating

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInverseArrayBHI(plotID: Number, variableName: str, inverse: bool)→ bool
Inverse arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the arrayBHI [wellName.datasetName.variableName]

inverse (bool) – inversion status

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewLimitsByVariable(plotID: Number, variableName: str)→ list
Get the limits of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
limits [[float] lower limit, [float] upper limit, [bool] inverted]

Return type
:
list

TechlogPlot.logViewLimitsTypeByVariable(plotID: Number, variableName: str)→ str
Get the limits type of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
limits type [‘variable’, ‘user’, ‘family’]

Return type
:
str

TechlogPlot.logViewLoadFooter(plotID: Number, footer: str)→ bool
Load the footer as main footer of the layout

Parameters
:
plotID (Number) – logview window ID

footer (str) – footer name (Folder.FooterName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewLoadHeader(plotID: Number, header: str)→ bool
Load the header as main header of the layout

Parameters
:
plotID (Number) – logview window ID

header (str) – header name (Folder.HeaderName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOpen(n: str, f: str = '', type: int = 0)→ Number
Open an existing Logview

Parameters
:
n (str) – logview window name

f (str) – Optional; folder

type (int) – Optional; layout type {‘LAYOUT’, ‘LAYOUTTEMPLATE’}

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewOptimised(plotID: Number, v: str, optimised: bool)→ bool
[DEPRECATED] (use logViewOptimized instead) Change if a log display is optimised or not

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimisedByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
[DEPRECATED] (use logViewOptimizedByArrayBHI instead) Set if optimised & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimisedX(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
[DEPRECATED] (use logViewOptimizedX instead) Set if optimised horizontally & threshold value for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimisedXByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
[DEPRECATED] (use logViewOptimizedByArrayBHI instead) Set if optimised horizontally & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimized(plotID: Number, v: str, optimised: bool)→ bool
Change if a log display is optimised or not

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimizedByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
Set if optimised & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimizedX(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
Set if optimised horizontally & threshold value for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimizedXByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
Set if optimised horizontally & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveAll(plotID: Number)→ bool
Remove all tracks from the layout

Parameters
:
plotID (Number) – logview window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveFill(plotID: Number, v: str)→ bool
remove a filling to variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveLog(plotID: Number, v: str, tr: bool = False)→ bool
Remove a log from the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID of the log to remove

tr (bool) – Optional; =1 if remove the empty track after removing log

warning – all empty tracks of the logview will be removed

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveTrackByPosition(plotID: Number, pos: Number, n: str = None, trackType: int = 0)→ bool
Remove a track from the layout - track selected by its position

Parameters
:
plotID (Number) – logview window ID

pos (Number) – position of the track to delete

n (str) – Optional; well name (if multiwell logview)

trackType (int) – Optional; track type {‘NORMAL’, ‘REFERENCE’, ‘SEPARATOR’,

'PLOT' (if multiwell logview)

'ZONATION' (if multiwell logview)

'ANNOTATION'} (if multiwell logview)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveTrackByVar(plotID: Number, var: str)→ bool
[DEPRECATED] (use logViewRemoveTrackByVariable instead) Remove a track from the layout - track selected by variable

Parameters
:
plotID (Number) – logview window ID

var (str) – variable in track to delete

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveTrackByVariable(plotID: Number, var: str)→ bool
Remove a track from the layout - track selected by variable

Parameters
:
plotID (Number) – logview window ID

var (str) – variable in track to delete

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveWell(plotID: Number, w: str)→ bool
Remove all logs from a well from a layout

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveZonation(plotID: Number, sn: str)→ bool
Remove a set of zonation from the logview - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – logview window ID

sn (str) – name of the set of zonation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveZone(plotID: Number, z: str)→ bool
Remove the display of one zone of the zonation set of the logview

Parameters
:
plotID (Number) – logview window ID

z (str) – name of the zone

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSave(plotID: Number, n: str, f: str = '', type: int = 0)→ bool
Save the logview

Parameters
:
plotID (Number) – logview window ID

n (str) – logview window name

f (str) – Optional; folder

type (int) – Optional; layout type {0=’LAYOUT’, 1=’LAYOUTTEMPLATE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewScaleByVariable(plotID: Number, variableName: str)→ str
Get the scale of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
scale [‘linear’, ‘logarithmic’]

Return type
:
str

TechlogPlot.logViewScaleUnitByVariable(plotID: Number, variableName: str)→ str
Get the scale unit a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
scale unit

Return type
:
str

TechlogPlot.logViewSetApplyTheFamilyPropertiesStatus(plotID: Number, status: bool = True)→ bool
Set the Property Apply the family properties.

Parameters
:
plotID (Number) – logview window ID

status (bool) – Optional; state

Returns
:
True if operation is OK else return False

Return type
:
bool

TechlogPlot.logViewSetArrayBHIOrientation(plotID: Number, v: str, value: Number)→ bool
Set orientation value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

value (Number) – orientation value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeLimitTypeByVariable(plotID: Number, v: str, sc: int)→ bool
Change a variable axis type in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

sc (int) – limit type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeScaleByVariable(plotID: Number, v: str, sc: int)→ bool
Change a variable axis scale in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeUnitByVariable(plotID: Number, v: str, u: str)→ bool
Change a variable axis unit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

u (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeIndexTypeToArray(plotID: Number, v: str, xat: int)→ bool
Change the X index axis limits types for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeIndexValMaxUserToArray(plotID: Number, v: str, max: Number)→ bool
Change the X index axis user upper limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeIndexValMinUserToArray(plotID: Number, v: str, min: Number)→ bool
Change the X index axis user lower limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarMaxUserToArray(plotID: Number, v: str, max: Number)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableMaxUserToArray instead) Change the X variable axis user upper limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarMinUserToArray(plotID: Number, v: str, min: Number)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableMinUserToArray instead) Change the X variable axis user lower limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarNameToArray(plotID: Number, v: str, v: str)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableNameToArray instead) Change the X variable axis variable name for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

v – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarScaleTypeToArray(plotID: Number, v: str, xasc: int)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableScaleTypeToArray instead) Change the X variable axis scale for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarTypeToArray(plotID: Number, v: str, xat: int)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableTypeToArray instead) Change the X variable axis limits types for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableMaxUserToArray(plotID: Number, v: str, max: Number)→ bool
Change the X variable axis user upper limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableMinUserToArray(plotID: Number, v: str, min: Number)→ bool
Change the X variable axis user lower limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableNameToArray(plotID: Number, v: str, v: str)→ bool
Change the X variable axis variable name for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

v – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableScaleTypeToArray(plotID: Number, v: str, xasc: int)→ bool
Change the X variable axis scale for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableTypeToArray(plotID: Number, v: str, xat: int)→ bool
Change the X variable axis limits types for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXInverseToCumulatedTrack(plotID: Number, variableNames: list, inverted: bool)→ bool
Change the orientation of the X Axis for a cumulated track in a logview

Parameters
:
plotID (Number) – logview window ID

variableNames (list) – list of wellName.datasetName.variableName

inverted (bool) – inversion status

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXInversedToArray(plotID: Number, v: str, inversed: bool)→ bool
Set the Invert X axis’s property for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMaxUserToCumulatedArray(plotID: Number, v: str, min: Number)→ bool
Change a the X axis upper limit for a cumulated array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMaxUserToHistoArray(plotID: Number, v: str, max: Number)→ bool
Change the X axis user upper limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMinMaxUserToCrossReference(plotId: Number, variable: str, min: Number, max: Number)→ bool
Parameters
:
plotId (Number) – plot window ID

variable (str) – Variable WellName.DatasetName.VariableName

min (Number) – Min user value

max (Number) – Max user value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMinUserToCumulatedArray(plotID: Number, v: str, min: Number)→ bool
Change a the X axis lower limit for a cumulated array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMinUserToHistoArray(plotID: Number, v: str, min: Number)→ bool
Change the X axis user lower limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXScaleTypeToHistoArray(plotID: Number, v: str, xasc: int)→ bool
Change the X axis scale for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXTypeToCumulatedArray(plotID: Number, v: str, xat: int)→ bool
Change the X axis limits types for a cumulated array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXTypeToHistoArray(plotID: Number, v: str, xat: int)→ bool
Change the X axis limits types for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXUnitToCrossReference(plotId: Number, variable: str, unit: str)→ bool
Parameters
:
plotId (Number) – plot window ID

variable (str) – Variable WellName.DatasetName.VariableName

unit (str) – Axis X unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXWithVarToArray(plotID: Number, v: str, variable_axis: bool)→ bool
[DEPRECATED] (use logViewSetAxeXWithVariableToArray instead) Switch X axis from index axis to variable axis for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

variable_axis (bool) – True if variable axis, False if index axis

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXWithVariableToArray(plotID: Number, v: str, variable_axis: bool)→ bool
Switch X axis from index axis to variable axis for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

variable_axis (bool) – True if variable axis, False if index axis

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetCallTypeByVariable(plotID: Number, v: str, ct: int)→ bool
Change the call type of a variable in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

ct (int) – new call type {0 = ‘VAR_NAME_CT’, 1 = ‘FAMILY_CT’, 2 = ‘ALIAS_CT’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetDisplayOnXOutputValueOnYToArray(plotID: Number, v: str, always: bool)→ bool
Change the always display property for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

always (bool) – True if always display, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetHeaderOrientation(plotID: Number, posTrackList: list, vertical: bool)→ bool
Change the orientation of the header in a track

Parameters
:
plotID (Number) – logview window ID

posTrackList (list) – list of position of tracks

vertical (bool) – header vertical if True, else header horizontal

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetHorizontal(plotID: Number, horizontal: bool)→ Number
Set the logview orientation

Parameters
:
plotID (Number) – logview window ID

horizontal (bool) – horizontal if True, else vertical

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewSetLayoutScale(plotID: Number, sc: Number = 200)→ bool
Change the layout global scale

Parameters
:
plotID (Number) – logview window ID

sc (Number) – Optional; wanted scale - scale format is ‘1 : sc’, only enter sc

'1 (default scale is) – 200’, to have it back only enter logview ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetLimitsByVariable(plotID: Number, variableName: str, lowerLimit: float, upperLimit: float, inverted: bool)→ bool
Set the limits of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

lowerLimit (float) – new lower limit of the variable

upperLimit (float) – new upper limit of the variable

inverted (bool) – inverse or not the limit of the variable

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetLimitsTypeByVariable(plotID: Number, variableName: str, limitsType: str)→ bool
Set the limits type of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

limitsType (str) – limits type [‘variable’, ‘user’, ‘family’]

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetLineProperties(plotID: Number, v: str, st: int = 0, ty: Number = 0, thk: Number = 2)→ bool
Set user preferences for line display of logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

st (int) – Optional; line type {‘NoPen’, ‘SolidLine’, ‘DashLine’, ‘DotLine’, ‘DashDotLine’, ‘DashDotDotLine’, ‘DotDashDashLine’, ‘ShortDashLine’, ‘LongDashLine’}

ty (Number) – Optional; line continuity {‘NO_CONNECTION’, ‘POINT_TO_POINT’, ‘STEP_H_V’, ‘STEP_V_H’, ‘STEP_CENTER’}

thk (Number) – Optional; line thickness (between 1 & 8)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMarkers(plotID: Number, v: str, show: bool, ty: int = 0, size: Number = 2)→ bool
Set user preferences for variable markers. It works exclusively on variable, not dataset.

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

show (bool) – 1 = show markers on log

ty (int) – Optional; markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 20)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMaxUserByVariable(plotID: Number, v: str, max: Number, inversed: bool)→ bool
Change a variable bottom limit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMaxUserToMatrixArrayBHI(plotID: Number, v: str, min: Number)→ bool
Change a the upper limit for a matrix array BHI in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMinMaxUserByVariable(plotID: Number, v: str, min: Number, max: Number, inversed: bool)→ bool
[DEPRECATED] Change a variable top and bottom limits in the logview Please use logViewSetLimitsByVariable instead.

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

max (Number) – bottom limit

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMinUserByVariable(plotID: Number, v: str, min: Number, inversed: bool)→ bool
Change a variable top limit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMinUserToMatrixArrayBHI(plotID: Number, v: str, min: Number)→ bool
Change a the lower limit for a matrix array BHI in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetName(plotID: Number, n: str)→ bool
Change the name of the logview

Parameters
:
plotID (Number) – logview window ID

n (str) – new logview windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPalette(plotID: Number, v: str, pal: str)→ bool
Add a palette to variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

pal (str) – palette name (level can be set in the name by following the syntax: ‘levelpalette’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPaletteLimits(plotID: Number, v: str, limitMin: float, limitMax: float)→ bool
Set palette limits for variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

limitMin (float) – Lower limit

limitMax (float) – Upper limit (> limitMin)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPartialTrackStartStopByVariable(plotID: Number, varName: str, start: Number, stop: Number)→ bool
Set start stop values for partial track to log line

Parameters
:
plotID (Number) – logview window ID

varName (str) – variable name wellName.datasetName.variableName

start (Number) – start value for partial track

stop (Number) – stop value for partial track

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPartialTrackStartStopToArray(plotID: Number, varName: str, start: Number, stop: Number)→ bool
Set start stop values for partial track to array

Parameters
:
plotID (Number) – logview window ID

varName (str) – variable name wellName.datasetName.variableName

start (Number) – start value for partial track

stop (Number) – stop value for partial track

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceDisplay(plotID: Number, r: str, u: str = None)→ bool
Change the reference space & the reference unit in the logview

Parameters
:
plotID (Number) – logview window ID

r (str) – reference scale

u (str) – Optional; new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceDisplayByTrack(plotID: Number, pos: Number, r: str)→ bool
Change the reference space of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

r (str) – reference scale

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceUnit(plotID: Number, u: str = None)→ bool
Change the reference unit in the logview

Parameters
:
plotID (Number) – logview window ID

u (str) – Optional; new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceUnitByTrack(plotID: Number, pos: Number, u: str)→ bool
Change the reference unit of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

u (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetScaleByVariable(plotID: Number, variableName: str, scale: str)→ bool
Set the scale of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

scale (str) – scale of the variable [‘linear’, ‘logarithmic’]

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetScaleTypeToMatrixArrayBHI(plotID: Number, v: str, xasc: int)→ bool
Change the scale for a matrix array BHI in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetScaleUnitByVariable(plotID: Number, variableName: str, scaleUnit: str)→ bool
Set the scale unit of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

scaleUnit (str) – scale unit of the variable

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetThresholdY(plotID: Number, v: str, value: Number)→ bool
Set threshold value for optimised array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

value (Number) – threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetTrackReferenceDisplayByWell(plotID: Number, w: str, pos: Number, r: str)→ bool
Change the reference space of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

r (str) – reference scale

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetTrackReferenceUnitByWell(plotID: Number, w: str, pos: Number, u: str)→ bool
Change the reference unit of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

u (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetVariableColor(plotID: Number, var: str, r: Number, g: Number, b: Number)→ bool
Change the default color of a variable log

Parameters
:
plotID (Number) – logview window ID

var (str) – variable ID to modify (WellName.DatasetName.VariableName)

r (Number) – red (0-255)

g (Number) – green (0-255)

b (Number) – blue (0-255)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetVariableColour(plotID: Number, var: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use logViewSetVariableColor instead) Change the default color of a variable log

Parameters
:
plotID (Number) – logview window ID

var (str) – variable ID to modify (WellName.DatasetName.VariableName)

r (Number) – red (0-255)

g (Number) – green (0-255)

b (Number) – blue (0-255)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetWellDatum(plotID: Number, w: str, lim: bool, min: Number = 0, max: Number = 0)→ bool
Set a user reference limitation to a well

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

lim (bool) – 1 = user limits else 0

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

user (if inputs 4 & 5 are not given by)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonation(plotID: Number, sn: str)→ bool
Assign a set of zonation to the logview

Parameters
:
plotID (Number) – logview window ID

sn (str) – name of the set of zonation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackColorationMode(plotID: Number, trackID: Number, mode: str = 'COLOUR')→ bool
Change the coloring mode of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

mode (str) – Optional; coloring mode, {‘COLOUR’, ‘PATTERN’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackColourationMode(plotID: Number, trackID: Number, mode: str = 'COLOUR')→ bool
[DEPRECATED] (use logViewSetZonationTrackColorationMode instead) Change the coloring mode of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

mode (str) – Optional; coloring mode, {‘COLOUR’, ‘PATTERN’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackFamily(plotID: Number, trackID: Number, family: str = 'ZONE_NAME')→ bool
Change the family of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

family (str) – Optional; family type, {‘ZONE_NAME’, ‘HYDRAULIC_ZONE’, ‘FAULT_BLOCK’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackSet(plotID: Number, trackID: Number, set: str)→ bool
Change the dataset of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

set (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackTextOrientation(plotID: Number, trackID: Number, b: bool = True)→ bool
Change the orientation of the text in a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

b (bool) – Optional; text vertical if True, else text horizontal

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSmooth(plotID: Number, v: str, smooth: bool)→ bool
Smooth for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

smooth (bool) – True if smoothed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSmoothByArrayBHI(plotID: Number, v: str, smooth: bool)→ bool
Smooth for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

smooth (bool) – True if smoothed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewTrackSize(plotID: Number, pos: Number, s: Number)→ bool
Set track size in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

s (Number) – size of track (in pixels)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewTrackSizeByWell(plotID: Number, w: str, pos: Number, s: Number)→ bool
Set track size in the logview for a given well

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

s (Number) – size of track (in pixels)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridDisplay(plotID: Number, w: str, pos: Number, g: int = 0)→ bool
Change vertical grid display in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

g (int) – Optional; display type {0 = ‘VERTICAL_BELOW’, 1 = ‘VERTICAL_TOP’, 2 = ‘VERTICAL_NONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineColor(plotID: Number, w: str, pos: Number, r: Number = 173, g: Number = 173, b: Number = 173)→ bool
Change the color of vertical grid lines in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

grey (default line color is)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineColour(plotID: Number, w: str, pos: Number, r: Number = 173, g: Number = 173, b: Number = 173)→ bool
[DEPRECATED] (use logViewVerticalGridLineColor instead) Change the color of vertical grid lines in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

grey (default line color is)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineCount(plotID: Number, w: str, pos: Number, count: Number = 4)→ bool
Change the number of line of vertical grid in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

count (Number) – Optional; number of lines (default = 4)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineThickness(plotID: Number, w: str, pos: Number, thk: Number = 4)→ bool
Change the thickness of vertical grid lines in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

thk (Number) – Optional; line thickness (default = 1)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGrigLineCount(plotID: Number, w: str, pos: Number, count: Number = 4)→ bool
[DEPRECATED] (use logViewVerticalGridLineCount instead) Change the number of line of vertical grid in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

count (Number) – Optional; number of lines (default = 4)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewZonationAreaFilling(plotID: Number, fill: bool, transp: Number = 4)→ bool
Set filling proprieties of colored zonation

Parameters
:
plotID (Number) – logview window ID

fill (bool) – 1 = show filled else 0

transp (Number) – Optional; transparency (between 0 & 10)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewZonationBordersProperties(plotID: Number, thk: Number = 2, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Set border proprieties of coloured zonation

Parameters
:
plotID (Number) – logview window ID

thk (Number) – Optional; border line thikness (between 1 & 5)

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewZonationDisplay(plotID: Number, ty: int = 0)→ bool
Change the display of zonation on logview

Parameters
:
plotID (Number) – logview window ID

ty (int) – Optional; zonation display type {0 = ‘BELOW_GRID (default)’, 1 = ‘OVER_GRID’, 2 = ‘OVER_LOG’}

Returns
:
operation exit status

Return type
:
bool

Macro
TechlogPlot.macroKeyboardPress()
Simulate the keyboard

TechlogPlot.macroKeyboardRelease()
Simulate the keyboard

TechlogPlot.macroKeyboardType(keyboard_string: str)
Simulate the keyboard

Parameters
:
keyboard_string (str) – Keyboard key

TechlogPlot.macroMouseLeftDown()
Simulate the mouse left button getting down

TechlogPlot.macroMouseLeftUp()
Simulate the mouse left button getting up

TechlogPlot.macroMouseMiddleDown()
Simulate the mouse middle button getting down

TechlogPlot.macroMouseMiddleUp()
Simulate the mouse middle button getting up

TechlogPlot.macroMouseMove()
Simulate the mouse movement

TechlogPlot.macroMouseRightDown()
Simulate the mouse right button getting down

TechlogPlot.macroMouseRightUp()
Simulate the mouse right button getting up

TechlogPlot.macroMouseWheel()
Simulate the mouse wheel

TechlogPlot.macroObjectExists()
Return true if a widget exists and is visible (param: widgetDescriptor)

TechlogPlot.macroObjectHeight()
(param: widgetDescriptor)

TechlogPlot.macroObjectLeft()
(param: widgetDescriptor)

TechlogPlot.macroObjectTop()
(param: widgetDescriptor)

TechlogPlot.macroObjectWidth()
(param: widgetDescriptor)

TechlogPlot.macroWait()
Wait before the next action (in ms)

Matrix Box Plot
TechlogPlot.matrixBoxPlotByZoneOpen(n: str, f: str = None)→ Number
Open an existing matrix box-plot by zone

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixBoxPlotOpen(n: str, f: str = None)→ Number
Open an existing matrix box-plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

Matrix Cross Plot
TechlogPlot.matrixCrossPlotAddChart(plotID: Number, cn: str)→ bool
Add chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotAddData(plotID: Number, ds: list)→ bool
Add a dataset to a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotCreate(ml: list)→ Number
Create a new matrix cross-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.matrixCrossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDensityType(plotID: Number, dst: bool)→ bool
Display of the matrix cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDuplicate(plotID: Number)→ Number
Duplicate the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.matrixCrossPlotIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.matrixCrossPlotOpen(n: str, f: str = None)→ Number
Open an existing matrix cross-plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixCrossPlotRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use matrixCrossPlotSelectVariable instead) Change the variable selected among one family’s variables in a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetName(plotID: Number, n: str)→ bool
Change the name of matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the matrix cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the matrix cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Matrix Histogram
TechlogPlot.matrixHistogramAddData(plotID: Number, ds: list)→ bool
Add a dataset to a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramCreate(ml: list)→ Number
Create a new matrix histogram

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.matrixHistogramDuplicate(plotID: Number)→ Number
Duplicate the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.matrixHistogramIDFindByName(n: str)→ Number
Find the ID of a name-known matrix histogram

Parameters
:
n (str) – matrix histogram window name

Returns
:
matrix histogram window ID

Return type
:
Number

TechlogPlot.matrixHistogramOpen(n: str, f: str = None)→ Number
Open an existing matrix histogram

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixHistogramRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSave(plotID: Number, n: str, f: str = '')→ bool
Save the matrix histogram

Parameters
:
plotID (Number) – matrix histogram window ID

n (str) – matrix histogram name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use matrixHistogramSelectVariable instead) Change the variable selected among one family’s variables in a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSetFill(plotID: Number, fill: bool)→ bool
Fill or not the inside of the histograms with a color

Parameters
:
plotID (Number) – matrix histogram window ID

fill (bool) – 1 = fill; 0 = don’t fill

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSetName(plotID: Number, n: str)→ bool
Change the name of matrix histogram

Parameters
:
plotID (Number) – matrix histogram window ID

n (str) – new matrix histogram name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Print
TechlogPlot.printCompleted(threadid: str)→ bool
Returns True if multithread print is completed

Parameters
:
threadid (str) – the print thread name

Returns
:
print completed

Return type
:
bool

TechlogPlot.printPlot(plotID: Number)→ bool
Print a plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.printToFile(plotID: Number, paperFormat: str, outputFormat: str, outputName: str, paperWidth: Number = 0, paperHeight: Number = 0, adjustWidthType: Number = 0, adjustWidthValue: Number = -1, adjustHeightType: Number = 0, adjustHeightValue: Number = -1, scale: Number = -1, officeCompatible: bool = False, resolution: Number = 600)→ bool
Export the plot into a file

Parameters
:
plotID (Number) – object ID

paperFormat (str) – ‘A4’, ‘Letter’…

outputFormat (str) – ‘.jpg’, ‘.cgm’, ‘.emf’, ‘.pdf’… or ‘printer’

outputName (str) – file name (saved in Various folder) or printer name if output format is set to ‘printer’

paperWidth (Number) – Optional; paper width in cm

paperHeight (Number) – Optional; paper width in cm

adjustWidthType (Number) – Optional; can be ‘adjust to the page’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustWidthValue (Number) – Optional; adjust width value in cm

adjustHeightType (Number) – Optional; can be ‘adjust to n pages’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustHeightValue (Number) – Optional; adjust height value in cm if adjust height is ‘custom’ or number of pages if adjust height is ‘adjust to n pages’

scale (Number) – Optional; scale

officeCompatible (bool) – Optional; useful only with CGM format. must be set to true if the generated file is to be used in Microsoft Office applications such

Word (as)

PowerPoint...

resolution (Number) – Optional; dpi resolution to print or export the file

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.printToFileMultiThread(plotID: Number, paperFormat: str, outputFormat: str, outputName: str, paperWidth: Number = 0, paperHeight: Number = 0, adjustWidthType: Number = 0, adjustWidthValue: Number = -1, adjustHeightType: Number = 0, adjustHeightValue: Number = -1, scale: Number = -1, officeCompatible: bool = False, resolution: Number = 600)→ str
Export the plot into a file, using a separate thread

Parameters
:
plotID (Number) – object ID

paperFormat (str) – ‘A4’, ‘Letter’…

outputFormat (str) – ‘.jpg’, ‘.cgm’, ‘.emf’, ‘.pdf’… or ‘printer’

outputName (str) – file name (saved in Various folder) or printer name if output format is set to ‘printer’

paperWidth (Number) – Optional; paper width in cm

paperHeight (Number) – Optional; paper width in cm

adjustWidthType (Number) – Optional; can be ‘adjust to the page’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustWidthValue (Number) – Optional; adjust width value in cm

adjustHeightType (Number) – Optional; an be ‘adjust to n pages’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustHeightValue (Number) – Optional; adjust height value in cm if adjust height is ‘custom’, or number of pages if adjust height is ‘adjust to n pages’

scale (Number) – Optional; scale

officeCompatible (bool) – Optional; seful only with CGM format. must be set to true if the generated file is to be used in Microsoft Office applications such

Word (as)

PowerPoint...

resolution (Number) – Optional; resolution in dpi to print or export the file

Returns
:
thread name

Return type
:
str

Report Editor
TechlogPlot.reportEditorAddItem(reN: int, pN: int, inS: str, speS: str, itNE: int)→ int
Add an item into an existing page

Parameters
:
reN (int) – report editor ID

pN (int) – page ID

inS (str) – depends on item type Saved items : item name as in your project browser Others items : desired item name in your report browser

speS (str) – depends on item type Saved items : folder name : Project, User, Company or Techlog Generic items : generic item description (text displayed over your item in report) Text item : text content (can contain HTML content if compliant with Qt’s rich text engine) Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html Table of item : title of the table of in your report page

itNE (int) – item type = { 0 - Image, 1 - Layout, 2 - Layout Template, 3 - Crossplot, 4 - Crossplot MW, 6 - Crossplot AA, 7 - Crossplot Template, 8 - Histogram, 9 - Histogram MW, 10 - Histogram Template, 11 - Stereonet, 12 - Lineplot, 13 - Header, 14 - Text, 15 - Generic Header, 16 - Generic Layout, 17 - Generic Crossplot, 18 - Generic Histogram, 19 - Generic Stereonet, 20 - Generic Lineplot, 21 - Generic Image, 22 - Generic Text, 23 - Ternary, 24 - Walkout, 25 - Cumulative Dip, 26 - Single Depth, 27 - Generic Ternary, 28 - Generic Walkout, 29 - Generic Cumulative Dip, 30 - Generic Single Depth, 31 - Table of Contents, 32 - Table of Figures, 33 - Tables of Tables, 34 - Crossplot AVA, 35 - Waveform, 36 - Generic Waveform, 37 - Wellbore Centrid Grid, 38 - Generic Wellbore Centrid Grid, 39 - Borehole Section, 40 - Generic Borehole Section, 41 - Cross section profile plot, 42 - Cross section profile plot template, 43 - Generic cross section profile plot, 44 - Axial section profile plot, 45 - Axial section profile plot template, 46 - Generic axial section profile plot}

Returns
:
Success : item ID, else Exception

Return type
:
int

TechlogPlot.reportEditorAddItemToMasterPage(reN: Number, sN: Number, inS: str, speS: str, itNE: int)→ Number
Add an item to an existing master page:

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

inS (str) – item name

speS (str) – depends on item type Image item : folder name : Project, User, Company or Techlog Text item : text content (can contain HTML content if compliant with Qt’s rich text engine) Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html

itNE (int) – item type = { 0 - Image, 1 - Text}

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddLineItem(reN: Number, pN: Number, x1N: Number, y1N: Number, x2N: Number, y2N: Number)→ Number
Add a line item in a page

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

x1N (Number) – begin point horizontal position in current unit

y1N (Number) – begin point vertical position in current unit

x2N (Number) – end point horizontal position in current unit

y2N (Number) – end point vertical position in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddLineItemInMasterPage(reN: Number, sN: Number, x1N: Number, y1N: Number, x2N: Number, y2N: Number)→ Number
Add a line item in a master page

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

x1N (Number) – begin point horizontal position in current unit

y1N (Number) – begin point vertical position in current unit

x2N (Number) – end point horizontal position in current unit

y2N (Number) – end point vertical position in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddPage(reN: Number, snN: Number, pnS: str = 'Page X')→ Number
Add a page to an existing section

Parameters
:
reN (Number) – report editor ID

snN (Number) – section ID

pnS (str) – Optional; page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddRectItem(reN: Number, pN: Number, xN: Number, yN: Number, wN: Number, hN: Number)→ Number
Add a rectangle item in a page

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

wN (Number) – width in current unit

hN (Number) – height in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddRectItemInMasterPage(reN: Number, sN: Number, xN: Number, yN: Number, wN: Number, hN: Number)→ Number
Add a rectangle item in a master page

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

wN (Number) – width in current unit

hN (Number) – height in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddSection(reN: Number, snS: str)→ Number
Add a section to your report

Parameters
:
reN (Number) – report editor ID

snS (str) – section name

Returns
:
Success : section ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddSpecialItemToMasterPage(reN: Number, sN: Number, inS: str, hpN: Number, vpN: Number)→ Number
Add special item to the master page Only page number available at the moment

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

inS (str) – item name in report browser

hpN (Number) – horizontal position in current unit

vpN (Number) – vertical position in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddTable(reN: Number, ptN: Number, rcN: Number, ccN: Number, rhN: Number = 1, cwN: Number = 1, xN: Number = 0, yN: Number = 0)→ Number
Add a table to the report

Parameters
:
reN (Number) – report editor ID

ptN (Number) – page ID

rcN (Number) – row count

ccN (Number) – column count

rhN (Number) – Optional; row height in current unit

cwN (Number) – Optional; column width in current unit

xN (Number) – Optional; horizontal position in current unit

yN (Number) – Optional; vertical position in current unit

Returns
:
Success : table ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAdjustItemToPage(reN: Number, iN: Number, aB: bool)→ bool
Adjust an item to the page width

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

aB (bool) – adjusted to the page width

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorApplyTo(reN: Number, wS: str, dS: str = '')→ bool
Apply a dataset or well to your report

Parameters
:
reN (Number) – report editor ID

wS (str) – well name

dS (str) – Optional; dataset name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorChangeItemPage(reN: Number, iN: Number, pN: Number)→ bool
Move an item to an other page

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

pN (Number) – page ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorClose(reN: Number)→ bool
Close the report editor

Parameters
:
reN (Number) – report editor ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorCreate()→ Number
Create a report editor

Returns
:
report editor ID

Return type
:
Number

TechlogPlot.reportEditorDeleteItem(reN: Number, iN: Number)→ bool
Delete an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorDeleteItemInMasterPage(reN: Number, iN: Number)→ bool
Delete an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorDeletePage(reN: Number, pN: Number)→ bool
Delete a page of the report

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorDeleteSection(reN: Number, sN: Number)→ bool
Delete a section in the report

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorHeaderLinkToLayout(reN: Number, hN: Number, lN: Number)→ bool
Apply layout properties to a header

Parameters
:
reN (Number) – report editor ID

hN (Number) – header ID

lN (Number) – layout ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorInsertPage(reN: Number, sN: Number, iN: Number, pnS: str = 'Page n')→ Number
Insert a page in an existing section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

iN (Number) – index (0 to n - 1)

pnS (str) – Optional; page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorInsertSection(reN: Number, iN: Number, snS: str = 'Section n')→ Number
Insert a section in the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – index (0 to n - 1)

snS (str) – Optional; section name

Returns
:
Success : section ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorItemApplyTo(reN: Number, iN: Number, dS: str = '')→ bool
Apply a Dataset or Well to a report item

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID 3. wS [string]: well name

dS (str) – Optional; dataset name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemImageKeepProportions(reN: Number, iN: Number, kpB: bool)→ bool
Set the keepProportions property of an image item

Parameters
:
reN (Number) – report editor ID

iN (Number) – image item ID

kpB (bool) – keeps proportions

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetAlignment(reN: Number, iN: Number, aNE: int)→ bool
Set item alignment

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

aNE (int) – alignment = {0 - Left, 1 - Center, 2 - Right, 3 - Justify}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetBackgroundColor(reN: Number, iN: Number, bcS: str, aB: bool = True)→ bool
Set item’s background color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

bcS (str) – background color

aB (bool) – Optional; activate background color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontColor(reN: Number, itN: Number, fcS: str)→ bool
Set item’s text content font color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fcS (str) – font color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontFamily(reN: Number, itN: Number, ffS: str)→ bool
Set item’s font family Check available families in the report editor toolbar

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

ffS (str) – font family

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontSize(reN: Number, itN: Number, fsN: Number)→ bool
Set item’s font size

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fsN (Number) – font size

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontStyle(reN: Number, itN: Number, fsNE: int, aB: bool)→ bool
Set item’s font style

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fsNE (int) – font style = {0 - Bold, 1 - Italic, 2 - Underline}

aB (bool) – apply or remove chosen style

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetHeight(reN: Number, iN: Number, hN: Number)→ bool
Set item’s height attribute

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

hN (Number) – height in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetHighlightColor(reN: Number, itN: Number, fcS: str)→ bool
Set item’s text content highlight color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fcS (str) – highlight color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetLockState(reN: Number, iN: Number, lsNE: int)→ bool
Set item lock state

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

lsNE (int) – lock state = {0 - No lock, 1 - Lock Position, 2 - Lock Position & Content}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetOrientation(reN: Number, iN: Number, oNE: int)→ bool
Set item orientation

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

oNE (int) – orientation = {0 - 0deg, 1 - 90deg, 2 - 180deg, 3 - 270deg}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetWidth(reN: Number, iN: Number, wN: Number)→ bool
Set item’s width attribute

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

wN (Number) – width in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemShowInTableOfContents(reN: Number, iN: Number, sB: bool, inS: str = 'default')→ bool
Show item in table of contents

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

sB (bool) – visible

inS (str) – Optional; item name in table of contents

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemShowInTableOfFigures(reN: Number, iN: Number, sB: bool, inS: str = 'default')→ bool
Show item in table of figures

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

sB (bool) – visible

inS (str) – Optional; item name in table of figures

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemShowInTableOfTables(reN: Number, iN: Number, sB: bool, inS: str = 'default')→ bool
Show item in table of tables

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

sB (bool) – visible

inS (str) – Optional; item name in table of tables

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemTextAutoAdjustHeight(reN: Number, iN: Number, aahB: bool)→ bool
Auto adjust item text’s height

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

aahB (bool) – auto adjust height

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemTextSetText(reN: Number, itN: Number, tcS: str)→ bool
Set item text’s content Can contain HTML content if compliant with Qt’s rich text engine Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html

Parameters
:
reN (Number) – report editor ID

itN (Number) – item text ID

tcS (str) – text content

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorLayoutApplyReferenceLimitation(reN: Number, lN: Number, top: Number, bottom: Number)→ Number
Applies a depth limitation on a logview

Parameters
:
reN (Number) – report editor ID

lN (Number) – layout ID

top (Number) – top reference limitation

bottom (Number) – bottom reference limitation

Returns
:
Success : True, else Exception

Return type
:
Number

TechlogPlot.reportEditorLayoutSetScale(reN: Number, lN: Number, svN: Number)→ bool
Set the layout’s scale

Parameters
:
reN (Number) – report editor ID

lN (Number) – layout ID

svN (Number) – scale value

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorLayoutShowTrackHeaderAtBottom(reN: Number, lN: Number, thvB: bool)→ bool
Show the layout’s track header at bottom

Parameters
:
reN (Number) – report editor ID

lN (Number) – layout ID

thvB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorListItems(reportEditorId: int, itemType: int)→ int
Return the list of item ids in the given report id(be careful some types are equals, example histogram and Generic histogram)

Parameters
:
reportEditorId (int) – report editor ID

itemType (int) – item type = { 0 - Image, 1 - Layout, 2 - Layout Template, 3 - Crossplot, 4 - Crossplot MW, 6 - Crossplot AA, 7 - Crossplot Template, 8 - Histogram, 9 - Histogram MW, 10 - Histogram Template, 11 - Stereonet, 12 - Lineplot, 13 - Header, 14 - Text, 15 - Generic Header, 16 - Generic Layout, 17 - Generic Crossplot, 18 - Generic Histogram, 19 - Generic Stereonet, 20 - Generic Lineplot, 21 - Generic Image, 22 - Generic Text, 23 - Ternary, 24 - Walkout, 25 - Cumulative Dip, 26 - Single Depth, 27 - Generic Ternary, 28 - Generic Walkout, 29 - Generic Cumulative Dip, 30 - Generic Single Depth, 31 - Table of Contents, 32 - Table of Figures, 33 - Tables of Tables, 34 - Crossplot AVA, 35 - Waveform, 36 - Generic Waveform, 37 - Wellbore Centrid Grid, 38 - Generic Wellbore Centrid Grid, 39 - Borehole Section, 40 - Generic Borehole Section, 41 - Cross section profile plot, 42 - Cross section profile plot template, 43 - Generic cross section profile plot, 44 - Axial section profile plot, 45 - Axial section profile plot template, 46 - Generic axial section profile plot}

Returns
:
Success : list of item ids, else Exception

Return type
:
int

TechlogPlot.reportEditorListPages(reportEditorId: int, sectionId: int)→ int
Return the list of page ids in the given report id for a specific section

Parameters
:
reportEditorId (int) – report editor ID

sectionId (int) – section ID

Returns
:
Success : list of page ids, else Exception

Return type
:
int

TechlogPlot.reportEditorListSections(reportEditorId: int)→ int
Return the list of section ids in the given report id

Parameters
:
reportEditorId (int) – report editor ID

Returns
:
Success : list of section ids, else Exception

Return type
:
int

TechlogPlot.reportEditorMoveItem(reN: Number, iN: Number, xN: Number, yN: Number)→ bool
Move an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorMoveItemInMasterPage(reN: Number, iN: Number, xN: Number, yN: Number)→ bool
Move an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorNew(reN: Number)→ bool
Create a new report document

Parameters
:
reN (Number) – report editor ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorOpen(file: str, interactive: bool = True)→ Number
Open a report editor If it is a template, popup dialog asks user to choose well and dataset to apply unless interactive parameter is set to False

Parameters
:
file (str) – file name to open

interactive (bool) – Optional; True to have interactive dialog else False

Returns
:
report editor ID

Return type
:
Number

TechlogPlot.reportEditorPageDuplicateWithID(reN: Number, epN: Number, sN: Number, npS: str = 'Page n')→ Number
Duplicate a page of the report with IDs

Parameters
:
reN (Number) – report editor ID

epN (Number) – source page ID

sN (Number) – destination section ID (section to insert duplicated page)

npS (str) – Optional; duplicated page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorPageDuplicateWithName(reN: Number, esN: str, epN: str, sN: str, npS: str = 'Page n')→ Number
Duplicate a page of the report with names

Parameters
:
reN (Number) – report editor ID

esN (str) – source section name

epN (str) – source page name

sN (str) – destination section name (section to insert duplicated page)

npS (str) – Optional; duplicated page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorPrint(reN: Number)→ bool
Print a report document

Parameters
:
reN (Number) – report editor ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorPrintIntoPDF(reN: Number, fnS: str)→ bool
Print a report document into a PDF

Parameters
:
reN (Number) – report editor ID

fnS (str) – report name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorPrintIntoTiff(reN: Number, fnS: str)→ bool
Print a report document into a Tiff file

Parameters
:
reN (Number) – report editor ID

fnS (str) – report name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorRenameItem(reN: Number, iN: Number, inS: str)→ bool
Rename an item in the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

inS (str) – item name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorRenamePage(reN: Number, pN: Number, pnS: str)→ bool
Rename a page in the report

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

pnS (str) – page name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorRenameSection(reN: Number, sN: Number, snS: str)→ bool
Rename a section in the report

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

snS (str) – section name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSave(reN: Number, rnS: str, fnSE: str)→ bool
Save a report

Parameters
:
reN (Number) – report editor ID

rnS (str) – report name

fnSE (str) – folder name = {‘Project’, ‘User’, ‘Company’, ‘Techlog’}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSaveAsTemplate(reN: Number, rnS: str, fnSE: str)→ bool
Save a report as a template

Parameters
:
reN (Number) – report editor ID

rnS (str) – report name

fnSE (str) – folder name = {‘Project’, ‘User’, ‘Company’, ‘Techlog’}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSectionSetMasterPage(reN: Number, s1N: Number, s2N: Number)→ bool
Set the master page of a section with an existing one

Parameters
:
reN (Number) – report editor ID

s1N (Number) – section ID (masterpage to copy)

s2N (Number) – section ID (masterpage to set)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetHorizontalMargin(reN: Number, sN: Number, mhN: Number)→ bool
Set top and bottom margin of a section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

mhN (Number) – margin height in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetItemGeneric(reN: Number, itN: Number)→ bool
Transform an item to a generic one

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetPaperFormat(reN: Number, fNE: int)→ bool
Set the paper format of the report

Parameters
:
reN (Number) – report editor ID

fNE (int) – paper format = { 0 - A4, 1 - B5, 2 - Letter, 3 - Legal, 4 - Executive, 5 - A0, 6 - A1, 7 - A2, 8 - A3, 9 - A5, 10 - A6, 11 - A7, 12 - A8, 13 - A9, 14 - B0, 15 - B1, 16 - B10, 17 - B2, 18 - B3, 19 - B4, 20 - B6, 21 - B7, 22 - B8, 23 - B9, 24 - C5E, 25 - Comm10E, 26 - DLE, 27 - Folio, 28 - Ledger, 29 - Tabloid, 30 - Custom

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetRelativeItem(reN: Number, iN: Number, piN: Number)→ bool
Set an item relative to another one

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

piN (Number) – parent item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVerticalMargin(reN: Number, sN: Number, mwN: Number)→ bool
Set left and right margin of a section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

mwN (Number) – margin width in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVisibleItem(reN: Number, iN: Number, vB: bool)→ bool
Set visibility of an item in the given editor

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

vB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVisiblePage(reN: Number, pN: Number, vB: bool)→ bool
Set visibility of a page

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

vB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVisibleSection(reN: Number, sN: Number, vB: bool)→ bool
Set visibility of a section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

vB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorShowMargin(reN: Number, mvB: bool)→ bool
Set margin visibility of the report

Parameters
:
reN (Number) – report editor ID

mvB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableAddColumn(reN: Number, tN: Number)→ bool
Add a column to the table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableAddRow(reN: Number, tN: Number)→ bool
Add a row to a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellMerge(reN: Number, tN: Number, firN: Number, ficN: Number, lirN: Number, licN: Number)→ bool
Merge multiple cells with indexes

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

firN (Number) – first row index

ficN (Number) – first column index

lirN (Number) – last row index

licN (Number) – last column index

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetAlignment(reN: Number, iN: Number, riN: Number, ciN: Number, aNE: int)→ bool
Set table cell’s alignment

Parameters
:
reN (Number) – report editor ID

iN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

aNE (int) – alignment = {0 - Left, 1 - Center, 2 - Right, 3 - Justify}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetBackgroundColor(reN: Number, tN: Number, riN: Number, ciN: Number, bcS: str)→ bool
Set table cell’s background color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

bcS (str) – background color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontColor(reN: Number, tN: Number, riN: Number, ciN: Number, fcS: str)→ bool
Set table cell’s font color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fcS (str) – font color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontFamily(reN: Number, tN: Number, riN: Number, ciN: Number, fcS: str)→ bool
Set table cell’s font family Check available families in the report editor toolbar

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fcS (str) – font family

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontSize(reN: Number, tN: Number, riN: Number, ciN: Number, fsN: Number)→ bool
Set table cell’s font size

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fsN (Number) – font size

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontStyle(reN: Number, tN: Number, riN: Number, ciN: Number, fsNE: int, aB: bool)→ bool
Set table cell’s font style

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fsNE (int) – font style = {0 - Bold, 1 - Italic, 2 - Underline}

aB (bool) – apply or remove chosen style

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetHighlightColor(reN: Number, tN: Number, riN: Number, ciN: Number, hcS: str)→ bool
Set table cell’s highlight color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

hcS (str) – highlight color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetOrientation(reN: Number, tN: Number, riN: Number, ciN: Number, oNE: int)→ bool
Set table cell’s text orientation

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

oNE (int) – orientation = {0 - 0deg, 1 - 90deg, 2 - 180deg, 3 - 270deg}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetText(reN: Number, tN: Number, riN: Number, ciN: Number, tcS: str)→ bool
Set table cell’s content Can contain HTML content if compliant with Qt’s rich text engine Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

tcS (str) – text content

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableDeleteColumn(reN: Number, tN: Number, ciN: Number)→ bool
Delete a column in a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

ciN (Number) – column index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableDeleteRow(reN: Number, tN: Number, riN: Number)→ bool
Delete a row in a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableInsertColumn(reN: Number, tN: Number, ciN: Number)→ bool
Insert a column in a table

Parameters
:
reN (Number) – report editor window ID

tN (Number) – report object ID of the table

ciN (Number) – column index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableInsertRow(reN: Number, tN: Number, riN: Number)→ bool
Insert a row in a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableResizeColumn(reN: Number, tN: Number, ciN: Number, chN: Number)→ bool
Resize a column of a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

ciN (Number) – column index index (0 to n - 1)

chN (Number) – column width in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableResizeRow(reN: Number, tN: Number, riN: Number, rhN: Number)→ bool
Resize a row of a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index index (0 to n - 1)

rhN (Number) – row height in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableSetBorder(reN: Number, tN: Number, bsN: Number, bcS: str)→ bool
Set the border of a table Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

bsN (Number) – border size

bcS (str) – border color

Returns
:
Success : True, else Exception

Return type
:
bool

Spectrum
TechlogPlot.spectrumAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumApplyTo(plotID: Number, ds: list)→ list
Apply the spectrum to a data set list

Parameters
:
plotID (Number) – spectrum window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.spectrumCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the spectrum - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new spectrum

Parameters
:
n (str) – spectrum window name

vl (list) – Optional; variable list

f (str) – Optional; filter variable ID

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumDeleteColor(plotID: Number)→ bool
Delete the color variable of a spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumDeleteVariables(plotID: Number)→ bool
Delete the variable of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumDuplicate(plotID: Number)→ Number
Duplicate the spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.spectrumGetIdByName(n: str)→ Number
Find the ID of a name-known spectrum

Parameters
:
n (str) – spectrum name

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the spectrum - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellCreate(vl: list, c: str = '', f: str = '')→ Number
Create a new multi-well spectrum

Parameters
:
vl (list) – variable list

c (str) – Optional; color variable ID

f (str) – Optional; filter variable ID

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumMultiWellDuplicate(plotID: Number)→ Number
Duplicate the spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.spectrumMultiWellGetIdByName(n: str)→ Number
Find the ID of a name-known spectrum

Parameters
:
n (str) – spectrum name

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumMultiWellOpen(n: str, f: str = '')→ bool
Open an existing spectrum

Parameters
:
n (str) – spectrum name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – spectrum window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use spectrumMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a spectrum variable scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a spectrum variable Y axis scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a spectrum variable Y axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

t (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a spectrum variable Y axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

u (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a spectrum variable Y axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

min (Number) – X axis minimum

max (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – new spectrum window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumOpen(n: str, f: str = '')→ bool
Open an existing spectrum

Parameters
:
n (str) – spectrum name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSave(plotID: Number, n: str, f: str = '')→ bool
Save the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – spectrum window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – spectrum window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a spectrum variable scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a spectrum variable axis scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a spectrum variable axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

t (int) – axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a spectrum variable axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

u (str) – axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a spectrum variable axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

min (Number) – axis minimum

max (Number) – axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetColor(plotID: Number, color: str)→ bool
Set the color variable of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetDatum(plotID: Number, lim: bool, min: Number = 0, max: Number = 0)→ bool
Change the reference limitation on spectrum

Parameters
:
plotID (Number) – spectrum window ID

lim (bool) – True for user’s limitation, False else

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – spectrum window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetName(plotID: Number, n: str)→ bool
Change the name of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – new spectrum window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Stereonet
TechlogPlot.stereonetAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the stereonet

Parameters
:
plotID (Number) – stereonet window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetApplyTo(plotID: Number, ds: list)→ list
Apply the stereonet to a data set list

Parameters
:
plotID (Number) – stereonet window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.stereonetCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the stereonet - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – stereonet window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the stereonet

Parameters
:
plotID (Number) – stereonet window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetColorMode(plotID: Number, dm: int)→ bool
Display of the color mode on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dm (int) – color mode{0 = ‘TYPE_PALET’, 1 = ‘TYPE_WELL’, 2 = ‘TYPE_ZONATION’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new stereonet

Parameters
:
n (str) – stereonet window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
stereonet window ID

Return type
:
Number

TechlogPlot.stereonetDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDeleteColor(plotID: Number)→ bool
Delete the color variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDeleteDip(plotID: Number)→ bool
Delete the dip variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityGridX(plotID: Number, dgx: Number)→ bool
Set the density grid X size on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dgx (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityGridY(plotID: Number, dgy: Number)→ bool
Set the density grid Y size on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dgy (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityMethod(plotID: Number, dm: int)→ bool
Display of the density method on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dm (int) – density method {0 = ‘DENSITY_CONTOUR_KAMB’, 1 = ‘DENSITY_CONTOUR_1_PERCENT_AREA’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityOpacityActivate(plotID: Number, doa: bool)→ bool
Set if the density opacity is activate or not on stereonet

Parameters
:
plotID (Number) – stereonet window ID

doa (bool) – 1 = activate, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityOpacityValue(plotID: Number, dov: Number)→ bool
Set the density opacity value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dov (Number) – opacity value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensitySigma(plotID: Number, sig: Number)→ bool
Set the density sigma on stereonet

Parameters
:
plotID (Number) – stereonet window ID

sig (Number) – sigma value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensitySmoothMode(plotID: Number, dsm: int)→ bool
Set the density smooth mode on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dsm (int) – density smooth mode {0 = ‘DENSITY_SMOOTH_NONE’, 1 = ‘DENSITY_SMOOTH_AREA’, 2 = ‘DENSITY_SMOOTH_AREA_SQUARE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityType(plotID: Number, dst: bool = False)→ bool
Display of the stereonet in normal or density type

Parameters
:
plotID (Number) – stereonet window ID

dst (bool) – Optional; 1 = density display, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – stereonet window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDisplayType(plotID: Number, dt: int)→ bool
Change the display type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dt (int) – display type {0 = ‘TYPE_POLAR’, 1 = ‘TYPE_ROSE’, 2 = ‘TYPE_SCHMIDT’, 3 = ‘TYPE_WULFF’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDuplicate(plotID: Number)→ Number
Duplicate the stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.stereonetGetIdByName(n: str)→ Number
Find the ID of a name-known stereonet

Parameters
:
n (str) – stereonet name

Returns
:
stereonet window ID

Return type
:
Number

TechlogPlot.stereonetGetInteractionGreatCircles(plotID: Number)→ list
Get the list of poles for great circles by interaction on a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
list of azimuth,dip tuples

Return type
:
list

TechlogPlot.stereonetGridStep(plotID: Number, gs: Number)→ bool
Change the grid step on stereonet

Parameters
:
plotID (Number) – stereonet window ID

gs (Number) – grid step in [6, 10, 12, 20, 30, 36]

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetGridType(plotID: Number, gt: int)→ bool
Change the grid type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

gt (int) – grid type {0 = ‘NONE’, 1 = ‘SIMPLE’, 2 = ‘FULL’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramAlpha(plotID: Number, a: Number)→ bool
Set the histogram opacity on stereonet

Parameters
:
plotID (Number) – stereonet window ID

a (Number) – alpha

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the histogram color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use stereonetHistogramColor instead) Set the histogram color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramCumulated(plotID: Number, c: bool = True)→ bool
Set if the histogram is cumulated or not on stereonet

Parameters
:
plotID (Number) – stereonet window ID

c (bool) – Optional; 1 = cumulated, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramGraduation(plotID: Number, grad: Number)→ bool
Set the histogram graduation on stereonet

Parameters
:
plotID (Number) – stereonet window ID

grad (Number) – graduation value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramLimitType(plotID: Number, lt: int)→ bool
Set the histogram limit type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

lt (int) – limit type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramMode(plotID: Number, hm: int)→ bool
Set the histogram mode on stereonet

Parameters
:
plotID (Number) – stereonet window ID

hm (int) – histogram mode {0 = ‘HISTO_BY_VARIABLE’, 1 = ‘HISTO_BY_FILTER’, 2 = ‘HISTO_BY_ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramNormalized(plotID: Number, n: bool = True)→ bool
Set if the histogram is normalized or not on stereonet

Parameters
:
plotID (Number) – stereonet window ID

n (bool) – Optional; 1 = normalized, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramUserMax(plotID: Number, uvm: Number)→ bool
Set the histogram user maximum value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

uvm (Number) – maximum value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramUserMin(plotID: Number, uvm: Number)→ bool
Set the histogram user minimum value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

uvm (Number) – minimum value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramUserMinMax(plotID: Number, uvmin: Number, uvmax: Number)→ bool
Set the histogram user minimum and maximum value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

uvmin (Number) – minimum value

uvmax (Number) – maximum value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the stereonet

Parameters
:
plotID (Number) – stereonet window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersAlpha(plotID: Number, a: Number)→ bool
Set the makers opacity on stereonet

Parameters
:
plotID (Number) – stereonet window ID

a (Number) – alpha

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use stereonetMarkersColor instead) Set the makers color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on stereonet

Parameters
:
plotID (Number) – stereonet window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetOpen(n: str, f: str = '')→ bool
Open an existing stereonet

Parameters
:
n (str) – stereonet name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetProjectionHemisphere(plotID: Number, ph: int)→ bool
Change the projection hemisphere on stereonet

Parameters
:
plotID (Number) – stereonet window ID

ph (int) – projection hemisphere {0 = ‘LOWER_HEMISPHERE’, 1 = ‘UPPER_HEMISPHERE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetProjectionType(plotID: Number, pt: int)→ bool
Change the projection type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

pt (int) – projection type {0 = ‘TYPE_LINE’, 1 = ‘TYPE_PLANE’, 2 = ‘TYPE_POLE’, 3 = ‘TYPE_PLANE_AND_POLE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetRoseType(plotID: Number, rt: int)→ bool
Change the rose type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

rt (int) – rose type {0 = ‘ROSE_AZIMUTH’, 1 = ‘ROSE_AZIMUTH_MIRROR’, 2 = ‘ROSE_STRIKE’, 3 = ‘ROSE_NONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSave(plotID: Number, n: str, f: str = '')→ bool
Save the stereonet

Parameters
:
plotID (Number) – stereonet window ID

n (str) – stereonet window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – stereonet window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetColor(plotID: Number, color: str)→ bool
Set the color variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetInteractionGreatCircles(plotID: Number, displayGreatCircles: bool)
display or not great circles by interaction on a stereonet

Parameters
:
plotID (Number) – stereonet window ID

displayGreatCircles (bool) – display great circles by iteration

TechlogPlot.stereonetSetName(plotID: Number, n: str)→ bool
Change the name of the stereonet

Parameters
:
plotID (Number) – stereonet window ID

n (str) – new stereonet plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the stereonet

Parameters
:
plotID (Number) – stereonet window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Ternary Plot
TechlogPlot.ternaryPlotCreate(n: str, xn: str = '', yn: str = '', zn: str = '', c: str = '', f: str = '')→ Number
Create a new ternary plot

Parameters
:
n (str) – ternary plot window name

xn (str) – Optional; bottom axis variable name

yn (str) – Optional; left axis variable name

zn (str) – Optional; right axis variable name

c (str) – Optional; color variable name

f (str) – Optional; filter variable name

Returns
:
ternary plot window ID

Return type
:
Number

TechlogPlot.ternaryPlotDeleteBottomAxe(plotID: Number)→ bool
Delete the bottom axis variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteFilter(plotID: Number)→ bool
Delete the filter of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteLeftAxe(plotID: Number)→ bool
Delete the left axis variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteRightAxe(plotID: Number)→ bool
Delete the right axis variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDuplicate(plotID: Number)→ Number
Duplicate an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.ternaryPlotIDFindByName(n: str)→ Number
Find the ID of a name-known ternary plot

Parameters
:
n (str) – ternary plot window name

Returns
:
ternary plot window ID

Return type
:
Number

TechlogPlot.ternaryPlotOpen(n: str, f: str = '')→ Number
Open an existing ternary plot

Parameters
:
n (str) – ternary plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.ternaryPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

n (str) – ternary plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – ternary plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetBottomAxe(plotID: Number, var: str)→ bool
Set the variable for the bottom axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – bottom axis variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetColor(plotID: Number, var: str)→ bool
Set the variable for the color axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetFilter(plotID: Number, var: str)→ bool
Set the variable for the filter in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – filter variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetLeftAxe(plotID: Number, var: str)→ bool
Set the variable for the left axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – left axis variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetRightAxe(plotID: Number, var: str)→ bool
Set the variable for the right axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – right axis variable name

Returns
:
operation exit status

Return type
:
bool

Vue 3D
TechlogPlot.vue3DCreate()→ Number
Create an 3D vue instance

Returns
:
plot ID

Return type
:
Number

TechlogPlot.vue3DCreateReservoir(plotID: Number, point_list: float, color: int, LineThickness: int)→ bool
Create 3D box to represent reservoir

Parameters
:
plotID (Number) – plot window ID

point_list (float) – list of points in format XYZ

color (int) – color

LineThickness (int) – thickness of line

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.vue3DCreateWBCG(plotID: Number, wellname: str, dataset: str, variables: list, orientation: Number)
Create a new WBCG inside 3DVue

Parameters
:
plotID (Number) – plot window ID

wellname (str) – name of well

dataset (str) – name of dataset

variables (list) – name of variable you want to use

orientation (Number) – 0 - Top of hole, 1 - To the North, 2 - Undefined

TechlogPlot.vue3DOpen(n: str, f: str = None)→ Number
Open an existing 3D vue

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.vue3DRemoveReservoir(plotID: Number)→ bool
Remove reservoir representation

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.vue3DSave(plotID: Number, filename: str)
Save 3DVue

Parameters
:
plotID (Number) – plot window ID

filename (str) – filename (warning override automatic)

Walkout Plot
TechlogPlot.walkoutPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the walkout-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotApplyTo(plotID: Number, ds: list)→ list
Apply the walkout-plot to a data set list

Parameters
:
plotID (Number) – plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.walkoutPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the walkout-plot - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the walkout-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new walkout-plot

Parameters
:
n (str) – plot window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.walkoutPlotDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDeleteDip(plotID: Number)→ bool
Delete the dip variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDuplicate(plotID: Number)→ Number
Duplicate the walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.walkoutPlotGetIdByName(n: str)→ Number
Find the ID of a name-known walkout-plot

Parameters
:
n (str) – plot name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.walkoutPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the walkout-plot

Parameters
:
plotID (Number) – plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotOpen(n: str, f: str = None)→ Number
Open an existing walkout-plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.walkoutPlotOpenCumulativeDipPlot(plotID: Number)→ Number
Open a cumulative dip plot

Parameters
:
plotID (Number) – walkout-plot window ID

Returns
:
cumulative dip-plot window ID

Return type
:
Number

TechlogPlot.walkoutPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the walkout-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetAutomaticAdjustment(plotID: Number, b: bool)→ bool
Set the automatic adjustment on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True for automatic adjustment, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetColor(plotID: Number, color: str)→ bool
Set the color variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetColorMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
Set the color mode on walkout-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetColourMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
[DEPRECATED] (use walkoutPlotSetColorMode instead) Set the color mode on walkout-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetContoursMargin(plotID: Number, i: Number)→ bool
Set the contours margin on walkout-plot

Parameters
:
plotID (Number) – plot window ID

i (Number) – margin in pixels

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDatum(plotID: Number, lim: bool, ymin: Number=0, ymax: Number)→ bool
Change the reference limitation on walkout-plot

Parameters
:
plotID (Number) – plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapLength(plotID: Number, i: Number)→ bool
Set the length of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

i (Number) – length

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapThickness(plotID: Number, f: Number)→ bool
Set the thickness of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – thickness

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapThreshold(plotID: Number, f: Number)→ bool
Set the threshold of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – threshold value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapVisible(plotID: Number, b: bool)→ bool
Set the visibility of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use walkoutPlotSetMarkersColor instead) Set the makers color on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on walkout-plot

Parameters
:
plotID (Number) – plot window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetName(plotID: Number, n: str)→ bool
Change the name of the walkout-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – new plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the border color of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialPosition(plotID: Number, x: Number, y: Number)→ bool
Set the position of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

x (Number) – x position

y (Number) – y position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialSize(plotID: Number, f: Number)→ bool
Set the size of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialVisible(plotID: Number, b: bool)→ bool
Set the visibility of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetVectorMeanByInteractionVisible(plotID: Number, b: bool)→ bool
Set the visibility of the ‘by interaction’ mean vector on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetVectorMeanGlobalVisible(plotID: Number, b: bool)→ bool
Set the visibility of the global mean vector on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetWalkoutType(plotID: Number, type: str = 'AZIMUTH')→ bool
Set the walkout type of the walkout-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; walkout type {‘AZIMUTH’, ‘EAST STRIKE’, ‘WEST STRIKE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the walkout-plot

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Well Trajectory 2D
TechlogPlot.wellTrajectory2DAddSet(plotID: Number, wName: str, setName: str)→ bool
Add a dataset to an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DAddVariable(plotID: Number, wName: str, setName: str, vName: str)→ bool
Add a variable to an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DAddWell(plotID: Number, wName: str)→ bool
Add a well to an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DAddZone(plotID: Number, zone: str)→ bool
Add Zone in a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

zone (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DChangeZonation(plotID: Number, setZonation: str)→ bool
Set the zonation dataset of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setZonation (str) – dataset zonation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DCleanZonation(plotID: Number, setZonation: str)→ bool
Clean the zonation dataset of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setZonation (str) – dataset zonation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DCleanZone(plotID: Number, zone: str)→ bool
Clean Zone in a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

zone (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DCreate(n: str, var1: str = None, var2: str = None, var3: str = None)→ Number
Create a new 2D well trajectory

Parameters
:
n (str) – plot name

var1 (str) – Optional; variable 1 name

var2 (str) – Optional; variable 2 name

var3 (str) – Optional; variable 3 name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.wellTrajectory2DDuplicate(plotID: Number)→ bool
Duplicate the 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DOpen(n: str, f: str = None)→ Number
Open an existing 2D well trajectory

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.wellTrajectory2DRemoveSet(plotID: Number, setName: str)→ bool
Remove a dataset from an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DRemoveVariable(plotID: Number, vName: str)→ bool
Remove a variable from an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DRemoveWell(plotID: Number, wName: str)→ bool
Remove a well from an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSave(plotID: Number, n: str, f: str = '')→ bool
Save the 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetAutoAdjust(plotID: Number, b: bool)→ bool
Set the automatic adjustment of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – automatic adjustment if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetBoreholeCaliper(plotID: Number, wellName: str, setName: str, variableName: str)→ bool
set the caliper variable

Parameters
:
plotID (Number) – plot window ID

wellName (str) – well name

setName (str) – dataset name

variableName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetBoreholeDisplayType(plotID: Number, n: str)→ bool
Set the display mode for borehole radius

Parameters
:
plotID (Number) – plot window ID

n (str) – display mode for the borehole can be {“None”, “Constant radius”, “Caliper”} “Constant radius” displays a borehole around trajectory with a constant radius “Caliper” displays a borehole around the trajectoy from a caliper variableradius

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetBoreholeGlobalRadius(plotID: Number, radius: Number)→ bool
Set the global radius in Inches

Parameters
:
plotID (Number) – plot window ID

radius (Number) – global radius in Inches

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetClassificationObjectColor(plotID: Number, numObject: Number, r: Number, g: Number, b: Number)→ bool
Set the color of one object of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

numObject (Number) – index of the object in the classification

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetClassificationObjectLength(plotID: Number, numObject: Number, length: Number)→ bool
Set the length of one object of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

numObject (Number) – index of the object in the classification

length (Number) – length value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetClassificationObjectVisibility(plotID: Number, numObject: Number, b: bool)→ bool
Set the visiblity of one object of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

numObject (Number) – index of the object in the classification

b (bool) – object visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetGlobalClassificationVisibility(plotID: Number, b: bool)→ bool
Set the global visiblity of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – all object of the classification visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetKeepProportion(plotID: Number, b: bool)→ bool
Set the space proportion of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – keep proportion if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackShift(plotID: Number, gap: Number)→ bool
Set the gap of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

gap (Number) – shift value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackSize(plotID: Number, size: Number)→ bool
Set the size of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackSpacing(plotID: Number, step: Number)→ bool
Set the spacing of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

step (Number) – spacing value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackUnit(plotID: Number, unit: str)→ bool
Set the unit of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

unit (str) – reference track unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackVisible(plotID: Number, b: bool)→ bool
Set the visibility of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – reference track visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryLineOfSection(plotID: Number, f: Number)→ bool
Set the line of section value of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

f (Number) – strike angle value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryType(plotID: Number, type: str = 'PROJECTED')→ bool
Set the type of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {“TOP_VIEW”, “PROJECTED”, “CURTAIN_SECTION”}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryVisible(plotID: Number, b: bool)→ bool
Set the visibility of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – trajectory visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1(plotID: Number, wName: str, setName: str, vName: str)→ bool
Set the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1Amplitude(plotID: Number, amplitude: Number)→ bool
Set the amplitude of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

amplitude (Number) – amplitude value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1AreaFillColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the area fill color of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1AreaFillMode(plotID: Number, mode: str = 'COLOR')→ bool
Set the area fill mode of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘NONE’, ‘PALETTE’, ‘COLOR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1OnTheRight(plotID: Number, onTheRight: bool)→ bool
Put the first variable of a 2D well trajectory on the right of the trajectory or not

Parameters
:
plotID (Number) – plot window ID

onTheRight (bool) – on the right if True, else on the left

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1Set(plotID: Number, setName: str)→ bool
Set the dataset of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1Shift(plotID: Number, gap: Number)→ bool
Set the shift of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

gap (Number) – shift value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2(plotID: Number, wName: str, setName: str, vName: str)→ bool
Set the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2Amplitude(plotID: Number, amplitude: Number)→ bool
Set the amplitude of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

amplitude (Number) – amplitude value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2AreaFillColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the area fill color of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2AreaFillMode(plotID: Number, mode: str = 'COLOR')→ bool
Set the area fill mode of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘NONE’, ‘PALETTE’, ‘COLOR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2OnTheRight(plotID: Number, onTheRight: bool)→ bool
Put the second variable of a 2D well trajectory on the right of the trajectory or not

Parameters
:
plotID (Number) – plot window ID

onTheRight (bool) – on the right if True, else on the left

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2Set(plotID: Number, setName: str)→ bool
Set the dataset of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2Shift(plotID: Number, gap: Number)→ bool
Set the shift of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

gap (Number) – shift value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDip(plotID: Number, wName: str, setName: str, vName: str)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDip instead) Set the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipGlobalColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipGlobalColor instead) Set the global color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipGlobalLength(plotID: Number, length: Number)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipGlobalLength instead) Set the global length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

length (Number) – global length value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipMarker(plotID: Number, marker: str = 'NONE')→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipMarker instead) Set the marker of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

marker (str) – Optional; {‘NONE’, ‘POINTS’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipThickness(plotID: Number, thickness: Number)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipThickness instead) Set the thickness of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipUseDipColor(plotID: Number, b: bool)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipUseDipColor instead) Set the use dip color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip color if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipUseDipLength(plotID: Number, b: bool)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipUseDipLength instead) Set the use dip length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip length if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDip(plotID: Number, wName: str, setName: str, vName: str)→ bool
Set the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipGlobalColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the global color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipGlobalLength(plotID: Number, length: Number)→ bool
Set the global length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

length (Number) – global length value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipMarker(plotID: Number, marker: str = 'NONE')→ bool
Set the marker of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

marker (str) – Optional; {‘NONE’, ‘POINTS’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipUseDipColor(plotID: Number, b: bool)→ bool
Set the use dip color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip color if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipUseDipLength(plotID: Number, b: bool)→ bool
Set the use dip length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip length if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXAxisInverse(plotID: Number, b: bool)→ bool
Set the x axis inverse of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – inversed x axis if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXAxisType(plotID: Number, type: str = 'VAR')→ bool
Set the x axis type of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘USER’, ‘VAR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the x axis user limits of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXYUnit(plotID: Number, unit: str)→ bool
Set the unit of x axis and y axis of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

unit (str) – unit value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetYAxisType(plotID: Number, type: str = 'VAR')→ bool
Set the y axis type of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘USER’, ‘VAR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the y axis user limits of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

Other TechPlot functions
TechlogPlot.boreholeSectionPlotOpen(n: str, f: str = None)→ Number
Open an existing borehole section plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.captureToFile(plotID: Number, captureType: str, outputFormat: str, outputName: str, resolution_dpi: Number = 300)→ bool
Capture the plot into a file

Parameters
:
plotID (Number) – object ID

captureType (str) – ‘quick’, ‘export’

outputFormat (str) – ‘jpg’, ‘png’, ‘bmp’, ‘cgm’, ‘cgm_office’, ‘cgm_non_unicode’, ‘emf’, ‘svg’ or ‘tif’

outputName (str) – file name (saved in ‘Various’ folder by default)

resolution_dpi (Number) – Optional; dpi resolution for export 72, 96, 150 or 300

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.close(plotID: Number, vb: bool = True)→ bool
Close a plot

Parameters
:
plotID (Number) – plot window ID

vb (bool) – Optional; ask to save

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossplotAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plot & sets the color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossplotMultiWellAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0, Regression_Type: int = -1, Explanatory_variable_transformation: int = -1, Explained_variable_transformation: int = -1, Power_Function: bool = False)→ bool
Add a regression in a cross-plot & sets the color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Regression_Type (int) – Optional; Regression type {0 = ‘XonY’, 1 = ‘YonX’, 2 = ‘MA’, 3 = ‘RMAXonY’, 4 = ‘RMAYonX’, 5 = ‘QUANTILE’, 6 = ‘SWANSON’}

Explanatory_variable_transformation (int) – Optional; Explanatory variable transformation {0 = ‘None’, 1 = ‘LOG10’, 2 = ‘EXP’}

Explained_variable_transformation (int) – Optional; Explained variable transformation {0 = ‘None’, 1 = ‘LOG10’, 2 = ‘EXP’}

Power_Function (bool) – Optional; True if you want to enabled the power function

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.enableBenchmark(enable: bool)
start the benchmarking

Parameters
:
enable (bool) – True start, False stop

Returns:

TechlogPlot.logviewInsertUncertaintyConstant(plotID: Number, v: str, lowerBound: Number, upperBound: Number, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
[DEPRECATED] (use logViewInsertUncertaintyConstant instead) Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

lowerBound (Number) – lower limit for uncertainty value

upperBound (Number) – upper limit for uncertainty value

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewInsertUncertaintyVariable(plotID: Number, v: str, variableLowerBound: str, variableUpperBound: str, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
[DEPRECATED] (use logViewInsertUncertaintyVariable instead) Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

variableLowerBound (str) – lower limit for uncertainty values

variableUpperBound (str) – upper limit for uncertainty values

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewSetAxeXMaxUserToHistoArray(plotID: Number, v: str, max: Number)→ bool
[DEPRECATED] (use logViewSetAxeXMaxUserToHistoArray instead) Change the X axis user upper limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewSetAxeXMinUserToHistoArray(plotID: Number, v: str, min: Number)→ bool
[DEPRECATED] (use logViewSetAxeXMinUserToHistoArray instead) Change the X axis user lower limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewSetAxeXTypeToHistoArray(plotID: Number, v: str, xat: int)→ bool
[DEPRECATED] (use logViewSetAxeXTypeToHistoArray instead) Change the X axis limits types for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCreate(n: str, nbl: Number = 1, nbc: Number = 2, t: str = '', f: str = '')→ Number
Open an empty matrix custom window

Parameters
:
n (str) – matrix window name

nbl (Number) – Optional; number of lines of the matrix

nbc (Number) – Optional; number of columns of the matrix

t (str) – Optional; matrix title

f (str) – Optional; folder

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.matrixDashBoardOpen(n: str, f: str = None)→ Number
Open an existing matrix dashboard

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixIDFindByName(n: str)→ Number
Find the ID of a name-known matrix custom-plot

Parameters
:
n (str) – matrix custom-plot name

Returns
:
matrix custom-plot window ID

Return type
:
Number

TechlogPlot.matrixInsertPlot(matrixID: Number, plotID: Number, posx: Number=0, posy: Number=0, n: str)→ bool
Insert a plot in a matrix custom

Parameters
:
matrixID (Number) – matrix window ID

plotID (Number) – plot window ID

posx (Number) – Optional; horizontal position of the plot in the matrix

posy (Number) – Optional; vertical position of the plot in the matrix

n (str) – plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixPCAOpen(n: str, f: str = None)→ Number
Open an existing matrix PCA

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixPlotIDFindByName(matrixID: Number, n: str)→ Number
Find the ID of a name-known plot of a matrix custom-plot

Parameters
:
matrixID (Number) – matrix window ID

n (str) – plot name

Returns
:
matrix custom-plot window ID

Return type
:
Number

TechlogPlot.matrixSPLOMOpen(n: str, f: str = None)→ Number
Open an existing matrix SPLOM

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixSplomOpen(n: str, f: str = None)→ Number
[DEPRECATED] (use matrixSPLOMOpen instead) Open an existing matrix SPLOM

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.objectList(o: str, f: str = '')→ bool
Return the list of the objects

Parameters
:
o (str) – object type (cross-plot,logView)

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.paletteAddOrUpdateDiscreteValue(paletteID: Number, patternID: Number, value: Number, color: str, description: str)→ bool
Add or update a discrete value to the palette.

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

patternID (Number) – pattern ID returned by the plot.patternID function

value (Number) – discrete value

color (str) – hexadecimal color code to be assigned to the discrete value

description (str) – description to be assigned to the discrete value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.paletteDiscreteCreateOrGet(paletteName: str, storageLevel: str)→ Number
Create a discrete values palette at a given storage level or get the palette if this one already exists by its name at the given storage level.

Parameters
:
paletteName (str) – name of the discrete values palette

storageLevel (str) – Techlog storage level where the palette is created (‘project’, ‘company’, ‘user’)

Returns
:
returns a palette ID if the palette has been created or already exists by its name at the given storage level (returns None if the palette failed to be created)

Return type
:
Number

TechlogPlot.paletteDiscreteID(paletteName: str, storageLevel: str)→ Number
Gets the palette by its name at the given storage level.

Parameters
:
paletteName (str) – name of the discrete values palette

storageLevel (str) – Techlog storage level where the palette is created (‘project’, ‘company’, ‘user’)

Returns
:
returns a palette ID if the palette already exists by its name at the given storage level (returns None if the palette does not exist)

Return type
:
Number

TechlogPlot.paletteDiscreteValueGetColor(paletteID: Number, value: Number)→ str
Gets a color assigned to a palette discrete value

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

value (Number) – discrete value for which you want to get the color

Returns
:
returns an hexadecimal color code (returns None if no color assigned to the discrete value)

Return type
:
str

TechlogPlot.paletteDiscreteValueGetPatternName(paletteID: Number, value: Number)→ str
Gets a pattern name assigned to a palette discrete value

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

value (Number) – discrete value for which you want to get the pattern name

Returns
:
returns the pattern name with the format classification__patternName (returns None if no pattern assigned to the discrete value)

Return type
:
str

TechlogPlot.paletteDiscreteValueGetPatternStorageLevel(paletteID: Number, value: Number)→ str
Gets a pattern name assigned to a palette discrete value

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

value (Number) – discrete value for which you want to get the pattern storage level

Returns
:
returns the pattern storage level (returns None if no pattern assigned to the discrete value)

Return type
:
str

TechlogPlot.patternID(patternClassification: str, patternName: str, patternStorageLevel: str)→ Number
Gets the patternID from a pattern name at a given storage level.

Parameters
:
patternClassification (str) – classification of the pattern to be assigned to the discrete value

patternName (str) – name of the pattern to be assigned to the discrete value

patternStorageLevel (str) – Techlog storage level of the pattern (‘techlog’, ‘project’, ‘company’, ‘user’)

Returns
:
returns a pattern ID if the pattern exists by its name at the given storage level (returns None if the pattern doesn’t exist)

Return type
:
Number

TechlogPlot.piePlotOpen(n: str, f: str = '')→ Number
Open an existing pie plot

Parameters
:
n (str) – pie plot name

f (str) – Optional; folder

Returns
:
pie plot window ID

Return type
:
Number

TechlogPlot.resizeWidget(plotID: Number, width: Number = 1024, height: Number = 768)→ bool
Resize a widget

Parameters
:
plotID (Number) – window ID

width (Number) – Optional; window new Width

height (Number) – Optional; window new Height

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.saveAsImage(plotID: Number, n: str, f: str, ff: str = '', mustCut: bool = False)→ bool
Save a cross-plot, an histogram or a logview as image

Parameters
:
plotID (Number) – plot window ID

n (str) – name

f (str) – format

ff (str) – Optional; folder

mustCut (bool) – Optional; mustCut

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.setBenchmarkContext(context: str)
set benchmark context value

Parameters
:
context (str) – name

Returns:

TechlogPlot.setBenchmarkIteration(iteration: Number)
set benchmark context value

Parameters
:
iteration (Number) – number

Returns:

TechlogPlot.setLegendVisible(ID: Number, isLegendVisible: bool)
Display or hide the legend of the plot.

Parameters
:
ID (Number) – plot widget ID

isLegendVisible (bool) – True to display the legend of the plot, else False.

TechlogPlot.setPaletteToWidget(plotID: Number, palName: str)→ bool
Change a palette of an existing widget

Parameters
:
plotID (Number) – plot window ID

palName (str) – palette name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.starPlotOpen(n: str, f: str = '')→ bool
Open an existing star plot

Parameters
:
n (str) – star plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.waveformDuplicate(plotId: Number)→ Number
Duplicate an existing waveform

Parameters
:
plotId (Number) – plot ID

Returns
:
plot ID

Return type
:
Number

TechlogPlot.waveformOpen(n: str, f: str = None)→ Number
Open an existing waveform

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.waveformSpectrumOpen(plotID: Number)→ Number
Open a spectrum plot from a waveform

Parameters
:
plotID (Number) – waveform plot window ID

Returns
:
plot ID

Return type
:
Number

TechlogPlot.wellboreCentricGridOpen(n: str, f: str = None)→ Number
Open an existing wellbore centric grid plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number
