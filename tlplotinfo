# Copyright (c) 2023 SLB
# SLB Confidential

# /!\ WARNING: This file has been generated by tl_module_gen.
# /!\ ANY CHANGE TO THIS FILE WILL BE ERASED !!!
# /!\ See PythonDevLib/tl_module_gen for more informations.

import remote_techlog as _rt


def _client_service():
    """Returns the client service, or raise an error.
    """

    if _rt._client_service:
        return _rt._client_service
    raise RuntimeError("Not connected to Techlog.")


___BHASetAlignment_id = None
def __BHASetAlignment(*args, **kwargs):
    """
    __BHASetAlignment()
    
    binding only available for test
    """
    global ___BHASetAlignment_id
    if ___BHASetAlignment_id is None:
        ___BHASetAlignment_id = _client_service().register_static_object(('TechlogPlot', '__BHASetAlignment'))
    return _client_service().call(___BHASetAlignment_id, *args, **kwargs)


___BHASetFixedDepth_id = None
def __BHASetFixedDepth(*args, **kwargs):
    """
    __BHASetFixedDepth()
    
    binding only available for test
    """
    global ___BHASetFixedDepth_id
    if ___BHASetFixedDepth_id is None:
        ___BHASetFixedDepth_id = _client_service().register_static_object(('TechlogPlot', '__BHASetFixedDepth'))
    return _client_service().call(___BHASetFixedDepth_id, *args, **kwargs)


___BHASetIsFixedDepth_id = None
def __BHASetIsFixedDepth(*args, **kwargs):
    """
    __BHASetIsFixedDepth()
    
    binding only available for test
    """
    global ___BHASetIsFixedDepth_id
    if ___BHASetIsFixedDepth_id is None:
        ___BHASetIsFixedDepth_id = _client_service().register_static_object(('TechlogPlot', '__BHASetIsFixedDepth'))
    return _client_service().call(___BHASetIsFixedDepth_id, *args, **kwargs)


___BHASetShowSensorLabels_id = None
def __BHASetShowSensorLabels(*args, **kwargs):
    """
    __BHASetShowSensorLabels()
    
    binding only available for test
    """
    global ___BHASetShowSensorLabels_id
    if ___BHASetShowSensorLabels_id is None:
        ___BHASetShowSensorLabels_id = _client_service().register_static_object(('TechlogPlot', '__BHASetShowSensorLabels'))
    return _client_service().call(___BHASetShowSensorLabels_id, *args, **kwargs)


___BHASetShowStabilizerLabels_id = None
def __BHASetShowStabilizerLabels(*args, **kwargs):
    """
    __BHASetShowStabilizerLabels()
    
    binding only available for test
    """
    global ___BHASetShowStabilizerLabels_id
    if ___BHASetShowStabilizerLabels_id is None:
        ___BHASetShowStabilizerLabels_id = _client_service().register_static_object(('TechlogPlot', '__BHASetShowStabilizerLabels'))
    return _client_service().call(___BHASetShowStabilizerLabels_id, *args, **kwargs)


___CDOSetContent_id = None
def __CDOSetContent(*args, **kwargs):
    """
    __CDOSetContent()
    """
    global ___CDOSetContent_id
    if ___CDOSetContent_id is None:
        ___CDOSetContent_id = _client_service().register_static_object(('TechlogPlot', '__CDOSetContent'))
    return _client_service().call(___CDOSetContent_id, *args, **kwargs)


___VDCLinkTest_id = None
def __VDCLinkTest(*args, **kwargs):
    """
    __VDCLinkTest()
    
    binding only available for test
    """
    global ___VDCLinkTest_id
    if ___VDCLinkTest_id is None:
        ___VDCLinkTest_id = _client_service().register_static_object(('TechlogPlot', '__VDCLinkTest'))
    return _client_service().call(___VDCLinkTest_id, *args, **kwargs)


___WBGEConvertReferenceUnit_id = None
def __WBGEConvertReferenceUnit(*args, **kwargs):
    """
    __WBGEConvertReferenceUnit()
    
    binding only available for test
    """
    global ___WBGEConvertReferenceUnit_id
    if ___WBGEConvertReferenceUnit_id is None:
        ___WBGEConvertReferenceUnit_id = _client_service().register_static_object(('TechlogPlot', '__WBGEConvertReferenceUnit'))
    return _client_service().call(___WBGEConvertReferenceUnit_id, *args, **kwargs)


___WBGECreate_id = None
def __WBGECreate(*args, **kwargs):
    """
    __WBGECreate()
    
    binding only available for test
    """
    global ___WBGECreate_id
    if ___WBGECreate_id is None:
        ___WBGECreate_id = _client_service().register_static_object(('TechlogPlot', '__WBGECreate'))
    return _client_service().call(___WBGECreate_id, *args, **kwargs)


___WBGEDecode_id = None
def __WBGEDecode(*args, **kwargs):
    """
    __WBGEDecode()
    
    binding only available for test
    """
    global ___WBGEDecode_id
    if ___WBGEDecode_id is None:
        ___WBGEDecode_id = _client_service().register_static_object(('TechlogPlot', '__WBGEDecode'))
    return _client_service().call(___WBGEDecode_id, *args, **kwargs)


___WBGEDuplicate_id = None
def __WBGEDuplicate(*args, **kwargs):
    """
    __WBGEDuplicate()
    
    binding only available for test
    """
    global ___WBGEDuplicate_id
    if ___WBGEDuplicate_id is None:
        ___WBGEDuplicate_id = _client_service().register_static_object(('TechlogPlot', '__WBGEDuplicate'))
    return _client_service().call(___WBGEDuplicate_id, *args, **kwargs)


___WBGEEncode_id = None
def __WBGEEncode(*args, **kwargs):
    """
    __WBGEEncode()
    
    binding only available for test
    """
    global ___WBGEEncode_id
    if ___WBGEEncode_id is None:
        ___WBGEEncode_id = _client_service().register_static_object(('TechlogPlot', '__WBGEEncode'))
    return _client_service().call(___WBGEEncode_id, *args, **kwargs)


___WBGEGetDiameterUnit_id = None
def __WBGEGetDiameterUnit(*args, **kwargs):
    """
    __WBGEGetDiameterUnit()
    
    binding only available for test
    """
    global ___WBGEGetDiameterUnit_id
    if ___WBGEGetDiameterUnit_id is None:
        ___WBGEGetDiameterUnit_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetDiameterUnit'))
    return _client_service().call(___WBGEGetDiameterUnit_id, *args, **kwargs)


___WBGEGetItemComments_id = None
def __WBGEGetItemComments(*args, **kwargs):
    """
    __WBGEGetItemComments()
    
    binding only available for test
    """
    global ___WBGEGetItemComments_id
    if ___WBGEGetItemComments_id is None:
        ___WBGEGetItemComments_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetItemComments'))
    return _client_service().call(___WBGEGetItemComments_id, *args, **kwargs)


___WBGEGetItemNumber_id = None
def __WBGEGetItemNumber(*args, **kwargs):
    """
    __WBGEGetItemNumber()
    
    binding only available for test
    """
    global ___WBGEGetItemNumber_id
    if ___WBGEGetItemNumber_id is None:
        ___WBGEGetItemNumber_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetItemNumber'))
    return _client_service().call(___WBGEGetItemNumber_id, *args, **kwargs)


___WBGEGetItemStartTimes_id = None
def __WBGEGetItemStartTimes(*args, **kwargs):
    """
    __WBGEGetItemStartTimes()
    
    binding only available for test
    """
    global ___WBGEGetItemStartTimes_id
    if ___WBGEGetItemStartTimes_id is None:
        ___WBGEGetItemStartTimes_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetItemStartTimes'))
    return _client_service().call(___WBGEGetItemStartTimes_id, *args, **kwargs)


___WBGEGetItemStopTimes_id = None
def __WBGEGetItemStopTimes(*args, **kwargs):
    """
    __WBGEGetItemStopTimes()
    
    binding only available for test
    """
    global ___WBGEGetItemStopTimes_id
    if ___WBGEGetItemStopTimes_id is None:
        ___WBGEGetItemStopTimes_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetItemStopTimes'))
    return _client_service().call(___WBGEGetItemStopTimes_id, *args, **kwargs)


___WBGEGetName_id = None
def __WBGEGetName(*args, **kwargs):
    """
    __WBGEGetName()
    
    binding only available for test
    """
    global ___WBGEGetName_id
    if ___WBGEGetName_id is None:
        ___WBGEGetName_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetName'))
    return _client_service().call(___WBGEGetName_id, *args, **kwargs)


___WBGEGetReferenceSpace_id = None
def __WBGEGetReferenceSpace(*args, **kwargs):
    """
    __WBGEGetReferenceSpace()
    
    binding only available for test
    """
    global ___WBGEGetReferenceSpace_id
    if ___WBGEGetReferenceSpace_id is None:
        ___WBGEGetReferenceSpace_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetReferenceSpace'))
    return _client_service().call(___WBGEGetReferenceSpace_id, *args, **kwargs)


___WBGEGetReferenceUnit_id = None
def __WBGEGetReferenceUnit(*args, **kwargs):
    """
    __WBGEGetReferenceUnit()
    
    binding only available for test
    """
    global ___WBGEGetReferenceUnit_id
    if ___WBGEGetReferenceUnit_id is None:
        ___WBGEGetReferenceUnit_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetReferenceUnit'))
    return _client_service().call(___WBGEGetReferenceUnit_id, *args, **kwargs)


___WBGEGetWellName_id = None
def __WBGEGetWellName(*args, **kwargs):
    """
    __WBGEGetWellName()
    
    binding only available for test
    """
    global ___WBGEGetWellName_id
    if ___WBGEGetWellName_id is None:
        ___WBGEGetWellName_id = _client_service().register_static_object(('TechlogPlot', '__WBGEGetWellName'))
    return _client_service().call(___WBGEGetWellName_id, *args, **kwargs)


___WBGEIsValid_id = None
def __WBGEIsValid(*args, **kwargs):
    """
    __WBGEIsValid()
    
    binding only available for test
    """
    global ___WBGEIsValid_id
    if ___WBGEIsValid_id is None:
        ___WBGEIsValid_id = _client_service().register_static_object(('TechlogPlot', '__WBGEIsValid'))
    return _client_service().call(___WBGEIsValid_id, *args, **kwargs)


___WBGESave_id = None
def __WBGESave(*args, **kwargs):
    """
    __WBGESave()
    
    binding only available for test
    """
    global ___WBGESave_id
    if ___WBGESave_id is None:
        ___WBGESave_id = _client_service().register_static_object(('TechlogPlot', '__WBGESave'))
    return _client_service().call(___WBGESave_id, *args, **kwargs)


___WBGESetAnnotationFont_id = None
def __WBGESetAnnotationFont(*args, **kwargs):
    """
    __WBGESetAnnotationFont()
    
    binding only available for test
    """
    global ___WBGESetAnnotationFont_id
    if ___WBGESetAnnotationFont_id is None:
        ___WBGESetAnnotationFont_id = _client_service().register_static_object(('TechlogPlot', '__WBGESetAnnotationFont'))
    return _client_service().call(___WBGESetAnnotationFont_id, *args, **kwargs)


___WBGESetAnnotationLabelType_id = None
def __WBGESetAnnotationLabelType(*args, **kwargs):
    """
    __WBGESetAnnotationLabelType()
    
    binding only available for test
    """
    global ___WBGESetAnnotationLabelType_id
    if ___WBGESetAnnotationLabelType_id is None:
        ___WBGESetAnnotationLabelType_id = _client_service().register_static_object(('TechlogPlot', '__WBGESetAnnotationLabelType'))
    return _client_service().call(___WBGESetAnnotationLabelType_id, *args, **kwargs)


___WBGESetAnnotationTrackVisible_id = None
def __WBGESetAnnotationTrackVisible(*args, **kwargs):
    """
    __WBGESetAnnotationTrackVisible()
    
    binding only available for test
    """
    global ___WBGESetAnnotationTrackVisible_id
    if ___WBGESetAnnotationTrackVisible_id is None:
        ___WBGESetAnnotationTrackVisible_id = _client_service().register_static_object(('TechlogPlot', '__WBGESetAnnotationTrackVisible'))
    return _client_service().call(___WBGESetAnnotationTrackVisible_id, *args, **kwargs)


___WBGESetData_id = None
def __WBGESetData(*args, **kwargs):
    """
    __WBGESetData()
    
    binding only available for test
    """
    global ___WBGESetData_id
    if ___WBGESetData_id is None:
        ___WBGESetData_id = _client_service().register_static_object(('TechlogPlot', '__WBGESetData'))
    return _client_service().call(___WBGESetData_id, *args, **kwargs)


___WBGESetLithology_id = None
def __WBGESetLithology(*args, **kwargs):
    """
    __WBGESetLithology()
    
    binding only available for test
    """
    global ___WBGESetLithology_id
    if ___WBGESetLithology_id is None:
        ___WBGESetLithology_id = _client_service().register_static_object(('TechlogPlot', '__WBGESetLithology'))
    return _client_service().call(___WBGESetLithology_id, *args, **kwargs)


___WBGESetZonation_id = None
def __WBGESetZonation(*args, **kwargs):
    """
    __WBGESetZonation()
    
    binding only available for test
    """
    global ___WBGESetZonation_id
    if ___WBGESetZonation_id is None:
        ___WBGESetZonation_id = _client_service().register_static_object(('TechlogPlot', '__WBGESetZonation'))
    return _client_service().call(___WBGESetZonation_id, *args, **kwargs)


___adjustViewer_id = None
def __adjustViewer(*args, **kwargs):
    """
    __adjustViewer(plotID: Number, xMin: Number, xMax: Number, yMin: Number, yMax: Number) -> bool
    
    Set the view port of the plot
    
    Args:
        plotID (Number): window ID
        xMin (Number): minimum x displayed on plot in plot X unit
        xMax (Number): maximum x displayed on plot in plot X unit
        yMin (Number): minimum y displayed on plot in plot Y unit
        yMax (Number): maximum y displayed on plot in plot Y unit
    
    Returns:
        bool: operation exit status
    """
    global ___adjustViewer_id
    if ___adjustViewer_id is None:
        ___adjustViewer_id = _client_service().register_static_object(('TechlogPlot', '__adjustViewer'))
    return _client_service().call(___adjustViewer_id, *args, **kwargs)


___axialSectionPlotApplyTo_id = None
def __axialSectionPlotApplyTo(*args, **kwargs):
    """
    __axialSectionPlotApplyTo(wid: int, ds: list) -> list
    
    Internal unsupported private binding!
    Apply the axial section plot to a dataset list
    
    Args:
        wid (int): plot widget id
        ds (list): list of dataset names with format 'wellName.datasetName'
    
    Returns:
        list: list of created plots widget ids
    """
    global ___axialSectionPlotApplyTo_id
    if ___axialSectionPlotApplyTo_id is None:
        ___axialSectionPlotApplyTo_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotApplyTo'))
    return _client_service().call(___axialSectionPlotApplyTo_id, *args, **kwargs)


___axialSectionPlotCreate_id = None
def __axialSectionPlotCreate(*args, **kwargs):
    """
    __axialSectionPlotCreate(name: str, devname: str='', diamname: str='', profilenames: list=[], parentId: int=-1) -> int
    
    Internal unsupported private binding!
    Create a new axial section plot
    
    Args:
        name (str): axial section plot window name
        devname (str): Optional; deviation variable name
        diamname (str): Optional; diameter variable name
        profilenames (list): Optional; profile variable names
        parentId (int): Optional; if provided, the new plot is inserted into the identified parent widget
    
    Returns:
        int: identifier of the newly created widget
    """
    global ___axialSectionPlotCreate_id
    if ___axialSectionPlotCreate_id is None:
        ___axialSectionPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotCreate'))
    return _client_service().call(___axialSectionPlotCreate_id, *args, **kwargs)


___axialSectionPlotDeleteDeviation_id = None
def __axialSectionPlotDeleteDeviation(*args, **kwargs):
    """
    __axialSectionPlotDeleteDeviation(wid: int, varname: str) -> bool
    
    Internal unsupported private binding!
    Delete the deviation variable of an axial section plot
    
    Args:
        wid (int): plot widget id
        varname (str): deviation variable name
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotDeleteDeviation_id
    if ___axialSectionPlotDeleteDeviation_id is None:
        ___axialSectionPlotDeleteDeviation_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotDeleteDeviation'))
    return _client_service().call(___axialSectionPlotDeleteDeviation_id, *args, **kwargs)


___axialSectionPlotDeleteDiameter_id = None
def __axialSectionPlotDeleteDiameter(*args, **kwargs):
    """
    __axialSectionPlotDeleteDiameter(wid: int, varname: str) -> bool
    
    Internal unsupported private binding!
    Delete the diameter variable of an axial section plot
    
    Args:
        wid (int): plot widget id
        varname (str): diameter variable name
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotDeleteDiameter_id
    if ___axialSectionPlotDeleteDiameter_id is None:
        ___axialSectionPlotDeleteDiameter_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotDeleteDiameter'))
    return _client_service().call(___axialSectionPlotDeleteDiameter_id, *args, **kwargs)


___axialSectionPlotDeleteProfileList_id = None
def __axialSectionPlotDeleteProfileList(*args, **kwargs):
    """
    __axialSectionPlotDeleteProfileList(wid: int, varnames: list) -> bool
    
    Internal unsupported private binding!
    Delete the profile variables of an axial section plot
    
    Args:
        wid (int): plot widget id
        varnames (list): list of profile variable names
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotDeleteProfileList_id
    if ___axialSectionPlotDeleteProfileList_id is None:
        ___axialSectionPlotDeleteProfileList_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotDeleteProfileList'))
    return _client_service().call(___axialSectionPlotDeleteProfileList_id, *args, **kwargs)


___axialSectionPlotOpen_id = None
def __axialSectionPlotOpen(*args, **kwargs):
    """
    __axialSectionPlotOpen(name: str, level: str='Project') -> int
    
    Internal unsupported private binding!
    Open an existing axial section plot
    
    Args:
        name (str): name of the axial section plot
        level (str): Optional; object level: {'Techlog', 'Company', 'Project', 'User'}
    
    Returns:
        int: identifier of the opened widget
    """
    global ___axialSectionPlotOpen_id
    if ___axialSectionPlotOpen_id is None:
        ___axialSectionPlotOpen_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotOpen'))
    return _client_service().call(___axialSectionPlotOpen_id, *args, **kwargs)


___axialSectionPlotSave_id = None
def __axialSectionPlotSave(*args, **kwargs):
    """
    __axialSectionPlotSave(wid: int, name: str, level: str='Project') -> bool
    
    Internal unsupported private binding!
    Save an axial section plot
    
    Args:
        wid (int): plot widget id
        name (str): axial section plot name
        level (str): Optional; object level: {'Techlog', 'Company', 'Project', 'User'}
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSave_id
    if ___axialSectionPlotSave_id is None:
        ___axialSectionPlotSave_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSave'))
    return _client_service().call(___axialSectionPlotSave_id, *args, **kwargs)


___axialSectionPlotSetConstantDeviation_id = None
def __axialSectionPlotSetConstantDeviation(*args, **kwargs):
    """
    __axialSectionPlotSetConstantDeviation(wid: int, value: float, unit: str) -> bool
    
    Internal unsupported private binding!
    Set the constant deviation of the axial section plot
    
    Args:
        wid (int): plot widget id
        value (float): deviation value [0°; 360°[
        unit (str): deviation unit (compatible with degree)
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSetConstantDeviation_id
    if ___axialSectionPlotSetConstantDeviation_id is None:
        ___axialSectionPlotSetConstantDeviation_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetConstantDeviation'))
    return _client_service().call(___axialSectionPlotSetConstantDeviation_id, *args, **kwargs)


___axialSectionPlotSetCurrentReferenceIndex_id = None
def __axialSectionPlotSetCurrentReferenceIndex(*args, **kwargs):
    """
    __axialSectionPlotSetCurrentReferenceIndex(wid: int, index: int) -> bool
    
    Internal unsupported private binding!
    Set the current reference index of an axial section plot
    
    Args:
        wid (int): plot widget id
        index (int): reference index
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSetCurrentReferenceIndex_id
    if ___axialSectionPlotSetCurrentReferenceIndex_id is None:
        ___axialSectionPlotSetCurrentReferenceIndex_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetCurrentReferenceIndex'))
    return _client_service().call(___axialSectionPlotSetCurrentReferenceIndex_id, *args, **kwargs)


___axialSectionPlotSetDeviation_id = None
def __axialSectionPlotSetDeviation(*args, **kwargs):
    """
    __axialSectionPlotSetDeviation(wid: int, varname: str) -> bool
    
    Internal unsupported private binding!
    Set the deviation variable of an axial section plot
    
    Args:
        wid (int): plot widget id
        varname (str): deviation variable name
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSetDeviation_id
    if ___axialSectionPlotSetDeviation_id is None:
        ___axialSectionPlotSetDeviation_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetDeviation'))
    return _client_service().call(___axialSectionPlotSetDeviation_id, *args, **kwargs)


___axialSectionPlotSetDiameter_id = None
def __axialSectionPlotSetDiameter(*args, **kwargs):
    """
    __axialSectionPlotSetDiameter(wid: int, varname: str) -> bool
    
    Internal unsupported private binding!
    Set the diameter variable of an axial section plot
    
    Args:
        wid (int): plot widget id
        varname (str): diameter variable name
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSetDiameter_id
    if ___axialSectionPlotSetDiameter_id is None:
        ___axialSectionPlotSetDiameter_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetDiameter'))
    return _client_service().call(___axialSectionPlotSetDiameter_id, *args, **kwargs)


___axialSectionPlotSetDisplayMode_id = None
def __axialSectionPlotSetDisplayMode(*args, **kwargs):
    """
    __axialSectionPlotSetDisplayMode(wid: int, mode: str) -> bool
    
    Internal unsupported private binding!
    Set the display mode of the axial section plot.
    
    Args:
        wid (int): plot widget id
        mode (str): display mode: {'bars', 'lines'}
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSetDisplayMode_id
    if ___axialSectionPlotSetDisplayMode_id is None:
        ___axialSectionPlotSetDisplayMode_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetDisplayMode'))
    return _client_service().call(___axialSectionPlotSetDisplayMode_id, *args, **kwargs)


___axialSectionPlotSetProfileList_id = None
def __axialSectionPlotSetProfileList(*args, **kwargs):
    """
    __axialSectionPlotSetProfileList(wid: int, varnames: list) -> bool
    
    Internal unsupported private binding!
    Set the profile variables of an axial section plot
    
    Args:
        wid (int): plot widget id
        varnames (list): list of profile variable names
    
    Returns:
        bool: operation exit status
    """
    global ___axialSectionPlotSetProfileList_id
    if ___axialSectionPlotSetProfileList_id is None:
        ___axialSectionPlotSetProfileList_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetProfileList'))
    return _client_service().call(___axialSectionPlotSetProfileList_id, *args, **kwargs)


___axialSectionPlotSetProfilesLimits_id = None
def __axialSectionPlotSetProfilesLimits(*args, **kwargs):
    """
    __axialSectionPlotSetProfilesLimits(wid: int, type: str, min: float=MissingValue, max: float=MissingValue)
    
    Internal unsupported private binding!
    Set profiles axis display limits
    Both extrema are required for 'Variable' type ; they must not be provided for 'User' type.
    
    Args:
        wid (int): plot widget id
        type (str): limit type: { 'Variable', 'User' }
        min (float): Optional; profiles axis minimum value if type is 'User'
        max (float): Optional; profiles axis maximum value if type is 'User'
    """
    global ___axialSectionPlotSetProfilesLimits_id
    if ___axialSectionPlotSetProfilesLimits_id is None:
        ___axialSectionPlotSetProfilesLimits_id = _client_service().register_static_object(('TechlogPlot', '__axialSectionPlotSetProfilesLimits'))
    return _client_service().call(___axialSectionPlotSetProfilesLimits_id, *args, **kwargs)


___baseMapAddChartInTest_id = None
def __baseMapAddChartInTest(*args, **kwargs):
    """
    __baseMapAddChartInTest()
    
    binding only available for test
    """
    global ___baseMapAddChartInTest_id
    if ___baseMapAddChartInTest_id is None:
        ___baseMapAddChartInTest_id = _client_service().register_static_object(('TechlogPlot', '__baseMapAddChartInTest'))
    return _client_service().call(___baseMapAddChartInTest_id, *args, **kwargs)


___boreholeSectionPlotCreate_id = None
def __boreholeSectionPlotCreate(*args, **kwargs):
    """
    __boreholeSectionPlotCreate(n: str) -> Number
    
    Create a new borehole section plot
    
    Args:
        n (str): plot name
    
    Returns:
        Number: plot ID else exception
    """
    global ___boreholeSectionPlotCreate_id
    if ___boreholeSectionPlotCreate_id is None:
        ___boreholeSectionPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__boreholeSectionPlotCreate'))
    return _client_service().call(___boreholeSectionPlotCreate_id, *args, **kwargs)


___boreholeSectionPlotSave_id = None
def __boreholeSectionPlotSave(*args, **kwargs):
    """
    __boreholeSectionPlotSave(ID: Number, name: str, folder: str=None) -> bool
    
    Save a borehole section plot
    
    Args:
        ID (Number): Borehole section plot widget ID
        name (str): file name
        folder (str): Optional; Borehole section plot folder
    
    Returns:
        bool: True if operation is done else exception (RuntimeError or ValueError)
    """
    global ___boreholeSectionPlotSave_id
    if ___boreholeSectionPlotSave_id is None:
        ___boreholeSectionPlotSave_id = _client_service().register_static_object(('TechlogPlot', '__boreholeSectionPlotSave'))
    return _client_service().call(___boreholeSectionPlotSave_id, *args, **kwargs)


___boreholeSectionPlotSaveMinMaxDiametersAndAzimuths_id = None
def __boreholeSectionPlotSaveMinMaxDiametersAndAzimuths(*args, **kwargs):
    """
    __boreholeSectionPlotSaveMinMaxDiametersAndAzimuths(ID: Number) -> bool
    
    Compute and save min max diameters and azimuths variables to the dataset
    
    Args:
        ID (Number): Borehole section plot widget ID
    
    Returns:
        bool: True if operation is done else exception
    """
    global ___boreholeSectionPlotSaveMinMaxDiametersAndAzimuths_id
    if ___boreholeSectionPlotSaveMinMaxDiametersAndAzimuths_id is None:
        ___boreholeSectionPlotSaveMinMaxDiametersAndAzimuths_id = _client_service().register_static_object(('TechlogPlot', '__boreholeSectionPlotSaveMinMaxDiametersAndAzimuths'))
    return _client_service().call(___boreholeSectionPlotSaveMinMaxDiametersAndAzimuths_id, *args, **kwargs)


___boreholeSectionPlotSetData_id = None
def __boreholeSectionPlotSetData(*args, **kwargs):
    """
    __boreholeSectionPlotSetData(ID: Number, well_name: str, dataset: str, radius_list: list=None, PadAAzimuthName: str=None, RelativeBearingName: str=None, IsUseAsCaliper: bool=False, IsArray: bool=False) -> bool
    
    Set the data to display in the borehole section plot
    usage ex : boreholeSectionPlotSetData(plotID, 'Well2', 'LQC', {'RD1_PPC1', 'RD1_PPC2', 'RD2_PPC1', 'RD2_PPC2', 'RD3_PPC1', 'RD3_PPC2', 'RD4_PPC1', 'RD4_PPC2'}, NULL, NULL, False, True)Inputs:
        ID (Number): Borehole section plot widget ID
        well_name (str): data well name
        dataset (str): dataset name
        radius_list (list): Optional; List of radius to plot
        PadAAzimuthName (str): Optional; Pad AAzimuth Name
        RelativeBearingName (str): Optional; Relative Bearing Name
        IsUseAsCaliper (bool): Optional; PadAAzimuthName
        IsArray (bool): Optional; PadAAzimuthName
    
    Returns:
        bool: True if operation is done else exception (RuntimeError or ValueError)
    """
    global ___boreholeSectionPlotSetData_id
    if ___boreholeSectionPlotSetData_id is None:
        ___boreholeSectionPlotSetData_id = _client_service().register_static_object(('TechlogPlot', '__boreholeSectionPlotSetData'))
    return _client_service().call(___boreholeSectionPlotSetData_id, *args, **kwargs)


___boxPlotCheckPlots_id = None
def __boxPlotCheckPlots(*args, **kwargs):
    """
    __boxPlotCheckPlots()
    
    binding only available for test
    """
    global ___boxPlotCheckPlots_id
    if ___boxPlotCheckPlots_id is None:
        ___boxPlotCheckPlots_id = _client_service().register_static_object(('TechlogPlot', '__boxPlotCheckPlots'))
    return _client_service().call(___boxPlotCheckPlots_id, *args, **kwargs)


___boxPlotGetCaption_id = None
def __boxPlotGetCaption(*args, **kwargs):
    """
    __boxPlotGetCaption()
    
    binding only available for test
    """
    global ___boxPlotGetCaption_id
    if ___boxPlotGetCaption_id is None:
        ___boxPlotGetCaption_id = _client_service().register_static_object(('TechlogPlot', '__boxPlotGetCaption'))
    return _client_service().call(___boxPlotGetCaption_id, *args, **kwargs)


___captureDisplayToFile_id = None
def __captureDisplayToFile(*args, **kwargs):
    """
    __captureDisplayToFile(plotID: Number, outputName: str, outputFormat: str) -> bool
    
    Capture the plot into a file
    
    Args:
        plotID (Number): object ID
        outputName (str): file name (saved in 'Various' folder by default)
        outputFormat (str): 'jpg', 'png', 'bmp'
    
    Returns:
        bool: operation exit status
    """
    global ___captureDisplayToFile_id
    if ___captureDisplayToFile_id is None:
        ___captureDisplayToFile_id = _client_service().register_static_object(('TechlogPlot', '__captureDisplayToFile'))
    return _client_service().call(___captureDisplayToFile_id, *args, **kwargs)


___changeCurrentReference_id = None
def __changeCurrentReference(*args, **kwargs):
    """
    __changeCurrentReference(ID: Number, depth: Number) -> bool
    
    Create a frequency for the dispersion plot.
    
    Args:
        ID (Number): Dispersion plot widget ID
        depth (Number): the new current depth to display
    
    Returns:
        bool: True if no error detected else False
    """
    global ___changeCurrentReference_id
    if ___changeCurrentReference_id is None:
        ___changeCurrentReference_id = _client_service().register_static_object(('TechlogPlot', '__changeCurrentReference'))
    return _client_service().call(___changeCurrentReference_id, *args, **kwargs)


___compositePrintingTestLoadHeader_id = None
def __compositePrintingTestLoadHeader(*args, **kwargs):
    """
    __compositePrintingTestLoadHeader(folder: str, name: str) -> bool
    
    Test header loading in the composer
    
    Args:
        folder (str): folder containing the header to be loaded
        name (str): header file nameOutput:
        bool: test success
    """
    global ___compositePrintingTestLoadHeader_id
    if ___compositePrintingTestLoadHeader_id is None:
        ___compositePrintingTestLoadHeader_id = _client_service().register_static_object(('TechlogPlot', '__compositePrintingTestLoadHeader'))
    return _client_service().call(___compositePrintingTestLoadHeader_id, *args, **kwargs)


___compositePrintingTestLoadText_id = None
def __compositePrintingTestLoadText(*args, **kwargs):
    """
    __compositePrintingTestLoadText(folder: str, name: str) -> bool
    
    Test text loading in the composer
    
    Args:
        folder (str): folder containing the text to be loaded
        name (str): text file nameOutput:
        bool: test success
    """
    global ___compositePrintingTestLoadText_id
    if ___compositePrintingTestLoadText_id is None:
        ___compositePrintingTestLoadText_id = _client_service().register_static_object(('TechlogPlot', '__compositePrintingTestLoadText'))
    return _client_service().call(___compositePrintingTestLoadText_id, *args, **kwargs)


___compositePrintingTestUpdateDocumentProperties_id = None
def __compositePrintingTestUpdateDocumentProperties(*args, **kwargs):
    """
    __compositePrintingTestUpdateDocumentProperties()
    
    Binding only available for tests
    """
    global ___compositePrintingTestUpdateDocumentProperties_id
    if ___compositePrintingTestUpdateDocumentProperties_id is None:
        ___compositePrintingTestUpdateDocumentProperties_id = _client_service().register_static_object(('TechlogPlot', '__compositePrintingTestUpdateDocumentProperties'))
    return _client_service().call(___compositePrintingTestUpdateDocumentProperties_id, *args, **kwargs)


___compositePrintingTestUpdateWellAndDatasetProperties_id = None
def __compositePrintingTestUpdateWellAndDatasetProperties(*args, **kwargs):
    """
    __compositePrintingTestUpdateWellAndDatasetProperties()
    
    Binding only available for tests
    """
    global ___compositePrintingTestUpdateWellAndDatasetProperties_id
    if ___compositePrintingTestUpdateWellAndDatasetProperties_id is None:
        ___compositePrintingTestUpdateWellAndDatasetProperties_id = _client_service().register_static_object(('TechlogPlot', '__compositePrintingTestUpdateWellAndDatasetProperties'))
    return _client_service().call(___compositePrintingTestUpdateWellAndDatasetProperties_id, *args, **kwargs)


___createDispersionPlotTrack_id = None
def __createDispersionPlotTrack(*args, **kwargs):
    """
    __createDispersionPlotTrack()
    """
    global ___createDispersionPlotTrack_id
    if ___createDispersionPlotTrack_id is None:
        ___createDispersionPlotTrack_id = _client_service().register_static_object(('TechlogPlot', '__createDispersionPlotTrack'))
    return _client_service().call(___createDispersionPlotTrack_id, *args, **kwargs)


___createLithologyCatalog_id = None
def __createLithologyCatalog(*args, **kwargs):
    """
    __createLithologyCatalog(catalog: List[str], catalogPath: str) -> bool
    
    Create catalog of lithology
    
    Args:
        catalog (List[str]): list of string ["uniqId", "type", "code", "name", "description", "classification", "pathPixmap"]
        catalogPath (str): fullPath of catalog with extensionOutput:
        bool: operation exit status
    """
    global ___createLithologyCatalog_id
    if ___createLithologyCatalog_id is None:
        ___createLithologyCatalog_id = _client_service().register_static_object(('TechlogPlot', '__createLithologyCatalog'))
    return _client_service().call(___createLithologyCatalog_id, *args, **kwargs)


___createMatrixCustomCrossPlot_id = None
def __createMatrixCustomCrossPlot(*args, **kwargs):
    """
    __createMatrixCustomCrossPlot()
    
    binding only available for test
    """
    global ___createMatrixCustomCrossPlot_id
    if ___createMatrixCustomCrossPlot_id is None:
        ___createMatrixCustomCrossPlot_id = _client_service().register_static_object(('TechlogPlot', '__createMatrixCustomCrossPlot'))
    return _client_service().call(___createMatrixCustomCrossPlot_id, *args, **kwargs)


___createModelInTrack_id = None
def __createModelInTrack(*args, **kwargs):
    """
    __createModelInTrack(plotID: Number, trackID: Number) -> bool
    
    Create a test model inside the lithology track
    
    Args:
        plotID (Number): logview window ID
        trackID (Number): lithology track reference number
    
    Returns:
        bool: operation exit status
    """
    global ___createModelInTrack_id
    if ___createModelInTrack_id is None:
        ___createModelInTrack_id = _client_service().register_static_object(('TechlogPlot', '__createModelInTrack'))
    return _client_service().call(___createModelInTrack_id, *args, **kwargs)


___crossPlotAAChangeDepthInformationVisible_id = None
def __crossPlotAAChangeDepthInformationVisible(*args, **kwargs):
    """
    __crossPlotAAChangeDepthInformationVisible()
    
    binding only available for test
    """
    global ___crossPlotAAChangeDepthInformationVisible_id
    if ___crossPlotAAChangeDepthInformationVisible_id is None:
        ___crossPlotAAChangeDepthInformationVisible_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAAChangeDepthInformationVisible'))
    return _client_service().call(___crossPlotAAChangeDepthInformationVisible_id, *args, **kwargs)


___crossPlotAAChangeInformationVisible_id = None
def __crossPlotAAChangeInformationVisible(*args, **kwargs):
    """
    __crossPlotAAChangeInformationVisible()
    
    binding only available for test
    """
    global ___crossPlotAAChangeInformationVisible_id
    if ___crossPlotAAChangeInformationVisible_id is None:
        ___crossPlotAAChangeInformationVisible_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAAChangeInformationVisible'))
    return _client_service().call(___crossPlotAAChangeInformationVisible_id, *args, **kwargs)


___crossPlotAVAAddRegressionByFilter_id = None
def __crossPlotAVAAddRegressionByFilter(*args, **kwargs):
    """
    __crossPlotAVAAddRegressionByFilter(plotID: Number) -> bool
    
    Add regression using a filter.
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: True if operation is OK else return False
    """
    global ___crossPlotAVAAddRegressionByFilter_id
    if ___crossPlotAVAAddRegressionByFilter_id is None:
        ___crossPlotAVAAddRegressionByFilter_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAVAAddRegressionByFilter'))
    return _client_service().call(___crossPlotAVAAddRegressionByFilter_id, *args, **kwargs)


___crossPlotAVAAddRegressionByZone_id = None
def __crossPlotAVAAddRegressionByZone(*args, **kwargs):
    """
    __crossPlotAVAAddRegressionByZone(plotID: Number) -> bool
    
    Add regression using zonation.
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: True if operation is OK else return False
    """
    global ___crossPlotAVAAddRegressionByZone_id
    if ___crossPlotAVAAddRegressionByZone_id is None:
        ___crossPlotAVAAddRegressionByZone_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAVAAddRegressionByZone'))
    return _client_service().call(___crossPlotAVAAddRegressionByZone_id, *args, **kwargs)


___crossPlotAVACreateInContainer_id = None
def __crossPlotAVACreateInContainer(*args, **kwargs):
    """
    __crossPlotAVACreateInContainer()
    
    binding only available for test
    """
    global ___crossPlotAVACreateInContainer_id
    if ___crossPlotAVACreateInContainer_id is None:
        ___crossPlotAVACreateInContainer_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAVACreateInContainer'))
    return _client_service().call(___crossPlotAVACreateInContainer_id, *args, **kwargs)


___crossPlotAVAGetWidgetID_id = None
def __crossPlotAVAGetWidgetID(*args, **kwargs):
    """
    __crossPlotAVAGetWidgetID()
    
    binding only available for test
    """
    global ___crossPlotAVAGetWidgetID_id
    if ___crossPlotAVAGetWidgetID_id is None:
        ___crossPlotAVAGetWidgetID_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAVAGetWidgetID'))
    return _client_service().call(___crossPlotAVAGetWidgetID_id, *args, **kwargs)


___crossPlotAVASetColourValues_id = None
def __crossPlotAVASetColourValues(*args, **kwargs):
    """
    __crossPlotAVASetColourValues()
    
    binding only available for test
    """
    global ___crossPlotAVASetColourValues_id
    if ___crossPlotAVASetColourValues_id is None:
        ___crossPlotAVASetColourValues_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAVASetColourValues'))
    return _client_service().call(___crossPlotAVASetColourValues_id, *args, **kwargs)


___crossPlotAVASetFilterValues_id = None
def __crossPlotAVASetFilterValues(*args, **kwargs):
    """
    __crossPlotAVASetFilterValues()
    
    binding only available for test
    """
    global ___crossPlotAVASetFilterValues_id
    if ___crossPlotAVASetFilterValues_id is None:
        ___crossPlotAVASetFilterValues_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotAVASetFilterValues'))
    return _client_service().call(___crossPlotAVASetFilterValues_id, *args, **kwargs)


___crossPlotCanSetColor_id = None
def __crossPlotCanSetColor(*args, **kwargs):
    """
    __crossPlotCanSetColor()
    
    binding only available for test
    """
    global ___crossPlotCanSetColor_id
    if ___crossPlotCanSetColor_id is None:
        ___crossPlotCanSetColor_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCanSetColor'))
    return _client_service().call(___crossPlotCanSetColor_id, *args, **kwargs)


___crossPlotCanSetLabel_id = None
def __crossPlotCanSetLabel(*args, **kwargs):
    """
    __crossPlotCanSetLabel()
    
    binding only available for test
    """
    global ___crossPlotCanSetLabel_id
    if ___crossPlotCanSetLabel_id is None:
        ___crossPlotCanSetLabel_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCanSetLabel'))
    return _client_service().call(___crossPlotCanSetLabel_id, *args, **kwargs)


___crossPlotCanSetPointSize_id = None
def __crossPlotCanSetPointSize(*args, **kwargs):
    """
    __crossPlotCanSetPointSize()
    
    binding only available for test
    """
    global ___crossPlotCanSetPointSize_id
    if ___crossPlotCanSetPointSize_id is None:
        ___crossPlotCanSetPointSize_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCanSetPointSize'))
    return _client_service().call(___crossPlotCanSetPointSize_id, *args, **kwargs)


___crossPlotCanSetX_id = None
def __crossPlotCanSetX(*args, **kwargs):
    """
    __crossPlotCanSetX()
    
    binding only available for test
    """
    global ___crossPlotCanSetX_id
    if ___crossPlotCanSetX_id is None:
        ___crossPlotCanSetX_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCanSetX'))
    return _client_service().call(___crossPlotCanSetX_id, *args, **kwargs)


___crossPlotCanSetY_id = None
def __crossPlotCanSetY(*args, **kwargs):
    """
    __crossPlotCanSetY()
    
    binding only available for test
    """
    global ___crossPlotCanSetY_id
    if ___crossPlotCanSetY_id is None:
        ___crossPlotCanSetY_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCanSetY'))
    return _client_service().call(___crossPlotCanSetY_id, *args, **kwargs)


___crossPlotCreateCaptionTest_id = None
def __crossPlotCreateCaptionTest(*args, **kwargs):
    """
    __crossPlotCreateCaptionTest()
    
    binding only available for test
    """
    global ___crossPlotCreateCaptionTest_id
    if ___crossPlotCreateCaptionTest_id is None:
        ___crossPlotCreateCaptionTest_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCreateCaptionTest'))
    return _client_service().call(___crossPlotCreateCaptionTest_id, *args, **kwargs)


___crossPlotCreateMatrixPlot_id = None
def __crossPlotCreateMatrixPlot(*args, **kwargs):
    """
    __crossPlotCreateMatrixPlot(plotID: Number) -> Number
    
    binding only available for test - create a Matrix Cross Plot Histo from a cross plotInputs:
        plotID (Number): cross-plot window ID
    
    Returns:
        Number: new plot id or exception raised otherwise
    """
    global ___crossPlotCreateMatrixPlot_id
    if ___crossPlotCreateMatrixPlot_id is None:
        ___crossPlotCreateMatrixPlot_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotCreateMatrixPlot'))
    return _client_service().call(___crossPlotCreateMatrixPlot_id, *args, **kwargs)


___crossPlotSetColorMode_id = None
def __crossPlotSetColorMode(*args, **kwargs):
    """
    __crossPlotSetColorMode(plotID: Number, dm: int) -> bool
    
    Display of the color mode on crossplot
    
    Args:
        plotID (Number): crossplot window ID
        dm (int): color mode{0 = 'TYPE_PALET', 1 = 'TYPE_WELL', 2 = 'TYPE_ZONATION'}
    
    Returns:
        bool: operation exit status
    """
    global ___crossPlotSetColorMode_id
    if ___crossPlotSetColorMode_id is None:
        ___crossPlotSetColorMode_id = _client_service().register_static_object(('TechlogPlot', '__crossPlotSetColorMode'))
    return _client_service().call(___crossPlotSetColorMode_id, *args, **kwargs)


___crossSectionPlotActivateRandomization_id = None
def __crossSectionPlotActivateRandomization(*args, **kwargs):
    """
    __crossSectionPlotActivateRandomization(wid: int, activate: bool) -> bool
    
    Internal unsupported private binding!
    Activate the randomization of the cross section plot.
    
    Args:
        wid (int): plot widget id
        activate (bool): Activate or deactivate
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotActivateRandomization_id
    if ___crossSectionPlotActivateRandomization_id is None:
        ___crossSectionPlotActivateRandomization_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotActivateRandomization'))
    return _client_service().call(___crossSectionPlotActivateRandomization_id, *args, **kwargs)


___crossSectionPlotApplyTo_id = None
def __crossSectionPlotApplyTo(*args, **kwargs):
    """
    __crossSectionPlotApplyTo(wid: int, ds: list) -> list
    
    Internal unsupported private binding!
    Apply the cross section plot to a dataset list
    
    Args:
        wid (int): plot widget id
        ds (list): list of dataset names with format 'wellName.datasetName'
    
    Returns:
        list: list of created plots widget ids
    """
    global ___crossSectionPlotApplyTo_id
    if ___crossSectionPlotApplyTo_id is None:
        ___crossSectionPlotApplyTo_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotApplyTo'))
    return _client_service().call(___crossSectionPlotApplyTo_id, *args, **kwargs)


___crossSectionPlotCreate_id = None
def __crossSectionPlotCreate(*args, **kwargs):
    """
    __crossSectionPlotCreate(name: str, diamname: str='', sensornames: list=[], profilenames: list=[], parentId: int=-1) -> int
    
    Internal unsupported private binding!
    Create a new cross section plot
    
    Args:
        name (str): cross section plot window name
        diamname (str): Optional; diameter variable name
        sensornames (list): Optional; sensor variable names
        profilenames (list): Optional; profile variable names
        parentId (int): Optional; if provided, the new plot is inserted into the identified parent widget
    
    Returns:
        int: identifier of the newly created widget
    """
    global ___crossSectionPlotCreate_id
    if ___crossSectionPlotCreate_id is None:
        ___crossSectionPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotCreate'))
    return _client_service().call(___crossSectionPlotCreate_id, *args, **kwargs)


___crossSectionPlotDeleteDiameter_id = None
def __crossSectionPlotDeleteDiameter(*args, **kwargs):
    """
    __crossSectionPlotDeleteDiameter(wid: int, varname: str) -> bool
    
    Internal unsupported private binding!
    Delete the diameter variable of a cross section plot
    
    Args:
        wid (int): plot widget id
        varname (str): diameter variable name
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotDeleteDiameter_id
    if ___crossSectionPlotDeleteDiameter_id is None:
        ___crossSectionPlotDeleteDiameter_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotDeleteDiameter'))
    return _client_service().call(___crossSectionPlotDeleteDiameter_id, *args, **kwargs)


___crossSectionPlotDeleteProfileList_id = None
def __crossSectionPlotDeleteProfileList(*args, **kwargs):
    """
    __crossSectionPlotDeleteProfileList(wid: int, varnames: list) -> bool
    
    Internal unsupported private binding!
    Delete the profile variables of a cross section plot
    
    Args:
        wid (int): plot widget id
        varnames (list): list of profile variable names
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotDeleteProfileList_id
    if ___crossSectionPlotDeleteProfileList_id is None:
        ___crossSectionPlotDeleteProfileList_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotDeleteProfileList'))
    return _client_service().call(___crossSectionPlotDeleteProfileList_id, *args, **kwargs)


___crossSectionPlotDeleteSensorList_id = None
def __crossSectionPlotDeleteSensorList(*args, **kwargs):
    """
    __crossSectionPlotDeleteSensorList(wid: int, varnames: list) -> bool
    
    Internal unsupported private binding!
    Delete the sensor variables of a cross section plot
    
    Args:
        wid (int): plot widget id
        varnames (list): list of sensor variable names
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotDeleteSensorList_id
    if ___crossSectionPlotDeleteSensorList_id is None:
        ___crossSectionPlotDeleteSensorList_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotDeleteSensorList'))
    return _client_service().call(___crossSectionPlotDeleteSensorList_id, *args, **kwargs)


___crossSectionPlotOpen_id = None
def __crossSectionPlotOpen(*args, **kwargs):
    """
    __crossSectionPlotOpen(name: str, level: str='Project') -> int
    
    Internal unsupported private binding!
    Open an existing cross section plot
    
    Args:
        name (str): name of the cross section plot
        level (str): Optional; object level: {'Techlog', 'Company', 'Project', 'User'}
    
    Returns:
        int: identifier of the opened widget
    """
    global ___crossSectionPlotOpen_id
    if ___crossSectionPlotOpen_id is None:
        ___crossSectionPlotOpen_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotOpen'))
    return _client_service().call(___crossSectionPlotOpen_id, *args, **kwargs)


___crossSectionPlotSave_id = None
def __crossSectionPlotSave(*args, **kwargs):
    """
    __crossSectionPlotSave(wid: int, name: str, level: str='Project') -> bool
    
    Internal unsupported private binding!
    Save a cross section plot
    
    Args:
        wid (int): plot widget id
        name (str): cross section plot name
        level (str): Optional; object level: {'Techlog', 'Company', 'Project', 'User'}
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSave_id
    if ___crossSectionPlotSave_id is None:
        ___crossSectionPlotSave_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSave'))
    return _client_service().call(___crossSectionPlotSave_id, *args, **kwargs)


___crossSectionPlotSetCurrentReferenceIndex_id = None
def __crossSectionPlotSetCurrentReferenceIndex(*args, **kwargs):
    """
    __crossSectionPlotSetCurrentReferenceIndex(wid: int, index: int) -> bool
    
    Internal unsupported private binding!
    Set the current reference index of a cross section plot
    
    Args:
        wid (int): plot widget id
        index (int): reference index
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSetCurrentReferenceIndex_id
    if ___crossSectionPlotSetCurrentReferenceIndex_id is None:
        ___crossSectionPlotSetCurrentReferenceIndex_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSetCurrentReferenceIndex'))
    return _client_service().call(___crossSectionPlotSetCurrentReferenceIndex_id, *args, **kwargs)


___crossSectionPlotSetDiameter_id = None
def __crossSectionPlotSetDiameter(*args, **kwargs):
    """
    __crossSectionPlotSetDiameter(wid: int, varname: str) -> bool
    
    Internal unsupported private binding!
    Set the diameter variable of a cross section plot
    
    Args:
        wid (int): plot widget id
        varname (str): diameter variable name
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSetDiameter_id
    if ___crossSectionPlotSetDiameter_id is None:
        ___crossSectionPlotSetDiameter_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSetDiameter'))
    return _client_service().call(___crossSectionPlotSetDiameter_id, *args, **kwargs)


___crossSectionPlotSetDisplayMode_id = None
def __crossSectionPlotSetDisplayMode(*args, **kwargs):
    """
    __crossSectionPlotSetDisplayMode(wid: int, mode: str) -> bool
    
    Internal unsupported private binding!
    Set the display mode of the cross section plot.
    
    Args:
        wid (int): plot widget id
        mode (str): display mode: {'bar', 'pie', 'sensors'}
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSetDisplayMode_id
    if ___crossSectionPlotSetDisplayMode_id is None:
        ___crossSectionPlotSetDisplayMode_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSetDisplayMode'))
    return _client_service().call(___crossSectionPlotSetDisplayMode_id, *args, **kwargs)


___crossSectionPlotSetProfileList_id = None
def __crossSectionPlotSetProfileList(*args, **kwargs):
    """
    __crossSectionPlotSetProfileList(wid: int, varnames: list) -> bool
    
    Internal unsupported private binding!
    Set the profile variables of a cross section plot
    
    Args:
        wid (int): plot widget id
        varnames (list): list of profile variable names
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSetProfileList_id
    if ___crossSectionPlotSetProfileList_id is None:
        ___crossSectionPlotSetProfileList_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSetProfileList'))
    return _client_service().call(___crossSectionPlotSetProfileList_id, *args, **kwargs)


___crossSectionPlotSetRandomizationLevel_id = None
def __crossSectionPlotSetRandomizationLevel(*args, **kwargs):
    """
    __crossSectionPlotSetRandomizationLevel(wid: int, level: int) -> bool
    
    Internal unsupported private binding!
    Set the randomization level of the cross section plot.
    
    Args:
        wid (int): plot widget id
        level (int): The level [5;30]
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSetRandomizationLevel_id
    if ___crossSectionPlotSetRandomizationLevel_id is None:
        ___crossSectionPlotSetRandomizationLevel_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSetRandomizationLevel'))
    return _client_service().call(___crossSectionPlotSetRandomizationLevel_id, *args, **kwargs)


___crossSectionPlotSetSensorList_id = None
def __crossSectionPlotSetSensorList(*args, **kwargs):
    """
    __crossSectionPlotSetSensorList(wid: int, varnames: list) -> bool
    
    Internal unsupported private binding!
    Set the sensor variables of a cross section plot
    
    Args:
        wid (int): plot widget id
        varnames (list): list of sensor variable names
    
    Returns:
        bool: operation exit status
    """
    global ___crossSectionPlotSetSensorList_id
    if ___crossSectionPlotSetSensorList_id is None:
        ___crossSectionPlotSetSensorList_id = _client_service().register_static_object(('TechlogPlot', '__crossSectionPlotSetSensorList'))
    return _client_service().call(___crossSectionPlotSetSensorList_id, *args, **kwargs)


___customPlotDemo_id = None
def __customPlotDemo(*args, **kwargs):
    """
    __customPlotDemo()
    
    binding only available for test
    """
    global ___customPlotDemo_id
    if ___customPlotDemo_id is None:
        ___customPlotDemo_id = _client_service().register_static_object(('TechlogPlot', '__customPlotDemo'))
    return _client_service().call(___customPlotDemo_id, *args, **kwargs)


___customPlotTestPerfCustomAction_id = None
def __customPlotTestPerfCustomAction(*args, **kwargs):
    """
    __customPlotTestPerfCustomAction()
    
    binding only available for test
    """
    global ___customPlotTestPerfCustomAction_id
    if ___customPlotTestPerfCustomAction_id is None:
        ___customPlotTestPerfCustomAction_id = _client_service().register_static_object(('TechlogPlot', '__customPlotTestPerfCustomAction'))
    return _client_service().call(___customPlotTestPerfCustomAction_id, *args, **kwargs)


___depthArrayChangeDepthLimitation_id = None
def __depthArrayChangeDepthLimitation(*args, **kwargs):
    """
    __depthArrayChangeDepthLimitation()
    
    binding only available for test
    """
    global ___depthArrayChangeDepthLimitation_id
    if ___depthArrayChangeDepthLimitation_id is None:
        ___depthArrayChangeDepthLimitation_id = _client_service().register_static_object(('TechlogPlot', '__depthArrayChangeDepthLimitation'))
    return _client_service().call(___depthArrayChangeDepthLimitation_id, *args, **kwargs)


___depthArrayPlotAddVariable_id = None
def __depthArrayPlotAddVariable(*args, **kwargs):
    """
    __depthArrayPlotAddVariable(plotID: Number, variable: str) -> bool
    
    Add a variable to the plot
    
    Args:
        plotID (Number): plot Id to duplicate
        variable (str): WellName.DatasetName.VariableName
    
    Returns:
        bool: True if operation is done else whether is an error.
    """
    global ___depthArrayPlotAddVariable_id
    if ___depthArrayPlotAddVariable_id is None:
        ___depthArrayPlotAddVariable_id = _client_service().register_static_object(('TechlogPlot', '__depthArrayPlotAddVariable'))
    return _client_service().call(___depthArrayPlotAddVariable_id, *args, **kwargs)


___depthArrayPlotCreate_id = None
def __depthArrayPlotCreate(*args, **kwargs):
    """
    __depthArrayPlotCreate(n: str) -> Number
    
    Create a new depth array plot
    
    Args:
        n (str): plot name
    
    Returns:
        Number: plot ID
    """
    global ___depthArrayPlotCreate_id
    if ___depthArrayPlotCreate_id is None:
        ___depthArrayPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__depthArrayPlotCreate'))
    return _client_service().call(___depthArrayPlotCreate_id, *args, **kwargs)


___depthArraySave_id = None
def __depthArraySave(*args, **kwargs):
    """
    __depthArraySave(ID: Number, name: str, folder: str=None) -> bool
    
    Save the current plot
    
    Args:
        ID (Number): plot ID
        name (str): file name
        folder (str): Optional; folder
    
    Returns:
        bool: True if operation is done else exception (RuntimeError or ValueError)
    """
    global ___depthArraySave_id
    if ___depthArraySave_id is None:
        ___depthArraySave_id = _client_service().register_static_object(('TechlogPlot', '__depthArraySave'))
    return _client_service().call(___depthArraySave_id, *args, **kwargs)


___depthArraySendDepth_id = None
def __depthArraySendDepth(*args, **kwargs):
    """
    __depthArraySendDepth()
    
    binding only available for test
    """
    global ___depthArraySendDepth_id
    if ___depthArraySendDepth_id is None:
        ___depthArraySendDepth_id = _client_service().register_static_object(('TechlogPlot', '__depthArraySendDepth'))
    return _client_service().call(___depthArraySendDepth_id, *args, **kwargs)


___depthArrayUpdateDepthTittle_id = None
def __depthArrayUpdateDepthTittle(*args, **kwargs):
    """
    __depthArrayUpdateDepthTittle()
    
    binding only available for test
    """
    global ___depthArrayUpdateDepthTittle_id
    if ___depthArrayUpdateDepthTittle_id is None:
        ___depthArrayUpdateDepthTittle_id = _client_service().register_static_object(('TechlogPlot', '__depthArrayUpdateDepthTittle'))
    return _client_service().call(___depthArrayUpdateDepthTittle_id, *args, **kwargs)


___depthMapGetDepthUnit_id = None
def __depthMapGetDepthUnit(*args, **kwargs):
    """
    __depthMapGetDepthUnit()
    
    binding only available for test
    """
    global ___depthMapGetDepthUnit_id
    if ___depthMapGetDepthUnit_id is None:
        ___depthMapGetDepthUnit_id = _client_service().register_static_object(('TechlogPlot', '__depthMapGetDepthUnit'))
    return _client_service().call(___depthMapGetDepthUnit_id, *args, **kwargs)


___depthMapSendDepth_id = None
def __depthMapSendDepth(*args, **kwargs):
    """
    __depthMapSendDepth()
    
    binding only available for test
    """
    global ___depthMapSendDepth_id
    if ___depthMapSendDepth_id is None:
        ___depthMapSendDepth_id = _client_service().register_static_object(('TechlogPlot', '__depthMapSendDepth'))
    return _client_service().call(___depthMapSendDepth_id, *args, **kwargs)


___depthMapUpdateToolbar_id = None
def __depthMapUpdateToolbar(*args, **kwargs):
    """
    __depthMapUpdateToolbar()
    
    binding only available for test
    """
    global ___depthMapUpdateToolbar_id
    if ___depthMapUpdateToolbar_id is None:
        ___depthMapUpdateToolbar_id = _client_service().register_static_object(('TechlogPlot', '__depthMapUpdateToolbar'))
    return _client_service().call(___depthMapUpdateToolbar_id, *args, **kwargs)


___dispersionPlotAddSlownessArray_id = None
def __dispersionPlotAddSlownessArray(*args, **kwargs):
    """
    __dispersionPlotAddSlownessArray(ID: Number, Waveform: str, Slowness: str, Energy: str) -> bool
    
    Add slowness array linked to a waveform.
    
    Args:
        ID (Number): plot widget ID
        Waveform (str): the name of the waveform
        Slowness (str): the slowness name
        Energy (str): the energy name
    
    Returns:
        bool: True for success
    """
    global ___dispersionPlotAddSlownessArray_id
    if ___dispersionPlotAddSlownessArray_id is None:
        ___dispersionPlotAddSlownessArray_id = _client_service().register_static_object(('TechlogPlot', '__dispersionPlotAddSlownessArray'))
    return _client_service().call(___dispersionPlotAddSlownessArray_id, *args, **kwargs)


___dispersionPlotAddSlownessLine_id = None
def __dispersionPlotAddSlownessLine(*args, **kwargs):
    """
    __dispersionPlotAddSlownessLine(ID: Number, Slowness: str) -> bool
    
    Add a slowness line.
    
    Args:
        ID (Number): plot widget ID
        Slowness (str): the slowness line name
    
    Returns:
        bool: True for success
    """
    global ___dispersionPlotAddSlownessLine_id
    if ___dispersionPlotAddSlownessLine_id is None:
        ___dispersionPlotAddSlownessLine_id = _client_service().register_static_object(('TechlogPlot', '__dispersionPlotAddSlownessLine'))
    return _client_service().call(___dispersionPlotAddSlownessLine_id, *args, **kwargs)


___dispersionPlotAddSnrArray_id = None
def __dispersionPlotAddSnrArray(*args, **kwargs):
    """
    __dispersionPlotAddSnrArray(ID: Number, Waveform: str, Snr: str) -> bool
    
    Add snr array linked to a waveform.
    
    Args:
        ID (Number): plot widget ID
        Waveform (str): the name of the waveform
        Snr (str): the snr name
    
    Returns:
        bool: True for success
    """
    global ___dispersionPlotAddSnrArray_id
    if ___dispersionPlotAddSnrArray_id is None:
        ___dispersionPlotAddSnrArray_id = _client_service().register_static_object(('TechlogPlot', '__dispersionPlotAddSnrArray'))
    return _client_service().call(___dispersionPlotAddSnrArray_id, *args, **kwargs)


___dispersionPlotAddSpectrumArray_id = None
def __dispersionPlotAddSpectrumArray(*args, **kwargs):
    """
    __dispersionPlotAddSpectrumArray(ID: Number, Waveform: str, Spectrum: str) -> bool
    
    Add spectrum array linked to a waveform.
    
    Args:
        ID (Number): plot widget ID
        Waveform (str): the name of the waveform
        Spectrum (str): the spectrum name
    
    Returns:
        bool: True for success
    """
    global ___dispersionPlotAddSpectrumArray_id
    if ___dispersionPlotAddSpectrumArray_id is None:
        ___dispersionPlotAddSpectrumArray_id = _client_service().register_static_object(('TechlogPlot', '__dispersionPlotAddSpectrumArray'))
    return _client_service().call(___dispersionPlotAddSpectrumArray_id, *args, **kwargs)


___dispersionPlotCreate_id = None
def __dispersionPlotCreate(*args, **kwargs):
    """
    __dispersionPlotCreate(name: str, containerID: Number=-1) -> Number
    
    Create a dispersion plot widget.
    
    Args:
        name (str): the name of the plot to create
        containerID (Number): Optional; the ID of the container parent
    
    Returns:
        Number: return the ID of the plot created
    """
    global ___dispersionPlotCreate_id
    if ___dispersionPlotCreate_id is None:
        ___dispersionPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__dispersionPlotCreate'))
    return _client_service().call(___dispersionPlotCreate_id, *args, **kwargs)


___dispersionPlotSetFrequency_id = None
def __dispersionPlotSetFrequency(*args, **kwargs):
    """
    __dispersionPlotSetFrequency(ID: Number, Waveform: str, frequency: str) -> bool
    
    Add frequency array linked to a waveform.
    
    Args:
        ID (Number): plot widget ID
        Waveform (str): the name of the waveform
        frequency (str): the frequency name
    
    Returns:
        bool: True for success
    """
    global ___dispersionPlotSetFrequency_id
    if ___dispersionPlotSetFrequency_id is None:
        ___dispersionPlotSetFrequency_id = _client_service().register_static_object(('TechlogPlot', '__dispersionPlotSetFrequency'))
    return _client_service().call(___dispersionPlotSetFrequency_id, *args, **kwargs)


___drawNow_id = None
def __drawNow(*args, **kwargs):
    """
    __drawNow(plotID: Number)
    
    perform the drawing code directly
    
    Args:
        plotID (Number): logview window ID
    
    Returns:
    """
    global ___drawNow_id
    if ___drawNow_id is None:
        ___drawNow_id = _client_service().register_static_object(('TechlogPlot', '__drawNow'))
    return _client_service().call(___drawNow_id, *args, **kwargs)


___enableNew3DEngine_id = None
def __enableNew3DEngine(*args, **kwargs):
    """
    __enableNew3DEngine(enable: bool) -> bool
    
    Enable the new 3D engine
    
    Args:
        enable (bool): enable new 3D engine (true) or not (false)
    
    Returns:
        bool: operation exit status
    """
    global ___enableNew3DEngine_id
    if ___enableNew3DEngine_id is None:
        ___enableNew3DEngine_id = _client_service().register_static_object(('TechlogPlot', '__enableNew3DEngine'))
    return _client_service().call(___enableNew3DEngine_id, *args, **kwargs)


___enableRefreshVisu_id = None
def __enableRefreshVisu(*args, **kwargs):
    """
    __enableRefreshVisu(plotID: Number, multiwell: bool)
    
    active the benchmark
    
    Args:
        plotID (Number): logview window ID
        multiwell (bool): True = multiwell else False
    
    Returns:
    """
    global ___enableRefreshVisu_id
    if ___enableRefreshVisu_id is None:
        ___enableRefreshVisu_id = _client_service().register_static_object(('TechlogPlot', '__enableRefreshVisu'))
    return _client_service().call(___enableRefreshVisu_id, *args, **kwargs)


___exportXML_id = None
def __exportXML(*args, **kwargs):
    """
    __exportXML()
    
    binding only available for test
    """
    global ___exportXML_id
    if ___exportXML_id is None:
        ___exportXML_id = _client_service().register_static_object(('TechlogPlot', '__exportXML'))
    return _client_service().call(___exportXML_id, *args, **kwargs)


___fieldPlotOpen_id = None
def __fieldPlotOpen(*args, **kwargs):
    """
    __fieldPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing basemap (FieldPlot)
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global ___fieldPlotOpen_id
    if ___fieldPlotOpen_id is None:
        ___fieldPlotOpen_id = _client_service().register_static_object(('TechlogPlot', '__fieldPlotOpen'))
    return _client_service().call(___fieldPlotOpen_id, *args, **kwargs)


___genericContainerAddCell_id = None
def __genericContainerAddCell(*args, **kwargs):
    """
    __genericContainerAddCell()
    
    binding only available for test
    """
    global ___genericContainerAddCell_id
    if ___genericContainerAddCell_id is None:
        ___genericContainerAddCell_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerAddCell'))
    return _client_service().call(___genericContainerAddCell_id, *args, **kwargs)


___genericContainerAddCustomActions_id = None
def __genericContainerAddCustomActions(*args, **kwargs):
    """
    __genericContainerAddCustomActions()
    
    binding only available for test
    """
    global ___genericContainerAddCustomActions_id
    if ___genericContainerAddCustomActions_id is None:
        ___genericContainerAddCustomActions_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerAddCustomActions'))
    return _client_service().call(___genericContainerAddCustomActions_id, *args, **kwargs)


___genericContainerAddCustomPlotWithCustomActions_id = None
def __genericContainerAddCustomPlotWithCustomActions(*args, **kwargs):
    """
    __genericContainerAddCustomPlotWithCustomActions()
    
    binding only available for test
    """
    global ___genericContainerAddCustomPlotWithCustomActions_id
    if ___genericContainerAddCustomPlotWithCustomActions_id is None:
        ___genericContainerAddCustomPlotWithCustomActions_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerAddCustomPlotWithCustomActions'))
    return _client_service().call(___genericContainerAddCustomPlotWithCustomActions_id, *args, **kwargs)


___genericContainerAddDefaultLeftPart_id = None
def __genericContainerAddDefaultLeftPart(*args, **kwargs):
    """
    __genericContainerAddDefaultLeftPart()
    
    binding only available for test
    """
    global ___genericContainerAddDefaultLeftPart_id
    if ___genericContainerAddDefaultLeftPart_id is None:
        ___genericContainerAddDefaultLeftPart_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerAddDefaultLeftPart'))
    return _client_service().call(___genericContainerAddDefaultLeftPart_id, *args, **kwargs)


___genericContainerAddDefaultLegend_id = None
def __genericContainerAddDefaultLegend(*args, **kwargs):
    """
    __genericContainerAddDefaultLegend()
    
    binding only available for test
    """
    global ___genericContainerAddDefaultLegend_id
    if ___genericContainerAddDefaultLegend_id is None:
        ___genericContainerAddDefaultLegend_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerAddDefaultLegend'))
    return _client_service().call(___genericContainerAddDefaultLegend_id, *args, **kwargs)


___genericContainerAddLogviewInContainer_id = None
def __genericContainerAddLogviewInContainer(*args, **kwargs):
    """
    __genericContainerAddLogviewInContainer()
    
    binding only available for test
    """
    global ___genericContainerAddLogviewInContainer_id
    if ___genericContainerAddLogviewInContainer_id is None:
        ___genericContainerAddLogviewInContainer_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerAddLogviewInContainer'))
    return _client_service().call(___genericContainerAddLogviewInContainer_id, *args, **kwargs)


___genericContainerCanAddCell_id = None
def __genericContainerCanAddCell(*args, **kwargs):
    """
    __genericContainerCanAddCell()
    
    binding only available for test
    """
    global ___genericContainerCanAddCell_id
    if ___genericContainerCanAddCell_id is None:
        ___genericContainerCanAddCell_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerCanAddCell'))
    return _client_service().call(___genericContainerCanAddCell_id, *args, **kwargs)


___genericContainerCreate_id = None
def __genericContainerCreate(*args, **kwargs):
    """
    __genericContainerCreate()
    
    binding only available for test
    """
    global ___genericContainerCreate_id
    if ___genericContainerCreate_id is None:
        ___genericContainerCreate_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerCreate'))
    return _client_service().call(___genericContainerCreate_id, *args, **kwargs)


___genericContainerMoveCell_id = None
def __genericContainerMoveCell(*args, **kwargs):
    """
    __genericContainerMoveCell()
    
    binding only available for test
    """
    global ___genericContainerMoveCell_id
    if ___genericContainerMoveCell_id is None:
        ___genericContainerMoveCell_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerMoveCell'))
    return _client_service().call(___genericContainerMoveCell_id, *args, **kwargs)


___genericContainerRemoveCell_id = None
def __genericContainerRemoveCell(*args, **kwargs):
    """
    __genericContainerRemoveCell()
    
    binding only available for test
    """
    global ___genericContainerRemoveCell_id
    if ___genericContainerRemoveCell_id is None:
        ___genericContainerRemoveCell_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerRemoveCell'))
    return _client_service().call(___genericContainerRemoveCell_id, *args, **kwargs)


___genericContainerSetSplitHorizFirst_id = None
def __genericContainerSetSplitHorizFirst(*args, **kwargs):
    """
    __genericContainerSetSplitHorizFirst()
    
    binding only available for test
    """
    global ___genericContainerSetSplitHorizFirst_id
    if ___genericContainerSetSplitHorizFirst_id is None:
        ___genericContainerSetSplitHorizFirst_id = _client_service().register_static_object(('TechlogPlot', '__genericContainerSetSplitHorizFirst'))
    return _client_service().call(___genericContainerSetSplitHorizFirst_id, *args, **kwargs)


___genericWidgetContainerDemo_id = None
def __genericWidgetContainerDemo(*args, **kwargs):
    """
    __genericWidgetContainerDemo()
    
    binding only available for test
    """
    global ___genericWidgetContainerDemo_id
    if ___genericWidgetContainerDemo_id is None:
        ___genericWidgetContainerDemo_id = _client_service().register_static_object(('TechlogPlot', '__genericWidgetContainerDemo'))
    return _client_service().call(___genericWidgetContainerDemo_id, *args, **kwargs)


___getBHAList_id = None
def __getBHAList(*args, **kwargs):
    """
    __getBHAList()
    
    binding only available for test
    """
    global ___getBHAList_id
    if ___getBHAList_id is None:
        ___getBHAList_id = _client_service().register_static_object(('TechlogPlot', '__getBHAList'))
    return _client_service().call(___getBHAList_id, *args, **kwargs)


___getDispersionPlotId_id = None
def __getDispersionPlotId(*args, **kwargs):
    """
    __getDispersionPlotId(name: str) -> Number
    
    Return the id of a dispersion plot widget by given its name.
    
    Args:
        name (str): the name of the plot to retrieve
    
    Returns:
        Number: return the ID of the plot
    """
    global ___getDispersionPlotId_id
    if ___getDispersionPlotId_id is None:
        ___getDispersionPlotId_id = _client_service().register_static_object(('TechlogPlot', '__getDispersionPlotId'))
    return _client_service().call(___getDispersionPlotId_id, *args, **kwargs)


___getWellList_id = None
def __getWellList(*args, **kwargs):
    """
    __getWellList()
    
    binding only available for test
    """
    global ___getWellList_id
    if ___getWellList_id is None:
        ___getWellList_id = _client_service().register_static_object(('TechlogPlot', '__getWellList'))
    return _client_service().call(___getWellList_id, *args, **kwargs)


___headerLoadGraphicalProperties_id = None
def __headerLoadGraphicalProperties(*args, **kwargs):
    """
    __headerLoadGraphicalProperties()
    
    Binding only available for tests
    """
    global ___headerLoadGraphicalProperties_id
    if ___headerLoadGraphicalProperties_id is None:
        ___headerLoadGraphicalProperties_id = _client_service().register_static_object(('TechlogPlot', '__headerLoadGraphicalProperties'))
    return _client_service().call(___headerLoadGraphicalProperties_id, *args, **kwargs)


___headerOpenAndSave_id = None
def __headerOpenAndSave(*args, **kwargs):
    """
    __headerOpenAndSave()
    
    Binding only available for tests
    """
    global ___headerOpenAndSave_id
    if ___headerOpenAndSave_id is None:
        ___headerOpenAndSave_id = _client_service().register_static_object(('TechlogPlot', '__headerOpenAndSave'))
    return _client_service().call(___headerOpenAndSave_id, *args, **kwargs)


___headerRefreshProperties_id = None
def __headerRefreshProperties(*args, **kwargs):
    """
    __headerRefreshProperties()
    
    Binding only available for tests
    """
    global ___headerRefreshProperties_id
    if ___headerRefreshProperties_id is None:
        ___headerRefreshProperties_id = _client_service().register_static_object(('TechlogPlot', '__headerRefreshProperties'))
    return _client_service().call(___headerRefreshProperties_id, *args, **kwargs)


___histogramCreateCaptionTest_id = None
def __histogramCreateCaptionTest(*args, **kwargs):
    """
    __histogramCreateCaptionTest()
    
    binding only available for test
    """
    global ___histogramCreateCaptionTest_id
    if ___histogramCreateCaptionTest_id is None:
        ___histogramCreateCaptionTest_id = _client_service().register_static_object(('TechlogPlot', '__histogramCreateCaptionTest'))
    return _client_service().call(___histogramCreateCaptionTest_id, *args, **kwargs)


___histogramSetAdvanceFilter_id = None
def __histogramSetAdvanceFilter(*args, **kwargs):
    """
    __histogramSetAdvanceFilter(plotID: Number, formula: str) -> bool
    
    Create an advance filter with its own formula.
    
    Args:
        plotID (Number): plot window ID
        formula (str): expression
    
    Returns:
        bool: True if operation is OK else return False
    """
    global ___histogramSetAdvanceFilter_id
    if ___histogramSetAdvanceFilter_id is None:
        ___histogramSetAdvanceFilter_id = _client_service().register_static_object(('TechlogPlot', '__histogramSetAdvanceFilter'))
    return _client_service().call(___histogramSetAdvanceFilter_id, *args, **kwargs)


___histogramSetAdvanceFilterStatus_id = None
def __histogramSetAdvanceFilterStatus(*args, **kwargs):
    """
    __histogramSetAdvanceFilterStatus(plotID: Number, status: bool=False) -> bool
    
    Set the Advance Filter status.
    
    Args:
        plotID (Number): plot window ID
        status (bool): Optional; functionFilterEnable
    
    Returns:
        bool: True if operation is OK else return False
    """
    global ___histogramSetAdvanceFilterStatus_id
    if ___histogramSetAdvanceFilterStatus_id is None:
        ___histogramSetAdvanceFilterStatus_id = _client_service().register_static_object(('TechlogPlot', '__histogramSetAdvanceFilterStatus'))
    return _client_service().call(___histogramSetAdvanceFilterStatus_id, *args, **kwargs)


___histogramgetVariableNameListTest_id = None
def __histogramgetVariableNameListTest(*args, **kwargs):
    """
    __histogramgetVariableNameListTest()
    
    binding only available for test
    """
    global ___histogramgetVariableNameListTest_id
    if ___histogramgetVariableNameListTest_id is None:
        ___histogramgetVariableNameListTest_id = _client_service().register_static_object(('TechlogPlot', '__histogramgetVariableNameListTest'))
    return _client_service().call(___histogramgetVariableNameListTest_id, *args, **kwargs)


___histogramgetZonationListTest_id = None
def __histogramgetZonationListTest(*args, **kwargs):
    """
    __histogramgetZonationListTest()
    
    binding only available for test
    """
    global ___histogramgetZonationListTest_id
    if ___histogramgetZonationListTest_id is None:
        ___histogramgetZonationListTest_id = _client_service().register_static_object(('TechlogPlot', '__histogramgetZonationListTest'))
    return _client_service().call(___histogramgetZonationListTest_id, *args, **kwargs)


___insertChartIntoPlot_id = None
def __insertChartIntoPlot(*args, **kwargs):
    """
    __insertChartIntoPlot()
    
    binding only available for test
    """
    global ___insertChartIntoPlot_id
    if ___insertChartIntoPlot_id is None:
        ___insertChartIntoPlot_id = _client_service().register_static_object(('TechlogPlot', '__insertChartIntoPlot'))
    return _client_service().call(___insertChartIntoPlot_id, *args, **kwargs)


___launchBoreholeSectionPlotForSDK_id = None
def __launchBoreholeSectionPlotForSDK(*args, **kwargs):
    """
    __launchBoreholeSectionPlotForSDK()
    
    binding only available for test
    """
    global ___launchBoreholeSectionPlotForSDK_id
    if ___launchBoreholeSectionPlotForSDK_id is None:
        ___launchBoreholeSectionPlotForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchBoreholeSectionPlotForSDK'))
    return _client_service().call(___launchBoreholeSectionPlotForSDK_id, *args, **kwargs)


___launchCustomPlotForSDK_id = None
def __launchCustomPlotForSDK(*args, **kwargs):
    """
    __launchCustomPlotForSDK()
    
    binding only available for test
    """
    global ___launchCustomPlotForSDK_id
    if ___launchCustomPlotForSDK_id is None:
        ___launchCustomPlotForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchCustomPlotForSDK'))
    return _client_service().call(___launchCustomPlotForSDK_id, *args, **kwargs)


___launchLogViewDateTimeForSDK_id = None
def __launchLogViewDateTimeForSDK(*args, **kwargs):
    """
    __launchLogViewDateTimeForSDK()
    
    binding only available for test
    """
    global ___launchLogViewDateTimeForSDK_id
    if ___launchLogViewDateTimeForSDK_id is None:
        ___launchLogViewDateTimeForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchLogViewDateTimeForSDK'))
    return _client_service().call(___launchLogViewDateTimeForSDK_id, *args, **kwargs)


___launchLogViewForSDK_id = None
def __launchLogViewForSDK(*args, **kwargs):
    """
    __launchLogViewForSDK()
    
    binding only available for test
    """
    global ___launchLogViewForSDK_id
    if ___launchLogViewForSDK_id is None:
        ___launchLogViewForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchLogViewForSDK'))
    return _client_service().call(___launchLogViewForSDK_id, *args, **kwargs)


___launchPlotForSDK_id = None
def __launchPlotForSDK(*args, **kwargs):
    """
    __launchPlotForSDK()
    
    binding only available for test
    """
    global ___launchPlotForSDK_id
    if ___launchPlotForSDK_id is None:
        ___launchPlotForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchPlotForSDK'))
    return _client_service().call(___launchPlotForSDK_id, *args, **kwargs)


___launchStereonetPlotForSDK_id = None
def __launchStereonetPlotForSDK(*args, **kwargs):
    """
    __launchStereonetPlotForSDK()
    
    binding only available for test
    """
    global ___launchStereonetPlotForSDK_id
    if ___launchStereonetPlotForSDK_id is None:
        ___launchStereonetPlotForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchStereonetPlotForSDK'))
    return _client_service().call(___launchStereonetPlotForSDK_id, *args, **kwargs)


___launchWaveformPlotForSDK_id = None
def __launchWaveformPlotForSDK(*args, **kwargs):
    """
    __launchWaveformPlotForSDK()
    
    binding only available for test
    """
    global ___launchWaveformPlotForSDK_id
    if ___launchWaveformPlotForSDK_id is None:
        ___launchWaveformPlotForSDK_id = _client_service().register_static_object(('TechlogPlot', '__launchWaveformPlotForSDK'))
    return _client_service().call(___launchWaveformPlotForSDK_id, *args, **kwargs)


___logViewApplyTemplateByFileName_id = None
def __logViewApplyTemplateByFileName(*args, **kwargs):
    """
    __logViewApplyTemplateByFileName()
    
    binding only available for test
    """
    global ___logViewApplyTemplateByFileName_id
    if ___logViewApplyTemplateByFileName_id is None:
        ___logViewApplyTemplateByFileName_id = _client_service().register_static_object(('TechlogPlot', '__logViewApplyTemplateByFileName'))
    return _client_service().call(___logViewApplyTemplateByFileName_id, *args, **kwargs)


___logViewAreaFillWithTwoLogsSetColor_id = None
def __logViewAreaFillWithTwoLogsSetColor(*args, **kwargs):
    """
    __logViewAreaFillWithTwoLogsSetColor(plotID: Number, v1: str, v2: str, display: int, r: Number, g: Number, b: Number) -> bool
    
    Set the color of an area fill between two variables
    
    Args:
        plotID (Number): logview window ID
        v1 (str): first variable name
        v2 (str): second variable name
        display (int): 1 = right color, 2 = left color, 3 = both
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global ___logViewAreaFillWithTwoLogsSetColor_id
    if ___logViewAreaFillWithTwoLogsSetColor_id is None:
        ___logViewAreaFillWithTwoLogsSetColor_id = _client_service().register_static_object(('TechlogPlot', '__logViewAreaFillWithTwoLogsSetColor'))
    return _client_service().call(___logViewAreaFillWithTwoLogsSetColor_id, *args, **kwargs)


___logViewAreaFillWithTwoLogsSetFillingType_id = None
def __logViewAreaFillWithTwoLogsSetFillingType(*args, **kwargs):
    """
    __logViewAreaFillWithTwoLogsSetFillingType(plotID: Number, v1: str, v2: str, fill: int, display: int) -> bool
    
    Set the filling type of an area fill between two variables
    
    Args:
        plotID (Number): logview window ID
        v1 (str): first variable name
        v2 (str): second variable name
        fill (int): 0 = fill with palette, 1 = fill with bi color
        display (int): 0 = display left, 1 = display right, 2 = display both
    
    Returns:
        bool: operation exit status
    """
    global ___logViewAreaFillWithTwoLogsSetFillingType_id
    if ___logViewAreaFillWithTwoLogsSetFillingType_id is None:
        ___logViewAreaFillWithTwoLogsSetFillingType_id = _client_service().register_static_object(('TechlogPlot', '__logViewAreaFillWithTwoLogsSetFillingType'))
    return _client_service().call(___logViewAreaFillWithTwoLogsSetFillingType_id, *args, **kwargs)


___logViewAreaFillWithTwoLogsSetPalette_id = None
def __logViewAreaFillWithTwoLogsSetPalette(*args, **kwargs):
    """
    __logViewAreaFillWithTwoLogsSetPalette(plotID: Number, v1: str, v2: str, palette: str) -> bool
    
    Set the palette of an area fill between two variables
    
    Args:
        plotID (Number): logview window ID
        v1 (str): first variable name
        v2 (str): second variable name
        palette (str): the new palette name
    
    Returns:
        bool: operation exit status
    """
    global ___logViewAreaFillWithTwoLogsSetPalette_id
    if ___logViewAreaFillWithTwoLogsSetPalette_id is None:
        ___logViewAreaFillWithTwoLogsSetPalette_id = _client_service().register_static_object(('TechlogPlot', '__logViewAreaFillWithTwoLogsSetPalette'))
    return _client_service().call(___logViewAreaFillWithTwoLogsSetPalette_id, *args, **kwargs)


___logViewAreaFillWithTwoLogsSetPattern_id = None
def __logViewAreaFillWithTwoLogsSetPattern(*args, **kwargs):
    """
    __logViewAreaFillWithTwoLogsSetPattern(plotID: Number, v1: str, v2: str, pattern: str, display: int) -> bool
    
    Set the pattern of an area fill between two variables
    
    Args:
        plotID (Number): logview window ID
        v1 (str): first variable name
        v2 (str): second variable name
        pattern (str): the new pattern name
        display (int): 0 = left pattern, 1 = right pattern, 2 = both
    
    Returns:
        bool: operation exit status
    """
    global ___logViewAreaFillWithTwoLogsSetPattern_id
    if ___logViewAreaFillWithTwoLogsSetPattern_id is None:
        ___logViewAreaFillWithTwoLogsSetPattern_id = _client_service().register_static_object(('TechlogPlot', '__logViewAreaFillWithTwoLogsSetPattern'))
    return _client_service().call(___logViewAreaFillWithTwoLogsSetPattern_id, *args, **kwargs)


___logViewChangeLog_id = None
def __logViewChangeLog(*args, **kwargs):
    """
    __logViewChangeLog()
    
    binding only available for test
    """
    global ___logViewChangeLog_id
    if ___logViewChangeLog_id is None:
        ___logViewChangeLog_id = _client_service().register_static_object(('TechlogPlot', '__logViewChangeLog'))
    return _client_service().call(___logViewChangeLog_id, *args, **kwargs)


___logViewCopyAndInsertLog_id = None
def __logViewCopyAndInsertLog(*args, **kwargs):
    """
    __logViewCopyAndInsertLog()
    
    binding only available for test
    """
    global ___logViewCopyAndInsertLog_id
    if ___logViewCopyAndInsertLog_id is None:
        ___logViewCopyAndInsertLog_id = _client_service().register_static_object(('TechlogPlot', '__logViewCopyAndInsertLog'))
    return _client_service().call(___logViewCopyAndInsertLog_id, *args, **kwargs)


___logViewCreateDefaultPalette_id = None
def __logViewCreateDefaultPalette(*args, **kwargs):
    """
    __logViewCreateDefaultPalette()
    
    binding only available for test
    """
    global ___logViewCreateDefaultPalette_id
    if ___logViewCreateDefaultPalette_id is None:
        ___logViewCreateDefaultPalette_id = _client_service().register_static_object(('TechlogPlot', '__logViewCreateDefaultPalette'))
    return _client_service().call(___logViewCreateDefaultPalette_id, *args, **kwargs)


___logViewCreateDepthShiftWindow_id = None
def __logViewCreateDepthShiftWindow(*args, **kwargs):
    """
    __logViewCreateDepthShiftWindow(name: str, logViewID: Number, varNameRef: str=None, varNameShift: str=None) -> Number
    
    Create a depth shift window view
    
    Args:
        name (str): depth shift window name
        logViewID (Number): ID of the logView wich contains the variable(s)
        varNameRef (str): Optional; variable to insert as reference
        varNameShift (str): Optional; variable to insert as variable to shift
    
    Returns:
        Number: logview window ID
    """
    global ___logViewCreateDepthShiftWindow_id
    if ___logViewCreateDepthShiftWindow_id is None:
        ___logViewCreateDepthShiftWindow_id = _client_service().register_static_object(('TechlogPlot', '__logViewCreateDepthShiftWindow'))
    return _client_service().call(___logViewCreateDepthShiftWindow_id, *args, **kwargs)


___logViewCreateLogDB_id = None
def __logViewCreateLogDB(*args, **kwargs):
    """
    __logViewCreateLogDB()
    
    binding only available for test
    """
    global ___logViewCreateLogDB_id
    if ___logViewCreateLogDB_id is None:
        ___logViewCreateLogDB_id = _client_service().register_static_object(('TechlogPlot', '__logViewCreateLogDB'))
    return _client_service().call(___logViewCreateLogDB_id, *args, **kwargs)


___logViewDepthShiftWindowLoadCoreShiftVariable_id = None
def __logViewDepthShiftWindowLoadCoreShiftVariable(*args, **kwargs):
    """
    __logViewDepthShiftWindowLoadCoreShiftVariable(depthShiftID: Number, recoveryName: str, lithologyName: str) -> bool
    
    Load Core Shift variables inside a depth shift window
    
    Args:
        depthShiftID (Number): ID of the depth shift window
        recoveryName (str): name of the shift table [wellName.datasetName.recoveryName]
        lithologyName (str): name of the shift table [wellName.datasetName.lithologyName]
    
    Returns:
        bool: operation exit status
    """
    global ___logViewDepthShiftWindowLoadCoreShiftVariable_id
    if ___logViewDepthShiftWindowLoadCoreShiftVariable_id is None:
        ___logViewDepthShiftWindowLoadCoreShiftVariable_id = _client_service().register_static_object(('TechlogPlot', '__logViewDepthShiftWindowLoadCoreShiftVariable'))
    return _client_service().call(___logViewDepthShiftWindowLoadCoreShiftVariable_id, *args, **kwargs)


___logViewEncode_id = None
def __logViewEncode(*args, **kwargs):
    """
    __logViewEncode()
    
    binding only available for test
    """
    global ___logViewEncode_id
    if ___logViewEncode_id is None:
        ___logViewEncode_id = _client_service().register_static_object(('TechlogPlot', '__logViewEncode'))
    return _client_service().call(___logViewEncode_id, *args, **kwargs)


___logViewFillBetweenVariables_id = None
def __logViewFillBetweenVariables(*args, **kwargs):
    """
    __logViewFillBetweenVariables(plotID: Number, v1: str, v2: str, interpolate: bool) -> bool
    
    Add a default filling between two variable
    The two variable should be in the same track
    
    Args:
        plotID (Number): logview window ID
        v1 (str): first variable name
        v2 (str): second variable name
        interpolate (bool): interpolationOutput:
        bool: operation exit status
    """
    global ___logViewFillBetweenVariables_id
    if ___logViewFillBetweenVariables_id is None:
        ___logViewFillBetweenVariables_id = _client_service().register_static_object(('TechlogPlot', '__logViewFillBetweenVariables'))
    return _client_service().call(___logViewFillBetweenVariables_id, *args, **kwargs)


___logViewFillWithColorBetweenVariables_id = None
def __logViewFillWithColorBetweenVariables(*args, **kwargs):
    """
    __logViewFillWithColorBetweenVariables(plotID: Number, varName1: str, varName2: str, leftRed: Number, leftGreen: Number, leftRed: Number, rightRed: Number, rightGreen: Number, rightBlue: Number, interpolate: bool= False) -> bool
    
    Add a filling between two variables with color
    The two variable should be in the same track
    
    Args:
        plotID (Number): logview window ID
        varName1 (str): first variable name
        varName2 (str): second variable name
        leftRed (Number): red value of the left color
        leftGreen (Number): green value of the left color
        leftRed (Number): blue value of the left color
        rightRed (Number): red value of the right color
        rightGreen (Number): green value of the right color
        rightBlue (Number): blue value of the right color
        interpolate (bool): Optional; interpolate the second variable in the first one
    
    Returns:
        bool: operation exit status
    """
    global ___logViewFillWithColorBetweenVariables_id
    if ___logViewFillWithColorBetweenVariables_id is None:
        ___logViewFillWithColorBetweenVariables_id = _client_service().register_static_object(('TechlogPlot', '__logViewFillWithColorBetweenVariables'))
    return _client_service().call(___logViewFillWithColorBetweenVariables_id, *args, **kwargs)


___logViewFillWithPaletteBetweenVariables_id = None
def __logViewFillWithPaletteBetweenVariables(*args, **kwargs):
    """
    __logViewFillWithPaletteBetweenVariables(plotID: Number, varName1: str, varName2: str, palette: str, interpolate: bool= False) -> bool
    
    Add a filling between two variables variable with palette
    The two variable should be in the same track
    
    Args:
        plotID (Number): logview window ID
        varName1 (str): first variable name
        varName2 (str): second variable name
        palette (str): palette name (level can be set in the name by following the syntax: 'level\\palette')
        interpolate (bool): Optional; interpolate the second variable in the first one
    
    Returns:
        bool: operation exit status
    """
    global ___logViewFillWithPaletteBetweenVariables_id
    if ___logViewFillWithPaletteBetweenVariables_id is None:
        ___logViewFillWithPaletteBetweenVariables_id = _client_service().register_static_object(('TechlogPlot', '__logViewFillWithPaletteBetweenVariables'))
    return _client_service().call(___logViewFillWithPaletteBetweenVariables_id, *args, **kwargs)


___logViewFillWithPatternBetweenVariables_id = None
def __logViewFillWithPatternBetweenVariables(*args, **kwargs):
    """
    __logViewFillWithPatternBetweenVariables(plotID: Number, varName1: str, varName2: str, pattern1: str, pattern2: str, interpolate: bool= False) -> bool
    
    Add a filling between two variables variable with pattern
    The two variable should be in the same track
    
    Args:
        plotID (Number): logview window ID
        varName1 (str): first variable name
        varName2 (str): second variable name
        pattern1 (str): left pattern name
        pattern2 (str): right pattern name
        interpolate (bool): Optional; interpolate the second variable in the first one
    
    Returns:
        bool: operation exit status
    """
    global ___logViewFillWithPatternBetweenVariables_id
    if ___logViewFillWithPatternBetweenVariables_id is None:
        ___logViewFillWithPatternBetweenVariables_id = _client_service().register_static_object(('TechlogPlot', '__logViewFillWithPatternBetweenVariables'))
    return _client_service().call(___logViewFillWithPatternBetweenVariables_id, *args, **kwargs)


___logViewGenerateDownSampledDips_id = None
def __logViewGenerateDownSampledDips(*args, **kwargs):
    """
    __logViewGenerateDownSampledDips()
    
    binding only available for test
    """
    global ___logViewGenerateDownSampledDips_id
    if ___logViewGenerateDownSampledDips_id is None:
        ___logViewGenerateDownSampledDips_id = _client_service().register_static_object(('TechlogPlot', '__logViewGenerateDownSampledDips'))
    return _client_service().call(___logViewGenerateDownSampledDips_id, *args, **kwargs)


___logViewGenerateFilteredDips_id = None
def __logViewGenerateFilteredDips(*args, **kwargs):
    """
    __logViewGenerateFilteredDips()
    
    binding only available for test
    """
    global ___logViewGenerateFilteredDips_id
    if ___logViewGenerateFilteredDips_id is None:
        ___logViewGenerateFilteredDips_id = _client_service().register_static_object(('TechlogPlot', '__logViewGenerateFilteredDips'))
    return _client_service().call(___logViewGenerateFilteredDips_id, *args, **kwargs)


___logViewGetDatasetListForLogCreation_id = None
def __logViewGetDatasetListForLogCreation(*args, **kwargs):
    """
    __logViewGetDatasetListForLogCreation()
    
    binding only available for test
    """
    global ___logViewGetDatasetListForLogCreation_id
    if ___logViewGetDatasetListForLogCreation_id is None:
        ___logViewGetDatasetListForLogCreation_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetDatasetListForLogCreation'))
    return _client_service().call(___logViewGetDatasetListForLogCreation_id, *args, **kwargs)


___logViewGetDefaultReferenceUnit_id = None
def __logViewGetDefaultReferenceUnit(*args, **kwargs):
    """
    __logViewGetDefaultReferenceUnit()
    
    binding only available for test
    """
    global ___logViewGetDefaultReferenceUnit_id
    if ___logViewGetDefaultReferenceUnit_id is None:
        ___logViewGetDefaultReferenceUnit_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetDefaultReferenceUnit'))
    return _client_service().call(___logViewGetDefaultReferenceUnit_id, *args, **kwargs)


___logViewGetFirstContinuDataSet_id = None
def __logViewGetFirstContinuDataSet(*args, **kwargs):
    """
    __logViewGetFirstContinuDataSet()
    
    binding only available for test
    """
    global ___logViewGetFirstContinuDataSet_id
    if ___logViewGetFirstContinuDataSet_id is None:
        ___logViewGetFirstContinuDataSet_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetFirstContinuDataSet'))
    return _client_service().call(___logViewGetFirstContinuDataSet_id, *args, **kwargs)


___logViewGetLogReferenceSpaceAndUnit_id = None
def __logViewGetLogReferenceSpaceAndUnit(*args, **kwargs):
    """
    __logViewGetLogReferenceSpaceAndUnit()
    
    binding only available for test
    """
    global ___logViewGetLogReferenceSpaceAndUnit_id
    if ___logViewGetLogReferenceSpaceAndUnit_id is None:
        ___logViewGetLogReferenceSpaceAndUnit_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetLogReferenceSpaceAndUnit'))
    return _client_service().call(___logViewGetLogReferenceSpaceAndUnit_id, *args, **kwargs)


___logViewGetMarkerProperties_id = None
def __logViewGetMarkerProperties(*args, **kwargs):
    """
    __logViewGetMarkerProperties()
    
    binding only available for test
    """
    global ___logViewGetMarkerProperties_id
    if ___logViewGetMarkerProperties_id is None:
        ___logViewGetMarkerProperties_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetMarkerProperties'))
    return _client_service().call(___logViewGetMarkerProperties_id, *args, **kwargs)


___logViewGetOutputForRegression_id = None
def __logViewGetOutputForRegression(*args, **kwargs):
    """
    __logViewGetOutputForRegression()
    
    binding only available for test
    """
    global ___logViewGetOutputForRegression_id
    if ___logViewGetOutputForRegression_id is None:
        ___logViewGetOutputForRegression_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetOutputForRegression'))
    return _client_service().call(___logViewGetOutputForRegression_id, *args, **kwargs)


___logViewGetPossibleColorVariableList_id = None
def __logViewGetPossibleColorVariableList(*args, **kwargs):
    """
    __logViewGetPossibleColorVariableList()
    
    binding only available for test
    """
    global ___logViewGetPossibleColorVariableList_id
    if ___logViewGetPossibleColorVariableList_id is None:
        ___logViewGetPossibleColorVariableList_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleColorVariableList'))
    return _client_service().call(___logViewGetPossibleColorVariableList_id, *args, **kwargs)


___logViewGetPossibleRBGColorVariable_id = None
def __logViewGetPossibleRBGColorVariable(*args, **kwargs):
    """
    __logViewGetPossibleRBGColorVariable()
    
    binding only available for test
    """
    global ___logViewGetPossibleRBGColorVariable_id
    if ___logViewGetPossibleRBGColorVariable_id is None:
        ___logViewGetPossibleRBGColorVariable_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleRBGColorVariable'))
    return _client_service().call(___logViewGetPossibleRBGColorVariable_id, *args, **kwargs)


___logViewGetPossibleReferenceList_id = None
def __logViewGetPossibleReferenceList(*args, **kwargs):
    """
    __logViewGetPossibleReferenceList()
    
    binding only available for test
    """
    global ___logViewGetPossibleReferenceList_id
    if ___logViewGetPossibleReferenceList_id is None:
        ___logViewGetPossibleReferenceList_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleReferenceList'))
    return _client_service().call(___logViewGetPossibleReferenceList_id, *args, **kwargs)


___logViewGetPossibleVariableList_id = None
def __logViewGetPossibleVariableList(*args, **kwargs):
    """
    __logViewGetPossibleVariableList()
    
    binding only available for test
    """
    global ___logViewGetPossibleVariableList_id
    if ___logViewGetPossibleVariableList_id is None:
        ___logViewGetPossibleVariableList_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleVariableList'))
    return _client_service().call(___logViewGetPossibleVariableList_id, *args, **kwargs)


___logViewGetPossibleVariableListByAlias_id = None
def __logViewGetPossibleVariableListByAlias(*args, **kwargs):
    """
    __logViewGetPossibleVariableListByAlias()
    
    binding only available for test
    """
    global ___logViewGetPossibleVariableListByAlias_id
    if ___logViewGetPossibleVariableListByAlias_id is None:
        ___logViewGetPossibleVariableListByAlias_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleVariableListByAlias'))
    return _client_service().call(___logViewGetPossibleVariableListByAlias_id, *args, **kwargs)


___logViewGetPossibleVariableListByFamily_id = None
def __logViewGetPossibleVariableListByFamily(*args, **kwargs):
    """
    __logViewGetPossibleVariableListByFamily()
    
    binding only available for test
    """
    global ___logViewGetPossibleVariableListByFamily_id
    if ___logViewGetPossibleVariableListByFamily_id is None:
        ___logViewGetPossibleVariableListByFamily_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleVariableListByFamily'))
    return _client_service().call(___logViewGetPossibleVariableListByFamily_id, *args, **kwargs)


___logViewGetPossibleVariableListByName_id = None
def __logViewGetPossibleVariableListByName(*args, **kwargs):
    """
    __logViewGetPossibleVariableListByName()
    
    binding only available for test
    """
    global ___logViewGetPossibleVariableListByName_id
    if ___logViewGetPossibleVariableListByName_id is None:
        ___logViewGetPossibleVariableListByName_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleVariableListByName'))
    return _client_service().call(___logViewGetPossibleVariableListByName_id, *args, **kwargs)


___logViewGetPossibleVariableListForDepthShifting_id = None
def __logViewGetPossibleVariableListForDepthShifting(*args, **kwargs):
    """
    __logViewGetPossibleVariableListForDepthShifting()
    
    binding only available for test
    """
    global ___logViewGetPossibleVariableListForDepthShifting_id
    if ___logViewGetPossibleVariableListForDepthShifting_id is None:
        ___logViewGetPossibleVariableListForDepthShifting_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleVariableListForDepthShifting'))
    return _client_service().call(___logViewGetPossibleVariableListForDepthShifting_id, *args, **kwargs)


___logViewGetPossibleVariableListForDip_id = None
def __logViewGetPossibleVariableListForDip(*args, **kwargs):
    """
    __logViewGetPossibleVariableListForDip()
    
    binding only available for test
    """
    global ___logViewGetPossibleVariableListForDip_id
    if ___logViewGetPossibleVariableListForDip_id is None:
        ___logViewGetPossibleVariableListForDip_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetPossibleVariableListForDip'))
    return _client_service().call(___logViewGetPossibleVariableListForDip_id, *args, **kwargs)


___logViewGetReferenceUnitWithMultiReference_id = None
def __logViewGetReferenceUnitWithMultiReference(*args, **kwargs):
    """
    __logViewGetReferenceUnitWithMultiReference()
    
    binding only available for test
    """
    global ___logViewGetReferenceUnitWithMultiReference_id
    if ___logViewGetReferenceUnitWithMultiReference_id is None:
        ___logViewGetReferenceUnitWithMultiReference_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetReferenceUnitWithMultiReference'))
    return _client_service().call(___logViewGetReferenceUnitWithMultiReference_id, *args, **kwargs)


___logViewGetVariableColour_id = None
def __logViewGetVariableColour(*args, **kwargs):
    """
    __logViewGetVariableColour()
    
    binding only available for test
    """
    global ___logViewGetVariableColour_id
    if ___logViewGetVariableColour_id is None:
        ___logViewGetVariableColour_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetVariableColour'))
    return _client_service().call(___logViewGetVariableColour_id, *args, **kwargs)


___logViewGetVariableListForAxeX_id = None
def __logViewGetVariableListForAxeX(*args, **kwargs):
    """
    __logViewGetVariableListForAxeX()
    
    binding only available for test
    """
    global ___logViewGetVariableListForAxeX_id
    if ___logViewGetVariableListForAxeX_id is None:
        ___logViewGetVariableListForAxeX_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetVariableListForAxeX'))
    return _client_service().call(___logViewGetVariableListForAxeX_id, *args, **kwargs)


___logViewGetVariableListForLogUncertainties_id = None
def __logViewGetVariableListForLogUncertainties(*args, **kwargs):
    """
    __logViewGetVariableListForLogUncertainties()
    
    binding only available for test
    """
    global ___logViewGetVariableListForLogUncertainties_id
    if ___logViewGetVariableListForLogUncertainties_id is None:
        ___logViewGetVariableListForLogUncertainties_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetVariableListForLogUncertainties'))
    return _client_service().call(___logViewGetVariableListForLogUncertainties_id, *args, **kwargs)


___logViewGetWellInformations_id = None
def __logViewGetWellInformations(*args, **kwargs):
    """
    __logViewGetWellInformations()
    
    binding only available for test
    """
    global ___logViewGetWellInformations_id
    if ___logViewGetWellInformations_id is None:
        ___logViewGetWellInformations_id = _client_service().register_static_object(('TechlogPlot', '__logViewGetWellInformations'))
    return _client_service().call(___logViewGetWellInformations_id, *args, **kwargs)


___logViewHideLogs_id = None
def __logViewHideLogs(*args, **kwargs):
    """
    __logViewHideLogs()
    
    binding only available for test
    """
    global ___logViewHideLogs_id
    if ___logViewHideLogs_id is None:
        ___logViewHideLogs_id = _client_service().register_static_object(('TechlogPlot', '__logViewHideLogs'))
    return _client_service().call(___logViewHideLogs_id, *args, **kwargs)


___logViewInitAnnotationTrackListReferenceSpaceAndUnit_id = None
def __logViewInitAnnotationTrackListReferenceSpaceAndUnit(*args, **kwargs):
    """
    __logViewInitAnnotationTrackListReferenceSpaceAndUnit()
    
    binding only available for test
    """
    global ___logViewInitAnnotationTrackListReferenceSpaceAndUnit_id
    if ___logViewInitAnnotationTrackListReferenceSpaceAndUnit_id is None:
        ___logViewInitAnnotationTrackListReferenceSpaceAndUnit_id = _client_service().register_static_object(('TechlogPlot', '__logViewInitAnnotationTrackListReferenceSpaceAndUnit'))
    return _client_service().call(___logViewInitAnnotationTrackListReferenceSpaceAndUnit_id, *args, **kwargs)


___logViewInitSymbolTrackGroupReferenceSpaceAndUnit_id = None
def __logViewInitSymbolTrackGroupReferenceSpaceAndUnit(*args, **kwargs):
    """
    __logViewInitSymbolTrackGroupReferenceSpaceAndUnit()
    
    binding only available for test
    """
    global ___logViewInitSymbolTrackGroupReferenceSpaceAndUnit_id
    if ___logViewInitSymbolTrackGroupReferenceSpaceAndUnit_id is None:
        ___logViewInitSymbolTrackGroupReferenceSpaceAndUnit_id = _client_service().register_static_object(('TechlogPlot', '__logViewInitSymbolTrackGroupReferenceSpaceAndUnit'))
    return _client_service().call(___logViewInitSymbolTrackGroupReferenceSpaceAndUnit_id, *args, **kwargs)


___logViewInsertBHA_id = None
def __logViewInsertBHA(*args, **kwargs):
    """
    __logViewInsertBHA()
    
    binding only available for test
    """
    global ___logViewInsertBHA_id
    if ___logViewInsertBHA_id is None:
        ___logViewInsertBHA_id = _client_service().register_static_object(('TechlogPlot', '__logViewInsertBHA'))
    return _client_service().call(___logViewInsertBHA_id, *args, **kwargs)


___logViewInsertLithologyTrack_id = None
def __logViewInsertLithologyTrack(*args, **kwargs):
    """
    __logViewInsertLithologyTrack(plotID: Number) -> Number
    
    Insert a lithology track in a logview
    
    Args:
        plotID (Number): logview window ID
    
    Returns:
        Number: reference number of the lithology track if success, else -1
    """
    global ___logViewInsertLithologyTrack_id
    if ___logViewInsertLithologyTrack_id is None:
        ___logViewInsertLithologyTrack_id = _client_service().register_static_object(('TechlogPlot', '__logViewInsertLithologyTrack'))
    return _client_service().call(___logViewInsertLithologyTrack_id, *args, **kwargs)


___logViewInsertTemplateTrackInLogViewerByFileName_id = None
def __logViewInsertTemplateTrackInLogViewerByFileName(*args, **kwargs):
    """
    __logViewInsertTemplateTrackInLogViewerByFileName()
    
    binding only available for test
    """
    global ___logViewInsertTemplateTrackInLogViewerByFileName_id
    if ___logViewInsertTemplateTrackInLogViewerByFileName_id is None:
        ___logViewInsertTemplateTrackInLogViewerByFileName_id = _client_service().register_static_object(('TechlogPlot', '__logViewInsertTemplateTrackInLogViewerByFileName'))
    return _client_service().call(___logViewInsertTemplateTrackInLogViewerByFileName_id, *args, **kwargs)


___logViewInsertWellSchematic_id = None
def __logViewInsertWellSchematic(*args, **kwargs):
    """
    __logViewInsertWellSchematic()
    
    binding only available for test
    """
    global ___logViewInsertWellSchematic_id
    if ___logViewInsertWellSchematic_id is None:
        ___logViewInsertWellSchematic_id = _client_service().register_static_object(('TechlogPlot', '__logViewInsertWellSchematic'))
    return _client_service().call(___logViewInsertWellSchematic_id, *args, **kwargs)


___logViewInsertZonationTrackToLastPosition_id = None
def __logViewInsertZonationTrackToLastPosition(*args, **kwargs):
    """
    __logViewInsertZonationTrackToLastPosition()
    
    binding only available for test
    """
    global ___logViewInsertZonationTrackToLastPosition_id
    if ___logViewInsertZonationTrackToLastPosition_id is None:
        ___logViewInsertZonationTrackToLastPosition_id = _client_service().register_static_object(('TechlogPlot', '__logViewInsertZonationTrackToLastPosition'))
    return _client_service().call(___logViewInsertZonationTrackToLastPosition_id, *args, **kwargs)


___logViewLoadSymbols_id = None
def __logViewLoadSymbols(*args, **kwargs):
    """
    __logViewLoadSymbols()
    
    binding only available for test
    """
    global ___logViewLoadSymbols_id
    if ___logViewLoadSymbols_id is None:
        ___logViewLoadSymbols_id = _client_service().register_static_object(('TechlogPlot', '__logViewLoadSymbols'))
    return _client_service().call(___logViewLoadSymbols_id, *args, **kwargs)


___logViewReloadDataset_id = None
def __logViewReloadDataset(*args, **kwargs):
    """
    __logViewReloadDataset()
    
    binding only available for test
    """
    global ___logViewReloadDataset_id
    if ___logViewReloadDataset_id is None:
        ___logViewReloadDataset_id = _client_service().register_static_object(('TechlogPlot', '__logViewReloadDataset'))
    return _client_service().call(___logViewReloadDataset_id, *args, **kwargs)


___logViewReloadGenericLog_id = None
def __logViewReloadGenericLog(*args, **kwargs):
    """
    __logViewReloadGenericLog()
    
    binding only available for test
    """
    global ___logViewReloadGenericLog_id
    if ___logViewReloadGenericLog_id is None:
        ___logViewReloadGenericLog_id = _client_service().register_static_object(('TechlogPlot', '__logViewReloadGenericLog'))
    return _client_service().call(___logViewReloadGenericLog_id, *args, **kwargs)


___logViewSetHeaderVisibility_id = None
def __logViewSetHeaderVisibility(*args, **kwargs):
    """
    __logViewSetHeaderVisibility()
    
    binding only available for test
    """
    global ___logViewSetHeaderVisibility_id
    if ___logViewSetHeaderVisibility_id is None:
        ___logViewSetHeaderVisibility_id = _client_service().register_static_object(('TechlogPlot', '__logViewSetHeaderVisibility'))
    return _client_service().call(___logViewSetHeaderVisibility_id, *args, **kwargs)


___logViewSetTLLogObjectProperty_id = None
def __logViewSetTLLogObjectProperty(*args, **kwargs):
    """
    __logViewSetTLLogObjectProperty()
    
    binding only available for test
    """
    global ___logViewSetTLLogObjectProperty_id
    if ___logViewSetTLLogObjectProperty_id is None:
        ___logViewSetTLLogObjectProperty_id = _client_service().register_static_object(('TechlogPlot', '__logViewSetTLLogObjectProperty'))
    return _client_service().call(___logViewSetTLLogObjectProperty_id, *args, **kwargs)


___logViewSetToCurrentZones_id = None
def __logViewSetToCurrentZones(*args, **kwargs):
    """
    __logViewSetToCurrentZones()
    
    binding only available for test
    """
    global ___logViewSetToCurrentZones_id
    if ___logViewSetToCurrentZones_id is None:
        ___logViewSetToCurrentZones_id = _client_service().register_static_object(('TechlogPlot', '__logViewSetToCurrentZones'))
    return _client_service().call(___logViewSetToCurrentZones_id, *args, **kwargs)


___logViewSetVariableNameOrientation_id = None
def __logViewSetVariableNameOrientation(*args, **kwargs):
    """
    __logViewSetVariableNameOrientation()
    
    binding only available for test
    """
    global ___logViewSetVariableNameOrientation_id
    if ___logViewSetVariableNameOrientation_id is None:
        ___logViewSetVariableNameOrientation_id = _client_service().register_static_object(('TechlogPlot', '__logViewSetVariableNameOrientation'))
    return _client_service().call(___logViewSetVariableNameOrientation_id, *args, **kwargs)


___logViewSetVerticalTopPosition_id = None
def __logViewSetVerticalTopPosition(*args, **kwargs):
    """
    __logViewSetVerticalTopPosition()
    
    active the benchmark
    
    Args:
    
    Returns:
    """
    global ___logViewSetVerticalTopPosition_id
    if ___logViewSetVerticalTopPosition_id is None:
        ___logViewSetVerticalTopPosition_id = _client_service().register_static_object(('TechlogPlot', '__logViewSetVerticalTopPosition'))
    return _client_service().call(___logViewSetVerticalTopPosition_id, *args, **kwargs)


___logViewShowLogProperties_id = None
def __logViewShowLogProperties(*args, **kwargs):
    """
    __logViewShowLogProperties()
    
    binding only available for test
    """
    global ___logViewShowLogProperties_id
    if ___logViewShowLogProperties_id is None:
        ___logViewShowLogProperties_id = _client_service().register_static_object(('TechlogPlot', '__logViewShowLogProperties'))
    return _client_service().call(___logViewShowLogProperties_id, *args, **kwargs)


___logViewZoneIsValidForWell_id = None
def __logViewZoneIsValidForWell(*args, **kwargs):
    """
    __logViewZoneIsValidForWell()
    
    binding only available for test
    """
    global ___logViewZoneIsValidForWell_id
    if ___logViewZoneIsValidForWell_id is None:
        ___logViewZoneIsValidForWell_id = _client_service().register_static_object(('TechlogPlot', '__logViewZoneIsValidForWell'))
    return _client_service().call(___logViewZoneIsValidForWell_id, *args, **kwargs)


___logviewCloseSingleDepthPlot_id = None
def __logviewCloseSingleDepthPlot(*args, **kwargs):
    """
    __logviewCloseSingleDepthPlot()
    
    Close a single depth plot
    """
    global ___logviewCloseSingleDepthPlot_id
    if ___logviewCloseSingleDepthPlot_id is None:
        ___logviewCloseSingleDepthPlot_id = _client_service().register_static_object(('TechlogPlot', '__logviewCloseSingleDepthPlot'))
    return _client_service().call(___logviewCloseSingleDepthPlot_id, *args, **kwargs)


___logviewOpenSingleDepthPlotWithTraceArray_id = None
def __logviewOpenSingleDepthPlotWithTraceArray(*args, **kwargs):
    """
    __logviewOpenSingleDepthPlotWithTraceArray()
    
    Open a single depth plot with trace array data
    """
    global ___logviewOpenSingleDepthPlotWithTraceArray_id
    if ___logviewOpenSingleDepthPlotWithTraceArray_id is None:
        ___logviewOpenSingleDepthPlotWithTraceArray_id = _client_service().register_static_object(('TechlogPlot', '__logviewOpenSingleDepthPlotWithTraceArray'))
    return _client_service().call(___logviewOpenSingleDepthPlotWithTraceArray_id, *args, **kwargs)


___logviewSetColumnNameVisibleInHeader_id = None
def __logviewSetColumnNameVisibleInHeader(*args, **kwargs):
    """
    __logviewSetColumnNameVisibleInHeader(plotID: Number, v: str, visible: bool) -> bool
    
    Display or not the columns names in the header
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        visible (bool): Display or not the columns names
    
    Returns:
        bool: operation exit status
    """
    global ___logviewSetColumnNameVisibleInHeader_id
    if ___logviewSetColumnNameVisibleInHeader_id is None:
        ___logviewSetColumnNameVisibleInHeader_id = _client_service().register_static_object(('TechlogPlot', '__logviewSetColumnNameVisibleInHeader'))
    return _client_service().call(___logviewSetColumnNameVisibleInHeader_id, *args, **kwargs)


___logviewSetTraceArrayColors_id = None
def __logviewSetTraceArrayColors(*args, **kwargs):
    """
    __logviewSetTraceArrayColors(plotID: Number, v: str, selection: Number, r: Number, g: Number, b: Number) -> bool
    
    Change the colors of the traces of a trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        selection (Number): trace selection {0 = first trace, 1 = all the traces (except first and last), 2 = last trace}
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global ___logviewSetTraceArrayColors_id
    if ___logviewSetTraceArrayColors_id is None:
        ___logviewSetTraceArrayColors_id = _client_service().register_static_object(('TechlogPlot', '__logviewSetTraceArrayColors'))
    return _client_service().call(___logviewSetTraceArrayColors_id, *args, **kwargs)


___logviewSetTraceArrayDisplayType_id = None
def __logviewSetTraceArrayDisplayType(*args, **kwargs):
    """
    __logviewSetTraceArrayDisplayType(plotID: Number, v: str, type: int) -> bool
    
    Change the display type for trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        type (int): display type {0 = 'LINE', 1 = 'ARRAY', 2 = 'TRACE'}
    
    Returns:
        bool: operation exit status
    """
    global ___logviewSetTraceArrayDisplayType_id
    if ___logviewSetTraceArrayDisplayType_id is None:
        ___logviewSetTraceArrayDisplayType_id = _client_service().register_static_object(('TechlogPlot', '__logviewSetTraceArrayDisplayType'))
    return _client_service().call(___logviewSetTraceArrayDisplayType_id, *args, **kwargs)


___logviewSetTraceArrayPalette_id = None
def __logviewSetTraceArrayPalette(*args, **kwargs):
    """
    __logviewSetTraceArrayPalette(plotID: Number, v: str, paletteName: str) -> bool
    
    Change the palette of a trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        paletteName (str): na of the palette
    
    Returns:
        bool: operation exit status
    """
    global ___logviewSetTraceArrayPalette_id
    if ___logviewSetTraceArrayPalette_id is None:
        ___logviewSetTraceArrayPalette_id = _client_service().register_static_object(('TechlogPlot', '__logviewSetTraceArrayPalette'))
    return _client_service().call(___logviewSetTraceArrayPalette_id, *args, **kwargs)


___logviewTestCreateDipPicking_id = None
def __logviewTestCreateDipPicking(*args, **kwargs):
    """
    __logviewTestCreateDipPicking(plotID: Number, imgNameList: list, layoutName: str, setName: str, fName: str) -> Number
    
    Create dip picking on an existing logview
    
    Args:
        plotID (Number): logview window ID
        imgNameList (list): Name of the image for dip picking
        layoutName (str): Name of the file to save the layout
        setName (str): Name of the dataset created
        fName (str): Name of the file to save dip creation
    
    Returns:
        Number: dip logview window ID
    """
    global ___logviewTestCreateDipPicking_id
    if ___logviewTestCreateDipPicking_id is None:
        ___logviewTestCreateDipPicking_id = _client_service().register_static_object(('TechlogPlot', '__logviewTestCreateDipPicking'))
    return _client_service().call(___logviewTestCreateDipPicking_id, *args, **kwargs)


___logviewTraceArrayExtractSingleTrace_id = None
def __logviewTraceArrayExtractSingleTrace(*args, **kwargs):
    """
    __logviewTraceArrayExtractSingleTrace(plotID: Number, v: str, selection: int) -> bool
    
    Extract a single trace
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        selection (int): trace to extract
    
    Returns:
        bool: operation exit status
    """
    global ___logviewTraceArrayExtractSingleTrace_id
    if ___logviewTraceArrayExtractSingleTrace_id is None:
        ___logviewTraceArrayExtractSingleTrace_id = _client_service().register_static_object(('TechlogPlot', '__logviewTraceArrayExtractSingleTrace'))
    return _client_service().call(___logviewTraceArrayExtractSingleTrace_id, *args, **kwargs)


___logviewTraceArrayExtractTraces_id = None
def __logviewTraceArrayExtractTraces(*args, **kwargs):
    """
    __logviewTraceArrayExtractTraces(plotID: Number, v: str, selection: list) -> bool
    
    Extract traces from a trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        selection (list): traces to extract
    
    Returns:
        bool: operation exit status
    """
    global ___logviewTraceArrayExtractTraces_id
    if ___logviewTraceArrayExtractTraces_id is None:
        ___logviewTraceArrayExtractTraces_id = _client_service().register_static_object(('TechlogPlot', '__logviewTraceArrayExtractTraces'))
    return _client_service().call(___logviewTraceArrayExtractTraces_id, *args, **kwargs)


___logviewTraceArrayExtractTracesAsAnArray_id = None
def __logviewTraceArrayExtractTracesAsAnArray(*args, **kwargs):
    """
    __logviewTraceArrayExtractTracesAsAnArray(plotID: Number, v: str, selection: list) -> bool
    
    Extract traces from a trace array as a trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        selection (list): traces to extract
    
    Returns:
        bool: operation exit status
    """
    global ___logviewTraceArrayExtractTracesAsAnArray_id
    if ___logviewTraceArrayExtractTracesAsAnArray_id is None:
        ___logviewTraceArrayExtractTracesAsAnArray_id = _client_service().register_static_object(('TechlogPlot', '__logviewTraceArrayExtractTracesAsAnArray'))
    return _client_service().call(___logviewTraceArrayExtractTracesAsAnArray_id, *args, **kwargs)


___logviewTraceArraySelectTraces_id = None
def __logviewTraceArraySelectTraces(*args, **kwargs):
    """
    __logviewTraceArraySelectTraces(plotID: Number, v: str, selection: list) -> bool
    
    Select traces from a trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        selection (list): traces to select
    
    Returns:
        bool: operation exit status
    """
    global ___logviewTraceArraySelectTraces_id
    if ___logviewTraceArraySelectTraces_id is None:
        ___logviewTraceArraySelectTraces_id = _client_service().register_static_object(('TechlogPlot', '__logviewTraceArraySelectTraces'))
    return _client_service().call(___logviewTraceArraySelectTraces_id, *args, **kwargs)


___logviewTraceArraySetMinMaxPartialTrack_id = None
def __logviewTraceArraySetMinMaxPartialTrack(*args, **kwargs):
    """
    __logviewTraceArraySetMinMaxPartialTrack(plotID: Number, v: str, min: int, max: int) -> bool
    
    Set the min and max percentage of track displaying
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (int): min percentage
        max (int): max percentage
    
    Returns:
        bool: operation exit status
    """
    global ___logviewTraceArraySetMinMaxPartialTrack_id
    if ___logviewTraceArraySetMinMaxPartialTrack_id is None:
        ___logviewTraceArraySetMinMaxPartialTrack_id = _client_service().register_static_object(('TechlogPlot', '__logviewTraceArraySetMinMaxPartialTrack'))
    return _client_service().call(___logviewTraceArraySetMinMaxPartialTrack_id, *args, **kwargs)


___logviewTraceArraySetWiggleIntervals_id = None
def __logviewTraceArraySetWiggleIntervals(*args, **kwargs):
    """
    __logviewTraceArraySetWiggleIntervals(plotID: Number, v: str, selection: float) -> bool
    
    Select traces from a trace array
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        selection (float): window size
    
    Returns:
        bool: operation exit status
    """
    global ___logviewTraceArraySetWiggleIntervals_id
    if ___logviewTraceArraySetWiggleIntervals_id is None:
        ___logviewTraceArraySetWiggleIntervals_id = _client_service().register_static_object(('TechlogPlot', '__logviewTraceArraySetWiggleIntervals'))
    return _client_service().call(___logviewTraceArraySetWiggleIntervals_id, *args, **kwargs)


___matrixBoxAddData_id = None
def __matrixBoxAddData(*args, **kwargs):
    """
    __matrixBoxAddData(ID: Number, Dataset: str) -> bool
    
    Set a variable in the matrix box plot
    
    Args:
        ID (Number): plot ID
        Dataset (str): Wellname.DTname
    
    Returns:
        bool: True if operation is done else exception
    """
    global ___matrixBoxAddData_id
    if ___matrixBoxAddData_id is None:
        ___matrixBoxAddData_id = _client_service().register_static_object(('TechlogPlot', '__matrixBoxAddData'))
    return _client_service().call(___matrixBoxAddData_id, *args, **kwargs)


___matrixBoxChangeObject_id = None
def __matrixBoxChangeObject(*args, **kwargs):
    """
    __matrixBoxChangeObject()
    
    binding only available for test
    """
    global ___matrixBoxChangeObject_id
    if ___matrixBoxChangeObject_id is None:
        ___matrixBoxChangeObject_id = _client_service().register_static_object(('TechlogPlot', '__matrixBoxChangeObject'))
    return _client_service().call(___matrixBoxChangeObject_id, *args, **kwargs)


___matrixBoxExtractCells_id = None
def __matrixBoxExtractCells(*args, **kwargs):
    """
    __matrixBoxExtractCells()
    
    binding only available for test
    """
    global ___matrixBoxExtractCells_id
    if ___matrixBoxExtractCells_id is None:
        ___matrixBoxExtractCells_id = _client_service().register_static_object(('TechlogPlot', '__matrixBoxExtractCells'))
    return _client_service().call(___matrixBoxExtractCells_id, *args, **kwargs)


___matrixCrossPlotAddChartInTest_id = None
def __matrixCrossPlotAddChartInTest(*args, **kwargs):
    """
    __matrixCrossPlotAddChartInTest()
    
    binding only available for test
    """
    global ___matrixCrossPlotAddChartInTest_id
    if ___matrixCrossPlotAddChartInTest_id is None:
        ___matrixCrossPlotAddChartInTest_id = _client_service().register_static_object(('TechlogPlot', '__matrixCrossPlotAddChartInTest'))
    return _client_service().call(___matrixCrossPlotAddChartInTest_id, *args, **kwargs)


___matrixCrossPlotExtractCells_id = None
def __matrixCrossPlotExtractCells(*args, **kwargs):
    """
    __matrixCrossPlotExtractCells()
    
    binding only available for test
    """
    global ___matrixCrossPlotExtractCells_id
    if ___matrixCrossPlotExtractCells_id is None:
        ___matrixCrossPlotExtractCells_id = _client_service().register_static_object(('TechlogPlot', '__matrixCrossPlotExtractCells'))
    return _client_service().call(___matrixCrossPlotExtractCells_id, *args, **kwargs)


___matrixCustomDemo_id = None
def __matrixCustomDemo(*args, **kwargs):
    """
    __matrixCustomDemo() -> Number
    
    Find the ID of a name-known plot of a matrix custom-plot
    
    Returns:
        Number: matrix custom-plot window ID
    """
    global ___matrixCustomDemo_id
    if ___matrixCustomDemo_id is None:
        ___matrixCustomDemo_id = _client_service().register_static_object(('TechlogPlot', '__matrixCustomDemo'))
    return _client_service().call(___matrixCustomDemo_id, *args, **kwargs)


___matrixCustomDemoWithData_id = None
def __matrixCustomDemoWithData(*args, **kwargs):
    """
    __matrixCustomDemoWithData() -> Number
    
    Find the ID of a name-known plot of a matrix custom-plot
    
    Returns:
        Number: matrix custom-plot window ID
    """
    global ___matrixCustomDemoWithData_id
    if ___matrixCustomDemoWithData_id is None:
        ___matrixCustomDemoWithData_id = _client_service().register_static_object(('TechlogPlot', '__matrixCustomDemoWithData'))
    return _client_service().call(___matrixCustomDemoWithData_id, *args, **kwargs)


___matrixHistogramChangeObject_id = None
def __matrixHistogramChangeObject(*args, **kwargs):
    """
    __matrixHistogramChangeObject()
    
    binding only available for test
    """
    global ___matrixHistogramChangeObject_id
    if ___matrixHistogramChangeObject_id is None:
        ___matrixHistogramChangeObject_id = _client_service().register_static_object(('TechlogPlot', '__matrixHistogramChangeObject'))
    return _client_service().call(___matrixHistogramChangeObject_id, *args, **kwargs)


___matrixHistogramExtractCell_id = None
def __matrixHistogramExtractCell(*args, **kwargs):
    """
    __matrixHistogramExtractCell()
    
    binding only available for test
    """
    global ___matrixHistogramExtractCell_id
    if ___matrixHistogramExtractCell_id is None:
        ___matrixHistogramExtractCell_id = _client_service().register_static_object(('TechlogPlot', '__matrixHistogramExtractCell'))
    return _client_service().call(___matrixHistogramExtractCell_id, *args, **kwargs)


___matrixPCAChangeData_id = None
def __matrixPCAChangeData(*args, **kwargs):
    """
    __matrixPCAChangeData()
    
    binding only available for test
    """
    global ___matrixPCAChangeData_id
    if ___matrixPCAChangeData_id is None:
        ___matrixPCAChangeData_id = _client_service().register_static_object(('TechlogPlot', '__matrixPCAChangeData'))
    return _client_service().call(___matrixPCAChangeData_id, *args, **kwargs)


___matrixPCACreate_id = None
def __matrixPCACreate(*args, **kwargs):
    """
    __matrixPCACreate(ml: list) -> Number
    
    Create a matrix PCA
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: plot ID
    """
    global ___matrixPCACreate_id
    if ___matrixPCACreate_id is None:
        ___matrixPCACreate_id = _client_service().register_static_object(('TechlogPlot', '__matrixPCACreate'))
    return _client_service().call(___matrixPCACreate_id, *args, **kwargs)


___matrixSplomChangeObject_id = None
def __matrixSplomChangeObject(*args, **kwargs):
    """
    __matrixSplomChangeObject()
    
    binding only available for test
    """
    global ___matrixSplomChangeObject_id
    if ___matrixSplomChangeObject_id is None:
        ___matrixSplomChangeObject_id = _client_service().register_static_object(('TechlogPlot', '__matrixSplomChangeObject'))
    return _client_service().call(___matrixSplomChangeObject_id, *args, **kwargs)


___openDalTransactionRW_id = None
def __openDalTransactionRW(*args, **kwargs):
    """
    __openDalTransactionRW(seconds: int) -> bool
    
    Open a Read-Write DAL transaction after x seconds on main thread
    
    Args:
        seconds (int): number of seconds after transaction opening
    
    Returns:
        bool: operation exit status
    """
    global ___openDalTransactionRW_id
    if ___openDalTransactionRW_id is None:
        ___openDalTransactionRW_id = _client_service().register_static_object(('TechlogPlot', '__openDalTransactionRW'))
    return _client_service().call(___openDalTransactionRW_id, *args, **kwargs)


___outputBenchmarkResult_id = None
def __outputBenchmarkResult(*args, **kwargs):
    """
    __outputBenchmarkResult(csv: bool)
    
    print the benchmark results
    
    Args:
        csv (bool): True = print in csv format else use space separator
    
    Returns:
    """
    global ___outputBenchmarkResult_id
    if ___outputBenchmarkResult_id is None:
        ___outputBenchmarkResult_id = _client_service().register_static_object(('TechlogPlot', '__outputBenchmarkResult'))
    return _client_service().call(___outputBenchmarkResult_id, *args, **kwargs)


___pyBindingTest_create_id = None
def __pyBindingTest_create(*args, **kwargs):
    """
    __pyBindingTest_create()
    
    binding only available for test
    """
    global ___pyBindingTest_create_id
    if ___pyBindingTest_create_id is None:
        ___pyBindingTest_create_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_create'))
    return _client_service().call(___pyBindingTest_create_id, *args, **kwargs)


___pyBindingTest_destroy_id = None
def __pyBindingTest_destroy(*args, **kwargs):
    """
    __pyBindingTest_destroy()
    
    binding only available for test
    """
    global ___pyBindingTest_destroy_id
    if ___pyBindingTest_destroy_id is None:
        ___pyBindingTest_destroy_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_destroy'))
    return _client_service().call(___pyBindingTest_destroy_id, *args, **kwargs)


___pyBindingTest_func0_id = None
def __pyBindingTest_func0(*args, **kwargs):
    """
    __pyBindingTest_func0()
    
    binding only available for test
    """
    global ___pyBindingTest_func0_id
    if ___pyBindingTest_func0_id is None:
        ___pyBindingTest_func0_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_func0'))
    return _client_service().call(___pyBindingTest_func0_id, *args, **kwargs)


___pyBindingTest_func1_id = None
def __pyBindingTest_func1(*args, **kwargs):
    """
    __pyBindingTest_func1()
    
    binding only available for test
    """
    global ___pyBindingTest_func1_id
    if ___pyBindingTest_func1_id is None:
        ___pyBindingTest_func1_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_func1'))
    return _client_service().call(___pyBindingTest_func1_id, *args, **kwargs)


___pyBindingTest_func2_id = None
def __pyBindingTest_func2(*args, **kwargs):
    """
    __pyBindingTest_func2()
    
    binding only available for test
    """
    global ___pyBindingTest_func2_id
    if ___pyBindingTest_func2_id is None:
        ___pyBindingTest_func2_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_func2'))
    return _client_service().call(___pyBindingTest_func2_id, *args, **kwargs)


___pyBindingTest_func3_id = None
def __pyBindingTest_func3(*args, **kwargs):
    """
    __pyBindingTest_func3()
    
    binding only available for test
    """
    global ___pyBindingTest_func3_id
    if ___pyBindingTest_func3_id is None:
        ___pyBindingTest_func3_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_func3'))
    return _client_service().call(___pyBindingTest_func3_id, *args, **kwargs)


___pyBindingTest_func4_id = None
def __pyBindingTest_func4(*args, **kwargs):
    """
    __pyBindingTest_func4()
    
    binding only available for test
    """
    global ___pyBindingTest_func4_id
    if ___pyBindingTest_func4_id is None:
        ___pyBindingTest_func4_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_func4'))
    return _client_service().call(___pyBindingTest_func4_id, *args, **kwargs)


___pyBindingTest_funcV0_id = None
def __pyBindingTest_funcV0(*args, **kwargs):
    """
    __pyBindingTest_funcV0()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV0_id
    if ___pyBindingTest_funcV0_id is None:
        ___pyBindingTest_funcV0_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV0'))
    return _client_service().call(___pyBindingTest_funcV0_id, *args, **kwargs)


___pyBindingTest_funcV1_id = None
def __pyBindingTest_funcV1(*args, **kwargs):
    """
    __pyBindingTest_funcV1()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV1_id
    if ___pyBindingTest_funcV1_id is None:
        ___pyBindingTest_funcV1_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV1'))
    return _client_service().call(___pyBindingTest_funcV1_id, *args, **kwargs)


___pyBindingTest_funcV2_id = None
def __pyBindingTest_funcV2(*args, **kwargs):
    """
    __pyBindingTest_funcV2()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV2_id
    if ___pyBindingTest_funcV2_id is None:
        ___pyBindingTest_funcV2_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV2'))
    return _client_service().call(___pyBindingTest_funcV2_id, *args, **kwargs)


___pyBindingTest_funcV3_id = None
def __pyBindingTest_funcV3(*args, **kwargs):
    """
    __pyBindingTest_funcV3()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV3_id
    if ___pyBindingTest_funcV3_id is None:
        ___pyBindingTest_funcV3_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV3'))
    return _client_service().call(___pyBindingTest_funcV3_id, *args, **kwargs)


___pyBindingTest_funcV4_id = None
def __pyBindingTest_funcV4(*args, **kwargs):
    """
    __pyBindingTest_funcV4()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV4_id
    if ___pyBindingTest_funcV4_id is None:
        ___pyBindingTest_funcV4_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV4'))
    return _client_service().call(___pyBindingTest_funcV4_id, *args, **kwargs)


___pyBindingTest_funcV5_id = None
def __pyBindingTest_funcV5(*args, **kwargs):
    """
    __pyBindingTest_funcV5()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV5_id
    if ___pyBindingTest_funcV5_id is None:
        ___pyBindingTest_funcV5_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV5'))
    return _client_service().call(___pyBindingTest_funcV5_id, *args, **kwargs)


___pyBindingTest_funcV6_id = None
def __pyBindingTest_funcV6(*args, **kwargs):
    """
    __pyBindingTest_funcV6()
    
    binding only available for test
    """
    global ___pyBindingTest_funcV6_id
    if ___pyBindingTest_funcV6_id is None:
        ___pyBindingTest_funcV6_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_funcV6'))
    return _client_service().call(___pyBindingTest_funcV6_id, *args, **kwargs)


___pyBindingTest_meth0_id = None
def __pyBindingTest_meth0(*args, **kwargs):
    """
    __pyBindingTest_meth0()
    
    binding only available for test
    """
    global ___pyBindingTest_meth0_id
    if ___pyBindingTest_meth0_id is None:
        ___pyBindingTest_meth0_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_meth0'))
    return _client_service().call(___pyBindingTest_meth0_id, *args, **kwargs)


___pyBindingTest_meth1_id = None
def __pyBindingTest_meth1(*args, **kwargs):
    """
    __pyBindingTest_meth1()
    
    binding only available for test
    """
    global ___pyBindingTest_meth1_id
    if ___pyBindingTest_meth1_id is None:
        ___pyBindingTest_meth1_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_meth1'))
    return _client_service().call(___pyBindingTest_meth1_id, *args, **kwargs)


___pyBindingTest_meth2_id = None
def __pyBindingTest_meth2(*args, **kwargs):
    """
    __pyBindingTest_meth2()
    
    binding only available for test
    """
    global ___pyBindingTest_meth2_id
    if ___pyBindingTest_meth2_id is None:
        ___pyBindingTest_meth2_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_meth2'))
    return _client_service().call(___pyBindingTest_meth2_id, *args, **kwargs)


___pyBindingTest_meth3_id = None
def __pyBindingTest_meth3(*args, **kwargs):
    """
    __pyBindingTest_meth3()
    
    binding only available for test
    """
    global ___pyBindingTest_meth3_id
    if ___pyBindingTest_meth3_id is None:
        ___pyBindingTest_meth3_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_meth3'))
    return _client_service().call(___pyBindingTest_meth3_id, *args, **kwargs)


___pyBindingTest_meth4_id = None
def __pyBindingTest_meth4(*args, **kwargs):
    """
    __pyBindingTest_meth4()
    
    binding only available for test
    """
    global ___pyBindingTest_meth4_id
    if ___pyBindingTest_meth4_id is None:
        ___pyBindingTest_meth4_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_meth4'))
    return _client_service().call(___pyBindingTest_meth4_id, *args, **kwargs)


___pyBindingTest_methV0_id = None
def __pyBindingTest_methV0(*args, **kwargs):
    """
    __pyBindingTest_methV0()
    
    binding only available for test
    """
    global ___pyBindingTest_methV0_id
    if ___pyBindingTest_methV0_id is None:
        ___pyBindingTest_methV0_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_methV0'))
    return _client_service().call(___pyBindingTest_methV0_id, *args, **kwargs)


___pyBindingTest_methV1_id = None
def __pyBindingTest_methV1(*args, **kwargs):
    """
    __pyBindingTest_methV1()
    
    binding only available for test
    """
    global ___pyBindingTest_methV1_id
    if ___pyBindingTest_methV1_id is None:
        ___pyBindingTest_methV1_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_methV1'))
    return _client_service().call(___pyBindingTest_methV1_id, *args, **kwargs)


___pyBindingTest_methV2_id = None
def __pyBindingTest_methV2(*args, **kwargs):
    """
    __pyBindingTest_methV2()
    
    binding only available for test
    """
    global ___pyBindingTest_methV2_id
    if ___pyBindingTest_methV2_id is None:
        ___pyBindingTest_methV2_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_methV2'))
    return _client_service().call(___pyBindingTest_methV2_id, *args, **kwargs)


___pyBindingTest_methV3_id = None
def __pyBindingTest_methV3(*args, **kwargs):
    """
    __pyBindingTest_methV3()
    
    binding only available for test
    """
    global ___pyBindingTest_methV3_id
    if ___pyBindingTest_methV3_id is None:
        ___pyBindingTest_methV3_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_methV3'))
    return _client_service().call(___pyBindingTest_methV3_id, *args, **kwargs)


___pyBindingTest_methV4_id = None
def __pyBindingTest_methV4(*args, **kwargs):
    """
    __pyBindingTest_methV4()
    
    binding only available for test
    """
    global ___pyBindingTest_methV4_id
    if ___pyBindingTest_methV4_id is None:
        ___pyBindingTest_methV4_id = _client_service().register_static_object(('TechlogPlot', '__pyBindingTest_methV4'))
    return _client_service().call(___pyBindingTest_methV4_id, *args, **kwargs)


___removeSlowness_id = None
def __removeSlowness(*args, **kwargs):
    """
    __removeSlowness(ID: Number, waveformname: str, wellname: str, datasetname: str, slownessname: str, order: Number) -> bool
    
    Remove the values of a slowness array variable.
    
    Args:
        ID (Number): Dispersion plot widget ID
        waveformname (str): Waveform name.
        wellname (str): Well name.
        datasetname (str): Dataset name.
        slownessname (str): Slowness array variable name.
        order (Number): number of orders of the slowness array
    
    Returns:
        bool: return True if no error detected else False
    """
    global ___removeSlowness_id
    if ___removeSlowness_id is None:
        ___removeSlowness_id = _client_service().register_static_object(('TechlogPlot', '__removeSlowness'))
    return _client_service().call(___removeSlowness_id, *args, **kwargs)


___removeSlownessLine_id = None
def __removeSlownessLine(*args, **kwargs):
    """
    __removeSlownessLine(ID: Number, waveformname: str, wellname: str, datasetname: str, slownesslinename: str)
    
    Remove the values of a slowness line variable.
    
    Args:
        ID (Number): Dispersion plot widget ID
        waveformname (str): Waveform name.
        wellname (str): Well name.
        datasetname (str): Dataset name.
        slownesslinename (str): Slowness line variable name.
    Outputs:
    return True if no error detected else False
    """
    global ___removeSlownessLine_id
    if ___removeSlownessLine_id is None:
        ___removeSlownessLine_id = _client_service().register_static_object(('TechlogPlot', '__removeSlownessLine'))
    return _client_service().call(___removeSlownessLine_id, *args, **kwargs)


___removeSnr_id = None
def __removeSnr(*args, **kwargs):
    """
    __removeSnr(ID: Number, waveformname: str, wellname: str, datasetname: str, snrname: str) -> bool
    
    Remove the values of a snr variable.
    
    Args:
        ID (Number): Dispersion plot widget ID
        waveformname (str): Waveform name.
        wellname (str): Well name.
        datasetname (str): Dataset name.
        snrname (str): Snr variable name.
    
    Returns:
        bool: return True if no error detected else False
    """
    global ___removeSnr_id
    if ___removeSnr_id is None:
        ___removeSnr_id = _client_service().register_static_object(('TechlogPlot', '__removeSnr'))
    return _client_service().call(___removeSnr_id, *args, **kwargs)


___removeSpectrum_id = None
def __removeSpectrum(*args, **kwargs):
    """
    __removeSpectrum(ID: Number, waveformname: str, wellname: str, datasetname: str, spectrumname: str) -> bool
    
    Remove the values of a spectrum variable.
    
    Args:
        ID (Number): Dispersion plot widget ID
        waveformname (str): Waveform name.
        wellname (str): Well name.
        datasetname (str): Dataset name.
        spectrumname (str): Spectrum variable name.
    
    Returns:
        bool: return True if no error detected else False
    """
    global ___removeSpectrum_id
    if ___removeSpectrum_id is None:
        ___removeSpectrum_id = _client_service().register_static_object(('TechlogPlot', '__removeSpectrum'))
    return _client_service().call(___removeSpectrum_id, *args, **kwargs)


___reportEditorRefreshProperties_id = None
def __reportEditorRefreshProperties(*args, **kwargs):
    """
    __reportEditorRefreshProperties()
    
    Binding only available for tests
    """
    global ___reportEditorRefreshProperties_id
    if ___reportEditorRefreshProperties_id is None:
        ___reportEditorRefreshProperties_id = _client_service().register_static_object(('TechlogPlot', '__reportEditorRefreshProperties'))
    return _client_service().call(___reportEditorRefreshProperties_id, *args, **kwargs)


___reportEditorTestLoadingGraphicalProperties_id = None
def __reportEditorTestLoadingGraphicalProperties(*args, **kwargs):
    """
    __reportEditorTestLoadingGraphicalProperties()
    
    Binding only available for tests
    """
    global ___reportEditorTestLoadingGraphicalProperties_id
    if ___reportEditorTestLoadingGraphicalProperties_id is None:
        ___reportEditorTestLoadingGraphicalProperties_id = _client_service().register_static_object(('TechlogPlot', '__reportEditorTestLoadingGraphicalProperties'))
    return _client_service().call(___reportEditorTestLoadingGraphicalProperties_id, *args, **kwargs)


___reportEditorTestOpening_id = None
def __reportEditorTestOpening(*args, **kwargs):
    """
    __reportEditorTestOpening(folder: str, name: str) -> bool
    
    Test opening of report
    
    Args:
        folder (str): Folder name
        name (str): File nameOutput:
        bool: test success
    """
    global ___reportEditorTestOpening_id
    if ___reportEditorTestOpening_id is None:
        ___reportEditorTestOpening_id = _client_service().register_static_object(('TechlogPlot', '__reportEditorTestOpening'))
    return _client_service().call(___reportEditorTestOpening_id, *args, **kwargs)


___reportItemBoreholeSectionPlotInitWellDataset_id = None
def __reportItemBoreholeSectionPlotInitWellDataset(*args, **kwargs):
    """
    __reportItemBoreholeSectionPlotInitWellDataset(fileName, well) -> bool
    
    Sets the well and dataset to a report item
    
    Args:
        fileName (None): cumulative dip plot filename
        well (None): expected well name 3. dataset: expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemBoreholeSectionPlotInitWellDataset_id
    if ___reportItemBoreholeSectionPlotInitWellDataset_id is None:
        ___reportItemBoreholeSectionPlotInitWellDataset_id = _client_service().register_static_object(('TechlogPlot', '__reportItemBoreholeSectionPlotInitWellDataset'))
    return _client_service().call(___reportItemBoreholeSectionPlotInitWellDataset_id, *args, **kwargs)


___reportItemCrossPlotTemplateLoadObject_id = None
def __reportItemCrossPlotTemplateLoadObject(*args, **kwargs):
    """
    __reportItemCrossPlotTemplateLoadObject(fileName, well) -> bool
    
    Inits the well and dataset to the crossplot template
    
    Args:
        fileName (None): cross plot template filename
        well (None): expected well name 3. dataset: expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemCrossPlotTemplateLoadObject_id
    if ___reportItemCrossPlotTemplateLoadObject_id is None:
        ___reportItemCrossPlotTemplateLoadObject_id = _client_service().register_static_object(('TechlogPlot', '__reportItemCrossPlotTemplateLoadObject'))
    return _client_service().call(___reportItemCrossPlotTemplateLoadObject_id, *args, **kwargs)


___reportItemCumulativeDipPlotInitWellDataset_id = None
def __reportItemCumulativeDipPlotInitWellDataset(*args, **kwargs):
    """
    __reportItemCumulativeDipPlotInitWellDataset(fileName, well) -> bool
    
    Sets the well and dataset to a report item
    
    Args:
        fileName (None): cumulative dip plot filename
        well (None): expected well name 3. dataset: expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemCumulativeDipPlotInitWellDataset_id
    if ___reportItemCumulativeDipPlotInitWellDataset_id is None:
        ___reportItemCumulativeDipPlotInitWellDataset_id = _client_service().register_static_object(('TechlogPlot', '__reportItemCumulativeDipPlotInitWellDataset'))
    return _client_service().call(___reportItemCumulativeDipPlotInitWellDataset_id, *args, **kwargs)


___reportItemCumulativeDipPlotLoadObject_id = None
def __reportItemCumulativeDipPlotLoadObject(*args, **kwargs):
    """
    __reportItemCumulativeDipPlotLoadObject(fileName, well) -> bool
    
    Load report item
    
    Args:
        fileName (None): cumulative dip plot filename
        well (None): expected well name 3. dataset: expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemCumulativeDipPlotLoadObject_id
    if ___reportItemCumulativeDipPlotLoadObject_id is None:
        ___reportItemCumulativeDipPlotLoadObject_id = _client_service().register_static_object(('TechlogPlot', '__reportItemCumulativeDipPlotLoadObject'))
    return _client_service().call(___reportItemCumulativeDipPlotLoadObject_id, *args, **kwargs)


___reportItemCumulativeDipPlotSetDatasetName_id = None
def __reportItemCumulativeDipPlotSetDatasetName(*args, **kwargs):
    """
    __reportItemCumulativeDipPlotSetDatasetName(fileName, well) -> bool
    
    Sets the dataset to the report item
    
    Args:
        fileName (None): cumulative dip plot filename
        well (None): expected well name 3. dataset: expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemCumulativeDipPlotSetDatasetName_id
    if ___reportItemCumulativeDipPlotSetDatasetName_id is None:
        ___reportItemCumulativeDipPlotSetDatasetName_id = _client_service().register_static_object(('TechlogPlot', '__reportItemCumulativeDipPlotSetDatasetName'))
    return _client_service().call(___reportItemCumulativeDipPlotSetDatasetName_id, *args, **kwargs)


___reportItemCumulativeDipPlotSetWellName_id = None
def __reportItemCumulativeDipPlotSetWellName(*args, **kwargs):
    """
    __reportItemCumulativeDipPlotSetWellName(fileName, well, dataset) -> bool
    
    Sets the well name to the report item
    
    Args:
        fileName (None): cumulative dip plot filename
        well (None): expected well name
        dataset (None): expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemCumulativeDipPlotSetWellName_id
    if ___reportItemCumulativeDipPlotSetWellName_id is None:
        ___reportItemCumulativeDipPlotSetWellName_id = _client_service().register_static_object(('TechlogPlot', '__reportItemCumulativeDipPlotSetWellName'))
    return _client_service().call(___reportItemCumulativeDipPlotSetWellName_id, *args, **kwargs)


___reportItemCumulativeDipPlotUpdateWellDatasetProperties_id = None
def __reportItemCumulativeDipPlotUpdateWellDatasetProperties(*args, **kwargs):
    """
    __reportItemCumulativeDipPlotUpdateWellDatasetProperties(fileName, well, dataset) -> bool
    
    Sets the well name to the report item
    
    Args:
        fileName (None): cumulative dip plot filename
        well (None): expected well name
        dataset (None): expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemCumulativeDipPlotUpdateWellDatasetProperties_id
    if ___reportItemCumulativeDipPlotUpdateWellDatasetProperties_id is None:
        ___reportItemCumulativeDipPlotUpdateWellDatasetProperties_id = _client_service().register_static_object(('TechlogPlot', '__reportItemCumulativeDipPlotUpdateWellDatasetProperties'))
    return _client_service().call(___reportItemCumulativeDipPlotUpdateWellDatasetProperties_id, *args, **kwargs)


___reportItemInitSpecificDir_id = None
def __reportItemInitSpecificDir(*args, **kwargs):
    """
    __reportItemInitSpecificDir(fileName, fileName2) -> bool
    
    Checks if specific folder is well set for report items
    
    Args:
        fileName (None): cumulative dip plot filename
        fileName2 (None): image filename
    
    Returns:
        bool: test success
    """
    global ___reportItemInitSpecificDir_id
    if ___reportItemInitSpecificDir_id is None:
        ___reportItemInitSpecificDir_id = _client_service().register_static_object(('TechlogPlot', '__reportItemInitSpecificDir'))
    return _client_service().call(___reportItemInitSpecificDir_id, *args, **kwargs)


___reportItemTestSaveText_id = None
def __reportItemTestSaveText(*args, **kwargs):
    """
    __reportItemTestSaveText(text, level) -> bool
    
    Save a report item text
    
    Args:
        text (None): text in the report item
        level (None): project level for saving 3. name: file name for saving
    
    Returns:
        bool: test success
    """
    global ___reportItemTestSaveText_id
    if ___reportItemTestSaveText_id is None:
        ___reportItemTestSaveText_id = _client_service().register_static_object(('TechlogPlot', '__reportItemTestSaveText'))
    return _client_service().call(___reportItemTestSaveText_id, *args, **kwargs)


___reportItemUpdateRefreshWellDatasetProperties_id = None
def __reportItemUpdateRefreshWellDatasetProperties(*args, **kwargs):
    """
    __reportItemUpdateRefreshWellDatasetProperties(well, dataset) -> bool
    
    check if well and dataset are ok for report items
    
    Args:
        well (None): expected well name
        dataset (None): expected dataset name
    
    Returns:
        bool: test success
    """
    global ___reportItemUpdateRefreshWellDatasetProperties_id
    if ___reportItemUpdateRefreshWellDatasetProperties_id is None:
        ___reportItemUpdateRefreshWellDatasetProperties_id = _client_service().register_static_object(('TechlogPlot', '__reportItemUpdateRefreshWellDatasetProperties'))
    return _client_service().call(___reportItemUpdateRefreshWellDatasetProperties_id, *args, **kwargs)


___resetAllBenchmark_id = None
def __resetAllBenchmark(*args, **kwargs):
    """
    __resetAllBenchmark()
    
    reset all brenchmark result and status
    
    Args:
    
    Returns:
    """
    global ___resetAllBenchmark_id
    if ___resetAllBenchmark_id is None:
        ___resetAllBenchmark_id = _client_service().register_static_object(('TechlogPlot', '__resetAllBenchmark'))
    return _client_service().call(___resetAllBenchmark_id, *args, **kwargs)


___setDecimationBehavior_id = None
def __setDecimationBehavior(*args, **kwargs):
    """
    __setDecimationBehavior(plotID: Number, mode: Number, threshold: Number)
    
    active the benchmark
    
    Args:
        plotID (Number): logview window ID
        mode (Number): 1= always 2=no decimation 3=threshold
        threshold (Number): threshold value
    
    Returns:
    """
    global ___setDecimationBehavior_id
    if ___setDecimationBehavior_id is None:
        ___setDecimationBehavior_id = _client_service().register_static_object(('TechlogPlot', '__setDecimationBehavior'))
    return _client_service().call(___setDecimationBehavior_id, *args, **kwargs)


___setFilterLegendVisible_id = None
def __setFilterLegendVisible(*args, **kwargs):
    """
    __setFilterLegendVisible(ID: Number, isFilterLegendVisible: bool)
    
    Display or hide the filter legend of the plot.
    
    Args:
        ID (Number): plot widget ID
        isFilterLegendVisible (bool): True to display the filter legend of the plot, else False.
    """
    global ___setFilterLegendVisible_id
    if ___setFilterLegendVisible_id is None:
        ___setFilterLegendVisible_id = _client_service().register_static_object(('TechlogPlot', '__setFilterLegendVisible'))
    return _client_service().call(___setFilterLegendVisible_id, *args, **kwargs)


___signalPlotGetID_id = None
def __signalPlotGetID(*args, **kwargs):
    """
    __signalPlotGetID()
    
    binding only available for test
    """
    global ___signalPlotGetID_id
    if ___signalPlotGetID_id is None:
        ___signalPlotGetID_id = _client_service().register_static_object(('TechlogPlot', '__signalPlotGetID'))
    return _client_service().call(___signalPlotGetID_id, *args, **kwargs)


___signalPlotInsertDataset_id = None
def __signalPlotInsertDataset(*args, **kwargs):
    """
    __signalPlotInsertDataset()
    
    binding only available for test
    """
    global ___signalPlotInsertDataset_id
    if ___signalPlotInsertDataset_id is None:
        ___signalPlotInsertDataset_id = _client_service().register_static_object(('TechlogPlot', '__signalPlotInsertDataset'))
    return _client_service().call(___signalPlotInsertDataset_id, *args, **kwargs)


___spectrumChangeDepthInformationVisible_id = None
def __spectrumChangeDepthInformationVisible(*args, **kwargs):
    """
    __spectrumChangeDepthInformationVisible()
    
    binding only available for test
    """
    global ___spectrumChangeDepthInformationVisible_id
    if ___spectrumChangeDepthInformationVisible_id is None:
        ___spectrumChangeDepthInformationVisible_id = _client_service().register_static_object(('TechlogPlot', '__spectrumChangeDepthInformationVisible'))
    return _client_service().call(___spectrumChangeDepthInformationVisible_id, *args, **kwargs)


___spectrumChangeInformationVisible_id = None
def __spectrumChangeInformationVisible(*args, **kwargs):
    """
    __spectrumChangeInformationVisible()
    
    binding only available for test
    """
    global ___spectrumChangeInformationVisible_id
    if ___spectrumChangeInformationVisible_id is None:
        ___spectrumChangeInformationVisible_id = _client_service().register_static_object(('TechlogPlot', '__spectrumChangeInformationVisible'))
    return _client_service().call(___spectrumChangeInformationVisible_id, *args, **kwargs)


___starPlotAddVariable_id = None
def __starPlotAddVariable(*args, **kwargs):
    """
    __starPlotAddVariable()
    
    binding only available for test
    """
    global ___starPlotAddVariable_id
    if ___starPlotAddVariable_id is None:
        ___starPlotAddVariable_id = _client_service().register_static_object(('TechlogPlot', '__starPlotAddVariable'))
    return _client_service().call(___starPlotAddVariable_id, *args, **kwargs)


___starPlotCreate_id = None
def __starPlotCreate(*args, **kwargs):
    """
    __starPlotCreate(n: str, varlist: list=None) -> Number
    
    binding only available for test
    Create a new star-plot
    usage ex :  plotID = plotApi.starPlotCreate('test_starplot', WELL, DATASET, ['NEU', 'DEN', 'GR', 'Topologie'])
    
    Args:
        n (str): star-plot window name
        varlist (list): Optional; list of variables to display
    
    Returns:
        Number: starplot window ID
    """
    global ___starPlotCreate_id
    if ___starPlotCreate_id is None:
        ___starPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__starPlotCreate'))
    return _client_service().call(___starPlotCreate_id, *args, **kwargs)


___starPlotSave_id = None
def __starPlotSave(*args, **kwargs):
    """
    __starPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    binding only available for test
    Save the cross-plot
    
    Args:
        plotID (Number): star-plot window ID
        n (str): star-plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global ___starPlotSave_id
    if ___starPlotSave_id is None:
        ___starPlotSave_id = _client_service().register_static_object(('TechlogPlot', '__starPlotSave'))
    return _client_service().call(___starPlotSave_id, *args, **kwargs)


___starPlotSetColor_id = None
def __starPlotSetColor(*args, **kwargs):
    """
    __starPlotSetColor(ID: Number, Color: str) -> bool
    
    Set a color in the star plot
    
    Args:
        ID (Number): plot ID
        Color (str): Wellname.DTname.Varname
    
    Returns:
        bool: True if operation is done else exception
    """
    global ___starPlotSetColor_id
    if ___starPlotSetColor_id is None:
        ___starPlotSetColor_id = _client_service().register_static_object(('TechlogPlot', '__starPlotSetColor'))
    return _client_service().call(___starPlotSetColor_id, *args, **kwargs)


___starPlotSetFilter_id = None
def __starPlotSetFilter(*args, **kwargs):
    """
    __starPlotSetFilter(ID: Number, Filter: str) -> bool
    
    Set a filter in the star plot
    
    Args:
        ID (Number): plot ID
        Filter (str): Wellname.DTname.Varname
    
    Returns:
        bool: True if operation is done else exception
    """
    global ___starPlotSetFilter_id
    if ___starPlotSetFilter_id is None:
        ___starPlotSetFilter_id = _client_service().register_static_object(('TechlogPlot', '__starPlotSetFilter'))
    return _client_service().call(___starPlotSetFilter_id, *args, **kwargs)


___ternaryPlotCreateCaptionTest_id = None
def __ternaryPlotCreateCaptionTest(*args, **kwargs):
    """
    __ternaryPlotCreateCaptionTest()
    
    binding only available for test
    """
    global ___ternaryPlotCreateCaptionTest_id
    if ___ternaryPlotCreateCaptionTest_id is None:
        ___ternaryPlotCreateCaptionTest_id = _client_service().register_static_object(('TechlogPlot', '__ternaryPlotCreateCaptionTest'))
    return _client_service().call(___ternaryPlotCreateCaptionTest_id, *args, **kwargs)


___testDBCallInDispersionPlot_id = None
def __testDBCallInDispersionPlot(*args, **kwargs):
    """
    __testDBCallInDispersionPlot()
    
    binding only available for test
    """
    global ___testDBCallInDispersionPlot_id
    if ___testDBCallInDispersionPlot_id is None:
        ___testDBCallInDispersionPlot_id = _client_service().register_static_object(('TechlogPlot', '__testDBCallInDispersionPlot'))
    return _client_service().call(___testDBCallInDispersionPlot_id, *args, **kwargs)


___variationPlotAddCollapsedTime_id = None
def __variationPlotAddCollapsedTime(*args, **kwargs):
    """
    __variationPlotAddCollapsedTime()
    
    binding only available for test
    """
    global ___variationPlotAddCollapsedTime_id
    if ___variationPlotAddCollapsedTime_id is None:
        ___variationPlotAddCollapsedTime_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotAddCollapsedTime'))
    return _client_service().call(___variationPlotAddCollapsedTime_id, *args, **kwargs)


___variationPlotCreate_id = None
def __variationPlotCreate(*args, **kwargs):
    """
    __variationPlotCreate()
    
    binding only available for test
    """
    global ___variationPlotCreate_id
    if ___variationPlotCreate_id is None:
        ___variationPlotCreate_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotCreate'))
    return _client_service().call(___variationPlotCreate_id, *args, **kwargs)


___variationPlotGetCollapsibleTimeAccordingTo_id = None
def __variationPlotGetCollapsibleTimeAccordingTo(*args, **kwargs):
    """
    __variationPlotGetCollapsibleTimeAccordingTo()
    
    binding only available for test
    """
    global ___variationPlotGetCollapsibleTimeAccordingTo_id
    if ___variationPlotGetCollapsibleTimeAccordingTo_id is None:
        ___variationPlotGetCollapsibleTimeAccordingTo_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetCollapsibleTimeAccordingTo'))
    return _client_service().call(___variationPlotGetCollapsibleTimeAccordingTo_id, *args, **kwargs)


___variationPlotGetExpandableTimeAccordingTo_id = None
def __variationPlotGetExpandableTimeAccordingTo(*args, **kwargs):
    """
    __variationPlotGetExpandableTimeAccordingTo()
    
    binding only available for test
    """
    global ___variationPlotGetExpandableTimeAccordingTo_id
    if ___variationPlotGetExpandableTimeAccordingTo_id is None:
        ___variationPlotGetExpandableTimeAccordingTo_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetExpandableTimeAccordingTo'))
    return _client_service().call(___variationPlotGetExpandableTimeAccordingTo_id, *args, **kwargs)


___variationPlotGetListOfCollapsedTimes_id = None
def __variationPlotGetListOfCollapsedTimes(*args, **kwargs):
    """
    __variationPlotGetListOfCollapsedTimes()
    
    binding only available for test
    """
    global ___variationPlotGetListOfCollapsedTimes_id
    if ___variationPlotGetListOfCollapsedTimes_id is None:
        ___variationPlotGetListOfCollapsedTimes_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetListOfCollapsedTimes'))
    return _client_service().call(___variationPlotGetListOfCollapsedTimes_id, *args, **kwargs)


___variationPlotGetSeparatingLineColor_id = None
def __variationPlotGetSeparatingLineColor(*args, **kwargs):
    """
    __variationPlotGetSeparatingLineColor()
    
    binding only available for test
    """
    global ___variationPlotGetSeparatingLineColor_id
    if ___variationPlotGetSeparatingLineColor_id is None:
        ___variationPlotGetSeparatingLineColor_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetSeparatingLineColor'))
    return _client_service().call(___variationPlotGetSeparatingLineColor_id, *args, **kwargs)


___variationPlotGetSeparatingLineStyle_id = None
def __variationPlotGetSeparatingLineStyle(*args, **kwargs):
    """
    __variationPlotGetSeparatingLineStyle()
    
    binding only available for test
    """
    global ___variationPlotGetSeparatingLineStyle_id
    if ___variationPlotGetSeparatingLineStyle_id is None:
        ___variationPlotGetSeparatingLineStyle_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetSeparatingLineStyle'))
    return _client_service().call(___variationPlotGetSeparatingLineStyle_id, *args, **kwargs)


___variationPlotGetSeparatingLineWidth_id = None
def __variationPlotGetSeparatingLineWidth(*args, **kwargs):
    """
    __variationPlotGetSeparatingLineWidth()
    
    binding only available for test
    """
    global ___variationPlotGetSeparatingLineWidth_id
    if ___variationPlotGetSeparatingLineWidth_id is None:
        ___variationPlotGetSeparatingLineWidth_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetSeparatingLineWidth'))
    return _client_service().call(___variationPlotGetSeparatingLineWidth_id, *args, **kwargs)


___variationPlotGetZonationOpacity_id = None
def __variationPlotGetZonationOpacity(*args, **kwargs):
    """
    __variationPlotGetZonationOpacity()
    
    binding only available for test
    """
    global ___variationPlotGetZonationOpacity_id
    if ___variationPlotGetZonationOpacity_id is None:
        ___variationPlotGetZonationOpacity_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotGetZonationOpacity'))
    return _client_service().call(___variationPlotGetZonationOpacity_id, *args, **kwargs)


___variationPlotIsACollapsedTime_id = None
def __variationPlotIsACollapsedTime(*args, **kwargs):
    """
    __variationPlotIsACollapsedTime()
    
    binding only available for test
    """
    global ___variationPlotIsACollapsedTime_id
    if ___variationPlotIsACollapsedTime_id is None:
        ___variationPlotIsACollapsedTime_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotIsACollapsedTime'))
    return _client_service().call(___variationPlotIsACollapsedTime_id, *args, **kwargs)


___variationPlotIsInACollapsedTime_id = None
def __variationPlotIsInACollapsedTime(*args, **kwargs):
    """
    __variationPlotIsInACollapsedTime()
    
    binding only available for test
    """
    global ___variationPlotIsInACollapsedTime_id
    if ___variationPlotIsInACollapsedTime_id is None:
        ___variationPlotIsInACollapsedTime_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotIsInACollapsedTime'))
    return _client_service().call(___variationPlotIsInACollapsedTime_id, *args, **kwargs)


___variationPlotIsZonationVisible_id = None
def __variationPlotIsZonationVisible(*args, **kwargs):
    """
    __variationPlotIsZonationVisible()
    
    binding only available for test
    """
    global ___variationPlotIsZonationVisible_id
    if ___variationPlotIsZonationVisible_id is None:
        ___variationPlotIsZonationVisible_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotIsZonationVisible'))
    return _client_service().call(___variationPlotIsZonationVisible_id, *args, **kwargs)


___variationPlotRemoveAll_id = None
def __variationPlotRemoveAll(*args, **kwargs):
    """
    __variationPlotRemoveAll()
    
    binding only available for test
    """
    global ___variationPlotRemoveAll_id
    if ___variationPlotRemoveAll_id is None:
        ___variationPlotRemoveAll_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotRemoveAll'))
    return _client_service().call(___variationPlotRemoveAll_id, *args, **kwargs)


___variationPlotRemoveCollapsedTime_id = None
def __variationPlotRemoveCollapsedTime(*args, **kwargs):
    """
    __variationPlotRemoveCollapsedTime()
    
    binding only available for test
    """
    global ___variationPlotRemoveCollapsedTime_id
    if ___variationPlotRemoveCollapsedTime_id is None:
        ___variationPlotRemoveCollapsedTime_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotRemoveCollapsedTime'))
    return _client_service().call(___variationPlotRemoveCollapsedTime_id, *args, **kwargs)


___variationPlotSetARun_id = None
def __variationPlotSetARun(*args, **kwargs):
    """
    __variationPlotSetARun()
    
    binding only available for test
    """
    global ___variationPlotSetARun_id
    if ___variationPlotSetARun_id is None:
        ___variationPlotSetARun_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetARun'))
    return _client_service().call(___variationPlotSetARun_id, *args, **kwargs)


___variationPlotSetListOfCollapsedTimes_id = None
def __variationPlotSetListOfCollapsedTimes(*args, **kwargs):
    """
    __variationPlotSetListOfCollapsedTimes()
    
    binding only available for test
    """
    global ___variationPlotSetListOfCollapsedTimes_id
    if ___variationPlotSetListOfCollapsedTimes_id is None:
        ___variationPlotSetListOfCollapsedTimes_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetListOfCollapsedTimes'))
    return _client_service().call(___variationPlotSetListOfCollapsedTimes_id, *args, **kwargs)


___variationPlotSetSeparatingLineColor_id = None
def __variationPlotSetSeparatingLineColor(*args, **kwargs):
    """
    __variationPlotSetSeparatingLineColor()
    
    binding only available for test
    """
    global ___variationPlotSetSeparatingLineColor_id
    if ___variationPlotSetSeparatingLineColor_id is None:
        ___variationPlotSetSeparatingLineColor_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetSeparatingLineColor'))
    return _client_service().call(___variationPlotSetSeparatingLineColor_id, *args, **kwargs)


___variationPlotSetSeparatingLineStyle_id = None
def __variationPlotSetSeparatingLineStyle(*args, **kwargs):
    """
    __variationPlotSetSeparatingLineStyle()
    
    binding only available for test
    """
    global ___variationPlotSetSeparatingLineStyle_id
    if ___variationPlotSetSeparatingLineStyle_id is None:
        ___variationPlotSetSeparatingLineStyle_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetSeparatingLineStyle'))
    return _client_service().call(___variationPlotSetSeparatingLineStyle_id, *args, **kwargs)


___variationPlotSetSeparatingLineWidth_id = None
def __variationPlotSetSeparatingLineWidth(*args, **kwargs):
    """
    __variationPlotSetSeparatingLineWidth()
    
    binding only available for test
    """
    global ___variationPlotSetSeparatingLineWidth_id
    if ___variationPlotSetSeparatingLineWidth_id is None:
        ___variationPlotSetSeparatingLineWidth_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetSeparatingLineWidth'))
    return _client_service().call(___variationPlotSetSeparatingLineWidth_id, *args, **kwargs)


___variationPlotSetVariable_id = None
def __variationPlotSetVariable(*args, **kwargs):
    """
    __variationPlotSetVariable()
    
    binding only available for test
    """
    global ___variationPlotSetVariable_id
    if ___variationPlotSetVariable_id is None:
        ___variationPlotSetVariable_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetVariable'))
    return _client_service().call(___variationPlotSetVariable_id, *args, **kwargs)


___variationPlotSetZonationOpacity_id = None
def __variationPlotSetZonationOpacity(*args, **kwargs):
    """
    __variationPlotSetZonationOpacity()
    
    binding only available for test
    """
    global ___variationPlotSetZonationOpacity_id
    if ___variationPlotSetZonationOpacity_id is None:
        ___variationPlotSetZonationOpacity_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetZonationOpacity'))
    return _client_service().call(___variationPlotSetZonationOpacity_id, *args, **kwargs)


___variationPlotSetZonationVisible_id = None
def __variationPlotSetZonationVisible(*args, **kwargs):
    """
    __variationPlotSetZonationVisible()
    
    binding only available for test
    """
    global ___variationPlotSetZonationVisible_id
    if ___variationPlotSetZonationVisible_id is None:
        ___variationPlotSetZonationVisible_id = _client_service().register_static_object(('TechlogPlot', '__variationPlotSetZonationVisible'))
    return _client_service().call(___variationPlotSetZonationVisible_id, *args, **kwargs)


_adjustH_id = None
def adjustH(*args, **kwargs):
    """
    adjustH(plotID: Number) -> bool
    
    Adjust a cross-plot or a logview horizontally
    
    Args:
        plotID (Number): window ID
    
    Returns:
        bool: operation exit status
    """
    global _adjustH_id
    if _adjustH_id is None:
        _adjustH_id = _client_service().register_static_object(('TechlogPlot', 'adjustH'))
    return _client_service().call(_adjustH_id, *args, **kwargs)


_adjustHV_id = None
def adjustHV(*args, **kwargs):
    """
    adjustHV(plotID: Number) -> bool
    
    Adjust a cross-plot or a logview horizontally and vertically
    
    Args:
        plotID (Number): window ID
    
    Returns:
        bool: operation exit status
    """
    global _adjustHV_id
    if _adjustHV_id is None:
        _adjustHV_id = _client_service().register_static_object(('TechlogPlot', 'adjustHV'))
    return _client_service().call(_adjustHV_id, *args, **kwargs)


_adjustV_id = None
def adjustV(*args, **kwargs):
    """
    adjustV(plotID: Number) -> bool
    
    Adjust a cross-plot or a logview vertically
    
    Args:
        plotID (Number): window ID
    
    Returns:
        bool: operation exit status
    """
    global _adjustV_id
    if _adjustV_id is None:
        _adjustV_id = _client_service().register_static_object(('TechlogPlot', 'adjustV'))
    return _client_service().call(_adjustV_id, *args, **kwargs)


_baseMapAddChart_id = None
def baseMapAddChart(*args, **kwargs):
    """
    baseMapAddChart(plotID: Number, cn: str) -> bool
    
    Add chart to the basemap
    
    Args:
        plotID (Number): basemap window ID
        cn (str): chart level\\chart name. Chart level is optional and can be:
        Techlog (default), Company, User, Project.
    
    Returns:
        bool: operation exit status
    """
    global _baseMapAddChart_id
    if _baseMapAddChart_id is None:
        _baseMapAddChart_id = _client_service().register_static_object(('TechlogPlot', 'baseMapAddChart'))
    return _client_service().call(_baseMapAddChart_id, *args, **kwargs)


_baseMapAddMap_id = None
def baseMapAddMap(*args, **kwargs):
    """
    baseMapAddMap(plotID: Number, name: str) -> bool
    
    Add a map to an existing basemap
    
    Args:
        plotID (Number): plot window ID
        name (str): map name
    
    Returns:
        bool: operation exit status
    """
    global _baseMapAddMap_id
    if _baseMapAddMap_id is None:
        _baseMapAddMap_id = _client_service().register_static_object(('TechlogPlot', 'baseMapAddMap'))
    return _client_service().call(_baseMapAddMap_id, *args, **kwargs)


_baseMapAddWell_id = None
def baseMapAddWell(*args, **kwargs):
    """
    baseMapAddWell(plotID: Number, name: str) -> bool
    
    Add a well to an existing basemap
    
    Args:
        plotID (Number): plot window ID
        name (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _baseMapAddWell_id
    if _baseMapAddWell_id is None:
        _baseMapAddWell_id = _client_service().register_static_object(('TechlogPlot', 'baseMapAddWell'))
    return _client_service().call(_baseMapAddWell_id, *args, **kwargs)


_baseMapAdjustToMap_id = None
def baseMapAdjustToMap(*args, **kwargs):
    """
    baseMapAdjustToMap(plotID: Number) -> bool
    
    Adjust the basemap to the map
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _baseMapAdjustToMap_id
    if _baseMapAdjustToMap_id is None:
        _baseMapAdjustToMap_id = _client_service().register_static_object(('TechlogPlot', 'baseMapAdjustToMap'))
    return _client_service().call(_baseMapAdjustToMap_id, *args, **kwargs)


_baseMapCreate_id = None
def baseMapCreate(*args, **kwargs):
    """
    baseMapCreate(n: str, xn: list=None, map: str=None) -> Number
    
    Create a basemap
    
    Args:
        n (str): plot name
        xn (list): Optional; list of well name
        map (str): Optional; map name
    
    Returns:
        Number: plot ID
    """
    global _baseMapCreate_id
    if _baseMapCreate_id is None:
        _baseMapCreate_id = _client_service().register_static_object(('TechlogPlot', 'baseMapCreate'))
    return _client_service().call(_baseMapCreate_id, *args, **kwargs)


_baseMapOpen_id = None
def baseMapOpen(*args, **kwargs):
    """
    baseMapOpen(n: str, f: str=None) -> Number
    
    Open an existing basemap
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _baseMapOpen_id
    if _baseMapOpen_id is None:
        _baseMapOpen_id = _client_service().register_static_object(('TechlogPlot', 'baseMapOpen'))
    return _client_service().call(_baseMapOpen_id, *args, **kwargs)


_baseMapRemoveMap_id = None
def baseMapRemoveMap(*args, **kwargs):
    """
    baseMapRemoveMap(plotID: Number) -> bool
    
    Remove the map from an existing basemap
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _baseMapRemoveMap_id
    if _baseMapRemoveMap_id is None:
        _baseMapRemoveMap_id = _client_service().register_static_object(('TechlogPlot', 'baseMapRemoveMap'))
    return _client_service().call(_baseMapRemoveMap_id, *args, **kwargs)


_baseMapRemoveWell_id = None
def baseMapRemoveWell(*args, **kwargs):
    """
    baseMapRemoveWell(plotID: Number, name: str) -> bool
    
    Remove a well from an existing basemap
    
    Args:
        plotID (Number): plot window ID
        name (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _baseMapRemoveWell_id
    if _baseMapRemoveWell_id is None:
        _baseMapRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'baseMapRemoveWell'))
    return _client_service().call(_baseMapRemoveWell_id, *args, **kwargs)


_baseMapSave_id = None
def baseMapSave(*args, **kwargs):
    """
    baseMapSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the basemap
    
    Args:
        plotID (Number): plot window ID
        n (str): file name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSave_id
    if _baseMapSave_id is None:
        _baseMapSave_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSave'))
    return _client_service().call(_baseMapSave_id, *args, **kwargs)


_baseMapSaveMap_id = None
def baseMapSaveMap(*args, **kwargs):
    """
    baseMapSaveMap(plotID: Number, n: str, f: str='') -> bool
    
    Save the map of a basemap
    
    Args:
        plotID (Number): plot window ID
        n (str): file name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSaveMap_id
    if _baseMapSaveMap_id is None:
        _baseMapSaveMap_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSaveMap'))
    return _client_service().call(_baseMapSaveMap_id, *args, **kwargs)


_baseMapSetContourColor_id = None
def baseMapSetContourColor(*args, **kwargs):
    """
    baseMapSetContourColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the contour color on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourColor_id
    if _baseMapSetContourColor_id is None:
        _baseMapSetContourColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourColor'))
    return _client_service().call(_baseMapSetContourColor_id, *args, **kwargs)


_baseMapSetContourColorMode_id = None
def baseMapSetContourColorMode(*args, **kwargs):
    """
    baseMapSetContourColorMode(plotID: Number, mode: str='UNIFORM') -> bool
    
    Set the contour color mode on basemap
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; {'UNIFORM', 'PALETTE'}
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourColorMode_id
    if _baseMapSetContourColorMode_id is None:
        _baseMapSetContourColorMode_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourColorMode'))
    return _client_service().call(_baseMapSetContourColorMode_id, *args, **kwargs)


_baseMapSetContourComputationStep_id = None
def baseMapSetContourComputationStep(*args, **kwargs):
    """
    baseMapSetContourComputationStep(plotID: Number, value: Number) -> bool
    
    Set the contour computation step on basemap
    
    Args:
        plotID (Number): plot window ID
        value (Number): step value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourComputationStep_id
    if _baseMapSetContourComputationStep_id is None:
        _baseMapSetContourComputationStep_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourComputationStep'))
    return _client_service().call(_baseMapSetContourComputationStep_id, *args, **kwargs)


_baseMapSetContourThickness_id = None
def baseMapSetContourThickness(*args, **kwargs):
    """
    baseMapSetContourThickness(plotID: Number, value: Number) -> bool
    
    Set the contour thickness on basemap
    
    Args:
        plotID (Number): plot window ID
        value (Number): thickness value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourThickness_id
    if _baseMapSetContourThickness_id is None:
        _baseMapSetContourThickness_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourThickness'))
    return _client_service().call(_baseMapSetContourThickness_id, *args, **kwargs)


_baseMapSetContourValueVisible_id = None
def baseMapSetContourValueVisible(*args, **kwargs):
    """
    baseMapSetContourValueVisible(plotID: Number, b: bool) -> bool
    
    Set the contour value visibility on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): contour value visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourValueVisible_id
    if _baseMapSetContourValueVisible_id is None:
        _baseMapSetContourValueVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourValueVisible'))
    return _client_service().call(_baseMapSetContourValueVisible_id, *args, **kwargs)


_baseMapSetContourVisible_id = None
def baseMapSetContourVisible(*args, **kwargs):
    """
    baseMapSetContourVisible(plotID: Number, b: bool) -> bool
    
    Set the contour visibility on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): contour visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourVisible_id
    if _baseMapSetContourVisible_id is None:
        _baseMapSetContourVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourVisible'))
    return _client_service().call(_baseMapSetContourVisible_id, *args, **kwargs)


_baseMapSetContourWithData_id = None
def baseMapSetContourWithData(*args, **kwargs):
    """
    baseMapSetContourWithData(plotID: Number, b: bool) -> bool
    
    Set the contour with data on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): contour with data if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetContourWithData_id
    if _baseMapSetContourWithData_id is None:
        _baseMapSetContourWithData_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetContourWithData'))
    return _client_service().call(_baseMapSetContourWithData_id, *args, **kwargs)


_baseMapSetDensitySmooth_id = None
def baseMapSetDensitySmooth(*args, **kwargs):
    """
    baseMapSetDensitySmooth(plotID: Number, b: bool) -> bool
    
    Set the smooth density visibility on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): smooth density visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetDensitySmooth_id
    if _baseMapSetDensitySmooth_id is None:
        _baseMapSetDensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetDensitySmooth'))
    return _client_service().call(_baseMapSetDensitySmooth_id, *args, **kwargs)


_baseMapSetDensityValuesVisible_id = None
def baseMapSetDensityValuesVisible(*args, **kwargs):
    """
    baseMapSetDensityValuesVisible(plotID: Number, b: bool) -> bool
    
    Set the density values visibility on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): density values visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetDensityValuesVisible_id
    if _baseMapSetDensityValuesVisible_id is None:
        _baseMapSetDensityValuesVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetDensityValuesVisible'))
    return _client_service().call(_baseMapSetDensityValuesVisible_id, *args, **kwargs)


_baseMapSetDensityVisible_id = None
def baseMapSetDensityVisible(*args, **kwargs):
    """
    baseMapSetDensityVisible(plotID: Number, b: bool) -> bool
    
    Set the density visibility on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): density visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetDensityVisible_id
    if _baseMapSetDensityVisible_id is None:
        _baseMapSetDensityVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetDensityVisible'))
    return _client_service().call(_baseMapSetDensityVisible_id, *args, **kwargs)


_baseMapSetDerrickColor_id = None
def baseMapSetDerrickColor(*args, **kwargs):
    """
    baseMapSetDerrickColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the derrick on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetDerrickColor_id
    if _baseMapSetDerrickColor_id is None:
        _baseMapSetDerrickColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetDerrickColor'))
    return _client_service().call(_baseMapSetDerrickColor_id, *args, **kwargs)


_baseMapSetDerrickSize_id = None
def baseMapSetDerrickSize(*args, **kwargs):
    """
    baseMapSetDerrickSize(plotID: Number, size: Number) -> bool
    
    Set the size of the derrick on basemap
    
    Args:
        plotID (Number): plot window ID
        size (Number): size value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetDerrickSize_id
    if _baseMapSetDerrickSize_id is None:
        _baseMapSetDerrickSize_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetDerrickSize'))
    return _client_service().call(_baseMapSetDerrickSize_id, *args, **kwargs)


_baseMapSetKeepProportion_id = None
def baseMapSetKeepProportion(*args, **kwargs):
    """
    baseMapSetKeepProportion(plotID: Number, b: bool) -> bool
    
    Set the keep proportion on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): keep proportion if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetKeepProportion_id
    if _baseMapSetKeepProportion_id is None:
        _baseMapSetKeepProportion_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetKeepProportion'))
    return _client_service().call(_baseMapSetKeepProportion_id, *args, **kwargs)


_baseMapSetLabelBackgroundVisible_id = None
def baseMapSetLabelBackgroundVisible(*args, **kwargs):
    """
    baseMapSetLabelBackgroundVisible(plotID: Number, visible: bool=False) -> bool
    
    Set the visibility of the background of the labels on basemap
    
    Args:
        plotID (Number): plot window ID
        visible (bool): Optional; background visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetLabelBackgroundVisible_id
    if _baseMapSetLabelBackgroundVisible_id is None:
        _baseMapSetLabelBackgroundVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetLabelBackgroundVisible'))
    return _client_service().call(_baseMapSetLabelBackgroundVisible_id, *args, **kwargs)


_baseMapSetLabelColor_id = None
def baseMapSetLabelColor(*args, **kwargs):
    """
    baseMapSetLabelColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the labels on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetLabelColor_id
    if _baseMapSetLabelColor_id is None:
        _baseMapSetLabelColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetLabelColor'))
    return _client_service().call(_baseMapSetLabelColor_id, *args, **kwargs)


_baseMapSetLabelDisplayMode_id = None
def baseMapSetLabelDisplayMode(*args, **kwargs):
    """
    baseMapSetLabelDisplayMode(plotID: Number, type: str='WELL') -> bool
    
    Set the display mode of the labels on basemap
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'WELL', 'CUSTOM'}
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetLabelDisplayMode_id
    if _baseMapSetLabelDisplayMode_id is None:
        _baseMapSetLabelDisplayMode_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetLabelDisplayMode'))
    return _client_service().call(_baseMapSetLabelDisplayMode_id, *args, **kwargs)


_baseMapSetLabelFont_id = None
def baseMapSetLabelFont(*args, **kwargs):
    """
    baseMapSetLabelFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool=False, fontItalic: bool=False, fontUnderline: bool=False, fontStrikeOut: bool=False) -> bool
    
    Set the font of the labels on basemap
    
    Args:
        plotID (Number): plot window ID
        fontName (str): name of the family font
        fontSize (Number): size of the font
        fontBold (bool): Optional; font in bold or not
        fontItalic (bool): Optional; font in italic or not
        fontUnderline (bool): Optional; underline font or not
        fontStrikeOut (bool): Optional; strike out font or not
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetLabelFont_id
    if _baseMapSetLabelFont_id is None:
        _baseMapSetLabelFont_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetLabelFont'))
    return _client_service().call(_baseMapSetLabelFont_id, *args, **kwargs)


_baseMapSetLabelPositionType_id = None
def baseMapSetLabelPositionType(*args, **kwargs):
    """
    baseMapSetLabelPositionType(plotID: Number, type: str='TOP') -> bool
    
    Set the position type of the labels on basemap
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'NONE', 'TOP', 'BOTTOM', 'BOTH'}
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetLabelPositionType_id
    if _baseMapSetLabelPositionType_id is None:
        _baseMapSetLabelPositionType_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetLabelPositionType'))
    return _client_service().call(_baseMapSetLabelPositionType_id, *args, **kwargs)


_baseMapSetLabelWellProperties_id = None
def baseMapSetLabelWellProperties(*args, **kwargs):
    """
    baseMapSetLabelWellProperties(plotID: Number, s: str) -> bool
    
    Set the well properties of the labels on basemap
    
    Args:
        plotID (Number): plot window ID
        s (str): well properties
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetLabelWellProperties_id
    if _baseMapSetLabelWellProperties_id is None:
        _baseMapSetLabelWellProperties_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetLabelWellProperties'))
    return _client_service().call(_baseMapSetLabelWellProperties_id, *args, **kwargs)


_baseMapSetOpacityActivated_id = None
def baseMapSetOpacityActivated(*args, **kwargs):
    """
    baseMapSetOpacityActivated(plotID: Number, b: bool) -> bool
    
    Set the opacity activation on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): opacity activated if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetOpacityActivated_id
    if _baseMapSetOpacityActivated_id is None:
        _baseMapSetOpacityActivated_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetOpacityActivated'))
    return _client_service().call(_baseMapSetOpacityActivated_id, *args, **kwargs)


_baseMapSetOpacityValue_id = None
def baseMapSetOpacityValue(*args, **kwargs):
    """
    baseMapSetOpacityValue(plotID: Number, f: Number) -> bool
    
    Set the opacity value on basemap
    
    Args:
        plotID (Number): plot window ID
        f (Number): opacity value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetOpacityValue_id
    if _baseMapSetOpacityValue_id is None:
        _baseMapSetOpacityValue_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetOpacityValue'))
    return _client_service().call(_baseMapSetOpacityValue_id, *args, **kwargs)


_baseMapSetReferentialBorderColor_id = None
def baseMapSetReferentialBorderColor(*args, **kwargs):
    """
    baseMapSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the border color of the referential on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetReferentialBorderColor_id
    if _baseMapSetReferentialBorderColor_id is None:
        _baseMapSetReferentialBorderColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetReferentialBorderColor'))
    return _client_service().call(_baseMapSetReferentialBorderColor_id, *args, **kwargs)


_baseMapSetReferentialColor_id = None
def baseMapSetReferentialColor(*args, **kwargs):
    """
    baseMapSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the referential on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetReferentialColor_id
    if _baseMapSetReferentialColor_id is None:
        _baseMapSetReferentialColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetReferentialColor'))
    return _client_service().call(_baseMapSetReferentialColor_id, *args, **kwargs)


_baseMapSetReferentialFont_id = None
def baseMapSetReferentialFont(*args, **kwargs):
    """
    baseMapSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool=False, fontItalic: bool=False, fontUnderline: bool=False, fontStrikeOut: bool=False) -> bool
    
    Set the font of the referential on basemap
    
    Args:
        plotID (Number): plot window ID
        fontName (str): name of the family font
        fontSize (Number): size of the font
        fontBold (bool): Optional; font in bold or not
        fontItalic (bool): Optional; font in italic or not
        fontUnderline (bool): Optional; underline font or not
        fontStrikeOut (bool): Optional; strike out font or not
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetReferentialFont_id
    if _baseMapSetReferentialFont_id is None:
        _baseMapSetReferentialFont_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetReferentialFont'))
    return _client_service().call(_baseMapSetReferentialFont_id, *args, **kwargs)


_baseMapSetReferentialPosition_id = None
def baseMapSetReferentialPosition(*args, **kwargs):
    """
    baseMapSetReferentialPosition(plotID: Number, x: Number, y: Number) -> bool
    
    Set the position of the referential on basemap
    
    Args:
        plotID (Number): plot window ID
        x (Number): x position
        y (Number): y position
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetReferentialPosition_id
    if _baseMapSetReferentialPosition_id is None:
        _baseMapSetReferentialPosition_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetReferentialPosition'))
    return _client_service().call(_baseMapSetReferentialPosition_id, *args, **kwargs)


_baseMapSetReferentialSize_id = None
def baseMapSetReferentialSize(*args, **kwargs):
    """
    baseMapSetReferentialSize(plotID: Number, f: Number) -> bool
    
    Set the size of the referential on basemap
    
    Args:
        plotID (Number): plot window ID
        f (Number): size
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetReferentialSize_id
    if _baseMapSetReferentialSize_id is None:
        _baseMapSetReferentialSize_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetReferentialSize'))
    return _client_service().call(_baseMapSetReferentialSize_id, *args, **kwargs)


_baseMapSetReferentialVisible_id = None
def baseMapSetReferentialVisible(*args, **kwargs):
    """
    baseMapSetReferentialVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the referential on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetReferentialVisible_id
    if _baseMapSetReferentialVisible_id is None:
        _baseMapSetReferentialVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetReferentialVisible'))
    return _client_service().call(_baseMapSetReferentialVisible_id, *args, **kwargs)


_baseMapSetScaleColor_id = None
def baseMapSetScaleColor(*args, **kwargs):
    """
    baseMapSetScaleColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the scale on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetScaleColor_id
    if _baseMapSetScaleColor_id is None:
        _baseMapSetScaleColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetScaleColor'))
    return _client_service().call(_baseMapSetScaleColor_id, *args, **kwargs)


_baseMapSetScaleFont_id = None
def baseMapSetScaleFont(*args, **kwargs):
    """
    baseMapSetScaleFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool=False, fontItalic: bool=False, fontUnderline: bool=False, fontStrikeOut: bool=False) -> bool
    
    Set the font of the scale on basemap
    
    Args:
        plotID (Number): plot window ID
        fontName (str): name of the family font
        fontSize (Number): size of the font
        fontBold (bool): Optional; font in bold or not
        fontItalic (bool): Optional; font in italic or not
        fontUnderline (bool): Optional; underline font or not
        fontStrikeOut (bool): Optional; strike out font or not
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetScaleFont_id
    if _baseMapSetScaleFont_id is None:
        _baseMapSetScaleFont_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetScaleFont'))
    return _client_service().call(_baseMapSetScaleFont_id, *args, **kwargs)


_baseMapSetScaleVisible_id = None
def baseMapSetScaleVisible(*args, **kwargs):
    """
    baseMapSetScaleVisible(plotID: Number, visible: bool=False) -> bool
    
    Set the visibility of the scale on basemap
    
    Args:
        plotID (Number): plot window ID
        visible (bool): Optional; scale visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetScaleVisible_id
    if _baseMapSetScaleVisible_id is None:
        _baseMapSetScaleVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetScaleVisible'))
    return _client_service().call(_baseMapSetScaleVisible_id, *args, **kwargs)


_baseMapSetSymbolDisplayMode_id = None
def baseMapSetSymbolDisplayMode(*args, **kwargs):
    """
    baseMapSetSymbolDisplayMode(plotID: Number, type: str='DERRICK') -> bool
    
    Set the symbol display mode on basemap
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'DERRICK', 'STATUS', 'CUSTOM'}
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetSymbolDisplayMode_id
    if _baseMapSetSymbolDisplayMode_id is None:
        _baseMapSetSymbolDisplayMode_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetSymbolDisplayMode'))
    return _client_service().call(_baseMapSetSymbolDisplayMode_id, *args, **kwargs)


_baseMapSetSymbolSize_id = None
def baseMapSetSymbolSize(*args, **kwargs):
    """
    baseMapSetSymbolSize(plotID: Number, size: Number) -> bool
    
    Set the symbol size on basemap
    
    Args:
        plotID (Number): plot window ID
        size (Number): size value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetSymbolSize_id
    if _baseMapSetSymbolSize_id is None:
        _baseMapSetSymbolSize_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetSymbolSize'))
    return _client_service().call(_baseMapSetSymbolSize_id, *args, **kwargs)


_baseMapSetSymbolWellProperties_id = None
def baseMapSetSymbolWellProperties(*args, **kwargs):
    """
    baseMapSetSymbolWellProperties(plotID: Number, s: str) -> bool
    
    Set the symbol well properties on basemap
    
    Args:
        plotID (Number): plot window ID
        s (str): well properties
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetSymbolWellProperties_id
    if _baseMapSetSymbolWellProperties_id is None:
        _baseMapSetSymbolWellProperties_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetSymbolWellProperties'))
    return _client_service().call(_baseMapSetSymbolWellProperties_id, *args, **kwargs)


_baseMapSetTrajectoryColor_id = None
def baseMapSetTrajectoryColor(*args, **kwargs):
    """
    baseMapSetTrajectoryColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the trajectory on basemap
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetTrajectoryColor_id
    if _baseMapSetTrajectoryColor_id is None:
        _baseMapSetTrajectoryColor_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetTrajectoryColor'))
    return _client_service().call(_baseMapSetTrajectoryColor_id, *args, **kwargs)


_baseMapSetTrajectoryMappedValue_id = None
def baseMapSetTrajectoryMappedValue(*args, **kwargs):
    """
    baseMapSetTrajectoryMappedValue(plotID: Number, visible: bool=False) -> bool
    
    Set the visibility of the mapped value on basemap
    
    Args:
        plotID (Number): plot window ID
        visible (bool): Optional; mapped value visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetTrajectoryMappedValue_id
    if _baseMapSetTrajectoryMappedValue_id is None:
        _baseMapSetTrajectoryMappedValue_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetTrajectoryMappedValue'))
    return _client_service().call(_baseMapSetTrajectoryMappedValue_id, *args, **kwargs)


_baseMapSetTrajectoryThickness_id = None
def baseMapSetTrajectoryThickness(*args, **kwargs):
    """
    baseMapSetTrajectoryThickness(plotID: Number, thickness: Number) -> bool
    
    Set the thickness of the trajectory on basemap
    
    Args:
        plotID (Number): plot window ID
        thickness (Number): thickness value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetTrajectoryThickness_id
    if _baseMapSetTrajectoryThickness_id is None:
        _baseMapSetTrajectoryThickness_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetTrajectoryThickness'))
    return _client_service().call(_baseMapSetTrajectoryThickness_id, *args, **kwargs)


_baseMapSetTrajectoryVisible_id = None
def baseMapSetTrajectoryVisible(*args, **kwargs):
    """
    baseMapSetTrajectoryVisible(plotID: Number, visible: bool=False) -> bool
    
    Set the visibility of the trajectory on basemap
    
    Args:
        plotID (Number): plot window ID
        visible (bool): Optional; trajectory visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetTrajectoryVisible_id
    if _baseMapSetTrajectoryVisible_id is None:
        _baseMapSetTrajectoryVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetTrajectoryVisible'))
    return _client_service().call(_baseMapSetTrajectoryVisible_id, *args, **kwargs)


_baseMapSetWellColorVisible_id = None
def baseMapSetWellColorVisible(*args, **kwargs):
    """
    baseMapSetWellColorVisible(plotID: Number, b: bool) -> bool
    
    Set the well color visibility on basemap
    
    Args:
        plotID (Number): plot window ID
        b (bool): well color visible if True
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetWellColorVisible_id
    if _baseMapSetWellColorVisible_id is None:
        _baseMapSetWellColorVisible_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetWellColorVisible'))
    return _client_service().call(_baseMapSetWellColorVisible_id, *args, **kwargs)


_baseMapSetXAxisGraduations_id = None
def baseMapSetXAxisGraduations(*args, **kwargs):
    """
    baseMapSetXAxisGraduations(plotID: Number, f: Number) -> bool
    
    Set x axis graduations on basemap
    
    Args:
        plotID (Number): plot window ID
        f (Number): graduations
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetXAxisGraduations_id
    if _baseMapSetXAxisGraduations_id is None:
        _baseMapSetXAxisGraduations_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetXAxisGraduations'))
    return _client_service().call(_baseMapSetXAxisGraduations_id, *args, **kwargs)


_baseMapSetXAxisType_id = None
def baseMapSetXAxisType(*args, **kwargs):
    """
    baseMapSetXAxisType(plotID: Number, type: str='VARIABLE') -> bool
    
    Set x axis type on basemap
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'VARIABLE', 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetXAxisType_id
    if _baseMapSetXAxisType_id is None:
        _baseMapSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetXAxisType'))
    return _client_service().call(_baseMapSetXAxisType_id, *args, **kwargs)


_baseMapSetXAxisUserLimits_id = None
def baseMapSetXAxisUserLimits(*args, **kwargs):
    """
    baseMapSetXAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set x axis user limits on basemap
    
    Args:
        plotID (Number): plot window ID
        min (Number): min user value
        max (Number): max user value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetXAxisUserLimits_id
    if _baseMapSetXAxisUserLimits_id is None:
        _baseMapSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetXAxisUserLimits'))
    return _client_service().call(_baseMapSetXAxisUserLimits_id, *args, **kwargs)


_baseMapSetXYUnit_id = None
def baseMapSetXYUnit(*args, **kwargs):
    """
    baseMapSetXYUnit(plotID: Number, unit: str) -> bool
    
    Set x and y unit on basemap
    
    Args:
        plotID (Number): plot window ID
        unit (str): unit value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetXYUnit_id
    if _baseMapSetXYUnit_id is None:
        _baseMapSetXYUnit_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetXYUnit'))
    return _client_service().call(_baseMapSetXYUnit_id, *args, **kwargs)


_baseMapSetYAxisGraduations_id = None
def baseMapSetYAxisGraduations(*args, **kwargs):
    """
    baseMapSetYAxisGraduations(plotID: Number, f: Number) -> bool
    
    Set y axis graduations on basemap
    
    Args:
        plotID (Number): plot window ID
        f (Number): graduations
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetYAxisGraduations_id
    if _baseMapSetYAxisGraduations_id is None:
        _baseMapSetYAxisGraduations_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetYAxisGraduations'))
    return _client_service().call(_baseMapSetYAxisGraduations_id, *args, **kwargs)


_baseMapSetYAxisType_id = None
def baseMapSetYAxisType(*args, **kwargs):
    """
    baseMapSetYAxisType(plotID: Number, type: str='VARIABLE') -> bool
    
    Set y axis type on basemap
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'VARIABLE', 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetYAxisType_id
    if _baseMapSetYAxisType_id is None:
        _baseMapSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetYAxisType'))
    return _client_service().call(_baseMapSetYAxisType_id, *args, **kwargs)


_baseMapSetYAxisUserLimits_id = None
def baseMapSetYAxisUserLimits(*args, **kwargs):
    """
    baseMapSetYAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set y axis user limits on basemap
    
    Args:
        plotID (Number): plot window ID
        min (Number): min user value
        max (Number): max user value
    
    Returns:
        bool: operation exit status
    """
    global _baseMapSetYAxisUserLimits_id
    if _baseMapSetYAxisUserLimits_id is None:
        _baseMapSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'baseMapSetYAxisUserLimits'))
    return _client_service().call(_baseMapSetYAxisUserLimits_id, *args, **kwargs)


_boreholeSectionPlotOpen_id = None
def boreholeSectionPlotOpen(*args, **kwargs):
    """
    boreholeSectionPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing borehole section plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _boreholeSectionPlotOpen_id
    if _boreholeSectionPlotOpen_id is None:
        _boreholeSectionPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'boreholeSectionPlotOpen'))
    return _client_service().call(_boreholeSectionPlotOpen_id, *args, **kwargs)


_boxPlotAddZone_id = None
def boxPlotAddZone(*args, **kwargs):
    """
    boxPlotAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotAddZone_id
    if _boxPlotAddZone_id is None:
        _boxPlotAddZone_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotAddZone'))
    return _client_service().call(_boxPlotAddZone_id, *args, **kwargs)


_boxPlotApplyTo_id = None
def boxPlotApplyTo(*args, **kwargs):
    """
    boxPlotApplyTo(plotID: Number, ds: list) -> list
    
    Apply the box-plot to a data set list
    
    Args:
        plotID (Number): box-plot window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _boxPlotApplyTo_id
    if _boxPlotApplyTo_id is None:
        _boxPlotApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotApplyTo'))
    return _client_service().call(_boxPlotApplyTo_id, *args, **kwargs)


_boxPlotCleanZonation_id = None
def boxPlotCleanZonation(*args, **kwargs):
    """
    boxPlotCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): box-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotCleanZonation_id
    if _boxPlotCleanZonation_id is None:
        _boxPlotCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotCleanZonation'))
    return _client_service().call(_boxPlotCleanZonation_id, *args, **kwargs)


_boxPlotCleanZone_id = None
def boxPlotCleanZone(*args, **kwargs):
    """
    boxPlotCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotCleanZone_id
    if _boxPlotCleanZone_id is None:
        _boxPlotCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotCleanZone'))
    return _client_service().call(_boxPlotCleanZone_id, *args, **kwargs)


_boxPlotCreate_id = None
def boxPlotCreate(*args, **kwargs):
    """
    boxPlotCreate(n: str, vl: list=None, f: str='') -> Number
    
    Create a new box-plot
    
    Args:
        n (str): box-plot window name
        vl (list): Optional; variable list
        f (str): Optional; filter variable ID
    
    Returns:
        Number: box-plot window ID
    """
    global _boxPlotCreate_id
    if _boxPlotCreate_id is None:
        _boxPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotCreate'))
    return _client_service().call(_boxPlotCreate_id, *args, **kwargs)


_boxPlotDeleteFilterValues_id = None
def boxPlotDeleteFilterValues(*args, **kwargs):
    """
    boxPlotDeleteFilterValues(plotID: Number) -> bool
    
    Delete the filter variable of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotDeleteFilterValues_id
    if _boxPlotDeleteFilterValues_id is None:
        _boxPlotDeleteFilterValues_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotDeleteFilterValues'))
    return _client_service().call(_boxPlotDeleteFilterValues_id, *args, **kwargs)


_boxPlotDeleteVariables_id = None
def boxPlotDeleteVariables(*args, **kwargs):
    """
    boxPlotDeleteVariables(plotID: Number, vn: list) -> bool
    
    Delete the variable list of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        vn (list): variable list
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotDeleteVariables_id
    if _boxPlotDeleteVariables_id is None:
        _boxPlotDeleteVariables_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotDeleteVariables'))
    return _client_service().call(_boxPlotDeleteVariables_id, *args, **kwargs)


_boxPlotDuplicate_id = None
def boxPlotDuplicate(*args, **kwargs):
    """
    boxPlotDuplicate(plotID: Number) -> Number
    
    Duplicate the box-plot
    
    Args:
        plotID (Number): box-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _boxPlotDuplicate_id
    if _boxPlotDuplicate_id is None:
        _boxPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotDuplicate'))
    return _client_service().call(_boxPlotDuplicate_id, *args, **kwargs)


_boxPlotGetIdByName_id = None
def boxPlotGetIdByName(*args, **kwargs):
    """
    boxPlotGetIdByName(n: str) -> Number
    
    Find the ID of a name-known box-plot
    
    Args:
        n (str): box-plot name
    
    Returns:
        Number: box-plot window ID
    """
    global _boxPlotGetIdByName_id
    if _boxPlotGetIdByName_id is None:
        _boxPlotGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotGetIdByName'))
    return _client_service().call(_boxPlotGetIdByName_id, *args, **kwargs)


_boxPlotLockAxisY_id = None
def boxPlotLockAxisY(*args, **kwargs):
    """
    boxPlotLockAxisY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis limits of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotLockAxisY_id
    if _boxPlotLockAxisY_id is None:
        _boxPlotLockAxisY_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotLockAxisY'))
    return _client_service().call(_boxPlotLockAxisY_id, *args, **kwargs)


_boxPlotLockLegendY_id = None
def boxPlotLockLegendY(*args, **kwargs):
    """
    boxPlotLockLegendY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis legend of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotLockLegendY_id
    if _boxPlotLockLegendY_id is None:
        _boxPlotLockLegendY_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotLockLegendY'))
    return _client_service().call(_boxPlotLockLegendY_id, *args, **kwargs)


_boxPlotLockTitle_id = None
def boxPlotLockTitle(*args, **kwargs):
    """
    boxPlotLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotLockTitle_id
    if _boxPlotLockTitle_id is None:
        _boxPlotLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotLockTitle'))
    return _client_service().call(_boxPlotLockTitle_id, *args, **kwargs)


_boxPlotMeanColor_id = None
def boxPlotMeanColor(*args, **kwargs):
    """
    boxPlotMeanColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change mean markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMeanColor_id
    if _boxPlotMeanColor_id is None:
        _boxPlotMeanColor_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMeanColor'))
    return _client_service().call(_boxPlotMeanColor_id, *args, **kwargs)


_boxPlotMeanColour_id = None
def boxPlotMeanColour(*args, **kwargs):
    """
    boxPlotMeanColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use boxPlotMeanColor instead) Change mean markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMeanColour_id
    if _boxPlotMeanColour_id is None:
        _boxPlotMeanColour_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMeanColour'))
    return _client_service().call(_boxPlotMeanColour_id, *args, **kwargs)


_boxPlotMeanMarkers_id = None
def boxPlotMeanMarkers(*args, **kwargs):
    """
    boxPlotMeanMarkers(plotID: Number, type: int, size: Number=8) -> bool
    
    Change mean markers in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMeanMarkers_id
    if _boxPlotMeanMarkers_id is None:
        _boxPlotMeanMarkers_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMeanMarkers'))
    return _client_service().call(_boxPlotMeanMarkers_id, *args, **kwargs)


_boxPlotMeanStdDeviation_id = None
def boxPlotMeanStdDeviation(*args, **kwargs):
    """
    boxPlotMeanStdDeviation(plotID: Number, show: bool) -> bool
    
    Mean & standard deviation display in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        show (bool): True if show, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMeanStdDeviation_id
    if _boxPlotMeanStdDeviation_id is None:
        _boxPlotMeanStdDeviation_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMeanStdDeviation'))
    return _client_service().call(_boxPlotMeanStdDeviation_id, *args, **kwargs)


_boxPlotMultiWellAddData_id = None
def boxPlotMultiWellAddData(*args, **kwargs):
    """
    boxPlotMultiWellAddData(plotID: Number, ds: str) -> bool
    
    Add a dataset to a multi well box-plot
    
    Args:
        plotID (Number): box-plot window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellAddData_id
    if _boxPlotMultiWellAddData_id is None:
        _boxPlotMultiWellAddData_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellAddData'))
    return _client_service().call(_boxPlotMultiWellAddData_id, *args, **kwargs)


_boxPlotMultiWellAddZone_id = None
def boxPlotMultiWellAddZone(*args, **kwargs):
    """
    boxPlotMultiWellAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellAddZone_id
    if _boxPlotMultiWellAddZone_id is None:
        _boxPlotMultiWellAddZone_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellAddZone'))
    return _client_service().call(_boxPlotMultiWellAddZone_id, *args, **kwargs)


_boxPlotMultiWellCleanZonation_id = None
def boxPlotMultiWellCleanZonation(*args, **kwargs):
    """
    boxPlotMultiWellCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): box-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellCleanZonation_id
    if _boxPlotMultiWellCleanZonation_id is None:
        _boxPlotMultiWellCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellCleanZonation'))
    return _client_service().call(_boxPlotMultiWellCleanZonation_id, *args, **kwargs)


_boxPlotMultiWellCleanZone_id = None
def boxPlotMultiWellCleanZone(*args, **kwargs):
    """
    boxPlotMultiWellCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellCleanZone_id
    if _boxPlotMultiWellCleanZone_id is None:
        _boxPlotMultiWellCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellCleanZone'))
    return _client_service().call(_boxPlotMultiWellCleanZone_id, *args, **kwargs)


_boxPlotMultiWellCreate_id = None
def boxPlotMultiWellCreate(*args, **kwargs):
    """
    boxPlotMultiWellCreate(ml: list) -> Number
    
    Create a multi well box-plot
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: plot window ID
    """
    global _boxPlotMultiWellCreate_id
    if _boxPlotMultiWellCreate_id is None:
        _boxPlotMultiWellCreate_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellCreate'))
    return _client_service().call(_boxPlotMultiWellCreate_id, *args, **kwargs)


_boxPlotMultiWellDuplicate_id = None
def boxPlotMultiWellDuplicate(*args, **kwargs):
    """
    boxPlotMultiWellDuplicate(plotID: Number) -> Number
    
    Duplicate the box-plot
    
    Args:
        plotID (Number): box-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _boxPlotMultiWellDuplicate_id
    if _boxPlotMultiWellDuplicate_id is None:
        _boxPlotMultiWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellDuplicate'))
    return _client_service().call(_boxPlotMultiWellDuplicate_id, *args, **kwargs)


_boxPlotMultiWellGetIdByName_id = None
def boxPlotMultiWellGetIdByName(*args, **kwargs):
    """
    boxPlotMultiWellGetIdByName(n: str) -> Number
    
    Find the ID of a name-known box-plot
    
    Args:
        n (str): box-plot name
    
    Returns:
        Number: box-plot window ID
    """
    global _boxPlotMultiWellGetIdByName_id
    if _boxPlotMultiWellGetIdByName_id is None:
        _boxPlotMultiWellGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellGetIdByName'))
    return _client_service().call(_boxPlotMultiWellGetIdByName_id, *args, **kwargs)


_boxPlotMultiWellMeanColor_id = None
def boxPlotMultiWellMeanColor(*args, **kwargs):
    """
    boxPlotMultiWellMeanColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change mean markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellMeanColor_id
    if _boxPlotMultiWellMeanColor_id is None:
        _boxPlotMultiWellMeanColor_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellMeanColor'))
    return _client_service().call(_boxPlotMultiWellMeanColor_id, *args, **kwargs)


_boxPlotMultiWellMeanColour_id = None
def boxPlotMultiWellMeanColour(*args, **kwargs):
    """
    boxPlotMultiWellMeanColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (Use boxPlotMultiWellMeanColor instead) Change mean markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellMeanColour_id
    if _boxPlotMultiWellMeanColour_id is None:
        _boxPlotMultiWellMeanColour_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellMeanColour'))
    return _client_service().call(_boxPlotMultiWellMeanColour_id, *args, **kwargs)


_boxPlotMultiWellMeanMarkers_id = None
def boxPlotMultiWellMeanMarkers(*args, **kwargs):
    """
    boxPlotMultiWellMeanMarkers(plotID: Number, type: int, size: Number=8) -> bool
    
    Change mean markers in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellMeanMarkers_id
    if _boxPlotMultiWellMeanMarkers_id is None:
        _boxPlotMultiWellMeanMarkers_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellMeanMarkers'))
    return _client_service().call(_boxPlotMultiWellMeanMarkers_id, *args, **kwargs)


_boxPlotMultiWellMeanStdDeviation_id = None
def boxPlotMultiWellMeanStdDeviation(*args, **kwargs):
    """
    boxPlotMultiWellMeanStdDeviation(plotID: Number, show: bool) -> bool
    
    Mean & standard deviation display in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        show (bool): True if show, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellMeanStdDeviation_id
    if _boxPlotMultiWellMeanStdDeviation_id is None:
        _boxPlotMultiWellMeanStdDeviation_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellMeanStdDeviation'))
    return _client_service().call(_boxPlotMultiWellMeanStdDeviation_id, *args, **kwargs)


_boxPlotMultiWellOpen_id = None
def boxPlotMultiWellOpen(*args, **kwargs):
    """
    boxPlotMultiWellOpen(n: str, f: str='') -> bool
    
    Open an existing box-plot
    
    Args:
        n (str): box-plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellOpen_id
    if _boxPlotMultiWellOpen_id is None:
        _boxPlotMultiWellOpen_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellOpen'))
    return _client_service().call(_boxPlotMultiWellOpen_id, *args, **kwargs)


_boxPlotMultiWellQuantile1Value_id = None
def boxPlotMultiWellQuantile1Value(*args, **kwargs):
    """
    boxPlotMultiWellQuantile1Value(plotID: Number, q1: Number) -> bool
    
    Set user value for quantile 1
    
    Args:
        plotID (Number): box-plot window ID
        q1 (Number): quantile 1 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellQuantile1Value_id
    if _boxPlotMultiWellQuantile1Value_id is None:
        _boxPlotMultiWellQuantile1Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellQuantile1Value'))
    return _client_service().call(_boxPlotMultiWellQuantile1Value_id, *args, **kwargs)


_boxPlotMultiWellQuantile2Value_id = None
def boxPlotMultiWellQuantile2Value(*args, **kwargs):
    """
    boxPlotMultiWellQuantile2Value(plotID: Number, q2: Number) -> bool
    
    Set user value for quantile 2
    
    Args:
        plotID (Number): box-plot window ID
        q2 (Number): quantile 2 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellQuantile2Value_id
    if _boxPlotMultiWellQuantile2Value_id is None:
        _boxPlotMultiWellQuantile2Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellQuantile2Value'))
    return _client_service().call(_boxPlotMultiWellQuantile2Value_id, *args, **kwargs)


_boxPlotMultiWellQuantile3Value_id = None
def boxPlotMultiWellQuantile3Value(*args, **kwargs):
    """
    boxPlotMultiWellQuantile3Value(plotID: Number, q3: Number) -> bool
    
    Set user value for quantile 3
    
    Args:
        plotID (Number): box-plot window ID
        q3 (Number): quantile 3 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellQuantile3Value_id
    if _boxPlotMultiWellQuantile3Value_id is None:
        _boxPlotMultiWellQuantile3Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellQuantile3Value'))
    return _client_service().call(_boxPlotMultiWellQuantile3Value_id, *args, **kwargs)


_boxPlotMultiWellQuantile4Value_id = None
def boxPlotMultiWellQuantile4Value(*args, **kwargs):
    """
    boxPlotMultiWellQuantile4Value(plotID: Number, q4: Number) -> bool
    
    Set user value for quantile 4
    
    Args:
        plotID (Number): box-plot window ID
        q4 (Number): quantile 4 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellQuantile4Value_id
    if _boxPlotMultiWellQuantile4Value_id is None:
        _boxPlotMultiWellQuantile4Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellQuantile4Value'))
    return _client_service().call(_boxPlotMultiWellQuantile4Value_id, *args, **kwargs)


_boxPlotMultiWellQuantile5Value_id = None
def boxPlotMultiWellQuantile5Value(*args, **kwargs):
    """
    boxPlotMultiWellQuantile5Value(plotID: Number, q5: Number) -> bool
    
    Set user value for quantile 5
    
    Args:
        plotID (Number): box-plot window ID
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellQuantile5Value_id
    if _boxPlotMultiWellQuantile5Value_id is None:
        _boxPlotMultiWellQuantile5Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellQuantile5Value'))
    return _client_service().call(_boxPlotMultiWellQuantile5Value_id, *args, **kwargs)


_boxPlotMultiWellQuantileValues_id = None
def boxPlotMultiWellQuantileValues(*args, **kwargs):
    """
    boxPlotMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number) -> bool
    
    Set user values to the box-plot quantiles
    
    Args:
        plotID (Number): box-plot window ID
        q1 (Number): quantile 1 percentage
        q2 (Number): quantile 2 percentage
        q3 (Number): quantile 3 percentage
        q4 (Number): quantile 4 percentage
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellQuantileValues_id
    if _boxPlotMultiWellQuantileValues_id is None:
        _boxPlotMultiWellQuantileValues_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellQuantileValues'))
    return _client_service().call(_boxPlotMultiWellQuantileValues_id, *args, **kwargs)


_boxPlotMultiWellRemoveDataset_id = None
def boxPlotMultiWellRemoveDataset(*args, **kwargs):
    """
    boxPlotMultiWellRemoveDataset(plotID: Number, ds: str) -> bool
    
    Remove a dataset from a multi well box-plot
    
    Args:
        plotID (Number): box-plot window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellRemoveDataset_id
    if _boxPlotMultiWellRemoveDataset_id is None:
        _boxPlotMultiWellRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellRemoveDataset'))
    return _client_service().call(_boxPlotMultiWellRemoveDataset_id, *args, **kwargs)


_boxPlotMultiWellRemoveWell_id = None
def boxPlotMultiWellRemoveWell(*args, **kwargs):
    """
    boxPlotMultiWellRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a multi well box-plot
    
    Args:
        plotID (Number): box-plot window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellRemoveWell_id
    if _boxPlotMultiWellRemoveWell_id is None:
        _boxPlotMultiWellRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellRemoveWell'))
    return _client_service().call(_boxPlotMultiWellRemoveWell_id, *args, **kwargs)


_boxPlotMultiWellSave_id = None
def boxPlotMultiWellSave(*args, **kwargs):
    """
    boxPlotMultiWellSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        n (str): box-plot window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSave_id
    if _boxPlotMultiWellSave_id is None:
        _boxPlotMultiWellSave_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSave'))
    return _client_service().call(_boxPlotMultiWellSave_id, *args, **kwargs)


_boxPlotMultiWellSelectVar_id = None
def boxPlotMultiWellSelectVar(*args, **kwargs):
    """
    boxPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    [DEPRECATED] (use boxPlotMultiWellSelectVariable instead) Change the variable selected among one family's variables in a multi well box-plot
    
    Args:
        plotID (Number): box-plot window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSelectVar_id
    if _boxPlotMultiWellSelectVar_id is None:
        _boxPlotMultiWellSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSelectVar'))
    return _client_service().call(_boxPlotMultiWellSelectVar_id, *args, **kwargs)


_boxPlotMultiWellSelectVariable_id = None
def boxPlotMultiWellSelectVariable(*args, **kwargs):
    """
    boxPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a multi well box-plot
    
    Args:
        plotID (Number): box-plot window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSelectVariable_id
    if _boxPlotMultiWellSelectVariable_id is None:
        _boxPlotMultiWellSelectVariable_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSelectVariable'))
    return _client_service().call(_boxPlotMultiWellSelectVariable_id, *args, **kwargs)


_boxPlotMultiWellSetAxisInverse_id = None
def boxPlotMultiWellSetAxisInverse(*args, **kwargs):
    """
    boxPlotMultiWellSetAxisInverse(plotID: Number, inv: bool) -> bool
    
    Inverse a box-plot variable scale
    
    Args:
        plotID (Number): box-plot window ID
        inv (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetAxisInverse_id
    if _boxPlotMultiWellSetAxisInverse_id is None:
        _boxPlotMultiWellSetAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetAxisInverse'))
    return _client_service().call(_boxPlotMultiWellSetAxisInverse_id, *args, **kwargs)


_boxPlotMultiWellSetBoxBorder_id = None
def boxPlotMultiWellSetBoxBorder(*args, **kwargs):
    """
    boxPlotMultiWellSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change boxes border color
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetBoxBorder_id
    if _boxPlotMultiWellSetBoxBorder_id is None:
        _boxPlotMultiWellSetBoxBorder_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetBoxBorder'))
    return _client_service().call(_boxPlotMultiWellSetBoxBorder_id, *args, **kwargs)


_boxPlotMultiWellSetBoxColor_id = None
def boxPlotMultiWellSetBoxColor(*args, **kwargs):
    """
    boxPlotMultiWellSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number) -> bool
    
    Change boxes color
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetBoxColor_id
    if _boxPlotMultiWellSetBoxColor_id is None:
        _boxPlotMultiWellSetBoxColor_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetBoxColor'))
    return _client_service().call(_boxPlotMultiWellSetBoxColor_id, *args, **kwargs)


_boxPlotMultiWellSetBoxColour_id = None
def boxPlotMultiWellSetBoxColour(*args, **kwargs):
    """
    boxPlotMultiWellSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use boxPlotMultiWellSetBoxColor instead) Change boxes color
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetBoxColour_id
    if _boxPlotMultiWellSetBoxColour_id is None:
        _boxPlotMultiWellSetBoxColour_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetBoxColour'))
    return _client_service().call(_boxPlotMultiWellSetBoxColour_id, *args, **kwargs)


_boxPlotMultiWellSetBoxDisplay_id = None
def boxPlotMultiWellSetBoxDisplay(*args, **kwargs):
    """
    boxPlotMultiWellSetBoxDisplay(plotID: Number, type: int, size: Number=8) -> bool
    
    Change boxes general display
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetBoxDisplay_id
    if _boxPlotMultiWellSetBoxDisplay_id is None:
        _boxPlotMultiWellSetBoxDisplay_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetBoxDisplay'))
    return _client_service().call(_boxPlotMultiWellSetBoxDisplay_id, *args, **kwargs)


_boxPlotMultiWellSetName_id = None
def boxPlotMultiWellSetName(*args, **kwargs):
    """
    boxPlotMultiWellSetName(plotID: Number, n: str) -> bool
    
    Change the name of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        n (str): new box-plot window name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetName_id
    if _boxPlotMultiWellSetName_id is None:
        _boxPlotMultiWellSetName_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetName'))
    return _client_service().call(_boxPlotMultiWellSetName_id, *args, **kwargs)


_boxPlotMultiWellSetXAxisScale_id = None
def boxPlotMultiWellSetXAxisScale(*args, **kwargs):
    """
    boxPlotMultiWellSetXAxisScale(plotID: Number, sc: int) -> bool
    
    Change a box-plot variable Y axis scale
    
    Args:
        plotID (Number): box-plot window ID
        sc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetXAxisScale_id
    if _boxPlotMultiWellSetXAxisScale_id is None:
        _boxPlotMultiWellSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetXAxisScale'))
    return _client_service().call(_boxPlotMultiWellSetXAxisScale_id, *args, **kwargs)


_boxPlotMultiWellSetXAxisType_id = None
def boxPlotMultiWellSetXAxisType(*args, **kwargs):
    """
    boxPlotMultiWellSetXAxisType(plotID: Number, t: int) -> bool
    
    Change the type of a box-plot variable Y axis
    
    Args:
        plotID (Number): box-plot window ID
        t (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetXAxisType_id
    if _boxPlotMultiWellSetXAxisType_id is None:
        _boxPlotMultiWellSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetXAxisType'))
    return _client_service().call(_boxPlotMultiWellSetXAxisType_id, *args, **kwargs)


_boxPlotMultiWellSetXAxisUnit_id = None
def boxPlotMultiWellSetXAxisUnit(*args, **kwargs):
    """
    boxPlotMultiWellSetXAxisUnit(plotID: Number, u: str) -> bool
    
    Change the unit of a box-plot variable Y axis
    
    Args:
        plotID (Number): box-plot window ID
        u (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetXAxisUnit_id
    if _boxPlotMultiWellSetXAxisUnit_id is None:
        _boxPlotMultiWellSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetXAxisUnit'))
    return _client_service().call(_boxPlotMultiWellSetXAxisUnit_id, *args, **kwargs)


_boxPlotMultiWellSetXAxisUserLimits_id = None
def boxPlotMultiWellSetXAxisUserLimits(*args, **kwargs):
    """
    boxPlotMultiWellSetXAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set min & max values of a box-plot variable Y axis
    
    Args:
        plotID (Number): box-plot window ID
        min (Number): Y axis minimum
        max (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetXAxisUserLimits_id
    if _boxPlotMultiWellSetXAxisUserLimits_id is None:
        _boxPlotMultiWellSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetXAxisUserLimits'))
    return _client_service().call(_boxPlotMultiWellSetXAxisUserLimits_id, *args, **kwargs)


_boxPlotMultiWellSetZonation_id = None
def boxPlotMultiWellSetZonation(*args, **kwargs):
    """
    boxPlotMultiWellSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellSetZonation_id
    if _boxPlotMultiWellSetZonation_id is None:
        _boxPlotMultiWellSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellSetZonation'))
    return _client_service().call(_boxPlotMultiWellSetZonation_id, *args, **kwargs)


_boxPlotMultiWellStdDevColor_id = None
def boxPlotMultiWellStdDevColor(*args, **kwargs):
    """
    boxPlotMultiWellStdDevColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change standard deviation markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellStdDevColor_id
    if _boxPlotMultiWellStdDevColor_id is None:
        _boxPlotMultiWellStdDevColor_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellStdDevColor'))
    return _client_service().call(_boxPlotMultiWellStdDevColor_id, *args, **kwargs)


_boxPlotMultiWellStdDevColour_id = None
def boxPlotMultiWellStdDevColour(*args, **kwargs):
    """
    boxPlotMultiWellStdDevColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use boxPlotMultiWellStdDevColor instead) Change standard deviation markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellStdDevColour_id
    if _boxPlotMultiWellStdDevColour_id is None:
        _boxPlotMultiWellStdDevColour_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellStdDevColour'))
    return _client_service().call(_boxPlotMultiWellStdDevColour_id, *args, **kwargs)


_boxPlotMultiWellStdDevMarkers_id = None
def boxPlotMultiWellStdDevMarkers(*args, **kwargs):
    """
    boxPlotMultiWellStdDevMarkers(plotID: Number, type: int, size: Number=8) -> bool
    
    Change standard deviation markers in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellStdDevMarkers_id
    if _boxPlotMultiWellStdDevMarkers_id is None:
        _boxPlotMultiWellStdDevMarkers_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellStdDevMarkers'))
    return _client_service().call(_boxPlotMultiWellStdDevMarkers_id, *args, **kwargs)


_boxPlotMultiWellStddevMarkers_id = None
def boxPlotMultiWellStddevMarkers(*args, **kwargs):
    """
    boxPlotMultiWellStddevMarkers(plotID: Number, type: int, size: Number=8) -> bool
    
    [DEPRECATED] (use boxPlotMultiWellStdDevMarkers instead) Change standard deviation markers in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotMultiWellStddevMarkers_id
    if _boxPlotMultiWellStddevMarkers_id is None:
        _boxPlotMultiWellStddevMarkers_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotMultiWellStddevMarkers'))
    return _client_service().call(_boxPlotMultiWellStddevMarkers_id, *args, **kwargs)


_boxPlotOpen_id = None
def boxPlotOpen(*args, **kwargs):
    """
    boxPlotOpen(n: str, f: str='') -> bool
    
    Open an existing box-plot
    
    Args:
        n (str): box-plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotOpen_id
    if _boxPlotOpen_id is None:
        _boxPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotOpen'))
    return _client_service().call(_boxPlotOpen_id, *args, **kwargs)


_boxPlotQuantile1Value_id = None
def boxPlotQuantile1Value(*args, **kwargs):
    """
    boxPlotQuantile1Value(plotID: Number, q1: Number) -> bool
    
    Set user value for quantile 1
    
    Args:
        plotID (Number): box-plot window ID
        q1 (Number): quantile 1 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotQuantile1Value_id
    if _boxPlotQuantile1Value_id is None:
        _boxPlotQuantile1Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotQuantile1Value'))
    return _client_service().call(_boxPlotQuantile1Value_id, *args, **kwargs)


_boxPlotQuantile2Value_id = None
def boxPlotQuantile2Value(*args, **kwargs):
    """
    boxPlotQuantile2Value(plotID: Number, q2: Number) -> bool
    
    Set user value for quantile 2
    
    Args:
        plotID (Number): box-plot window ID
        q2 (Number): quantile 2 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotQuantile2Value_id
    if _boxPlotQuantile2Value_id is None:
        _boxPlotQuantile2Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotQuantile2Value'))
    return _client_service().call(_boxPlotQuantile2Value_id, *args, **kwargs)


_boxPlotQuantile3Value_id = None
def boxPlotQuantile3Value(*args, **kwargs):
    """
    boxPlotQuantile3Value(plotID: Number, q3: Number) -> bool
    
    Set user value for quantile 3
    
    Args:
        plotID (Number): box-plot window ID
        q3 (Number): quantile 3 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotQuantile3Value_id
    if _boxPlotQuantile3Value_id is None:
        _boxPlotQuantile3Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotQuantile3Value'))
    return _client_service().call(_boxPlotQuantile3Value_id, *args, **kwargs)


_boxPlotQuantile4Value_id = None
def boxPlotQuantile4Value(*args, **kwargs):
    """
    boxPlotQuantile4Value(plotID: Number, q4: Number) -> bool
    
    Set user value for quantile 4
    
    Args:
        plotID (Number): box-plot window ID
        q4 (Number): quantile 4 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotQuantile4Value_id
    if _boxPlotQuantile4Value_id is None:
        _boxPlotQuantile4Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotQuantile4Value'))
    return _client_service().call(_boxPlotQuantile4Value_id, *args, **kwargs)


_boxPlotQuantile5Value_id = None
def boxPlotQuantile5Value(*args, **kwargs):
    """
    boxPlotQuantile5Value(plotID: Number, q5: Number) -> bool
    
    Set user value for quantile 5
    
    Args:
        plotID (Number): box-plot window ID
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotQuantile5Value_id
    if _boxPlotQuantile5Value_id is None:
        _boxPlotQuantile5Value_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotQuantile5Value'))
    return _client_service().call(_boxPlotQuantile5Value_id, *args, **kwargs)


_boxPlotQuantileValues_id = None
def boxPlotQuantileValues(*args, **kwargs):
    """
    boxPlotQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number) -> bool
    
    Set user values to the box-plot quantiles
    
    Args:
        plotID (Number): box-plot window ID
        q1 (Number): quantile 1 percentage
        q2 (Number): quantile 2 percentage
        q3 (Number): quantile 3 percentage
        q4 (Number): quantile 4 percentage
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotQuantileValues_id
    if _boxPlotQuantileValues_id is None:
        _boxPlotQuantileValues_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotQuantileValues'))
    return _client_service().call(_boxPlotQuantileValues_id, *args, **kwargs)


_boxPlotSave_id = None
def boxPlotSave(*args, **kwargs):
    """
    boxPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        n (str): box-plot window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSave_id
    if _boxPlotSave_id is None:
        _boxPlotSave_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSave'))
    return _client_service().call(_boxPlotSave_id, *args, **kwargs)


_boxPlotSelectFilter_id = None
def boxPlotSelectFilter(*args, **kwargs):
    """
    boxPlotSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): box-plot window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSelectFilter_id
    if _boxPlotSelectFilter_id is None:
        _boxPlotSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSelectFilter'))
    return _client_service().call(_boxPlotSelectFilter_id, *args, **kwargs)


_boxPlotSetAxisInverse_id = None
def boxPlotSetAxisInverse(*args, **kwargs):
    """
    boxPlotSetAxisInverse(plotID: Number, v: str, inv: bool) -> bool
    
    Inverse a box-plot variable scale
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        inv (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetAxisInverse_id
    if _boxPlotSetAxisInverse_id is None:
        _boxPlotSetAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetAxisInverse'))
    return _client_service().call(_boxPlotSetAxisInverse_id, *args, **kwargs)


_boxPlotSetBoxBorder_id = None
def boxPlotSetBoxBorder(*args, **kwargs):
    """
    boxPlotSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change boxes border color
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetBoxBorder_id
    if _boxPlotSetBoxBorder_id is None:
        _boxPlotSetBoxBorder_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetBoxBorder'))
    return _client_service().call(_boxPlotSetBoxBorder_id, *args, **kwargs)


_boxPlotSetBoxColor_id = None
def boxPlotSetBoxColor(*args, **kwargs):
    """
    boxPlotSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number) -> bool
    
    Change boxes color
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetBoxColor_id
    if _boxPlotSetBoxColor_id is None:
        _boxPlotSetBoxColor_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetBoxColor'))
    return _client_service().call(_boxPlotSetBoxColor_id, *args, **kwargs)


_boxPlotSetBoxColour_id = None
def boxPlotSetBoxColour(*args, **kwargs):
    """
    boxPlotSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use boxPlotSetBoxColor instead) Change boxes color
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetBoxColour_id
    if _boxPlotSetBoxColour_id is None:
        _boxPlotSetBoxColour_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetBoxColour'))
    return _client_service().call(_boxPlotSetBoxColour_id, *args, **kwargs)


_boxPlotSetBoxDisplay_id = None
def boxPlotSetBoxDisplay(*args, **kwargs):
    """
    boxPlotSetBoxDisplay(plotID: Number, type: int, size: Number=8) -> bool
    
    Change boxes general display
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetBoxDisplay_id
    if _boxPlotSetBoxDisplay_id is None:
        _boxPlotSetBoxDisplay_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetBoxDisplay'))
    return _client_service().call(_boxPlotSetBoxDisplay_id, *args, **kwargs)


_boxPlotSetDatum_id = None
def boxPlotSetDatum(*args, **kwargs):
    """
    boxPlotSetDatum(plotID: Number, lim: bool, min: Number=0, max: Number=0) -> bool
    
    Change the reference limitation on box-plot
    
    Args:
        plotID (Number): box-plot window ID
        lim (bool): True for user's limitaion, False else
        min (Number): Optional; top limit
        max (Number): Optional; bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetDatum_id
    if _boxPlotSetDatum_id is None:
        _boxPlotSetDatum_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetDatum'))
    return _client_service().call(_boxPlotSetDatum_id, *args, **kwargs)


_boxPlotSetFilter_id = None
def boxPlotSetFilter(*args, **kwargs):
    """
    boxPlotSetFilter(plotID: Number, f: str) -> bool
    
    Set the variable as a filter
    
    Args:
        plotID (Number): box-plot window ID
        f (str): variable filter
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetFilter_id
    if _boxPlotSetFilter_id is None:
        _boxPlotSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetFilter'))
    return _client_service().call(_boxPlotSetFilter_id, *args, **kwargs)


_boxPlotSetName_id = None
def boxPlotSetName(*args, **kwargs):
    """
    boxPlotSetName(plotID: Number, n: str) -> bool
    
    Change the name of the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        n (str): new box-plot window name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetName_id
    if _boxPlotSetName_id is None:
        _boxPlotSetName_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetName'))
    return _client_service().call(_boxPlotSetName_id, *args, **kwargs)


_boxPlotSetVariablesList_id = None
def boxPlotSetVariablesList(*args, **kwargs):
    """
    boxPlotSetVariablesList(plotID: Number, vn: list) -> bool
    
    Set the variable list to the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        vn (list): variable list
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetVariablesList_id
    if _boxPlotSetVariablesList_id is None:
        _boxPlotSetVariablesList_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetVariablesList'))
    return _client_service().call(_boxPlotSetVariablesList_id, *args, **kwargs)


_boxPlotSetXAxisScale_id = None
def boxPlotSetXAxisScale(*args, **kwargs):
    """
    boxPlotSetXAxisScale(plotID: Number, v: str, sc: int) -> bool
    
    Change a box-plot variable Y axis scale
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        sc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetXAxisScale_id
    if _boxPlotSetXAxisScale_id is None:
        _boxPlotSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetXAxisScale'))
    return _client_service().call(_boxPlotSetXAxisScale_id, *args, **kwargs)


_boxPlotSetXAxisType_id = None
def boxPlotSetXAxisType(*args, **kwargs):
    """
    boxPlotSetXAxisType(plotID: Number, v: str, t: int) -> bool
    
    Change the type of a box-plot variable Y axis
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        t (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetXAxisType_id
    if _boxPlotSetXAxisType_id is None:
        _boxPlotSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetXAxisType'))
    return _client_service().call(_boxPlotSetXAxisType_id, *args, **kwargs)


_boxPlotSetXAxisUnit_id = None
def boxPlotSetXAxisUnit(*args, **kwargs):
    """
    boxPlotSetXAxisUnit(plotID: Number, v: str, u: str) -> bool
    
    Change the unit of a box-plot variable Y axis
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        u (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetXAxisUnit_id
    if _boxPlotSetXAxisUnit_id is None:
        _boxPlotSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetXAxisUnit'))
    return _client_service().call(_boxPlotSetXAxisUnit_id, *args, **kwargs)


_boxPlotSetXAxisUserLimits_id = None
def boxPlotSetXAxisUserLimits(*args, **kwargs):
    """
    boxPlotSetXAxisUserLimits(plotID: Number, v: str, min: Number, max: Number) -> bool
    
    Set min & max values of a box-plot variable Y axis
    
    Args:
        plotID (Number): box-plot window ID
        v (str): variable name
        min (Number): X axis minimum
        max (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetXAxisUserLimits_id
    if _boxPlotSetXAxisUserLimits_id is None:
        _boxPlotSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetXAxisUserLimits'))
    return _client_service().call(_boxPlotSetXAxisUserLimits_id, *args, **kwargs)


_boxPlotSetZonation_id = None
def boxPlotSetZonation(*args, **kwargs):
    """
    boxPlotSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the box-plot
    
    Args:
        plotID (Number): box-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotSetZonation_id
    if _boxPlotSetZonation_id is None:
        _boxPlotSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotSetZonation'))
    return _client_service().call(_boxPlotSetZonation_id, *args, **kwargs)


_boxPlotStdDevColor_id = None
def boxPlotStdDevColor(*args, **kwargs):
    """
    boxPlotStdDevColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change standard deviation markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotStdDevColor_id
    if _boxPlotStdDevColor_id is None:
        _boxPlotStdDevColor_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotStdDevColor'))
    return _client_service().call(_boxPlotStdDevColor_id, *args, **kwargs)


_boxPlotStdDevColour_id = None
def boxPlotStdDevColour(*args, **kwargs):
    """
    boxPlotStdDevColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use boxPlotStdDevColor instead) Change standard deviation markers color in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotStdDevColour_id
    if _boxPlotStdDevColour_id is None:
        _boxPlotStdDevColour_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotStdDevColour'))
    return _client_service().call(_boxPlotStdDevColour_id, *args, **kwargs)


_boxPlotStdDevMarkers_id = None
def boxPlotStdDevMarkers(*args, **kwargs):
    """
    boxPlotStdDevMarkers(plotID: Number, type: int, size: Number=8) -> bool
    
    Change standard deviation markers in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotStdDevMarkers_id
    if _boxPlotStdDevMarkers_id is None:
        _boxPlotStdDevMarkers_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotStdDevMarkers'))
    return _client_service().call(_boxPlotStdDevMarkers_id, *args, **kwargs)


_boxPlotStddevMarkers_id = None
def boxPlotStddevMarkers(*args, **kwargs):
    """
    boxPlotStddevMarkers(plotID: Number, type: int, size: Number=8) -> bool
    
    [DEPRECATED] (use boxPlotStdDevMarkers instead) Change standard deviation markers in box-plot
    
    Args:
        plotID (Number): box-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 30)
    
    Returns:
        bool: operation exit status
    """
    global _boxPlotStddevMarkers_id
    if _boxPlotStddevMarkers_id is None:
        _boxPlotStddevMarkers_id = _client_service().register_static_object(('TechlogPlot', 'boxPlotStddevMarkers'))
    return _client_service().call(_boxPlotStddevMarkers_id, *args, **kwargs)


_captureToFile_id = None
def captureToFile(*args, **kwargs):
    """
    captureToFile(plotID: Number, captureType: str, outputFormat: str, outputName: str, resolution_dpi: Number=300) -> bool
    
    Capture the plot into a file
    
    Args:
        plotID (Number): object ID
        captureType (str): 'quick', 'export'
        outputFormat (str): 'jpg', 'png', 'bmp', 'cgm', 'cgm_office', 'cgm_non_unicode', 'emf', 'svg' or 'tif'
        outputName (str): file name (saved in 'Various' folder by default)
        resolution_dpi (Number): Optional; dpi resolution for export 72, 96, 150 or 300
    
    Returns:
        bool: operation exit status
    """
    global _captureToFile_id
    if _captureToFile_id is None:
        _captureToFile_id = _client_service().register_static_object(('TechlogPlot', 'captureToFile'))
    return _client_service().call(_captureToFile_id, *args, **kwargs)


_close_id = None
def close(*args, **kwargs):
    """
    close(plotID: Number, vb: bool=True) -> bool
    
    Close a plot
    
    Args:
        plotID (Number): plot window ID
        vb (bool): Optional; ask to save
    
    Returns:
        bool: operation exit status
    """
    global _close_id
    if _close_id is None:
        _close_id = _client_service().register_static_object(('TechlogPlot', 'close'))
    return _client_service().call(_close_id, *args, **kwargs)


_compositePrintingAddObject_id = None
def compositePrintingAddObject(*args, **kwargs):
    """
    compositePrintingAddObject(composerID: Number, name: str, type: Number, folder: str=None) -> bool
    
    Add an object to the composer
    
    Args:
        composerID (Number): composer window ID
        name (str): object name
        type (Number): 0 = Header; 1 = Layout; 2 = CrossPlot; 3 = Histogram; 4 = Picture
        folder (str): Optional; object folder
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingAddObject_id
    if _compositePrintingAddObject_id is None:
        _compositePrintingAddObject_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingAddObject'))
    return _client_service().call(_compositePrintingAddObject_id, *args, **kwargs)


_compositePrintingCreate_id = None
def compositePrintingCreate(*args, **kwargs):
    """
    compositePrintingCreate() -> Number
    
    Create a new composer
    
    Returns:
        Number: plot ID
    """
    global _compositePrintingCreate_id
    if _compositePrintingCreate_id is None:
        _compositePrintingCreate_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingCreate'))
    return _client_service().call(_compositePrintingCreate_id, *args, **kwargs)


_compositePrintingLayoutObjectScale_id = None
def compositePrintingLayoutObjectScale(*args, **kwargs):
    """
    compositePrintingLayoutObjectScale(composerID: Number, objectIndex: Number, scale: Number) -> bool
    
    Change the scale of a layout object of the composer
    
    Args:
        composerID (Number): composer window ID
        objectIndex (Number): index (from 0) of the object in the list of objects
        scale (Number): new scale of the layout
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingLayoutObjectScale_id
    if _compositePrintingLayoutObjectScale_id is None:
        _compositePrintingLayoutObjectScale_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingLayoutObjectScale'))
    return _client_service().call(_compositePrintingLayoutObjectScale_id, *args, **kwargs)


_compositePrintingMoveObjectDown_id = None
def compositePrintingMoveObjectDown(*args, **kwargs):
    """
    compositePrintingMoveObjectDown(composerID: Number, objectIndex: Number) -> bool
    
    Move an object down in the composer
    
    Args:
        composerID (Number): composer window ID
        objectIndex (Number): index (from 0) of the object in the list of objects
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingMoveObjectDown_id
    if _compositePrintingMoveObjectDown_id is None:
        _compositePrintingMoveObjectDown_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingMoveObjectDown'))
    return _client_service().call(_compositePrintingMoveObjectDown_id, *args, **kwargs)


_compositePrintingMoveObjectUp_id = None
def compositePrintingMoveObjectUp(*args, **kwargs):
    """
    compositePrintingMoveObjectUp(composerID: Number, objectIndex: Number) -> bool
    
    Move an object up in the composer
    
    Args:
        composerID (Number): composer window ID
        objectIndex (Number): index (from 0) of the object in the list of objects
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingMoveObjectUp_id
    if _compositePrintingMoveObjectUp_id is None:
        _compositePrintingMoveObjectUp_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingMoveObjectUp'))
    return _client_service().call(_compositePrintingMoveObjectUp_id, *args, **kwargs)


_compositePrintingNew_id = None
def compositePrintingNew(*args, **kwargs):
    """
    compositePrintingNew(composerID: Number) -> bool
    
    Reset the composer
    
    Args:
        composerID (Number): composer window ID
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingNew_id
    if _compositePrintingNew_id is None:
        _compositePrintingNew_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingNew'))
    return _client_service().call(_compositePrintingNew_id, *args, **kwargs)


_compositePrintingObjectApplyTo_id = None
def compositePrintingObjectApplyTo(*args, **kwargs):
    """
    compositePrintingObjectApplyTo(composerID: Number, objectIndex: Number, well: str=None, dataset: str=None) -> Number
    
    Apply the object preview of the composer to a particular well and dataset
    
    Args:
        composerID (Number): composer window ID
        objectIndex (Number): index (from 0) of the object in the list of objects
        well (str): Optional; well name
        dataset (str): Optional; dataset name
    
    Returns:
        Number: plot ID
    """
    global _compositePrintingObjectApplyTo_id
    if _compositePrintingObjectApplyTo_id is None:
        _compositePrintingObjectApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingObjectApplyTo'))
    return _client_service().call(_compositePrintingObjectApplyTo_id, *args, **kwargs)


_compositePrintingOpen_id = None
def compositePrintingOpen(*args, **kwargs):
    """
    compositePrintingOpen(n: str, f: str=None) -> Number
    
    Open an existing composer
    
    Args:
        n (str): composer name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _compositePrintingOpen_id
    if _compositePrintingOpen_id is None:
        _compositePrintingOpen_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingOpen'))
    return _client_service().call(_compositePrintingOpen_id, *args, **kwargs)


_compositePrintingPreview_id = None
def compositePrintingPreview(*args, **kwargs):
    """
    compositePrintingPreview(composerID: Number) -> bool
    
    Preview the composer
    
    Args:
        composerID (Number): composer window ID
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingPreview_id
    if _compositePrintingPreview_id is None:
        _compositePrintingPreview_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreview'))
    return _client_service().call(_compositePrintingPreview_id, *args, **kwargs)


_compositePrintingPreviewApplyTo_id = None
def compositePrintingPreviewApplyTo(*args, **kwargs):
    """
    compositePrintingPreviewApplyTo(composerID: Number, well: str=None, dataset: str=None) -> Number
    
    Apply the composer preview to a particular well and dataset
    
    Args:
        composerID (Number): composer window ID
        well (str): Optional; well name
        dataset (str): Optional; dataset name
    
    Returns:
        Number: plot ID
    """
    global _compositePrintingPreviewApplyTo_id
    if _compositePrintingPreviewApplyTo_id is None:
        _compositePrintingPreviewApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreviewApplyTo'))
    return _client_service().call(_compositePrintingPreviewApplyTo_id, *args, **kwargs)


_compositePrintingPreviewGet_id = None
def compositePrintingPreviewGet(*args, **kwargs):
    """
    compositePrintingPreviewGet() -> Number
    
    Get the plot ID of the composer preview
    
    Returns:
        Number: plot ID
    """
    global _compositePrintingPreviewGet_id
    if _compositePrintingPreviewGet_id is None:
        _compositePrintingPreviewGet_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreviewGet'))
    return _client_service().call(_compositePrintingPreviewGet_id, *args, **kwargs)


_compositePrintingPreviewPrint_id = None
def compositePrintingPreviewPrint(*args, **kwargs):
    """
    compositePrintingPreviewPrint(hideDialog: bool) -> bool
    
    Print the composer preview
    
    Args:
        hideDialog (bool): 1 = hide dialog box; 0 = show dialog box
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingPreviewPrint_id
    if _compositePrintingPreviewPrint_id is None:
        _compositePrintingPreviewPrint_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreviewPrint'))
    return _client_service().call(_compositePrintingPreviewPrint_id, *args, **kwargs)


_compositePrintingPreviewSetHorizontalRulerVisibility_id = None
def compositePrintingPreviewSetHorizontalRulerVisibility(*args, **kwargs):
    """
    compositePrintingPreviewSetHorizontalRulerVisibility(visible: bool) -> bool
    
    Change the horizontal ruler visibility of the composer preview
    
    Args:
        visible (bool): 1 = show; 0 = hide
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingPreviewSetHorizontalRulerVisibility_id
    if _compositePrintingPreviewSetHorizontalRulerVisibility_id is None:
        _compositePrintingPreviewSetHorizontalRulerVisibility_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreviewSetHorizontalRulerVisibility'))
    return _client_service().call(_compositePrintingPreviewSetHorizontalRulerVisibility_id, *args, **kwargs)


_compositePrintingPreviewSetUnit_id = None
def compositePrintingPreviewSetUnit(*args, **kwargs):
    """
    compositePrintingPreviewSetUnit(unit: str) -> bool
    
    Set the unit of the composer preview
    
    Args:
        unit (str): new unit
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingPreviewSetUnit_id
    if _compositePrintingPreviewSetUnit_id is None:
        _compositePrintingPreviewSetUnit_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreviewSetUnit'))
    return _client_service().call(_compositePrintingPreviewSetUnit_id, *args, **kwargs)


_compositePrintingPreviewSetVerticalRulerVisibility_id = None
def compositePrintingPreviewSetVerticalRulerVisibility(*args, **kwargs):
    """
    compositePrintingPreviewSetVerticalRulerVisibility(visible: bool) -> bool
    
    Change the vertical ruler visibility of the composer preview
    
    Args:
        visible (bool): 1 = show; 0 = hide
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingPreviewSetVerticalRulerVisibility_id
    if _compositePrintingPreviewSetVerticalRulerVisibility_id is None:
        _compositePrintingPreviewSetVerticalRulerVisibility_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingPreviewSetVerticalRulerVisibility'))
    return _client_service().call(_compositePrintingPreviewSetVerticalRulerVisibility_id, *args, **kwargs)


_compositePrintingRemoveObject_id = None
def compositePrintingRemoveObject(*args, **kwargs):
    """
    compositePrintingRemoveObject(composerID: Number, objectIndex: Number) -> bool
    
    Remove an object from composer
    
    Args:
        composerID (Number): composer window ID
        objectIndex (Number): index (from 0) of the object in the list of objects
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingRemoveObject_id
    if _compositePrintingRemoveObject_id is None:
        _compositePrintingRemoveObject_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingRemoveObject'))
    return _client_service().call(_compositePrintingRemoveObject_id, *args, **kwargs)


_compositePrintingSave_id = None
def compositePrintingSave(*args, **kwargs):
    """
    compositePrintingSave(composerID: Number, n: str, f: str=None) -> bool
    
    Save the composer
    
    Args:
        composerID (Number): composer window ID
        n (str): composer name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _compositePrintingSave_id
    if _compositePrintingSave_id is None:
        _compositePrintingSave_id = _client_service().register_static_object(('TechlogPlot', 'compositePrintingSave'))
    return _client_service().call(_compositePrintingSave_id, *args, **kwargs)


_containerAddCell_id = None
def containerAddCell(*args, **kwargs):
    """
    containerAddCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
    
    Add the cell in specified column and row
    
    Args:
        containerID (Number): container instance ID
        cellID (Number): cell ID
        row (Number): cell row
        column (Number): cell column
        rowSpan (Number): [optional] cell row span
        columnSpan (Number): [optional] cell column span
    """
    global _containerAddCell_id
    if _containerAddCell_id is None:
        _containerAddCell_id = _client_service().register_static_object(('TechlogPlot', 'containerAddCell'))
    return _client_service().call(_containerAddCell_id, *args, **kwargs)


_containerCellExist_id = None
def containerCellExist(*args, **kwargs):
    """
    containerCellExist(containerID: Number, cellID: Number) -> bool
    
    Check if the cell exist or not
    
    Args:
        containerID (Number): container instance ID
        cellID (Number): cell ID
    
    Returns:
        bool: cell exist (true) or not
    """
    global _containerCellExist_id
    if _containerCellExist_id is None:
        _containerCellExist_id = _client_service().register_static_object(('TechlogPlot', 'containerCellExist'))
    return _client_service().call(_containerCellExist_id, *args, **kwargs)


_containerCreate_id = None
def containerCreate(*args, **kwargs):
    """
    containerCreate(name: str, title: str) -> Number
    
    Create a new container
    
    Args:
        name (str): container name
        title (str): container title
    
    Returns:
        Number: container ID
    """
    global _containerCreate_id
    if _containerCreate_id is None:
        _containerCreate_id = _client_service().register_static_object(('TechlogPlot', 'containerCreate'))
    return _client_service().call(_containerCreate_id, *args, **kwargs)


_containerFindCell_id = None
def containerFindCell(*args, **kwargs):
    """
    containerFindCell(containerID: Number, cellID: Number) -> bool or Position
    
    Find container cell by column and row
    
    Args:
        containerID (Number): container instance ID
        cellID (Number): cell ID
    
    Returns:
        bool or Position: if cell exist position (0 -> column, 1 -> row) else False
    """
    global _containerFindCell_id
    if _containerFindCell_id is None:
        _containerFindCell_id = _client_service().register_static_object(('TechlogPlot', 'containerFindCell'))
    return _client_service().call(_containerFindCell_id, *args, **kwargs)


_containerGetCell_id = None
def containerGetCell(*args, **kwargs):
    """
    containerGetCell(containerID: Number, row: Number, column: Number) -> Number
    
    Get container cell by row and column
    
    Args:
        containerID (Number): container instance ID
        row (Number): cell row
        column (Number): cell column
    
    Returns:
        Number: cell ID
    """
    global _containerGetCell_id
    if _containerGetCell_id is None:
        _containerGetCell_id = _client_service().register_static_object(('TechlogPlot', 'containerGetCell'))
    return _client_service().call(_containerGetCell_id, *args, **kwargs)


_containerGetTitle_id = None
def containerGetTitle(*args, **kwargs):
    """
    containerGetTitle(containerID: Number) -> str
    
    Get container title
    
    Args:
        containerID (Number): container instance ID
    
    Returns:
        str: container title
    """
    global _containerGetTitle_id
    if _containerGetTitle_id is None:
        _containerGetTitle_id = _client_service().register_static_object(('TechlogPlot', 'containerGetTitle'))
    return _client_service().call(_containerGetTitle_id, *args, **kwargs)


_containerGetTitleAreaHeight_id = None
def containerGetTitleAreaHeight(*args, **kwargs):
    """
    containerGetTitleAreaHeight(containerID: Number) -> Number
    
    Get container title height
    
    Args:
        containerID (Number): container instance ID
    
    Returns:
        Number: container title height
    """
    global _containerGetTitleAreaHeight_id
    if _containerGetTitleAreaHeight_id is None:
        _containerGetTitleAreaHeight_id = _client_service().register_static_object(('TechlogPlot', 'containerGetTitleAreaHeight'))
    return _client_service().call(_containerGetTitleAreaHeight_id, *args, **kwargs)


_containerGetTitleVisible_id = None
def containerGetTitleVisible(*args, **kwargs):
    """
    containerGetTitleVisible(containerID: Number) -> bool
    
    Get container visibility
    
    Args:
        containerID (Number): container instance ID
    
    Returns:
        bool: operation exit status
    """
    global _containerGetTitleVisible_id
    if _containerGetTitleVisible_id is None:
        _containerGetTitleVisible_id = _client_service().register_static_object(('TechlogPlot', 'containerGetTitleVisible'))
    return _client_service().call(_containerGetTitleVisible_id, *args, **kwargs)


_containerMoveCell_id = None
def containerMoveCell(*args, **kwargs):
    """
    containerMoveCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
    
    Move the cell in specified column and row
    
    Args:
        containerID (Number): container instance ID
        cellID (Number): cell ID
        row (Number): cell row
        column (Number): cell column
        rowSpan (Number): [optional] cell row span
        columnSpan (Number): [optional] cell column span
    """
    global _containerMoveCell_id
    if _containerMoveCell_id is None:
        _containerMoveCell_id = _client_service().register_static_object(('TechlogPlot', 'containerMoveCell'))
    return _client_service().call(_containerMoveCell_id, *args, **kwargs)


_containerRemoveCell_id = None
def containerRemoveCell(*args, **kwargs):
    """
    containerRemoveCell(containerID: Number, cellID: Number)
    
    Remove specified cell by ID
    
    Args:
        containerID (Number): container instance ID
        cellID (Number): cell ID
    """
    global _containerRemoveCell_id
    if _containerRemoveCell_id is None:
        _containerRemoveCell_id = _client_service().register_static_object(('TechlogPlot', 'containerRemoveCell'))
    return _client_service().call(_containerRemoveCell_id, *args, **kwargs)


_containerRemoveCellFromPos_id = None
def containerRemoveCellFromPos(*args, **kwargs):
    """
    containerRemoveCellFromPos(containerID: Number, row: Number, column: Number)
    
    [DEPRECATED] (use containerRemoveCellFromPosition instead) Remove cell in specified column and row
    
    Args:
        containerID (Number): container instance ID
        row (Number): cell row
        column (Number): cell column
    """
    global _containerRemoveCellFromPos_id
    if _containerRemoveCellFromPos_id is None:
        _containerRemoveCellFromPos_id = _client_service().register_static_object(('TechlogPlot', 'containerRemoveCellFromPos'))
    return _client_service().call(_containerRemoveCellFromPos_id, *args, **kwargs)


_containerRemoveCellFromPosition_id = None
def containerRemoveCellFromPosition(*args, **kwargs):
    """
    containerRemoveCellFromPosition(containerID: Number, row: Number, column: Number)
    
    [DEPRECATED] Remove cell in specified column and row
    
    Args:
        containerID (Number): container instance ID
        row (Number): cell row
        column (Number): cell column
    """
    global _containerRemoveCellFromPosition_id
    if _containerRemoveCellFromPosition_id is None:
        _containerRemoveCellFromPosition_id = _client_service().register_static_object(('TechlogPlot', 'containerRemoveCellFromPosition'))
    return _client_service().call(_containerRemoveCellFromPosition_id, *args, **kwargs)


_containerSetTitle_id = None
def containerSetTitle(*args, **kwargs):
    """
    containerSetTitle(containerID: Number, title: str)
    
    Set container title
    
    Args:
        containerID (Number): container instance ID
        title (str): container title
    """
    global _containerSetTitle_id
    if _containerSetTitle_id is None:
        _containerSetTitle_id = _client_service().register_static_object(('TechlogPlot', 'containerSetTitle'))
    return _client_service().call(_containerSetTitle_id, *args, **kwargs)


_containerSetTitleVisible_id = None
def containerSetTitleVisible(*args, **kwargs):
    """
    containerSetTitleVisible(containerID: Number, visible: bool)
    
    Set container visibility
    
    Args:
        containerID (Number): container instance ID
        visible (bool): visibility state
    """
    global _containerSetTitleVisible_id
    if _containerSetTitleVisible_id is None:
        _containerSetTitleVisible_id = _client_service().register_static_object(('TechlogPlot', 'containerSetTitleVisible'))
    return _client_service().call(_containerSetTitleVisible_id, *args, **kwargs)


_crossPlot2ndScaleMarkers_id = None
def crossPlot2ndScaleMarkers(*args, **kwargs):
    """
    crossPlot2ndScaleMarkers(plotID: Number, type: int, size: Number=5) -> bool
    
    [DEPRECATED] Set type & size of cross-plot second scale's markers
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlot2ndScaleMarkers_id
    if _crossPlot2ndScaleMarkers_id is None:
        _crossPlot2ndScaleMarkers_id = _client_service().register_static_object(('TechlogPlot', 'crossPlot2ndScaleMarkers'))
    return _client_service().call(_crossPlot2ndScaleMarkers_id, *args, **kwargs)


_crossPlot2ndScaleMarkersColor_id = None
def crossPlot2ndScaleMarkersColor(*args, **kwargs):
    """
    crossPlot2ndScaleMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] Choose the cross-plot second scale's markers color
    
    Args:
        plotID (Number): cross-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlot2ndScaleMarkersColor_id
    if _crossPlot2ndScaleMarkersColor_id is None:
        _crossPlot2ndScaleMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlot2ndScaleMarkersColor'))
    return _client_service().call(_crossPlot2ndScaleMarkersColor_id, *args, **kwargs)


_crossPlot2ndScaleMarkersColour_id = None
def crossPlot2ndScaleMarkersColour(*args, **kwargs):
    """
    crossPlot2ndScaleMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use crossPlot2ndScaleMarkersColor instead) Choose the cross-plot second scale's markers color
    
    Args:
        plotID (Number): cross-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlot2ndScaleMarkersColour_id
    if _crossPlot2ndScaleMarkersColour_id is None:
        _crossPlot2ndScaleMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'crossPlot2ndScaleMarkersColour'))
    return _client_service().call(_crossPlot2ndScaleMarkersColour_id, *args, **kwargs)


_crossPlot3DMonoWellDuplicate_id = None
def crossPlot3DMonoWellDuplicate(*args, **kwargs):
    """
    crossPlot3DMonoWellDuplicate(plotID: Number) -> Number
    
    Duplicate the 3D cross-plot
    
    Args:
        plotID (Number): 3D cross-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlot3DMonoWellDuplicate_id
    if _crossPlot3DMonoWellDuplicate_id is None:
        _crossPlot3DMonoWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlot3DMonoWellDuplicate'))
    return _client_service().call(_crossPlot3DMonoWellDuplicate_id, *args, **kwargs)


_crossPlot3DMultiWellDuplicate_id = None
def crossPlot3DMultiWellDuplicate(*args, **kwargs):
    """
    crossPlot3DMultiWellDuplicate(plotID: Number) -> Number
    
    Duplicate the 3D cross-plot
    
    Args:
        plotID (Number): 3D cross-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlot3DMultiWellDuplicate_id
    if _crossPlot3DMultiWellDuplicate_id is None:
        _crossPlot3DMultiWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlot3DMultiWellDuplicate'))
    return _client_service().call(_crossPlot3DMultiWellDuplicate_id, *args, **kwargs)


_crossPlotAAAddEquation_id = None
def crossPlotAAAddEquation(*args, **kwargs):
    """
    crossPlotAAAddEquation(plotID: Number, eq: str, n: str='', c: str='black') -> bool
    
    Add an equation on cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        eq (str): equation formula
        n (str): Optional; equation name
        c (str): Optional; color Qt name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAAddEquation_id
    if _crossPlotAAAddEquation_id is None:
        _crossPlotAAAddEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAAddEquation'))
    return _client_service().call(_crossPlotAAAddEquation_id, *args, **kwargs)


_crossPlotAAAddRegression_id = None
def crossPlotAAAddRegression(*args, **kwargs):
    """
    crossPlotAAAddRegression(plotID: Number, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Add a regression in a cross-plotAA & sets the color
    
    Args:
        plotID (Number): cross-plotAA window ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAAddRegression_id
    if _crossPlotAAAddRegression_id is None:
        _crossPlotAAAddRegression_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAAddRegression'))
    return _client_service().call(_crossPlotAAAddRegression_id, *args, **kwargs)


_crossPlotAAAddZone_id = None
def crossPlotAAAddZone(*args, **kwargs):
    """
    crossPlotAAAddZone(plotID: Number, z: str) -> bool
    
    Display of a zone from cross-plotAA dataset zonation
    
    Args:
        plotID (Number): cross-plotAA window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAAddZone_id
    if _crossPlotAAAddZone_id is None:
        _crossPlotAAAddZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAAddZone'))
    return _client_service().call(_crossPlotAAAddZone_id, *args, **kwargs)


_crossPlotAAApplyTo_id = None
def crossPlotAAApplyTo(*args, **kwargs):
    """
    crossPlotAAApplyTo(plotID: Number, ds: list) -> list
    
    Apply the cross-plot AA to a data set list
    
    Args:
        plotID (Number): cross-plotAA window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _crossPlotAAApplyTo_id
    if _crossPlotAAApplyTo_id is None:
        _crossPlotAAApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAApplyTo'))
    return _client_service().call(_crossPlotAAApplyTo_id, *args, **kwargs)


_crossPlotAACleanZonation_id = None
def crossPlotAACleanZonation(*args, **kwargs):
    """
    crossPlotAACleanZonation(plotID: Number, ds: str) -> bool
    
    Remove a zonation dataset from cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        ds (str): zonation dataset
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAACleanZonation_id
    if _crossPlotAACleanZonation_id is None:
        _crossPlotAACleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAACleanZonation'))
    return _client_service().call(_crossPlotAACleanZonation_id, *args, **kwargs)


_crossPlotAACleanZone_id = None
def crossPlotAACleanZone(*args, **kwargs):
    """
    crossPlotAACleanZone(plotID: Number, z: str) -> bool
    
    Remove the display of a zone from cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAACleanZone_id
    if _crossPlotAACleanZone_id is None:
        _crossPlotAACleanZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAACleanZone'))
    return _client_service().call(_crossPlotAACleanZone_id, *args, **kwargs)


_crossPlotAAClearAdvancedFilter_id = None
def crossPlotAAClearAdvancedFilter(*args, **kwargs):
    """
    crossPlotAAClearAdvancedFilter(plotID: Number) -> bool
    
    Clear the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAClearAdvancedFilter_id
    if _crossPlotAAClearAdvancedFilter_id is None:
        _crossPlotAAClearAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAClearAdvancedFilter'))
    return _client_service().call(_crossPlotAAClearAdvancedFilter_id, *args, **kwargs)


_crossPlotAACreate_id = None
def crossPlotAACreate(*args, **kwargs):
    """
    crossPlotAACreate(n: str, xn: str='', yn: str='', f: str='', xn2: str='', yn2: str='', matrixID: Number=None) -> Number
    
    Create a new cross-plot AA
    
    Args:
        n (str): cross-plotAA window name
        xn (str): Optional; array X name
        yn (str): Optional; array Y name
        f (str): Optional; filter variable name
        xn2 (str): Optional; second X array name
        yn2 (str): Optional; second Y array name
        matrixID (Number): Optional; if the cross-plot will be inserted into a matrix, give matrix ID
    
    Returns:
        Number: cross-plotAA window ID
    """
    global _crossPlotAACreate_id
    if _crossPlotAACreate_id is None:
        _crossPlotAACreate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAACreate'))
    return _client_service().call(_crossPlotAACreate_id, *args, **kwargs)


_crossPlotAADeleteColor2Values_id = None
def crossPlotAADeleteColor2Values(*args, **kwargs):
    """
    crossPlotAADeleteColor2Values(plotID: Number) -> bool
    
    Delete the variable present on the second color scale of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteColor2Values_id
    if _crossPlotAADeleteColor2Values_id is None:
        _crossPlotAADeleteColor2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteColor2Values'))
    return _client_service().call(_crossPlotAADeleteColor2Values_id, *args, **kwargs)


_crossPlotAADeleteColorValues_id = None
def crossPlotAADeleteColorValues(*args, **kwargs):
    """
    crossPlotAADeleteColorValues(plotID: Number) -> bool
    
    Delete the variable present on the color scale of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteColorValues_id
    if _crossPlotAADeleteColorValues_id is None:
        _crossPlotAADeleteColorValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteColorValues'))
    return _client_service().call(_crossPlotAADeleteColorValues_id, *args, **kwargs)


_crossPlotAADeleteFilterValues_id = None
def crossPlotAADeleteFilterValues(*args, **kwargs):
    """
    crossPlotAADeleteFilterValues(plotID: Number) -> bool
    
    Delete the filter variable of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteFilterValues_id
    if _crossPlotAADeleteFilterValues_id is None:
        _crossPlotAADeleteFilterValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteFilterValues'))
    return _client_service().call(_crossPlotAADeleteFilterValues_id, *args, **kwargs)


_crossPlotAADeleteLabelValues_id = None
def crossPlotAADeleteLabelValues(*args, **kwargs):
    """
    crossPlotAADeleteLabelValues(plotID: Number) -> bool
    
    Delete the variable present on the label scale of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteLabelValues_id
    if _crossPlotAADeleteLabelValues_id is None:
        _crossPlotAADeleteLabelValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteLabelValues'))
    return _client_service().call(_crossPlotAADeleteLabelValues_id, *args, **kwargs)


_crossPlotAADeleteX2Values_id = None
def crossPlotAADeleteX2Values(*args, **kwargs):
    """
    crossPlotAADeleteX2Values(plotID: Number) -> bool
    
    Delete the variable present on the second X axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteX2Values_id
    if _crossPlotAADeleteX2Values_id is None:
        _crossPlotAADeleteX2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteX2Values'))
    return _client_service().call(_crossPlotAADeleteX2Values_id, *args, **kwargs)


_crossPlotAADeleteXValues_id = None
def crossPlotAADeleteXValues(*args, **kwargs):
    """
    crossPlotAADeleteXValues(plotID: Number) -> bool
    
    Delete the variable present on the X axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteXValues_id
    if _crossPlotAADeleteXValues_id is None:
        _crossPlotAADeleteXValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteXValues'))
    return _client_service().call(_crossPlotAADeleteXValues_id, *args, **kwargs)


_crossPlotAADeleteY2Values_id = None
def crossPlotAADeleteY2Values(*args, **kwargs):
    """
    crossPlotAADeleteY2Values(plotID: Number) -> bool
    
    Delete the variable present on the second Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteY2Values_id
    if _crossPlotAADeleteY2Values_id is None:
        _crossPlotAADeleteY2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteY2Values'))
    return _client_service().call(_crossPlotAADeleteY2Values_id, *args, **kwargs)


_crossPlotAADeleteYValues_id = None
def crossPlotAADeleteYValues(*args, **kwargs):
    """
    crossPlotAADeleteYValues(plotID: Number) -> bool
    
    Delete the variable present on the Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADeleteYValues_id
    if _crossPlotAADeleteYValues_id is None:
        _crossPlotAADeleteYValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADeleteYValues'))
    return _client_service().call(_crossPlotAADeleteYValues_id, *args, **kwargs)


_crossPlotAADensityGridHorizontal_id = None
def crossPlotAADensityGridHorizontal(*args, **kwargs):
    """
    crossPlotAADensityGridHorizontal(plotID: Number, type: int, xmin: Number=0, xmax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of X density grid
    
    Args:
        plotID (Number): cross-plotAA window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        xmin (Number): Optional; X axis minimum
        xmax (Number): Optional; X axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADensityGridHorizontal_id
    if _crossPlotAADensityGridHorizontal_id is None:
        _crossPlotAADensityGridHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADensityGridHorizontal'))
    return _client_service().call(_crossPlotAADensityGridHorizontal_id, *args, **kwargs)


_crossPlotAADensityGridVertical_id = None
def crossPlotAADensityGridVertical(*args, **kwargs):
    """
    crossPlotAADensityGridVertical(plotID: Number, type: int, ymin: Number=0, ymax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of Y density grid
    
    Args:
        plotID (Number): cross-plotAA window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        ymin (Number): Optional; Y axis minimum
        ymax (Number): Optional; Y axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADensityGridVertical_id
    if _crossPlotAADensityGridVertical_id is None:
        _crossPlotAADensityGridVertical_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADensityGridVertical'))
    return _client_service().call(_crossPlotAADensityGridVertical_id, *args, **kwargs)


_crossPlotAADensitySmooth_id = None
def crossPlotAADensitySmooth(*args, **kwargs):
    """
    crossPlotAADensitySmooth(plotID: Number, smooth: bool) -> bool
    
    Display of smoothed density values
    
    Args:
        plotID (Number): cross-plotAA window ID
        smooth (bool): 1 = smooth else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADensitySmooth_id
    if _crossPlotAADensitySmooth_id is None:
        _crossPlotAADensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADensitySmooth'))
    return _client_service().call(_crossPlotAADensitySmooth_id, *args, **kwargs)


_crossPlotAADensityType_id = None
def crossPlotAADensityType(*args, **kwargs):
    """
    crossPlotAADensityType(plotID: Number, dst: bool) -> bool
    
    Display of the cross-plot in normal or density type
    
    Args:
        plotID (Number): cross-plotAA window ID
        dst (bool): 1 = density display else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADensityType_id
    if _crossPlotAADensityType_id is None:
        _crossPlotAADensityType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADensityType'))
    return _client_service().call(_crossPlotAADensityType_id, *args, **kwargs)


_crossPlotAADensityValue_id = None
def crossPlotAADensityValue(*args, **kwargs):
    """
    crossPlotAADensityValue(plotID: Number, value: bool, percent: bool=False) -> bool
    
    Display of data density values
    
    Args:
        plotID (Number): cross-plotAA window ID
        value (bool): 1 = display of density value else 0
        percent (bool): Optional; 1 = display in percent else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADensityValue_id
    if _crossPlotAADensityValue_id is None:
        _crossPlotAADensityValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADensityValue'))
    return _client_service().call(_crossPlotAADensityValue_id, *args, **kwargs)


_crossPlotAADisplaySecondVarOver_id = None
def crossPlotAADisplaySecondVarOver(*args, **kwargs):
    """
    crossPlotAADisplaySecondVarOver(plotID: Number, activate: bool) -> bool
    
    [DEPRECATED] (use crossPlotAADisplaySecondVariableOver instead) Display cross-plotAA second axis over the first axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        activate (bool): True if activated, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADisplaySecondVarOver_id
    if _crossPlotAADisplaySecondVarOver_id is None:
        _crossPlotAADisplaySecondVarOver_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADisplaySecondVarOver'))
    return _client_service().call(_crossPlotAADisplaySecondVarOver_id, *args, **kwargs)


_crossPlotAADisplaySecondVariableOver_id = None
def crossPlotAADisplaySecondVariableOver(*args, **kwargs):
    """
    crossPlotAADisplaySecondVariableOver(plotID: Number, activate: bool) -> bool
    
    Display cross-plotAA second axis over the first axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        activate (bool): True if activated, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAADisplaySecondVariableOver_id
    if _crossPlotAADisplaySecondVariableOver_id is None:
        _crossPlotAADisplaySecondVariableOver_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADisplaySecondVariableOver'))
    return _client_service().call(_crossPlotAADisplaySecondVariableOver_id, *args, **kwargs)


_crossPlotAADuplicate_id = None
def crossPlotAADuplicate(*args, **kwargs):
    """
    crossPlotAADuplicate(plotID: Number) -> Number
    
    Duplicate the cross-plot AA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlotAADuplicate_id
    if _crossPlotAADuplicate_id is None:
        _crossPlotAADuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAADuplicate'))
    return _client_service().call(_crossPlotAADuplicate_id, *args, **kwargs)


_crossPlotAAGetAdvancedFilter_id = None
def crossPlotAAGetAdvancedFilter(*args, **kwargs):
    """
    crossPlotAAGetAdvancedFilter(plotID: Number) -> str
    
    Get the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        str: the filter equation
    """
    global _crossPlotAAGetAdvancedFilter_id
    if _crossPlotAAGetAdvancedFilter_id is None:
        _crossPlotAAGetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAGetAdvancedFilter'))
    return _client_service().call(_crossPlotAAGetAdvancedFilter_id, *args, **kwargs)


_crossPlotAAGetRegressions_id = None
def crossPlotAAGetRegressions(*args, **kwargs):
    """
    crossPlotAAGetRegressions(plotID: Number) -> dict
    
    get a dictionary of regressions in a cross-plot AA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        dict: dictionary of regressions
    """
    global _crossPlotAAGetRegressions_id
    if _crossPlotAAGetRegressions_id is None:
        _crossPlotAAGetRegressions_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAGetRegressions'))
    return _client_service().call(_crossPlotAAGetRegressions_id, *args, **kwargs)


_crossPlotAALinkThickness_id = None
def crossPlotAALinkThickness(*args, **kwargs):
    """
    crossPlotAALinkThickness(plotID: Number, thk: Number=0) -> Number
    
    Link thickness cross-plotAA markers
    
    Args:
        plotID (Number): cross-plotAA window ID
        thk (Number): Optional; link thikness
    
    Returns:
        Number: matrix window ID
    """
    global _crossPlotAALinkThickness_id
    if _crossPlotAALinkThickness_id is None:
        _crossPlotAALinkThickness_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALinkThickness'))
    return _client_service().call(_crossPlotAALinkThickness_id, *args, **kwargs)


_crossPlotAALockAxisX_id = None
def crossPlotAALockAxisX(*args, **kwargs):
    """
    crossPlotAALockAxisX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis limits of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAALockAxisX_id
    if _crossPlotAALockAxisX_id is None:
        _crossPlotAALockAxisX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALockAxisX'))
    return _client_service().call(_crossPlotAALockAxisX_id, *args, **kwargs)


_crossPlotAALockAxisY_id = None
def crossPlotAALockAxisY(*args, **kwargs):
    """
    crossPlotAALockAxisY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis limits of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAALockAxisY_id
    if _crossPlotAALockAxisY_id is None:
        _crossPlotAALockAxisY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALockAxisY'))
    return _client_service().call(_crossPlotAALockAxisY_id, *args, **kwargs)


_crossPlotAALockLegendX_id = None
def crossPlotAALockLegendX(*args, **kwargs):
    """
    crossPlotAALockLegendX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis legend of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAALockLegendX_id
    if _crossPlotAALockLegendX_id is None:
        _crossPlotAALockLegendX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALockLegendX'))
    return _client_service().call(_crossPlotAALockLegendX_id, *args, **kwargs)


_crossPlotAALockLegendY_id = None
def crossPlotAALockLegendY(*args, **kwargs):
    """
    crossPlotAALockLegendY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis legend of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAALockLegendY_id
    if _crossPlotAALockLegendY_id is None:
        _crossPlotAALockLegendY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALockLegendY'))
    return _client_service().call(_crossPlotAALockLegendY_id, *args, **kwargs)


_crossPlotAALockPalette_id = None
def crossPlotAALockPalette(*args, **kwargs):
    """
    crossPlotAALockPalette(plotID: Number, locked: bool) -> bool
    
    Lock palette of the cross-plotAV
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAALockPalette_id
    if _crossPlotAALockPalette_id is None:
        _crossPlotAALockPalette_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALockPalette'))
    return _client_service().call(_crossPlotAALockPalette_id, *args, **kwargs)


_crossPlotAALockTitle_id = None
def crossPlotAALockTitle(*args, **kwargs):
    """
    crossPlotAALockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAALockTitle_id
    if _crossPlotAALockTitle_id is None:
        _crossPlotAALockTitle_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAALockTitle'))
    return _client_service().call(_crossPlotAALockTitle_id, *args, **kwargs)


_crossPlotAAMarkers_id = None
def crossPlotAAMarkers(*args, **kwargs):
    """
    crossPlotAAMarkers(plotID: Number, type: int, size: Number=5) -> bool
    
    Set type & size of cross-plotAA markers
    
    Args:
        plotID (Number): cross-plotAA window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMarkers_id
    if _crossPlotAAMarkers_id is None:
        _crossPlotAAMarkers_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkers'))
    return _client_service().call(_crossPlotAAMarkers_id, *args, **kwargs)


_crossPlotAAMarkers2ndScale_id = None
def crossPlotAAMarkers2ndScale(*args, **kwargs):
    """
    crossPlotAAMarkers2ndScale(plotID: Number, type: int, size: Number=5) -> bool
    
    Set type & size of cross-plotAA second scale markers
    
    Args:
        plotID (Number): cross-plotAA window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMarkers2ndScale_id
    if _crossPlotAAMarkers2ndScale_id is None:
        _crossPlotAAMarkers2ndScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkers2ndScale'))
    return _client_service().call(_crossPlotAAMarkers2ndScale_id, *args, **kwargs)


_crossPlotAAMarkers2ndScaleColor_id = None
def crossPlotAAMarkers2ndScaleColor(*args, **kwargs):
    """
    crossPlotAAMarkers2ndScaleColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Choose the cross-plotAA second scale markers color
    
    Args:
        plotID (Number): cross-plotAA window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMarkers2ndScaleColor_id
    if _crossPlotAAMarkers2ndScaleColor_id is None:
        _crossPlotAAMarkers2ndScaleColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkers2ndScaleColor'))
    return _client_service().call(_crossPlotAAMarkers2ndScaleColor_id, *args, **kwargs)


_crossPlotAAMarkers2ndScaleColour_id = None
def crossPlotAAMarkers2ndScaleColour(*args, **kwargs):
    """
    crossPlotAAMarkers2ndScaleColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use crossPlotAAMarkers2ndScaleColor instead) Choose the cross-plotAA second scale markers color
    
    Args:
        plotID (Number): cross-plotAA window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMarkers2ndScaleColour_id
    if _crossPlotAAMarkers2ndScaleColour_id is None:
        _crossPlotAAMarkers2ndScaleColour_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkers2ndScaleColour'))
    return _client_service().call(_crossPlotAAMarkers2ndScaleColour_id, *args, **kwargs)


_crossPlotAAMarkersColor_id = None
def crossPlotAAMarkersColor(*args, **kwargs):
    """
    crossPlotAAMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Choose the cross-plotAA markers color
    
    Args:
        plotID (Number): cross-plotAA window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMarkersColor_id
    if _crossPlotAAMarkersColor_id is None:
        _crossPlotAAMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkersColor'))
    return _client_service().call(_crossPlotAAMarkersColor_id, *args, **kwargs)


_crossPlotAAMarkersColour_id = None
def crossPlotAAMarkersColour(*args, **kwargs):
    """
    crossPlotAAMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use crossPlotAAMarkersColor instead) Choose the cross-plotAA markers color
    
    Args:
        plotID (Number): cross-plotAA window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMarkersColour_id
    if _crossPlotAAMarkersColour_id is None:
        _crossPlotAAMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkersColour'))
    return _client_service().call(_crossPlotAAMarkersColour_id, *args, **kwargs)


_crossPlotAAMarkersDisplay_id = None
def crossPlotAAMarkersDisplay(*args, **kwargs):
    """
    crossPlotAAMarkersDisplay(plotID: Number, display: bool=True) -> Number
    
    Display of cross-plotAA markers
    
    Args:
        plotID (Number): cross-plotAA window ID
        display (bool): Optional; markers display
    
    Returns:
        Number: matrix window ID
    """
    global _crossPlotAAMarkersDisplay_id
    if _crossPlotAAMarkersDisplay_id is None:
        _crossPlotAAMarkersDisplay_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMarkersDisplay'))
    return _client_service().call(_crossPlotAAMarkersDisplay_id, *args, **kwargs)


_crossPlotAAMultiWellAddData_id = None
def crossPlotAAMultiWellAddData(*args, **kwargs):
    """
    crossPlotAAMultiWellAddData(plotID: Number, ds: list) -> bool
    
    Add a dataset to a multi well cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellAddData_id
    if _crossPlotAAMultiWellAddData_id is None:
        _crossPlotAAMultiWellAddData_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellAddData'))
    return _client_service().call(_crossPlotAAMultiWellAddData_id, *args, **kwargs)


_crossPlotAAMultiWellAddEquation_id = None
def crossPlotAAMultiWellAddEquation(*args, **kwargs):
    """
    crossPlotAAMultiWellAddEquation(plotID: Number, eq: str, n: str='', c: str='black') -> bool
    
    Add an equation to an existing cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        eq (str): equation formula
        n (str): Optional; equation name
        c (str): Optional; color Qt name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellAddEquation_id
    if _crossPlotAAMultiWellAddEquation_id is None:
        _crossPlotAAMultiWellAddEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellAddEquation'))
    return _client_service().call(_crossPlotAAMultiWellAddEquation_id, *args, **kwargs)


_crossPlotAAMultiWellAddRegression_id = None
def crossPlotAAMultiWellAddRegression(*args, **kwargs):
    """
    crossPlotAAMultiWellAddRegression(plotID: Number, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Add a regression in a cross-plotAA & sets the color
    
    Args:
        plotID (Number): cross-plotAA window ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellAddRegression_id
    if _crossPlotAAMultiWellAddRegression_id is None:
        _crossPlotAAMultiWellAddRegression_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellAddRegression'))
    return _client_service().call(_crossPlotAAMultiWellAddRegression_id, *args, **kwargs)


_crossPlotAAMultiWellAddRegressionByWell_id = None
def crossPlotAAMultiWellAddRegressionByWell(*args, **kwargs):
    """
    crossPlotAAMultiWellAddRegressionByWell(plotID: Number) -> bool
    
    Add a regression by well in a cross-plotAA
    
    Args:
        plotID (Number): cross-plot windowAA ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellAddRegressionByWell_id
    if _crossPlotAAMultiWellAddRegressionByWell_id is None:
        _crossPlotAAMultiWellAddRegressionByWell_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellAddRegressionByWell'))
    return _client_service().call(_crossPlotAAMultiWellAddRegressionByWell_id, *args, **kwargs)


_crossPlotAAMultiWellAddRegressionByZone_id = None
def crossPlotAAMultiWellAddRegressionByZone(*args, **kwargs):
    """
    crossPlotAAMultiWellAddRegressionByZone(plotID: Number) -> bool
    
    Add a regression by zone in a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellAddRegressionByZone_id
    if _crossPlotAAMultiWellAddRegressionByZone_id is None:
        _crossPlotAAMultiWellAddRegressionByZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellAddRegressionByZone'))
    return _client_service().call(_crossPlotAAMultiWellAddRegressionByZone_id, *args, **kwargs)


_crossPlotAAMultiWellAddZone_id = None
def crossPlotAAMultiWellAddZone(*args, **kwargs):
    """
    crossPlotAAMultiWellAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellAddZone_id
    if _crossPlotAAMultiWellAddZone_id is None:
        _crossPlotAAMultiWellAddZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellAddZone'))
    return _client_service().call(_crossPlotAAMultiWellAddZone_id, *args, **kwargs)


_crossPlotAAMultiWellCleanZonation_id = None
def crossPlotAAMultiWellCleanZonation(*args, **kwargs):
    """
    crossPlotAAMultiWellCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellCleanZonation_id
    if _crossPlotAAMultiWellCleanZonation_id is None:
        _crossPlotAAMultiWellCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellCleanZonation'))
    return _client_service().call(_crossPlotAAMultiWellCleanZonation_id, *args, **kwargs)


_crossPlotAAMultiWellCleanZone_id = None
def crossPlotAAMultiWellCleanZone(*args, **kwargs):
    """
    crossPlotAAMultiWellCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellCleanZone_id
    if _crossPlotAAMultiWellCleanZone_id is None:
        _crossPlotAAMultiWellCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellCleanZone'))
    return _client_service().call(_crossPlotAAMultiWellCleanZone_id, *args, **kwargs)


_crossPlotAAMultiWellCreate_id = None
def crossPlotAAMultiWellCreate(*args, **kwargs):
    """
    crossPlotAAMultiWellCreate(ml: list) -> Number
    
    Create a multi well cross-plotAA
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: cross-plotAA window ID
    """
    global _crossPlotAAMultiWellCreate_id
    if _crossPlotAAMultiWellCreate_id is None:
        _crossPlotAAMultiWellCreate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellCreate'))
    return _client_service().call(_crossPlotAAMultiWellCreate_id, *args, **kwargs)


_crossPlotAAMultiWellDensityGridHorizontal_id = None
def crossPlotAAMultiWellDensityGridHorizontal(*args, **kwargs):
    """
    crossPlotAAMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number=0, xmax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of X density grid
    
    Args:
        plotID (Number): cross-plotAA window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        xmin (Number): Optional; X axis minimum
        xmax (Number): Optional; X axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellDensityGridHorizontal_id
    if _crossPlotAAMultiWellDensityGridHorizontal_id is None:
        _crossPlotAAMultiWellDensityGridHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellDensityGridHorizontal'))
    return _client_service().call(_crossPlotAAMultiWellDensityGridHorizontal_id, *args, **kwargs)


_crossPlotAAMultiWellDensityGridVertical_id = None
def crossPlotAAMultiWellDensityGridVertical(*args, **kwargs):
    """
    crossPlotAAMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number=0, ymax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of Y density grid
    
    Args:
        plotID (Number): cross-plotAA window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        ymin (Number): Optional; Y axis minimum
        ymax (Number): Optional; Y axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellDensityGridVertical_id
    if _crossPlotAAMultiWellDensityGridVertical_id is None:
        _crossPlotAAMultiWellDensityGridVertical_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellDensityGridVertical'))
    return _client_service().call(_crossPlotAAMultiWellDensityGridVertical_id, *args, **kwargs)


_crossPlotAAMultiWellDensitySmooth_id = None
def crossPlotAAMultiWellDensitySmooth(*args, **kwargs):
    """
    crossPlotAAMultiWellDensitySmooth(plotID: Number, smooth: bool) -> bool
    
    Display of smoothed density values
    
    Args:
        plotID (Number): cross-plotAA window ID
        smooth (bool): 1 = smooth else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellDensitySmooth_id
    if _crossPlotAAMultiWellDensitySmooth_id is None:
        _crossPlotAAMultiWellDensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellDensitySmooth'))
    return _client_service().call(_crossPlotAAMultiWellDensitySmooth_id, *args, **kwargs)


_crossPlotAAMultiWellDensityType_id = None
def crossPlotAAMultiWellDensityType(*args, **kwargs):
    """
    crossPlotAAMultiWellDensityType(plotID: Number, dst: bool) -> bool
    
    Display of the cross-plotAA in normal or density type
    
    Args:
        plotID (Number): cross-plotAA window ID
        dst (bool): 1 = density display else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellDensityType_id
    if _crossPlotAAMultiWellDensityType_id is None:
        _crossPlotAAMultiWellDensityType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellDensityType'))
    return _client_service().call(_crossPlotAAMultiWellDensityType_id, *args, **kwargs)


_crossPlotAAMultiWellDensityValue_id = None
def crossPlotAAMultiWellDensityValue(*args, **kwargs):
    """
    crossPlotAAMultiWellDensityValue(plotID: Number, value: bool, percent: bool=False) -> bool
    
    Display of data density values
    
    Args:
        plotID (Number): cross-plotAA window ID
        value (bool): 1 = display of density value else 0
        percent (bool): Optional; 1 = display in percent else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellDensityValue_id
    if _crossPlotAAMultiWellDensityValue_id is None:
        _crossPlotAAMultiWellDensityValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellDensityValue'))
    return _client_service().call(_crossPlotAAMultiWellDensityValue_id, *args, **kwargs)


_crossPlotAAMultiWellDuplicate_id = None
def crossPlotAAMultiWellDuplicate(*args, **kwargs):
    """
    crossPlotAAMultiWellDuplicate(plotID: Number) -> Number
    
    Duplicate the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlotAAMultiWellDuplicate_id
    if _crossPlotAAMultiWellDuplicate_id is None:
        _crossPlotAAMultiWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellDuplicate'))
    return _client_service().call(_crossPlotAAMultiWellDuplicate_id, *args, **kwargs)


_crossPlotAAMultiWellIDFindByName_id = None
def crossPlotAAMultiWellIDFindByName(*args, **kwargs):
    """
    crossPlotAAMultiWellIDFindByName(n: str) -> Number
    
    Find the ID of a name-known cross-plotAA
    
    Args:
        n (str): cross-plotAA window name
    
    Returns:
        Number: cross-plotAA window ID
    """
    global _crossPlotAAMultiWellIDFindByName_id
    if _crossPlotAAMultiWellIDFindByName_id is None:
        _crossPlotAAMultiWellIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellIDFindByName'))
    return _client_service().call(_crossPlotAAMultiWellIDFindByName_id, *args, **kwargs)


_crossPlotAAMultiWellLockAxisX_id = None
def crossPlotAAMultiWellLockAxisX(*args, **kwargs):
    """
    crossPlotAAMultiWellLockAxisX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis limits of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellLockAxisX_id
    if _crossPlotAAMultiWellLockAxisX_id is None:
        _crossPlotAAMultiWellLockAxisX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellLockAxisX'))
    return _client_service().call(_crossPlotAAMultiWellLockAxisX_id, *args, **kwargs)


_crossPlotAAMultiWellLockAxisY_id = None
def crossPlotAAMultiWellLockAxisY(*args, **kwargs):
    """
    crossPlotAAMultiWellLockAxisY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis limits of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellLockAxisY_id
    if _crossPlotAAMultiWellLockAxisY_id is None:
        _crossPlotAAMultiWellLockAxisY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellLockAxisY'))
    return _client_service().call(_crossPlotAAMultiWellLockAxisY_id, *args, **kwargs)


_crossPlotAAMultiWellLockLegendX_id = None
def crossPlotAAMultiWellLockLegendX(*args, **kwargs):
    """
    crossPlotAAMultiWellLockLegendX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis legend of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellLockLegendX_id
    if _crossPlotAAMultiWellLockLegendX_id is None:
        _crossPlotAAMultiWellLockLegendX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellLockLegendX'))
    return _client_service().call(_crossPlotAAMultiWellLockLegendX_id, *args, **kwargs)


_crossPlotAAMultiWellLockLegendY_id = None
def crossPlotAAMultiWellLockLegendY(*args, **kwargs):
    """
    crossPlotAAMultiWellLockLegendY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis legend of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellLockLegendY_id
    if _crossPlotAAMultiWellLockLegendY_id is None:
        _crossPlotAAMultiWellLockLegendY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellLockLegendY'))
    return _client_service().call(_crossPlotAAMultiWellLockLegendY_id, *args, **kwargs)


_crossPlotAAMultiWellLockPalette_id = None
def crossPlotAAMultiWellLockPalette(*args, **kwargs):
    """
    crossPlotAAMultiWellLockPalette(plotID: Number, locked: bool) -> bool
    
    Lock palette of the cross-plotAV
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellLockPalette_id
    if _crossPlotAAMultiWellLockPalette_id is None:
        _crossPlotAAMultiWellLockPalette_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellLockPalette'))
    return _client_service().call(_crossPlotAAMultiWellLockPalette_id, *args, **kwargs)


_crossPlotAAMultiWellLockTitle_id = None
def crossPlotAAMultiWellLockTitle(*args, **kwargs):
    """
    crossPlotAAMultiWellLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellLockTitle_id
    if _crossPlotAAMultiWellLockTitle_id is None:
        _crossPlotAAMultiWellLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellLockTitle'))
    return _client_service().call(_crossPlotAAMultiWellLockTitle_id, *args, **kwargs)


_crossPlotAAMultiWellOpen_id = None
def crossPlotAAMultiWellOpen(*args, **kwargs):
    """
    crossPlotAAMultiWellOpen(n: str, f: str=None) -> bool
    
    Open an existing cross-plotAA multi-well
    
    Args:
        n (str): cross-plotAA multi-well name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellOpen_id
    if _crossPlotAAMultiWellOpen_id is None:
        _crossPlotAAMultiWellOpen_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellOpen'))
    return _client_service().call(_crossPlotAAMultiWellOpen_id, *args, **kwargs)


_crossPlotAAMultiWellRemoveAllEquations_id = None
def crossPlotAAMultiWellRemoveAllEquations(*args, **kwargs):
    """
    crossPlotAAMultiWellRemoveAllEquations(plotID: Number) -> bool
    
    Remove all equations from an existing cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellRemoveAllEquations_id
    if _crossPlotAAMultiWellRemoveAllEquations_id is None:
        _crossPlotAAMultiWellRemoveAllEquations_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellRemoveAllEquations'))
    return _client_service().call(_crossPlotAAMultiWellRemoveAllEquations_id, *args, **kwargs)


_crossPlotAAMultiWellRemoveDataset_id = None
def crossPlotAAMultiWellRemoveDataset(*args, **kwargs):
    """
    crossPlotAAMultiWellRemoveDataset(plotID: Number, we: str) -> bool
    
    Remove a dataset from a multi well cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        we (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellRemoveDataset_id
    if _crossPlotAAMultiWellRemoveDataset_id is None:
        _crossPlotAAMultiWellRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellRemoveDataset'))
    return _client_service().call(_crossPlotAAMultiWellRemoveDataset_id, *args, **kwargs)


_crossPlotAAMultiWellRemoveEquation_id = None
def crossPlotAAMultiWellRemoveEquation(*args, **kwargs):
    """
    crossPlotAAMultiWellRemoveEquation(plotID: Number, eq: str) -> bool
    
    Remove an equation from an existing cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        eq (str): equation name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellRemoveEquation_id
    if _crossPlotAAMultiWellRemoveEquation_id is None:
        _crossPlotAAMultiWellRemoveEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellRemoveEquation'))
    return _client_service().call(_crossPlotAAMultiWellRemoveEquation_id, *args, **kwargs)


_crossPlotAAMultiWellRemoveWell_id = None
def crossPlotAAMultiWellRemoveWell(*args, **kwargs):
    """
    crossPlotAAMultiWellRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a multi well cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellRemoveWell_id
    if _crossPlotAAMultiWellRemoveWell_id is None:
        _crossPlotAAMultiWellRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellRemoveWell'))
    return _client_service().call(_crossPlotAAMultiWellRemoveWell_id, *args, **kwargs)


_crossPlotAAMultiWellReverseAxes_id = None
def crossPlotAAMultiWellReverseAxes(*args, **kwargs):
    """
    crossPlotAAMultiWellReverseAxes(plotID: Number) -> bool
    
    Reverse the cross-plotAA axes
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellReverseAxes_id
    if _crossPlotAAMultiWellReverseAxes_id is None:
        _crossPlotAAMultiWellReverseAxes_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellReverseAxes'))
    return _client_service().call(_crossPlotAAMultiWellReverseAxes_id, *args, **kwargs)


_crossPlotAAMultiWellSave_id = None
def crossPlotAAMultiWellSave(*args, **kwargs):
    """
    crossPlotAAMultiWellSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        n (str): cross-plotAA name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSave_id
    if _crossPlotAAMultiWellSave_id is None:
        _crossPlotAAMultiWellSave_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSave'))
    return _client_service().call(_crossPlotAAMultiWellSave_id, *args, **kwargs)


_crossPlotAAMultiWellSelectVar_id = None
def crossPlotAAMultiWellSelectVar(*args, **kwargs):
    """
    crossPlotAAMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a multi well cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSelectVar_id
    if _crossPlotAAMultiWellSelectVar_id is None:
        _crossPlotAAMultiWellSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSelectVar'))
    return _client_service().call(_crossPlotAAMultiWellSelectVar_id, *args, **kwargs)


_crossPlotAAMultiWellSetName_id = None
def crossPlotAAMultiWellSetName(*args, **kwargs):
    """
    crossPlotAAMultiWellSetName(plotID: Number, n: str) -> bool
    
    Change the name of multiwell cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        n (str): new cross-plotAA name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetName_id
    if _crossPlotAAMultiWellSetName_id is None:
        _crossPlotAAMultiWellSetName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetName'))
    return _client_service().call(_crossPlotAAMultiWellSetName_id, *args, **kwargs)


_crossPlotAAMultiWellSetPaletteBoundaries_id = None
def crossPlotAAMultiWellSetPaletteBoundaries(*args, **kwargs):
    """
    crossPlotAAMultiWellSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a multi-well cross plot AA.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetPaletteBoundaries_id
    if _crossPlotAAMultiWellSetPaletteBoundaries_id is None:
        _crossPlotAAMultiWellSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetPaletteBoundaries'))
    return _client_service().call(_crossPlotAAMultiWellSetPaletteBoundaries_id, *args, **kwargs)


_crossPlotAAMultiWellSetXAxisInverse_id = None
def crossPlotAAMultiWellSetXAxisInverse(*args, **kwargs):
    """
    crossPlotAAMultiWellSetXAxisInverse(plotID: Number, xainv: bool) -> bool
    
    Inverse the cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetXAxisInverse_id
    if _crossPlotAAMultiWellSetXAxisInverse_id is None:
        _crossPlotAAMultiWellSetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetXAxisInverse'))
    return _client_service().call(_crossPlotAAMultiWellSetXAxisInverse_id, *args, **kwargs)


_crossPlotAAMultiWellSetXAxisScale_id = None
def crossPlotAAMultiWellSetXAxisScale(*args, **kwargs):
    """
    crossPlotAAMultiWellSetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Set the cross-plotAA X axis scale
    
    Args:
        plotID (Number): cross-plotAA window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetXAxisScale_id
    if _crossPlotAAMultiWellSetXAxisScale_id is None:
        _crossPlotAAMultiWellSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetXAxisScale'))
    return _client_service().call(_crossPlotAAMultiWellSetXAxisScale_id, *args, **kwargs)


_crossPlotAAMultiWellSetXAxisType_id = None
def crossPlotAAMultiWellSetXAxisType(*args, **kwargs):
    """
    crossPlotAAMultiWellSetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetXAxisType_id
    if _crossPlotAAMultiWellSetXAxisType_id is None:
        _crossPlotAAMultiWellSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetXAxisType'))
    return _client_service().call(_crossPlotAAMultiWellSetXAxisType_id, *args, **kwargs)


_crossPlotAAMultiWellSetXAxisUnit_id = None
def crossPlotAAMultiWellSetXAxisUnit(*args, **kwargs):
    """
    crossPlotAAMultiWellSetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetXAxisUnit_id
    if _crossPlotAAMultiWellSetXAxisUnit_id is None:
        _crossPlotAAMultiWellSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetXAxisUnit'))
    return _client_service().call(_crossPlotAAMultiWellSetXAxisUnit_id, *args, **kwargs)


_crossPlotAAMultiWellSetXAxisUserLimits_id = None
def crossPlotAAMultiWellSetXAxisUserLimits(*args, **kwargs):
    """
    crossPlotAAMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetXAxisUserLimits_id
    if _crossPlotAAMultiWellSetXAxisUserLimits_id is None:
        _crossPlotAAMultiWellSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetXAxisUserLimits'))
    return _client_service().call(_crossPlotAAMultiWellSetXAxisUserLimits_id, *args, **kwargs)


_crossPlotAAMultiWellSetYAxisInverse_id = None
def crossPlotAAMultiWellSetYAxisInverse(*args, **kwargs):
    """
    crossPlotAAMultiWellSetYAxisInverse(plotID: Number, yainv: bool) -> bool
    
    Inverse the cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetYAxisInverse_id
    if _crossPlotAAMultiWellSetYAxisInverse_id is None:
        _crossPlotAAMultiWellSetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetYAxisInverse'))
    return _client_service().call(_crossPlotAAMultiWellSetYAxisInverse_id, *args, **kwargs)


_crossPlotAAMultiWellSetYAxisScale_id = None
def crossPlotAAMultiWellSetYAxisScale(*args, **kwargs):
    """
    crossPlotAAMultiWellSetYAxisScale(plotID: Number, yasc: int) -> bool
    
    Set the cross-plotAA Y axis scale
    
    Args:
        plotID (Number): cross-plotAA window ID
        yasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetYAxisScale_id
    if _crossPlotAAMultiWellSetYAxisScale_id is None:
        _crossPlotAAMultiWellSetYAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetYAxisScale'))
    return _client_service().call(_crossPlotAAMultiWellSetYAxisScale_id, *args, **kwargs)


_crossPlotAAMultiWellSetYAxisType_id = None
def crossPlotAAMultiWellSetYAxisType(*args, **kwargs):
    """
    crossPlotAAMultiWellSetYAxisType(plotID: Number, yat: int) -> bool
    
    Change the type of cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yat (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetYAxisType_id
    if _crossPlotAAMultiWellSetYAxisType_id is None:
        _crossPlotAAMultiWellSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetYAxisType'))
    return _client_service().call(_crossPlotAAMultiWellSetYAxisType_id, *args, **kwargs)


_crossPlotAAMultiWellSetYAxisUnit_id = None
def crossPlotAAMultiWellSetYAxisUnit(*args, **kwargs):
    """
    crossPlotAAMultiWellSetYAxisUnit(plotID: Number, yau: str) -> bool
    
    Change the unit of cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yau (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetYAxisUnit_id
    if _crossPlotAAMultiWellSetYAxisUnit_id is None:
        _crossPlotAAMultiWellSetYAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetYAxisUnit'))
    return _client_service().call(_crossPlotAAMultiWellSetYAxisUnit_id, *args, **kwargs)


_crossPlotAAMultiWellSetYAxisUserLimits_id = None
def crossPlotAAMultiWellSetYAxisUserLimits(*args, **kwargs):
    """
    crossPlotAAMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number) -> bool
    
    Set min & max values of cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yamin (Number): Y axis minimum
        yamax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetYAxisUserLimits_id
    if _crossPlotAAMultiWellSetYAxisUserLimits_id is None:
        _crossPlotAAMultiWellSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetYAxisUserLimits'))
    return _client_service().call(_crossPlotAAMultiWellSetYAxisUserLimits_id, *args, **kwargs)


_crossPlotAAMultiWellSetZonation_id = None
def crossPlotAAMultiWellSetZonation(*args, **kwargs):
    """
    crossPlotAAMultiWellSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAMultiWellSetZonation_id
    if _crossPlotAAMultiWellSetZonation_id is None:
        _crossPlotAAMultiWellSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAMultiWellSetZonation'))
    return _client_service().call(_crossPlotAAMultiWellSetZonation_id, *args, **kwargs)


_crossPlotAAOpen_id = None
def crossPlotAAOpen(*args, **kwargs):
    """
    crossPlotAAOpen(n: str, f: str='') -> bool
    
    Open an existing cross-plotAA
    
    Args:
        n (str): cross-plotAA name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAOpen_id
    if _crossPlotAAOpen_id is None:
        _crossPlotAAOpen_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAOpen'))
    return _client_service().call(_crossPlotAAOpen_id, *args, **kwargs)


_crossPlotAARemoveAllEquations_id = None
def crossPlotAARemoveAllEquations(*args, **kwargs):
    """
    crossPlotAARemoveAllEquations(plotID: Number) -> bool
    
    Remove all equations from an existing cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAARemoveAllEquations_id
    if _crossPlotAARemoveAllEquations_id is None:
        _crossPlotAARemoveAllEquations_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAARemoveAllEquations'))
    return _client_service().call(_crossPlotAARemoveAllEquations_id, *args, **kwargs)


_crossPlotAARemoveEquation_id = None
def crossPlotAARemoveEquation(*args, **kwargs):
    """
    crossPlotAARemoveEquation(plotID: Number, eq: str) -> bool
    
    Remove an equation from an existing cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        eq (str): equation name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAARemoveEquation_id
    if _crossPlotAARemoveEquation_id is None:
        _crossPlotAARemoveEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAARemoveEquation'))
    return _client_service().call(_crossPlotAARemoveEquation_id, *args, **kwargs)


_crossPlotAAReverseAxes_id = None
def crossPlotAAReverseAxes(*args, **kwargs):
    """
    crossPlotAAReverseAxes(plotID: Number) -> bool
    
    Reverse the cross-plotAA axes
    
    Args:
        plotID (Number): cross-plotAA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAAReverseAxes_id
    if _crossPlotAAReverseAxes_id is None:
        _crossPlotAAReverseAxes_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAAReverseAxes'))
    return _client_service().call(_crossPlotAAReverseAxes_id, *args, **kwargs)


_crossPlotAASave_id = None
def crossPlotAASave(*args, **kwargs):
    """
    crossPlotAASave(plotID: Number, n: str, f: str='') -> bool
    
    Save a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        n (str): saving name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASave_id
    if _crossPlotAASave_id is None:
        _crossPlotAASave_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASave'))
    return _client_service().call(_crossPlotAASave_id, *args, **kwargs)


_crossPlotAASelectFilter_id = None
def crossPlotAASelectFilter(*args, **kwargs):
    """
    crossPlotAASelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): cross-plotAA window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASelectFilter_id
    if _crossPlotAASelectFilter_id is None:
        _crossPlotAASelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASelectFilter'))
    return _client_service().call(_crossPlotAASelectFilter_id, *args, **kwargs)


_crossPlotAASetAdvancedFilter_id = None
def crossPlotAASetAdvancedFilter(*args, **kwargs):
    """
    crossPlotAASetAdvancedFilter(plotID: Number, Equation: str) -> bool
    
    Set an advanced filter on the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
        Equation (str): equation defining the filter
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetAdvancedFilter_id
    if _crossPlotAASetAdvancedFilter_id is None:
        _crossPlotAASetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetAdvancedFilter'))
    return _client_service().call(_crossPlotAASetAdvancedFilter_id, *args, **kwargs)


_crossPlotAASetColor_id = None
def crossPlotAASetColor(*args, **kwargs):
    """
    crossPlotAASetColor(plotID: Number, vn: str) -> bool
    
    Set a color variable to cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetColor_id
    if _crossPlotAASetColor_id is None:
        _crossPlotAASetColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetColor'))
    return _client_service().call(_crossPlotAASetColor_id, *args, **kwargs)


_crossPlotAASetColor2_id = None
def crossPlotAASetColor2(*args, **kwargs):
    """
    crossPlotAASetColor2(plotID: Number, vn: str) -> bool
    
    Set a color variable to the second axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetColor2_id
    if _crossPlotAASetColor2_id is None:
        _crossPlotAASetColor2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetColor2'))
    return _client_service().call(_crossPlotAASetColor2_id, *args, **kwargs)


_crossPlotAASetDatum_id = None
def crossPlotAASetDatum(*args, **kwargs):
    """
    crossPlotAASetDatum(plotID: Number, lim: bool, min: Number=0, max: Number) -> bool
    
    Change the reference limitation on cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        lim (bool): True for user's limitaion, False else
        min (Number): Optional; top limit
        max (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetDatum_id
    if _crossPlotAASetDatum_id is None:
        _crossPlotAASetDatum_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetDatum'))
    return _client_service().call(_crossPlotAASetDatum_id, *args, **kwargs)


_crossPlotAASetFilter_id = None
def crossPlotAASetFilter(*args, **kwargs):
    """
    crossPlotAASetFilter(plotID: Number, vn: str) -> bool
    
    Set filter to cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetFilter_id
    if _crossPlotAASetFilter_id is None:
        _crossPlotAASetFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetFilter'))
    return _client_service().call(_crossPlotAASetFilter_id, *args, **kwargs)


_crossPlotAASetLabel_id = None
def crossPlotAASetLabel(*args, **kwargs):
    """
    crossPlotAASetLabel(plotID: Number, vn: str) -> bool
    
    Set a label variable to cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetLabel_id
    if _crossPlotAASetLabel_id is None:
        _crossPlotAASetLabel_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetLabel'))
    return _client_service().call(_crossPlotAASetLabel_id, *args, **kwargs)


_crossPlotAASetName_id = None
def crossPlotAASetName(*args, **kwargs):
    """
    crossPlotAASetName(plotID: Number, n: str) -> bool
    
    Change cross-plotAA window name
    
    Args:
        plotID (Number): cross-plotAA window ID
        n (str): new name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetName_id
    if _crossPlotAASetName_id is None:
        _crossPlotAASetName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetName'))
    return _client_service().call(_crossPlotAASetName_id, *args, **kwargs)


_crossPlotAASetPaletteBoundaries_id = None
def crossPlotAASetPaletteBoundaries(*args, **kwargs):
    """
    crossPlotAASetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a single-well cross plot AA.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetPaletteBoundaries_id
    if _crossPlotAASetPaletteBoundaries_id is None:
        _crossPlotAASetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetPaletteBoundaries'))
    return _client_service().call(_crossPlotAASetPaletteBoundaries_id, *args, **kwargs)


_crossPlotAASetSecondYScale_id = None
def crossPlotAASetSecondYScale(*args, **kwargs):
    """
    crossPlotAASetSecondYScale(plotID: Number, vn: str) -> bool
    
    Set array variable to second Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetSecondYScale_id
    if _crossPlotAASetSecondYScale_id is None:
        _crossPlotAASetSecondYScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetSecondYScale'))
    return _client_service().call(_crossPlotAASetSecondYScale_id, *args, **kwargs)


_crossPlotAASetX_id = None
def crossPlotAASetX(*args, **kwargs):
    """
    crossPlotAASetX(plotID: Number, vn: str) -> bool
    
    Set array variable to X axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetX_id
    if _crossPlotAASetX_id is None:
        _crossPlotAASetX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetX'))
    return _client_service().call(_crossPlotAASetX_id, *args, **kwargs)


_crossPlotAASetX2_id = None
def crossPlotAASetX2(*args, **kwargs):
    """
    crossPlotAASetX2(plotID: Number, vn: str) -> bool
    
    Set array variable to the second X axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetX2_id
    if _crossPlotAASetX2_id is None:
        _crossPlotAASetX2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetX2'))
    return _client_service().call(_crossPlotAASetX2_id, *args, **kwargs)


_crossPlotAASetX2Values_id = None
def crossPlotAASetX2Values(*args, **kwargs):
    """
    crossPlotAASetX2Values(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    Set a fictive set of user variables to the second X axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array name
        vl (list): list of values
        fam (str): Optional; array family
        un (str): Optional; array unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetX2Values_id
    if _crossPlotAASetX2Values_id is None:
        _crossPlotAASetX2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetX2Values'))
    return _client_service().call(_crossPlotAASetX2Values_id, *args, **kwargs)


_crossPlotAASetXAxisInverse_id = None
def crossPlotAASetXAxisInverse(*args, **kwargs):
    """
    crossPlotAASetXAxisInverse(plotID: Number, xainv: bool) -> bool
    
    Inverse the cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetXAxisInverse_id
    if _crossPlotAASetXAxisInverse_id is None:
        _crossPlotAASetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetXAxisInverse'))
    return _client_service().call(_crossPlotAASetXAxisInverse_id, *args, **kwargs)


_crossPlotAASetXAxisScale_id = None
def crossPlotAASetXAxisScale(*args, **kwargs):
    """
    crossPlotAASetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Set the cross-plotAA X axis scale
    
    Args:
        plotID (Number): cross-plotAA window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetXAxisScale_id
    if _crossPlotAASetXAxisScale_id is None:
        _crossPlotAASetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetXAxisScale'))
    return _client_service().call(_crossPlotAASetXAxisScale_id, *args, **kwargs)


_crossPlotAASetXAxisType_id = None
def crossPlotAASetXAxisType(*args, **kwargs):
    """
    crossPlotAASetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetXAxisType_id
    if _crossPlotAASetXAxisType_id is None:
        _crossPlotAASetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetXAxisType'))
    return _client_service().call(_crossPlotAASetXAxisType_id, *args, **kwargs)


_crossPlotAASetXAxisUnit_id = None
def crossPlotAASetXAxisUnit(*args, **kwargs):
    """
    crossPlotAASetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetXAxisUnit_id
    if _crossPlotAASetXAxisUnit_id is None:
        _crossPlotAASetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetXAxisUnit'))
    return _client_service().call(_crossPlotAASetXAxisUnit_id, *args, **kwargs)


_crossPlotAASetXAxisUserLimits_id = None
def crossPlotAASetXAxisUserLimits(*args, **kwargs):
    """
    crossPlotAASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of cross-plotAA X axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetXAxisUserLimits_id
    if _crossPlotAASetXAxisUserLimits_id is None:
        _crossPlotAASetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetXAxisUserLimits'))
    return _client_service().call(_crossPlotAASetXAxisUserLimits_id, *args, **kwargs)


_crossPlotAASetXValues_id = None
def crossPlotAASetXValues(*args, **kwargs):
    """
    crossPlotAASetXValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    Set a fictive set of user variables to the X axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array name
        vl (list): list of values
        fam (str): Optional; array family
        un (str): Optional; array unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetXValues_id
    if _crossPlotAASetXValues_id is None:
        _crossPlotAASetXValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetXValues'))
    return _client_service().call(_crossPlotAASetXValues_id, *args, **kwargs)


_crossPlotAASetY_id = None
def crossPlotAASetY(*args, **kwargs):
    """
    crossPlotAASetY(plotID: Number, vn: str) -> bool
    
    Set array variable to Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetY_id
    if _crossPlotAASetY_id is None:
        _crossPlotAASetY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetY'))
    return _client_service().call(_crossPlotAASetY_id, *args, **kwargs)


_crossPlotAASetY2_id = None
def crossPlotAASetY2(*args, **kwargs):
    """
    crossPlotAASetY2(plotID: Number, vn: str) -> bool
    
    Set array variable to the second Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array variable ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetY2_id
    if _crossPlotAASetY2_id is None:
        _crossPlotAASetY2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetY2'))
    return _client_service().call(_crossPlotAASetY2_id, *args, **kwargs)


_crossPlotAASetY2Values_id = None
def crossPlotAASetY2Values(*args, **kwargs):
    """
    crossPlotAASetY2Values(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    Set a fictive set of user variables to the second Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array name
        vl (list): list of values
        fam (str): Optional; array family
        un (str): Optional; array unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetY2Values_id
    if _crossPlotAASetY2Values_id is None:
        _crossPlotAASetY2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetY2Values'))
    return _client_service().call(_crossPlotAASetY2Values_id, *args, **kwargs)


_crossPlotAASetYAxisInverse_id = None
def crossPlotAASetYAxisInverse(*args, **kwargs):
    """
    crossPlotAASetYAxisInverse(plotID: Number, yainv: bool) -> bool
    
    Inverse the cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetYAxisInverse_id
    if _crossPlotAASetYAxisInverse_id is None:
        _crossPlotAASetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetYAxisInverse'))
    return _client_service().call(_crossPlotAASetYAxisInverse_id, *args, **kwargs)


_crossPlotAASetYAxisScale_id = None
def crossPlotAASetYAxisScale(*args, **kwargs):
    """
    crossPlotAASetYAxisScale(plotID: Number, yasc: int) -> bool
    
    Set the cross-plotAA Y axis scale
    
    Args:
        plotID (Number): cross-plotAA window ID
        yasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetYAxisScale_id
    if _crossPlotAASetYAxisScale_id is None:
        _crossPlotAASetYAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetYAxisScale'))
    return _client_service().call(_crossPlotAASetYAxisScale_id, *args, **kwargs)


_crossPlotAASetYAxisType_id = None
def crossPlotAASetYAxisType(*args, **kwargs):
    """
    crossPlotAASetYAxisType(plotID: Number, yat: int) -> bool
    
    Change the type of cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yat (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetYAxisType_id
    if _crossPlotAASetYAxisType_id is None:
        _crossPlotAASetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetYAxisType'))
    return _client_service().call(_crossPlotAASetYAxisType_id, *args, **kwargs)


_crossPlotAASetYAxisUnit_id = None
def crossPlotAASetYAxisUnit(*args, **kwargs):
    """
    crossPlotAASetYAxisUnit(plotID: Number, yau: str) -> bool
    
    Change the unit of cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yau (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetYAxisUnit_id
    if _crossPlotAASetYAxisUnit_id is None:
        _crossPlotAASetYAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetYAxisUnit'))
    return _client_service().call(_crossPlotAASetYAxisUnit_id, *args, **kwargs)


_crossPlotAASetYAxisUserLimits_id = None
def crossPlotAASetYAxisUserLimits(*args, **kwargs):
    """
    crossPlotAASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number) -> bool
    
    Set min & max values of cross-plotAA Y axis
    
    Args:
        plotID (Number): cross-plotAA window ID
        yamin (Number): Y axis minimum
        yamax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetYAxisUserLimits_id
    if _crossPlotAASetYAxisUserLimits_id is None:
        _crossPlotAASetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetYAxisUserLimits'))
    return _client_service().call(_crossPlotAASetYAxisUserLimits_id, *args, **kwargs)


_crossPlotAASetYValues_id = None
def crossPlotAASetYValues(*args, **kwargs):
    """
    crossPlotAASetYValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    Set a fictive set of user variables to the Y axis of a cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        vn (str): array name
        vl (list): list of values
        fam (str): Optional; array family
        un (str): Optional; array unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetYValues_id
    if _crossPlotAASetYValues_id is None:
        _crossPlotAASetYValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetYValues'))
    return _client_service().call(_crossPlotAASetYValues_id, *args, **kwargs)


_crossPlotAASetZonation_id = None
def crossPlotAASetZonation(*args, **kwargs):
    """
    crossPlotAASetZonation(plotID: Number, ds: str) -> bool
    
    Apply a zonation dataset to cross-plotAA
    
    Args:
        plotID (Number): cross-plotAA window ID
        ds (str): zonation dataset
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAASetZonation_id
    if _crossPlotAASetZonation_id is None:
        _crossPlotAASetZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAASetZonation'))
    return _client_service().call(_crossPlotAASetZonation_id, *args, **kwargs)


_crossPlotAVAAddEquation_id = None
def crossPlotAVAAddEquation(*args, **kwargs):
    """
    crossPlotAVAAddEquation(plotID: Number, eq: str, n: str='', c: str='black') -> bool
    
    Add an equation to an existing cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        eq (str): equation formula
        n (str): Optional; equation name
        c (str): Optional; color Qt name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAAddEquation_id
    if _crossPlotAVAAddEquation_id is None:
        _crossPlotAVAAddEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAAddEquation'))
    return _client_service().call(_crossPlotAVAAddEquation_id, *args, **kwargs)


_crossPlotAVAAddRegression_id = None
def crossPlotAVAAddRegression(*args, **kwargs):
    """
    crossPlotAVAAddRegression(plotID: Number, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Add a regression in a cross-plotAVA & sets the color
    
    Args:
        plotID (Number): cross-plotAVA window ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAAddRegression_id
    if _crossPlotAVAAddRegression_id is None:
        _crossPlotAVAAddRegression_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAAddRegression'))
    return _client_service().call(_crossPlotAVAAddRegression_id, *args, **kwargs)


_crossPlotAVAAddZone_id = None
def crossPlotAVAAddZone(*args, **kwargs):
    """
    crossPlotAVAAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAAddZone_id
    if _crossPlotAVAAddZone_id is None:
        _crossPlotAVAAddZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAAddZone'))
    return _client_service().call(_crossPlotAVAAddZone_id, *args, **kwargs)


_crossPlotAVAApplyTo_id = None
def crossPlotAVAApplyTo(*args, **kwargs):
    """
    crossPlotAVAApplyTo(plotID: Number, ds: list) -> list
    
    Apply the cross-plotAVAto a data set list
    
    Args:
        plotID (Number): cross-plotAVA window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _crossPlotAVAApplyTo_id
    if _crossPlotAVAApplyTo_id is None:
        _crossPlotAVAApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAApplyTo'))
    return _client_service().call(_crossPlotAVAApplyTo_id, *args, **kwargs)


_crossPlotAVACleanZonation_id = None
def crossPlotAVACleanZonation(*args, **kwargs):
    """
    crossPlotAVACleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVACleanZonation_id
    if _crossPlotAVACleanZonation_id is None:
        _crossPlotAVACleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVACleanZonation'))
    return _client_service().call(_crossPlotAVACleanZonation_id, *args, **kwargs)


_crossPlotAVACleanZone_id = None
def crossPlotAVACleanZone(*args, **kwargs):
    """
    crossPlotAVACleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVACleanZone_id
    if _crossPlotAVACleanZone_id is None:
        _crossPlotAVACleanZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVACleanZone'))
    return _client_service().call(_crossPlotAVACleanZone_id, *args, **kwargs)


_crossPlotAVAClearAdvancedFilter_id = None
def crossPlotAVAClearAdvancedFilter(*args, **kwargs):
    """
    crossPlotAVAClearAdvancedFilter(plotID: Number) -> bool
    
    Clear the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAClearAdvancedFilter_id
    if _crossPlotAVAClearAdvancedFilter_id is None:
        _crossPlotAVAClearAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAClearAdvancedFilter'))
    return _client_service().call(_crossPlotAVAClearAdvancedFilter_id, *args, **kwargs)


_crossPlotAVACreate_id = None
def crossPlotAVACreate(*args, **kwargs):
    """
    crossPlotAVACreate(n: str, xn: str='', yn: str='', f: str='', matrixID: Number=None) -> Number
    
    Create a new cross-plotAVA
    
    Args:
        n (str): cross-plotAVA window name
        xn (str): Optional; variable X name
        yn (str): Optional; variable Y name
        f (str): Optional; filter variable name
        matrixID (Number): Optional; if the cross-plot will be inserted into a matrix, give matrix ID
    
    Returns:
        Number: cross-plotAVA window ID
    """
    global _crossPlotAVACreate_id
    if _crossPlotAVACreate_id is None:
        _crossPlotAVACreate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVACreate'))
    return _client_service().call(_crossPlotAVACreate_id, *args, **kwargs)


_crossPlotAVADeleteColorValues_id = None
def crossPlotAVADeleteColorValues(*args, **kwargs):
    """
    crossPlotAVADeleteColorValues(plotID: Number) -> bool
    
    Delete the variable present on the color scale of a cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADeleteColorValues_id
    if _crossPlotAVADeleteColorValues_id is None:
        _crossPlotAVADeleteColorValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADeleteColorValues'))
    return _client_service().call(_crossPlotAVADeleteColorValues_id, *args, **kwargs)


_crossPlotAVADeleteFilterValues_id = None
def crossPlotAVADeleteFilterValues(*args, **kwargs):
    """
    crossPlotAVADeleteFilterValues(plotID: Number) -> bool
    
    Delete the filter variable of a cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADeleteFilterValues_id
    if _crossPlotAVADeleteFilterValues_id is None:
        _crossPlotAVADeleteFilterValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADeleteFilterValues'))
    return _client_service().call(_crossPlotAVADeleteFilterValues_id, *args, **kwargs)


_crossPlotAVADeleteXValues_id = None
def crossPlotAVADeleteXValues(*args, **kwargs):
    """
    crossPlotAVADeleteXValues(plotID: Number) -> bool
    
    Delete the variable present on the X axis of a cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADeleteXValues_id
    if _crossPlotAVADeleteXValues_id is None:
        _crossPlotAVADeleteXValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADeleteXValues'))
    return _client_service().call(_crossPlotAVADeleteXValues_id, *args, **kwargs)


_crossPlotAVADeleteYValues_id = None
def crossPlotAVADeleteYValues(*args, **kwargs):
    """
    crossPlotAVADeleteYValues(plotID: Number) -> bool
    
    Delete the variable present on the Y axis of a cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADeleteYValues_id
    if _crossPlotAVADeleteYValues_id is None:
        _crossPlotAVADeleteYValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADeleteYValues'))
    return _client_service().call(_crossPlotAVADeleteYValues_id, *args, **kwargs)


_crossPlotAVADensityGridHorizontal_id = None
def crossPlotAVADensityGridHorizontal(*args, **kwargs):
    """
    crossPlotAVADensityGridHorizontal(plotID: Number, type: int, xmin: Number=0, xmax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of X density grid
    
    Args:
        plotID (Number): cross-plotAVA window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        xmin (Number): Optional; X axis minimum
        xmax (Number): Optional; X axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADensityGridHorizontal_id
    if _crossPlotAVADensityGridHorizontal_id is None:
        _crossPlotAVADensityGridHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADensityGridHorizontal'))
    return _client_service().call(_crossPlotAVADensityGridHorizontal_id, *args, **kwargs)


_crossPlotAVADensityGridVertical_id = None
def crossPlotAVADensityGridVertical(*args, **kwargs):
    """
    crossPlotAVADensityGridVertical(plotID: Number, type: int, ymin: Number=0, ymax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of Y density grid
    
    Args:
        plotID (Number): cross-plotAVA window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        ymin (Number): Optional; Y axis minimum
        ymax (Number): Optional; Y axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADensityGridVertical_id
    if _crossPlotAVADensityGridVertical_id is None:
        _crossPlotAVADensityGridVertical_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADensityGridVertical'))
    return _client_service().call(_crossPlotAVADensityGridVertical_id, *args, **kwargs)


_crossPlotAVADensitySmooth_id = None
def crossPlotAVADensitySmooth(*args, **kwargs):
    """
    crossPlotAVADensitySmooth(plotID: Number, smooth: bool) -> bool
    
    Display of smoothed density values
    
    Args:
        plotID (Number): cross-plotAVA window ID
        smooth (bool): 1 = smooth else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADensitySmooth_id
    if _crossPlotAVADensitySmooth_id is None:
        _crossPlotAVADensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADensitySmooth'))
    return _client_service().call(_crossPlotAVADensitySmooth_id, *args, **kwargs)


_crossPlotAVADensityType_id = None
def crossPlotAVADensityType(*args, **kwargs):
    """
    crossPlotAVADensityType(plotID: Number, dst: bool) -> bool
    
    Display of the cross-plotAVA in normal or density type
    
    Args:
        plotID (Number): cross-plotAVA window ID
        dst (bool): 1 = density display else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADensityType_id
    if _crossPlotAVADensityType_id is None:
        _crossPlotAVADensityType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADensityType'))
    return _client_service().call(_crossPlotAVADensityType_id, *args, **kwargs)


_crossPlotAVADensityValue_id = None
def crossPlotAVADensityValue(*args, **kwargs):
    """
    crossPlotAVADensityValue(plotID: Number, value: bool, percent: bool=False) -> bool
    
    Display of data density values
    
    Args:
        plotID (Number): cross-plotAVA window ID
        value (bool): 1 = display of density value else 0
        percent (bool): Optional; 1 = display in percent else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVADensityValue_id
    if _crossPlotAVADensityValue_id is None:
        _crossPlotAVADensityValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADensityValue'))
    return _client_service().call(_crossPlotAVADensityValue_id, *args, **kwargs)


_crossPlotAVADuplicate_id = None
def crossPlotAVADuplicate(*args, **kwargs):
    """
    crossPlotAVADuplicate(plotID: Number) -> Number
    
    Duplicate the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlotAVADuplicate_id
    if _crossPlotAVADuplicate_id is None:
        _crossPlotAVADuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVADuplicate'))
    return _client_service().call(_crossPlotAVADuplicate_id, *args, **kwargs)


_crossPlotAVAGetAdvancedFilter_id = None
def crossPlotAVAGetAdvancedFilter(*args, **kwargs):
    """
    crossPlotAVAGetAdvancedFilter(plotID: Number) -> str
    
    Get the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        str: the filter equation
    """
    global _crossPlotAVAGetAdvancedFilter_id
    if _crossPlotAVAGetAdvancedFilter_id is None:
        _crossPlotAVAGetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAGetAdvancedFilter'))
    return _client_service().call(_crossPlotAVAGetAdvancedFilter_id, *args, **kwargs)


_crossPlotAVAGetIdByName_id = None
def crossPlotAVAGetIdByName(*args, **kwargs):
    """
    crossPlotAVAGetIdByName(n: str) -> Number
    
    Find the ID of a name-known cross-plotAVA
    
    Args:
        n (str): cross-plotAVA window name
    
    Returns:
        Number: cross-plotAVA window ID
    """
    global _crossPlotAVAGetIdByName_id
    if _crossPlotAVAGetIdByName_id is None:
        _crossPlotAVAGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAGetIdByName'))
    return _client_service().call(_crossPlotAVAGetIdByName_id, *args, **kwargs)


_crossPlotAVAGetRegressions_id = None
def crossPlotAVAGetRegressions(*args, **kwargs):
    """
    crossPlotAVAGetRegressions(plotID: Number) -> dict
    
    get a dictionary of regressions in a cross-plot AVA
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        dict: dictionary of regressions
    """
    global _crossPlotAVAGetRegressions_id
    if _crossPlotAVAGetRegressions_id is None:
        _crossPlotAVAGetRegressions_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAGetRegressions'))
    return _client_service().call(_crossPlotAVAGetRegressions_id, *args, **kwargs)


_crossPlotAVALockAxisX_id = None
def crossPlotAVALockAxisX(*args, **kwargs):
    """
    crossPlotAVALockAxisX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis limits of the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVALockAxisX_id
    if _crossPlotAVALockAxisX_id is None:
        _crossPlotAVALockAxisX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVALockAxisX'))
    return _client_service().call(_crossPlotAVALockAxisX_id, *args, **kwargs)


_crossPlotAVALockAxisY_id = None
def crossPlotAVALockAxisY(*args, **kwargs):
    """
    crossPlotAVALockAxisY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis limits of the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVALockAxisY_id
    if _crossPlotAVALockAxisY_id is None:
        _crossPlotAVALockAxisY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVALockAxisY'))
    return _client_service().call(_crossPlotAVALockAxisY_id, *args, **kwargs)


_crossPlotAVALockLegendX_id = None
def crossPlotAVALockLegendX(*args, **kwargs):
    """
    crossPlotAVALockLegendX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis legend of the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVALockLegendX_id
    if _crossPlotAVALockLegendX_id is None:
        _crossPlotAVALockLegendX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVALockLegendX'))
    return _client_service().call(_crossPlotAVALockLegendX_id, *args, **kwargs)


_crossPlotAVALockLegendY_id = None
def crossPlotAVALockLegendY(*args, **kwargs):
    """
    crossPlotAVALockLegendY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis legend of the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVALockLegendY_id
    if _crossPlotAVALockLegendY_id is None:
        _crossPlotAVALockLegendY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVALockLegendY'))
    return _client_service().call(_crossPlotAVALockLegendY_id, *args, **kwargs)


_crossPlotAVALockPalette_id = None
def crossPlotAVALockPalette(*args, **kwargs):
    """
    crossPlotAVALockPalette(plotID: Number, locked: bool) -> bool
    
    Lock palette of the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVALockPalette_id
    if _crossPlotAVALockPalette_id is None:
        _crossPlotAVALockPalette_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVALockPalette'))
    return _client_service().call(_crossPlotAVALockPalette_id, *args, **kwargs)


_crossPlotAVALockTitle_id = None
def crossPlotAVALockTitle(*args, **kwargs):
    """
    crossPlotAVALockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVALockTitle_id
    if _crossPlotAVALockTitle_id is None:
        _crossPlotAVALockTitle_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVALockTitle'))
    return _client_service().call(_crossPlotAVALockTitle_id, *args, **kwargs)


_crossPlotAVAMarkers_id = None
def crossPlotAVAMarkers(*args, **kwargs):
    """
    crossPlotAVAMarkers(plotID: Number, type: int, size: Number=5) -> bool
    
    Set type & size of cross-plotAVA markers
    
    Args:
        plotID (Number): cross-plotAVA window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAMarkers_id
    if _crossPlotAVAMarkers_id is None:
        _crossPlotAVAMarkers_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAMarkers'))
    return _client_service().call(_crossPlotAVAMarkers_id, *args, **kwargs)


_crossPlotAVAMarkersColor_id = None
def crossPlotAVAMarkersColor(*args, **kwargs):
    """
    crossPlotAVAMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Choose the cross-plotAVA markers color
    
    Args:
        plotID (Number): cross-plotAVA window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAMarkersColor_id
    if _crossPlotAVAMarkersColor_id is None:
        _crossPlotAVAMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAMarkersColor'))
    return _client_service().call(_crossPlotAVAMarkersColor_id, *args, **kwargs)


_crossPlotAVAMarkersColour_id = None
def crossPlotAVAMarkersColour(*args, **kwargs):
    """
    crossPlotAVAMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use crossPlotAVAMarkersColor instead) Choose the cross-plotAVA markers color
    
    Args:
        plotID (Number): cross-plotAVA window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAMarkersColour_id
    if _crossPlotAVAMarkersColour_id is None:
        _crossPlotAVAMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAMarkersColour'))
    return _client_service().call(_crossPlotAVAMarkersColour_id, *args, **kwargs)


_crossPlotAVAOpen_id = None
def crossPlotAVAOpen(*args, **kwargs):
    """
    crossPlotAVAOpen(n: str, f: str='') -> Number
    
    Open an existing cross-plotAVA
    
    Args:
        n (str): cross-plotAVA name
        f (str): Optional; folder
    
    Returns:
        Number: cross-plotAVA window ID
    """
    global _crossPlotAVAOpen_id
    if _crossPlotAVAOpen_id is None:
        _crossPlotAVAOpen_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAOpen'))
    return _client_service().call(_crossPlotAVAOpen_id, *args, **kwargs)


_crossPlotAVARemoveAllEquations_id = None
def crossPlotAVARemoveAllEquations(*args, **kwargs):
    """
    crossPlotAVARemoveAllEquations(plotID: Number) -> bool
    
    Remove all equations from an existing cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVARemoveAllEquations_id
    if _crossPlotAVARemoveAllEquations_id is None:
        _crossPlotAVARemoveAllEquations_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVARemoveAllEquations'))
    return _client_service().call(_crossPlotAVARemoveAllEquations_id, *args, **kwargs)


_crossPlotAVARemoveEquation_id = None
def crossPlotAVARemoveEquation(*args, **kwargs):
    """
    crossPlotAVARemoveEquation(plotID: Number, eq: str) -> bool
    
    Remove an equation from an existing cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        eq (str): equation name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVARemoveEquation_id
    if _crossPlotAVARemoveEquation_id is None:
        _crossPlotAVARemoveEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVARemoveEquation'))
    return _client_service().call(_crossPlotAVARemoveEquation_id, *args, **kwargs)


_crossPlotAVAReverseAxes_id = None
def crossPlotAVAReverseAxes(*args, **kwargs):
    """
    crossPlotAVAReverseAxes(plotID: Number) -> bool
    
    Reverse the cross-plotAVA axes
    
    Args:
        plotID (Number): cross-plotAVA window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVAReverseAxes_id
    if _crossPlotAVAReverseAxes_id is None:
        _crossPlotAVAReverseAxes_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVAReverseAxes'))
    return _client_service().call(_crossPlotAVAReverseAxes_id, *args, **kwargs)


_crossPlotAVASave_id = None
def crossPlotAVASave(*args, **kwargs):
    """
    crossPlotAVASave(plotID: Number, n: str, f: str='') -> bool
    
    Save the cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        n (str): cross-plotAVA name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASave_id
    if _crossPlotAVASave_id is None:
        _crossPlotAVASave_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASave'))
    return _client_service().call(_crossPlotAVASave_id, *args, **kwargs)


_crossPlotAVASelectFilter_id = None
def crossPlotAVASelectFilter(*args, **kwargs):
    """
    crossPlotAVASelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): cross-plotAVA window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASelectFilter_id
    if _crossPlotAVASelectFilter_id is None:
        _crossPlotAVASelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASelectFilter'))
    return _client_service().call(_crossPlotAVASelectFilter_id, *args, **kwargs)


_crossPlotAVASetAdvancedFilter_id = None
def crossPlotAVASetAdvancedFilter(*args, **kwargs):
    """
    crossPlotAVASetAdvancedFilter(plotID: Number, Equation: str) -> bool
    
    Set an advanced filter on the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
        Equation (str): equation defining the filter
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetAdvancedFilter_id
    if _crossPlotAVASetAdvancedFilter_id is None:
        _crossPlotAVASetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetAdvancedFilter'))
    return _client_service().call(_crossPlotAVASetAdvancedFilter_id, *args, **kwargs)


_crossPlotAVASetColor_id = None
def crossPlotAVASetColor(*args, **kwargs):
    """
    crossPlotAVASetColor(plotID: Number, Vname: str) -> bool
    
    Set the color to an existing cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        Vname (str): variable name for the color
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetColor_id
    if _crossPlotAVASetColor_id is None:
        _crossPlotAVASetColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetColor'))
    return _client_service().call(_crossPlotAVASetColor_id, *args, **kwargs)


_crossPlotAVASetFilter_id = None
def crossPlotAVASetFilter(*args, **kwargs):
    """
    crossPlotAVASetFilter(plotID: Number, Vname: str) -> bool
    
    Set the variable as a filter
    
    Args:
        plotID (Number): cross-plotAVA window ID
        Vname (str): filter variable name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetFilter_id
    if _crossPlotAVASetFilter_id is None:
        _crossPlotAVASetFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetFilter'))
    return _client_service().call(_crossPlotAVASetFilter_id, *args, **kwargs)


_crossPlotAVASetName_id = None
def crossPlotAVASetName(*args, **kwargs):
    """
    crossPlotAVASetName(plotID: Number, n: str) -> bool
    
    Change the name of mono cross-plotAVA
    
    Args:
        plotID (Number): cross-plotAVA window ID
        n (str): new cross-plotAVAname
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetName_id
    if _crossPlotAVASetName_id is None:
        _crossPlotAVASetName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetName'))
    return _client_service().call(_crossPlotAVASetName_id, *args, **kwargs)


_crossPlotAVASetPaletteBoundaries_id = None
def crossPlotAVASetPaletteBoundaries(*args, **kwargs):
    """
    crossPlotAVASetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a cross plot AVA.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetPaletteBoundaries_id
    if _crossPlotAVASetPaletteBoundaries_id is None:
        _crossPlotAVASetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetPaletteBoundaries'))
    return _client_service().call(_crossPlotAVASetPaletteBoundaries_id, *args, **kwargs)


_crossPlotAVASetX_id = None
def crossPlotAVASetX(*args, **kwargs):
    """
    crossPlotAVASetX(plotID: Number, Vname: str) -> bool
    
    Set the variable to X axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        Vname (str): variable X name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetX_id
    if _crossPlotAVASetX_id is None:
        _crossPlotAVASetX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetX'))
    return _client_service().call(_crossPlotAVASetX_id, *args, **kwargs)


_crossPlotAVASetXAxisInverse_id = None
def crossPlotAVASetXAxisInverse(*args, **kwargs):
    """
    crossPlotAVASetXAxisInverse(plotID: Number, xainv: bool) -> bool
    
    Inverse the cross-plotAVA X axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        xainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetXAxisInverse_id
    if _crossPlotAVASetXAxisInverse_id is None:
        _crossPlotAVASetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetXAxisInverse'))
    return _client_service().call(_crossPlotAVASetXAxisInverse_id, *args, **kwargs)


_crossPlotAVASetXAxisScale_id = None
def crossPlotAVASetXAxisScale(*args, **kwargs):
    """
    crossPlotAVASetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Set the cross-plotAVA X axis scale
    
    Args:
        plotID (Number): cross-plotAVA window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetXAxisScale_id
    if _crossPlotAVASetXAxisScale_id is None:
        _crossPlotAVASetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetXAxisScale'))
    return _client_service().call(_crossPlotAVASetXAxisScale_id, *args, **kwargs)


_crossPlotAVASetXAxisType_id = None
def crossPlotAVASetXAxisType(*args, **kwargs):
    """
    crossPlotAVASetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of cross-plotAVA X axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetXAxisType_id
    if _crossPlotAVASetXAxisType_id is None:
        _crossPlotAVASetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetXAxisType'))
    return _client_service().call(_crossPlotAVASetXAxisType_id, *args, **kwargs)


_crossPlotAVASetXAxisUnit_id = None
def crossPlotAVASetXAxisUnit(*args, **kwargs):
    """
    crossPlotAVASetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of cross-plotAVA X axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetXAxisUnit_id
    if _crossPlotAVASetXAxisUnit_id is None:
        _crossPlotAVASetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetXAxisUnit'))
    return _client_service().call(_crossPlotAVASetXAxisUnit_id, *args, **kwargs)


_crossPlotAVASetXAxisUserLimits_id = None
def crossPlotAVASetXAxisUserLimits(*args, **kwargs):
    """
    crossPlotAVASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of cross-plotAVA X axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetXAxisUserLimits_id
    if _crossPlotAVASetXAxisUserLimits_id is None:
        _crossPlotAVASetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetXAxisUserLimits'))
    return _client_service().call(_crossPlotAVASetXAxisUserLimits_id, *args, **kwargs)


_crossPlotAVASetY_id = None
def crossPlotAVASetY(*args, **kwargs):
    """
    crossPlotAVASetY(plotID: Number, Vname: str) -> bool
    
    Set the variable to Y axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        Vname (str): variable Y name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetY_id
    if _crossPlotAVASetY_id is None:
        _crossPlotAVASetY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetY'))
    return _client_service().call(_crossPlotAVASetY_id, *args, **kwargs)


_crossPlotAVASetYAxisInverse_id = None
def crossPlotAVASetYAxisInverse(*args, **kwargs):
    """
    crossPlotAVASetYAxisInverse(plotID: Number, yainv: bool) -> bool
    
    Inverse the cross-plotAVA Y axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        yainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetYAxisInverse_id
    if _crossPlotAVASetYAxisInverse_id is None:
        _crossPlotAVASetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetYAxisInverse'))
    return _client_service().call(_crossPlotAVASetYAxisInverse_id, *args, **kwargs)


_crossPlotAVASetYAxisScale_id = None
def crossPlotAVASetYAxisScale(*args, **kwargs):
    """
    crossPlotAVASetYAxisScale(plotID: Number, yasc: int) -> bool
    
    Set the cross-plotAVA Y axis scale
    
    Args:
        plotID (Number): cross-plotAVA window ID
        yasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetYAxisScale_id
    if _crossPlotAVASetYAxisScale_id is None:
        _crossPlotAVASetYAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetYAxisScale'))
    return _client_service().call(_crossPlotAVASetYAxisScale_id, *args, **kwargs)


_crossPlotAVASetYAxisType_id = None
def crossPlotAVASetYAxisType(*args, **kwargs):
    """
    crossPlotAVASetYAxisType(plotID: Number, yat: int) -> bool
    
    Change the type of cross-plotAVA Y axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        yat (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetYAxisType_id
    if _crossPlotAVASetYAxisType_id is None:
        _crossPlotAVASetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetYAxisType'))
    return _client_service().call(_crossPlotAVASetYAxisType_id, *args, **kwargs)


_crossPlotAVASetYAxisUnit_id = None
def crossPlotAVASetYAxisUnit(*args, **kwargs):
    """
    crossPlotAVASetYAxisUnit(plotID: Number, yau: str) -> bool
    
    Change the unit of cross-plotAVA Y axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        yau (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetYAxisUnit_id
    if _crossPlotAVASetYAxisUnit_id is None:
        _crossPlotAVASetYAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetYAxisUnit'))
    return _client_service().call(_crossPlotAVASetYAxisUnit_id, *args, **kwargs)


_crossPlotAVASetYAxisUserLimits_id = None
def crossPlotAVASetYAxisUserLimits(*args, **kwargs):
    """
    crossPlotAVASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number) -> bool
    
    Set min & max values of cross-plotAVA Y axis
    
    Args:
        plotID (Number): cross-plotAVA window ID
        yamin (Number): Y axis minimum
        yamax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetYAxisUserLimits_id
    if _crossPlotAVASetYAxisUserLimits_id is None:
        _crossPlotAVASetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetYAxisUserLimits'))
    return _client_service().call(_crossPlotAVASetYAxisUserLimits_id, *args, **kwargs)


_crossPlotAVASetZonation_id = None
def crossPlotAVASetZonation(*args, **kwargs):
    """
    crossPlotAVASetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the cross-plot
    
    Args:
        plotID (Number): cross-plotAVA window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAVASetZonation_id
    if _crossPlotAVASetZonation_id is None:
        _crossPlotAVASetZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAVASetZonation'))
    return _client_service().call(_crossPlotAVASetZonation_id, *args, **kwargs)


_crossPlotActivateSecondAxe_id = None
def crossPlotActivateSecondAxe(*args, **kwargs):
    """
    crossPlotActivateSecondAxe(plotID: Number, activate: bool=False) -> bool
    
    [DEPRECATED] Activate the second axis in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        activate (bool): Optional; activate
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotActivateSecondAxe_id
    if _crossPlotActivateSecondAxe_id is None:
        _crossPlotActivateSecondAxe_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotActivateSecondAxe'))
    return _client_service().call(_crossPlotActivateSecondAxe_id, *args, **kwargs)


_crossPlotAddChart_id = None
def crossPlotAddChart(*args, **kwargs):
    """
    crossPlotAddChart(plotID: Number, cn: str) -> bool
    
    Add a chart to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cn (str): chart level\\chart name. Chart level is optional and can be:
        Techlog (default), Company, User, Project.
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAddChart_id
    if _crossPlotAddChart_id is None:
        _crossPlotAddChart_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddChart'))
    return _client_service().call(_crossPlotAddChart_id, *args, **kwargs)


_crossPlotAddEquation_id = None
def crossPlotAddEquation(*args, **kwargs):
    """
    crossPlotAddEquation(plotID: Number, eq: str, n: str='', c: str='black') -> bool
    
    Add an equation to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        eq (str): equation formula
        n (str): Optional; equation name
        c (str): Optional; color Qt name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAddEquation_id
    if _crossPlotAddEquation_id is None:
        _crossPlotAddEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddEquation'))
    return _client_service().call(_crossPlotAddEquation_id, *args, **kwargs)


_crossPlotAddParameterLineX_id = None
def crossPlotAddParameterLineX(*args, **kwargs):
    """
    crossPlotAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> Number
    
    Add a parameter line to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of  Xparameter
        val1 (Number): value of X parameter
        min1 (Number): minimum of X parameter
        max1 (Number): maximum of X parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        Number: parameter point id
    """
    global _crossPlotAddParameterLineX_id
    if _crossPlotAddParameterLineX_id is None:
        _crossPlotAddParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddParameterLineX'))
    return _client_service().call(_crossPlotAddParameterLineX_id, *args, **kwargs)


_crossPlotAddParameterLineY_id = None
def crossPlotAddParameterLineY(*args, **kwargs):
    """
    crossPlotAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> Number
    
    Add parameter point to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of Y parameter
        val1 (Number): value of Y parameter
        min1 (Number): minimum of Y parameter
        max1 (Number): maximum of Y parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        Number: parameter point id
    """
    global _crossPlotAddParameterLineY_id
    if _crossPlotAddParameterLineY_id is None:
        _crossPlotAddParameterLineY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddParameterLineY'))
    return _client_service().call(_crossPlotAddParameterLineY_id, *args, **kwargs)


_crossPlotAddParameterPointLink_id = None
def crossPlotAddParameterPointLink(*args, **kwargs):
    """
    crossPlotAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number=0) -> bool
    
    Add a link between two parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): first parameter point id
        ppid2 (str): second parameter point id
        lt (Number): Optional; link style {0 = 'AtoB', 1 = 'BtoA', 2 = 'BOTH', 3 = 'NOARROW'
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAddParameterPointLink_id
    if _crossPlotAddParameterPointLink_id is None:
        _crossPlotAddParameterPointLink_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddParameterPointLink'))
    return _client_service().call(_crossPlotAddParameterPointLink_id, *args, **kwargs)


_crossPlotAddParameterPointXY_id = None
def crossPlotAddParameterPointXY(*args, **kwargs):
    """
    crossPlotAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> str
    
    Add a parameter point to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of first parameter
        val1 (Number): value of first parameter
        min1 (Number): minimum of first parameter
        max1 (Number): maximum of first parameter
        pn2 (str): name of second parameter
        val2 (Number): value of second parameter
        min2 (Number): minimum of second parameter
        max2 (Number): maximum of second parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        str: parameter point id's
    """
    global _crossPlotAddParameterPointXY_id
    if _crossPlotAddParameterPointXY_id is None:
        _crossPlotAddParameterPointXY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddParameterPointXY'))
    return _client_service().call(_crossPlotAddParameterPointXY_id, *args, **kwargs)


_crossPlotAddRegressionByFilter_id = None
def crossPlotAddRegressionByFilter(*args, **kwargs):
    """
    crossPlotAddRegressionByFilter(plotID: Number) -> bool
    
    Add a regression by filter in a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAddRegressionByFilter_id
    if _crossPlotAddRegressionByFilter_id is None:
        _crossPlotAddRegressionByFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddRegressionByFilter'))
    return _client_service().call(_crossPlotAddRegressionByFilter_id, *args, **kwargs)


_crossPlotAddRegressionByZone_id = None
def crossPlotAddRegressionByZone(*args, **kwargs):
    """
    crossPlotAddRegressionByZone(plotID: Number) -> bool
    
    Add a regression by zone in a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAddRegressionByZone_id
    if _crossPlotAddRegressionByZone_id is None:
        _crossPlotAddRegressionByZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddRegressionByZone'))
    return _client_service().call(_crossPlotAddRegressionByZone_id, *args, **kwargs)


_crossPlotAddZone_id = None
def crossPlotAddZone(*args, **kwargs):
    """
    crossPlotAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotAddZone_id
    if _crossPlotAddZone_id is None:
        _crossPlotAddZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotAddZone'))
    return _client_service().call(_crossPlotAddZone_id, *args, **kwargs)


_crossPlotApplyTo_id = None
def crossPlotApplyTo(*args, **kwargs):
    """
    crossPlotApplyTo(plotID: Number, ds: list) -> list
    
    Apply the cross-plot to a data set list
    
    Args:
        plotID (Number): cross-plot window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _crossPlotApplyTo_id
    if _crossPlotApplyTo_id is None:
        _crossPlotApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotApplyTo'))
    return _client_service().call(_crossPlotApplyTo_id, *args, **kwargs)


_crossPlotChartList_id = None
def crossPlotChartList(*args, **kwargs):
    """
    crossPlotChartList()
    
    Return the list of available charts
    """
    global _crossPlotChartList_id
    if _crossPlotChartList_id is None:
        _crossPlotChartList_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotChartList'))
    return _client_service().call(_crossPlotChartList_id, *args, **kwargs)


_crossPlotCleanZonation_id = None
def crossPlotCleanZonation(*args, **kwargs):
    """
    crossPlotCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotCleanZonation_id
    if _crossPlotCleanZonation_id is None:
        _crossPlotCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotCleanZonation'))
    return _client_service().call(_crossPlotCleanZonation_id, *args, **kwargs)


_crossPlotCleanZone_id = None
def crossPlotCleanZone(*args, **kwargs):
    """
    crossPlotCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotCleanZone_id
    if _crossPlotCleanZone_id is None:
        _crossPlotCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotCleanZone'))
    return _client_service().call(_crossPlotCleanZone_id, *args, **kwargs)


_crossPlotClearAdvancedFilter_id = None
def crossPlotClearAdvancedFilter(*args, **kwargs):
    """
    crossPlotClearAdvancedFilter(plotID: Number) -> bool
    
    Clear the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotClearAdvancedFilter_id
    if _crossPlotClearAdvancedFilter_id is None:
        _crossPlotClearAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotClearAdvancedFilter'))
    return _client_service().call(_crossPlotClearAdvancedFilter_id, *args, **kwargs)


_crossPlotCreate_id = None
def crossPlotCreate(*args, **kwargs):
    """
    crossPlotCreate(n: str, xn: str='', yn: str='', f: str='', xn2: str='', yn2: str='', widgetID: Number=None) -> Number
    
    Create a new cross-plot
    
    Args:
        n (str): cross-plot window name
        xn (str): Optional; variable X name
        yn (str): Optional; variable Y name
        f (str): Optional; filter variable name
        xn2 (str): Optional; [DEPRECATED] second X variable name (unused since 2011.2)
        yn2 (str): Optional; [DEPRECATED] second Y variable name (unused since 2011.2)
        widgetID (Number): Optional; if the cross-plot will be inserted into a widget, give widget ID
    
    Returns:
        Number: cross-plot window ID
    """
    global _crossPlotCreate_id
    if _crossPlotCreate_id is None:
        _crossPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotCreate'))
    return _client_service().call(_crossPlotCreate_id, *args, **kwargs)


_crossPlotDeleteColor2Values_id = None
def crossPlotDeleteColor2Values(*args, **kwargs):
    """
    crossPlotDeleteColor2Values(plotID: Number) -> bool
    
    [DEPRECATED] Delete the variable present on the second color scale of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteColor2Values_id
    if _crossPlotDeleteColor2Values_id is None:
        _crossPlotDeleteColor2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteColor2Values'))
    return _client_service().call(_crossPlotDeleteColor2Values_id, *args, **kwargs)


_crossPlotDeleteColorValues_id = None
def crossPlotDeleteColorValues(*args, **kwargs):
    """
    crossPlotDeleteColorValues(plotID: Number, ScaleId: str='') -> bool
    
    Delete the variable present on the color scale of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteColorValues_id
    if _crossPlotDeleteColorValues_id is None:
        _crossPlotDeleteColorValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteColorValues'))
    return _client_service().call(_crossPlotDeleteColorValues_id, *args, **kwargs)


_crossPlotDeleteFilterValues_id = None
def crossPlotDeleteFilterValues(*args, **kwargs):
    """
    crossPlotDeleteFilterValues(plotID: Number) -> bool
    
    Delete the filter variable of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteFilterValues_id
    if _crossPlotDeleteFilterValues_id is None:
        _crossPlotDeleteFilterValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteFilterValues'))
    return _client_service().call(_crossPlotDeleteFilterValues_id, *args, **kwargs)


_crossPlotDeleteLabelValues_id = None
def crossPlotDeleteLabelValues(*args, **kwargs):
    """
    crossPlotDeleteLabelValues(plotID: Number) -> bool
    
    Delete the label variable of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteLabelValues_id
    if _crossPlotDeleteLabelValues_id is None:
        _crossPlotDeleteLabelValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteLabelValues'))
    return _client_service().call(_crossPlotDeleteLabelValues_id, *args, **kwargs)


_crossPlotDeletePointSizeValues_id = None
def crossPlotDeletePointSizeValues(*args, **kwargs):
    """
    crossPlotDeletePointSizeValues(plotID: Number, ScaleId: str='') -> bool
    
    Delete the variable present on the point size scale of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeletePointSizeValues_id
    if _crossPlotDeletePointSizeValues_id is None:
        _crossPlotDeletePointSizeValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeletePointSizeValues'))
    return _client_service().call(_crossPlotDeletePointSizeValues_id, *args, **kwargs)


_crossPlotDeleteX2Values_id = None
def crossPlotDeleteX2Values(*args, **kwargs):
    """
    crossPlotDeleteX2Values(plotID: Number) -> bool
    
    Delete the variable present on the second X axis of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteX2Values_id
    if _crossPlotDeleteX2Values_id is None:
        _crossPlotDeleteX2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteX2Values'))
    return _client_service().call(_crossPlotDeleteX2Values_id, *args, **kwargs)


_crossPlotDeleteXValues_id = None
def crossPlotDeleteXValues(*args, **kwargs):
    """
    crossPlotDeleteXValues(plotID: Number, ScaleId: str='') -> bool
    
    Delete the variable present on the X axis of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteXValues_id
    if _crossPlotDeleteXValues_id is None:
        _crossPlotDeleteXValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteXValues'))
    return _client_service().call(_crossPlotDeleteXValues_id, *args, **kwargs)


_crossPlotDeleteY2Values_id = None
def crossPlotDeleteY2Values(*args, **kwargs):
    """
    crossPlotDeleteY2Values(plotID: Number) -> bool
    
    Delete the variable present on the second Y axis of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteY2Values_id
    if _crossPlotDeleteY2Values_id is None:
        _crossPlotDeleteY2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteY2Values'))
    return _client_service().call(_crossPlotDeleteY2Values_id, *args, **kwargs)


_crossPlotDeleteYValues_id = None
def crossPlotDeleteYValues(*args, **kwargs):
    """
    crossPlotDeleteYValues(plotID: Number, ScaleId: str='') -> bool
    
    Delete the variable present on the Y axis of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDeleteYValues_id
    if _crossPlotDeleteYValues_id is None:
        _crossPlotDeleteYValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDeleteYValues'))
    return _client_service().call(_crossPlotDeleteYValues_id, *args, **kwargs)


_crossPlotDensityGridHorizontal_id = None
def crossPlotDensityGridHorizontal(*args, **kwargs):
    """
    crossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number=0, xmax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of X density grid
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        xmin (Number): Optional; X axis minimum
        xmax (Number): Optional; X axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDensityGridHorizontal_id
    if _crossPlotDensityGridHorizontal_id is None:
        _crossPlotDensityGridHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDensityGridHorizontal'))
    return _client_service().call(_crossPlotDensityGridHorizontal_id, *args, **kwargs)


_crossPlotDensityGridVertical_id = None
def crossPlotDensityGridVertical(*args, **kwargs):
    """
    crossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number=0, ymax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of Y density grid
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        ymin (Number): Optional; Y axis minimum
        ymax (Number): Optional; Y axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDensityGridVertical_id
    if _crossPlotDensityGridVertical_id is None:
        _crossPlotDensityGridVertical_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDensityGridVertical'))
    return _client_service().call(_crossPlotDensityGridVertical_id, *args, **kwargs)


_crossPlotDensitySmooth_id = None
def crossPlotDensitySmooth(*args, **kwargs):
    """
    crossPlotDensitySmooth(plotID: Number, smooth: bool) -> bool
    
    Display of smoothed density values
    
    Args:
        plotID (Number): cross-plot window ID
        smooth (bool): 1 = smooth else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDensitySmooth_id
    if _crossPlotDensitySmooth_id is None:
        _crossPlotDensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDensitySmooth'))
    return _client_service().call(_crossPlotDensitySmooth_id, *args, **kwargs)


_crossPlotDensityType_id = None
def crossPlotDensityType(*args, **kwargs):
    """
    crossPlotDensityType(plotID: Number, dst: bool) -> bool
    
    Display of the cross-plot in normal or density type
    
    Args:
        plotID (Number): cross-plot window ID
        dst (bool): 1 = density display else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDensityType_id
    if _crossPlotDensityType_id is None:
        _crossPlotDensityType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDensityType'))
    return _client_service().call(_crossPlotDensityType_id, *args, **kwargs)


_crossPlotDensityValue_id = None
def crossPlotDensityValue(*args, **kwargs):
    """
    crossPlotDensityValue(plotID: Number, value: bool, percent: bool=False) -> bool
    
    Display of data density values
    
    Args:
        plotID (Number): cross-plot window ID
        value (bool): 1 = display of density value else 0
        percent (bool): Optional; 1 = display in percent else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotDensityValue_id
    if _crossPlotDensityValue_id is None:
        _crossPlotDensityValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDensityValue'))
    return _client_service().call(_crossPlotDensityValue_id, *args, **kwargs)


_crossPlotDuplicate_id = None
def crossPlotDuplicate(*args, **kwargs):
    """
    crossPlotDuplicate(plotID: Number) -> Number
    
    Duplicate the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlotDuplicate_id
    if _crossPlotDuplicate_id is None:
        _crossPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotDuplicate'))
    return _client_service().call(_crossPlotDuplicate_id, *args, **kwargs)


_crossPlotGetAdvancedFilter_id = None
def crossPlotGetAdvancedFilter(*args, **kwargs):
    """
    crossPlotGetAdvancedFilter(plotID: Number) -> str
    
    Get the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        str: the filter equation
    """
    global _crossPlotGetAdvancedFilter_id
    if _crossPlotGetAdvancedFilter_id is None:
        _crossPlotGetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetAdvancedFilter'))
    return _client_service().call(_crossPlotGetAdvancedFilter_id, *args, **kwargs)


_crossPlotGetChartPolylinesInfo_id = None
def crossPlotGetChartPolylinesInfo(*args, **kwargs):
    """
    crossPlotGetChartPolylinesInfo(plotID: Number)
    
    Get the polylines information of all the charts loaded in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    Output dict:
        str: chart level\\chart name
        str: polyline id if defined
        str: polyline name if defined
        list: list of X coordinate of the polyline points in the cross-plot X axis unit
        list: list of Y coordinate of the polyline points in the cross-plot Y axis unit
        list: list of the graduation values for each polyline points
        Number: value of the first constant of the polyline indexed by its name
        Number: value of the ... constant of the polyline indexed by its name
        Number: value of the first parameter of the polyline indexed by its name
        Number: value of the ... parameter of the polyline indexed by its name
    """
    global _crossPlotGetChartPolylinesInfo_id
    if _crossPlotGetChartPolylinesInfo_id is None:
        _crossPlotGetChartPolylinesInfo_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetChartPolylinesInfo'))
    return _client_service().call(_crossPlotGetChartPolylinesInfo_id, *args, **kwargs)


_crossPlotGetColorVariable_id = None
def crossPlotGetColorVariable(*args, **kwargs):
    """
    crossPlotGetColorVariable(plotID: int, ScaleId: str='') -> str
    
    Get the name of the variable of the axis "color" of a single well cross plot scale
    
    Args:
        plotID (int): cross plot window ID
        ScaleId (str): Optional; Scale id - Scale 1 by default
    
    Returns:
        str: name of the color variable "Well.Dataset.Variable"
    """
    global _crossPlotGetColorVariable_id
    if _crossPlotGetColorVariable_id is None:
        _crossPlotGetColorVariable_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetColorVariable'))
    return _client_service().call(_crossPlotGetColorVariable_id, *args, **kwargs)


_crossPlotGetLabelVariable_id = None
def crossPlotGetLabelVariable(*args, **kwargs):
    """
    crossPlotGetLabelVariable(plotID: int, ScaleId: str='') -> str
    
    Get the name of the variable of the axis "label" of a single well cross plot scale
    
    Args:
        plotID (int): cross plot window ID
        ScaleId (str): Optional; Scale id - Scale 1 by default
    
    Returns:
        str: name of the label variable "Well.Dataset.Variable"
    """
    global _crossPlotGetLabelVariable_id
    if _crossPlotGetLabelVariable_id is None:
        _crossPlotGetLabelVariable_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetLabelVariable'))
    return _client_service().call(_crossPlotGetLabelVariable_id, *args, **kwargs)


_crossPlotGetParameterPointXValue_id = None
def crossPlotGetParameterPointXValue(*args, **kwargs):
    """
    crossPlotGetParameterPointXValue(plotID: Number, ppid1: str) -> Number
    
    Return X value of a parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: x value of parameter point
    """
    global _crossPlotGetParameterPointXValue_id
    if _crossPlotGetParameterPointXValue_id is None:
        _crossPlotGetParameterPointXValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetParameterPointXValue'))
    return _client_service().call(_crossPlotGetParameterPointXValue_id, *args, **kwargs)


_crossPlotGetParameterPointYValue_id = None
def crossPlotGetParameterPointYValue(*args, **kwargs):
    """
    crossPlotGetParameterPointYValue(plotID: Number, ppid1: str) -> Number
    
    Return Y value of a parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: y value of parameter point
    """
    global _crossPlotGetParameterPointYValue_id
    if _crossPlotGetParameterPointYValue_id is None:
        _crossPlotGetParameterPointYValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetParameterPointYValue'))
    return _client_service().call(_crossPlotGetParameterPointYValue_id, *args, **kwargs)


_crossPlotGetPointSizeVariable_id = None
def crossPlotGetPointSizeVariable(*args, **kwargs):
    """
    crossPlotGetPointSizeVariable(plotID: int, ScaleId: str='') -> str
    
    Get the name of the variable of the axis "point size" of a single well cross plot scale
    
    Args:
        plotID (int): cross plot window ID
        ScaleId (str): Optional; Scale id - Scale 1 by default
    
    Returns:
        str: name of the point size variable "Well.Dataset.Variable"
    """
    global _crossPlotGetPointSizeVariable_id
    if _crossPlotGetPointSizeVariable_id is None:
        _crossPlotGetPointSizeVariable_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetPointSizeVariable'))
    return _client_service().call(_crossPlotGetPointSizeVariable_id, *args, **kwargs)


_crossPlotGetRegressions_id = None
def crossPlotGetRegressions(*args, **kwargs):
    """
    crossPlotGetRegressions(plotID: Number) -> dict
    
    get a dictionary of regressions in a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        dict: dictionary of regressions
    """
    global _crossPlotGetRegressions_id
    if _crossPlotGetRegressions_id is None:
        _crossPlotGetRegressions_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetRegressions'))
    return _client_service().call(_crossPlotGetRegressions_id, *args, **kwargs)


_crossPlotGetScaleList_id = None
def crossPlotGetScaleList(*args, **kwargs):
    """
    crossPlotGetScaleList(plotID: int) -> List[str]
    
    Get the list of scale names of a single well cross plot
    
    Args:
        plotID (int): cross plot window ID
    
    Returns:
        List[str]: list of scale names
    """
    global _crossPlotGetScaleList_id
    if _crossPlotGetScaleList_id is None:
        _crossPlotGetScaleList_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetScaleList'))
    return _client_service().call(_crossPlotGetScaleList_id, *args, **kwargs)


_crossPlotGetXHistogramBinCount_id = None
def crossPlotGetXHistogramBinCount(*args, **kwargs):
    """
    crossPlotGetXHistogramBinCount(plotID: Number) -> int
    
    Getter for bin count on histogram Horizontal
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        int: histogram horizontal bin count (NONE if the given plotID doesn't exist)}
    """
    global _crossPlotGetXHistogramBinCount_id
    if _crossPlotGetXHistogramBinCount_id is None:
        _crossPlotGetXHistogramBinCount_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetXHistogramBinCount'))
    return _client_service().call(_crossPlotGetXHistogramBinCount_id, *args, **kwargs)


_crossPlotGetXVariableList_id = None
def crossPlotGetXVariableList(*args, **kwargs):
    """
    crossPlotGetXVariableList(plotID: int, ScaleId: str='') -> List[str]
    
    Get the name of the variables of the axis "x" of a single well cross plot scale
    
    Args:
        plotID (int): cross plot window ID
        ScaleId (str): Optional; Scale id - Scale 1 by default
    
    Returns:
        List[str]: list of variable names in x ["Well.Dataset.Variable"]
    """
    global _crossPlotGetXVariableList_id
    if _crossPlotGetXVariableList_id is None:
        _crossPlotGetXVariableList_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetXVariableList'))
    return _client_service().call(_crossPlotGetXVariableList_id, *args, **kwargs)


_crossPlotGetYHistogramBinCount_id = None
def crossPlotGetYHistogramBinCount(*args, **kwargs):
    """
    crossPlotGetYHistogramBinCount(plotID: Number) -> int
    
    Getter for bin count on histogram Vertical
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        int: histogram vertical bin count (NONE if the given plotID doesn't exist)}
    """
    global _crossPlotGetYHistogramBinCount_id
    if _crossPlotGetYHistogramBinCount_id is None:
        _crossPlotGetYHistogramBinCount_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetYHistogramBinCount'))
    return _client_service().call(_crossPlotGetYHistogramBinCount_id, *args, **kwargs)


_crossPlotGetYVariableList_id = None
def crossPlotGetYVariableList(*args, **kwargs):
    """
    crossPlotGetYVariableList(plotID: int, ScaleId: str='') -> List[str]
    
    Get the name of the variables of the axis "y" of a single well cross plot scale
    
    Args:
        plotID (int): cross plot window ID
        ScaleId (str): Optional; Scale id - Scale 1 by default
    
    Returns:
        List[str]: list of variable names in y ["Well.Dataset.Variable"]
    """
    global _crossPlotGetYVariableList_id
    if _crossPlotGetYVariableList_id is None:
        _crossPlotGetYVariableList_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotGetYVariableList'))
    return _client_service().call(_crossPlotGetYVariableList_id, *args, **kwargs)


_crossPlotIDFindByName_id = None
def crossPlotIDFindByName(*args, **kwargs):
    """
    crossPlotIDFindByName(n: str) -> Number
    
    Find the ID of a name-known cross-plot
    
    Args:
        n (str): cross-plot window name
    
    Returns:
        Number: cross-plot window ID
    """
    global _crossPlotIDFindByName_id
    if _crossPlotIDFindByName_id is None:
        _crossPlotIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotIDFindByName'))
    return _client_service().call(_crossPlotIDFindByName_id, *args, **kwargs)


_crossPlotIsXHistogramCumulativeFrequencyVisible_id = None
def crossPlotIsXHistogramCumulativeFrequencyVisible(*args, **kwargs):
    """
    crossPlotIsXHistogramCumulativeFrequencyVisible(plotID: Number) -> bool
    
    Getter for cumulative frequency visibility state on histogram Horizontal
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: histogram horizontal cumulative frequency visibility state (NONE if the given plotID doesn't exist)}
    """
    global _crossPlotIsXHistogramCumulativeFrequencyVisible_id
    if _crossPlotIsXHistogramCumulativeFrequencyVisible_id is None:
        _crossPlotIsXHistogramCumulativeFrequencyVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotIsXHistogramCumulativeFrequencyVisible'))
    return _client_service().call(_crossPlotIsXHistogramCumulativeFrequencyVisible_id, *args, **kwargs)


_crossPlotIsYHistogramCumulativeFrequencyVisible_id = None
def crossPlotIsYHistogramCumulativeFrequencyVisible(*args, **kwargs):
    """
    crossPlotIsYHistogramCumulativeFrequencyVisible(plotID: Number) -> bool
    
    Getter for cumulative frequency visibility state on histogram Vertical
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: histogram vertical cumulative frequency visibility state (NONE if the given plotID doesn't exist)}
    """
    global _crossPlotIsYHistogramCumulativeFrequencyVisible_id
    if _crossPlotIsYHistogramCumulativeFrequencyVisible_id is None:
        _crossPlotIsYHistogramCumulativeFrequencyVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotIsYHistogramCumulativeFrequencyVisible'))
    return _client_service().call(_crossPlotIsYHistogramCumulativeFrequencyVisible_id, *args, **kwargs)


_crossPlotLink_id = None
def crossPlotLink(*args, **kwargs):
    """
    crossPlotLink(plotID: Number, link: bool) -> Number
    
    Link cross-plot markers
    
    Args:
        plotID (Number): cross-plot window ID
        link (bool): True if linked, False else
    
    Returns:
        Number: matrix window ID
    """
    global _crossPlotLink_id
    if _crossPlotLink_id is None:
        _crossPlotLink_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLink'))
    return _client_service().call(_crossPlotLink_id, *args, **kwargs)


_crossPlotLockAxisX_id = None
def crossPlotLockAxisX(*args, **kwargs):
    """
    crossPlotLockAxisX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis limits of the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotLockAxisX_id
    if _crossPlotLockAxisX_id is None:
        _crossPlotLockAxisX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLockAxisX'))
    return _client_service().call(_crossPlotLockAxisX_id, *args, **kwargs)


_crossPlotLockAxisY_id = None
def crossPlotLockAxisY(*args, **kwargs):
    """
    crossPlotLockAxisY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis limits of the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotLockAxisY_id
    if _crossPlotLockAxisY_id is None:
        _crossPlotLockAxisY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLockAxisY'))
    return _client_service().call(_crossPlotLockAxisY_id, *args, **kwargs)


_crossPlotLockLegendX_id = None
def crossPlotLockLegendX(*args, **kwargs):
    """
    crossPlotLockLegendX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis legend of the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotLockLegendX_id
    if _crossPlotLockLegendX_id is None:
        _crossPlotLockLegendX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLockLegendX'))
    return _client_service().call(_crossPlotLockLegendX_id, *args, **kwargs)


_crossPlotLockLegendY_id = None
def crossPlotLockLegendY(*args, **kwargs):
    """
    crossPlotLockLegendY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis legend of the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotLockLegendY_id
    if _crossPlotLockLegendY_id is None:
        _crossPlotLockLegendY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLockLegendY'))
    return _client_service().call(_crossPlotLockLegendY_id, *args, **kwargs)


_crossPlotLockPalette_id = None
def crossPlotLockPalette(*args, **kwargs):
    """
    crossPlotLockPalette(plotID: Number, locked: bool) -> bool
    
    Lock palette of the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotLockPalette_id
    if _crossPlotLockPalette_id is None:
        _crossPlotLockPalette_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLockPalette'))
    return _client_service().call(_crossPlotLockPalette_id, *args, **kwargs)


_crossPlotLockTitle_id = None
def crossPlotLockTitle(*args, **kwargs):
    """
    crossPlotLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotLockTitle_id
    if _crossPlotLockTitle_id is None:
        _crossPlotLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotLockTitle'))
    return _client_service().call(_crossPlotLockTitle_id, *args, **kwargs)


_crossPlotMarkers_id = None
def crossPlotMarkers(*args, **kwargs):
    """
    crossPlotMarkers(plotID: Number, type: int, size: Number=5) -> bool
    
    Set type & size of cross-plot markers
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMarkers_id
    if _crossPlotMarkers_id is None:
        _crossPlotMarkers_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMarkers'))
    return _client_service().call(_crossPlotMarkers_id, *args, **kwargs)


_crossPlotMarkersColor_id = None
def crossPlotMarkersColor(*args, **kwargs):
    """
    crossPlotMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Choose the cross-plot markers color
    
    Args:
        plotID (Number): cross-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMarkersColor_id
    if _crossPlotMarkersColor_id is None:
        _crossPlotMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMarkersColor'))
    return _client_service().call(_crossPlotMarkersColor_id, *args, **kwargs)


_crossPlotMarkersColour_id = None
def crossPlotMarkersColour(*args, **kwargs):
    """
    crossPlotMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use crossPlotMarkersColor instead) Choose the cross-plot markers color
    
    Args:
        plotID (Number): cross-plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMarkersColour_id
    if _crossPlotMarkersColour_id is None:
        _crossPlotMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMarkersColour'))
    return _client_service().call(_crossPlotMarkersColour_id, *args, **kwargs)


_crossPlotMultiWellAddChart_id = None
def crossPlotMultiWellAddChart(*args, **kwargs):
    """
    crossPlotMultiWellAddChart(plotID: Number, cn: str) -> bool
    
    Add chart to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cn (str): chart level\\chart name. Chart level is optional and can be:
        Techlog (default), Company, User, Project.
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddChart_id
    if _crossPlotMultiWellAddChart_id is None:
        _crossPlotMultiWellAddChart_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddChart'))
    return _client_service().call(_crossPlotMultiWellAddChart_id, *args, **kwargs)


_crossPlotMultiWellAddData_id = None
def crossPlotMultiWellAddData(*args, **kwargs):
    """
    crossPlotMultiWellAddData(plotID: Number, ds: list) -> bool
    
    Add a dataset to a multi well cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddData_id
    if _crossPlotMultiWellAddData_id is None:
        _crossPlotMultiWellAddData_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddData'))
    return _client_service().call(_crossPlotMultiWellAddData_id, *args, **kwargs)


_crossPlotMultiWellAddEquation_id = None
def crossPlotMultiWellAddEquation(*args, **kwargs):
    """
    crossPlotMultiWellAddEquation(plotID: Number, eq: str, n: str='', c: str='black') -> bool
    
    Add an equation to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        eq (str): equation formula
        n (str): Optional; equation name
        c (str): Optional; color Qt name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddEquation_id
    if _crossPlotMultiWellAddEquation_id is None:
        _crossPlotMultiWellAddEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddEquation'))
    return _client_service().call(_crossPlotMultiWellAddEquation_id, *args, **kwargs)


_crossPlotMultiWellAddParameterLineX_id = None
def crossPlotMultiWellAddParameterLineX(*args, **kwargs):
    """
    crossPlotMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> Number
    
    Add a parameter line to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of  Xparameter
        val1 (Number): value of X parameter
        min1 (Number): minimum of X parameter
        max1 (Number): maximum of X parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        Number: parameter point id
    """
    global _crossPlotMultiWellAddParameterLineX_id
    if _crossPlotMultiWellAddParameterLineX_id is None:
        _crossPlotMultiWellAddParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddParameterLineX'))
    return _client_service().call(_crossPlotMultiWellAddParameterLineX_id, *args, **kwargs)


_crossPlotMultiWellAddParameterLineY_id = None
def crossPlotMultiWellAddParameterLineY(*args, **kwargs):
    """
    crossPlotMultiWellAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> Number
    
    Add parameter point to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of Y parameter
        val1 (Number): value of Y parameter
        min1 (Number): minimum of Y parameter
        max1 (Number): maximum of Y parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        Number: parameter point id
    """
    global _crossPlotMultiWellAddParameterLineY_id
    if _crossPlotMultiWellAddParameterLineY_id is None:
        _crossPlotMultiWellAddParameterLineY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddParameterLineY'))
    return _client_service().call(_crossPlotMultiWellAddParameterLineY_id, *args, **kwargs)


_crossPlotMultiWellAddParameterPointLink_id = None
def crossPlotMultiWellAddParameterPointLink(*args, **kwargs):
    """
    crossPlotMultiWellAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number=0) -> bool
    
    Add a link between two parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): first parameter point id
        ppid2 (str): second parameter point id
        lt (Number): Optional; link style {0 = 'AtoB', 1 = 'BtoA', 2 = 'BOTH', 3 = 'NOARROW'
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddParameterPointLink_id
    if _crossPlotMultiWellAddParameterPointLink_id is None:
        _crossPlotMultiWellAddParameterPointLink_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddParameterPointLink'))
    return _client_service().call(_crossPlotMultiWellAddParameterPointLink_id, *args, **kwargs)


_crossPlotMultiWellAddParameterPointXY_id = None
def crossPlotMultiWellAddParameterPointXY(*args, **kwargs):
    """
    crossPlotMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> str
    
    Add a parameter point to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of first parameter
        val1 (Number): value of first parameter
        min1 (Number): minimum of first parameter
        max1 (Number): maximum of first parameter
        pn2 (str): name of second parameter
        val2 (Number): value of second parameter
        min2 (Number): minimum of second parameter
        max2 (Number): maximum of second parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        str: parameter point id's
    """
    global _crossPlotMultiWellAddParameterPointXY_id
    if _crossPlotMultiWellAddParameterPointXY_id is None:
        _crossPlotMultiWellAddParameterPointXY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddParameterPointXY'))
    return _client_service().call(_crossPlotMultiWellAddParameterPointXY_id, *args, **kwargs)


_crossPlotMultiWellAddRegressionByFilter_id = None
def crossPlotMultiWellAddRegressionByFilter(*args, **kwargs):
    """
    crossPlotMultiWellAddRegressionByFilter(plotID: Number) -> bool
    
    Add a regression by filter in a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddRegressionByFilter_id
    if _crossPlotMultiWellAddRegressionByFilter_id is None:
        _crossPlotMultiWellAddRegressionByFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddRegressionByFilter'))
    return _client_service().call(_crossPlotMultiWellAddRegressionByFilter_id, *args, **kwargs)


_crossPlotMultiWellAddRegressionByWell_id = None
def crossPlotMultiWellAddRegressionByWell(*args, **kwargs):
    """
    crossPlotMultiWellAddRegressionByWell(plotID: Number) -> bool
    
    Add a regression by well in a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddRegressionByWell_id
    if _crossPlotMultiWellAddRegressionByWell_id is None:
        _crossPlotMultiWellAddRegressionByWell_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddRegressionByWell'))
    return _client_service().call(_crossPlotMultiWellAddRegressionByWell_id, *args, **kwargs)


_crossPlotMultiWellAddRegressionByZone_id = None
def crossPlotMultiWellAddRegressionByZone(*args, **kwargs):
    """
    crossPlotMultiWellAddRegressionByZone(plotID: Number) -> bool
    
    Add a regression by zone in a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddRegressionByZone_id
    if _crossPlotMultiWellAddRegressionByZone_id is None:
        _crossPlotMultiWellAddRegressionByZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddRegressionByZone'))
    return _client_service().call(_crossPlotMultiWellAddRegressionByZone_id, *args, **kwargs)


_crossPlotMultiWellAddZone_id = None
def crossPlotMultiWellAddZone(*args, **kwargs):
    """
    crossPlotMultiWellAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellAddZone_id
    if _crossPlotMultiWellAddZone_id is None:
        _crossPlotMultiWellAddZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellAddZone'))
    return _client_service().call(_crossPlotMultiWellAddZone_id, *args, **kwargs)


_crossPlotMultiWellChartList_id = None
def crossPlotMultiWellChartList(*args, **kwargs):
    """
    crossPlotMultiWellChartList()
    
    Return the list of available charts
    """
    global _crossPlotMultiWellChartList_id
    if _crossPlotMultiWellChartList_id is None:
        _crossPlotMultiWellChartList_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellChartList'))
    return _client_service().call(_crossPlotMultiWellChartList_id, *args, **kwargs)


_crossPlotMultiWellCleanZonation_id = None
def crossPlotMultiWellCleanZonation(*args, **kwargs):
    """
    crossPlotMultiWellCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellCleanZonation_id
    if _crossPlotMultiWellCleanZonation_id is None:
        _crossPlotMultiWellCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellCleanZonation'))
    return _client_service().call(_crossPlotMultiWellCleanZonation_id, *args, **kwargs)


_crossPlotMultiWellCleanZone_id = None
def crossPlotMultiWellCleanZone(*args, **kwargs):
    """
    crossPlotMultiWellCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellCleanZone_id
    if _crossPlotMultiWellCleanZone_id is None:
        _crossPlotMultiWellCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellCleanZone'))
    return _client_service().call(_crossPlotMultiWellCleanZone_id, *args, **kwargs)


_crossPlotMultiWellClearAdvancedFilter_id = None
def crossPlotMultiWellClearAdvancedFilter(*args, **kwargs):
    """
    crossPlotMultiWellClearAdvancedFilter(plotID: Number) -> bool
    
    Clear the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellClearAdvancedFilter_id
    if _crossPlotMultiWellClearAdvancedFilter_id is None:
        _crossPlotMultiWellClearAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellClearAdvancedFilter'))
    return _client_service().call(_crossPlotMultiWellClearAdvancedFilter_id, *args, **kwargs)


_crossPlotMultiWellCreate_id = None
def crossPlotMultiWellCreate(*args, **kwargs):
    """
    crossPlotMultiWellCreate(ml: list) -> Number
    
    Create a multi well cross-plot
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: cross-plot window ID
    """
    global _crossPlotMultiWellCreate_id
    if _crossPlotMultiWellCreate_id is None:
        _crossPlotMultiWellCreate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellCreate'))
    return _client_service().call(_crossPlotMultiWellCreate_id, *args, **kwargs)


_crossPlotMultiWellDensityGridHorizontal_id = None
def crossPlotMultiWellDensityGridHorizontal(*args, **kwargs):
    """
    crossPlotMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number=0, xmax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of X density grid
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        xmin (Number): Optional; X axis minimum
        xmax (Number): Optional; X axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellDensityGridHorizontal_id
    if _crossPlotMultiWellDensityGridHorizontal_id is None:
        _crossPlotMultiWellDensityGridHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellDensityGridHorizontal'))
    return _client_service().call(_crossPlotMultiWellDensityGridHorizontal_id, *args, **kwargs)


_crossPlotMultiWellDensityGridVertical_id = None
def crossPlotMultiWellDensityGridVertical(*args, **kwargs):
    """
    crossPlotMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number=0, ymax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of Y density grid
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        ymin (Number): Optional; Y axis minimum
        ymax (Number): Optional; Y axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellDensityGridVertical_id
    if _crossPlotMultiWellDensityGridVertical_id is None:
        _crossPlotMultiWellDensityGridVertical_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellDensityGridVertical'))
    return _client_service().call(_crossPlotMultiWellDensityGridVertical_id, *args, **kwargs)


_crossPlotMultiWellDensitySmooth_id = None
def crossPlotMultiWellDensitySmooth(*args, **kwargs):
    """
    crossPlotMultiWellDensitySmooth(plotID: Number, smooth: bool) -> bool
    
    Display of smoothed density values
    
    Args:
        plotID (Number): cross-plot window ID
        smooth (bool): 1 = smooth else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellDensitySmooth_id
    if _crossPlotMultiWellDensitySmooth_id is None:
        _crossPlotMultiWellDensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellDensitySmooth'))
    return _client_service().call(_crossPlotMultiWellDensitySmooth_id, *args, **kwargs)


_crossPlotMultiWellDensityType_id = None
def crossPlotMultiWellDensityType(*args, **kwargs):
    """
    crossPlotMultiWellDensityType(plotID: Number, dst: bool) -> bool
    
    Display of the cross-plot in normal or density type
    
    Args:
        plotID (Number): cross-plot window ID
        dst (bool): 1 = density display else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellDensityType_id
    if _crossPlotMultiWellDensityType_id is None:
        _crossPlotMultiWellDensityType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellDensityType'))
    return _client_service().call(_crossPlotMultiWellDensityType_id, *args, **kwargs)


_crossPlotMultiWellDensityValue_id = None
def crossPlotMultiWellDensityValue(*args, **kwargs):
    """
    crossPlotMultiWellDensityValue(plotID: Number, value: bool, percent: bool=False) -> bool
    
    Display of data density values
    
    Args:
        plotID (Number): cross-plot window ID
        value (bool): 1 = display of density value else 0
        percent (bool): Optional; 1 = display in percent else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellDensityValue_id
    if _crossPlotMultiWellDensityValue_id is None:
        _crossPlotMultiWellDensityValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellDensityValue'))
    return _client_service().call(_crossPlotMultiWellDensityValue_id, *args, **kwargs)


_crossPlotMultiWellDuplicate_id = None
def crossPlotMultiWellDuplicate(*args, **kwargs):
    """
    crossPlotMultiWellDuplicate(plotID: Number) -> Number
    
    Duplicate the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _crossPlotMultiWellDuplicate_id
    if _crossPlotMultiWellDuplicate_id is None:
        _crossPlotMultiWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellDuplicate'))
    return _client_service().call(_crossPlotMultiWellDuplicate_id, *args, **kwargs)


_crossPlotMultiWellGetAdvancedFilter_id = None
def crossPlotMultiWellGetAdvancedFilter(*args, **kwargs):
    """
    crossPlotMultiWellGetAdvancedFilter(plotID: Number) -> str
    
    Get the advanced filter of the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        str: the filter equation
    """
    global _crossPlotMultiWellGetAdvancedFilter_id
    if _crossPlotMultiWellGetAdvancedFilter_id is None:
        _crossPlotMultiWellGetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellGetAdvancedFilter'))
    return _client_service().call(_crossPlotMultiWellGetAdvancedFilter_id, *args, **kwargs)


_crossPlotMultiWellGetChartPolylinesInfo_id = None
def crossPlotMultiWellGetChartPolylinesInfo(*args, **kwargs):
    """
    crossPlotMultiWellGetChartPolylinesInfo(plotID: Number)
    
    Get the polylines information of all the charts loaded in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    Output dict:
        str: chart level\\chart name
        str: polyline id if defined
        str: polyline name if defined
        list: list of X coordinate of the polyline points in the cross-plot X axis unit
        list: list of Y coordinate of the polyline points in the cross-plot Y axis unit
        list: list of the graduation values for each polyline points
        Number: value of the first constant of the polyline indexed by its name
        Number: value of the ... constant of the polyline indexed by its name
        Number: value of the first parameter of the polyline indexed by its name
        Number: value of the ... parameter of the polyline indexed by its name
    """
    global _crossPlotMultiWellGetChartPolylinesInfo_id
    if _crossPlotMultiWellGetChartPolylinesInfo_id is None:
        _crossPlotMultiWellGetChartPolylinesInfo_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellGetChartPolylinesInfo'))
    return _client_service().call(_crossPlotMultiWellGetChartPolylinesInfo_id, *args, **kwargs)


_crossPlotMultiWellGetParameterPointXValue_id = None
def crossPlotMultiWellGetParameterPointXValue(*args, **kwargs):
    """
    crossPlotMultiWellGetParameterPointXValue(plotID: Number, ppid1: str) -> Number
    
    Return X value of a parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: x value of parameter point
    """
    global _crossPlotMultiWellGetParameterPointXValue_id
    if _crossPlotMultiWellGetParameterPointXValue_id is None:
        _crossPlotMultiWellGetParameterPointXValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellGetParameterPointXValue'))
    return _client_service().call(_crossPlotMultiWellGetParameterPointXValue_id, *args, **kwargs)


_crossPlotMultiWellGetParameterPointYValue_id = None
def crossPlotMultiWellGetParameterPointYValue(*args, **kwargs):
    """
    crossPlotMultiWellGetParameterPointYValue(plotID: Number, ppid1: str) -> Number
    
    Return Y value of a parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: y value of parameter point
    """
    global _crossPlotMultiWellGetParameterPointYValue_id
    if _crossPlotMultiWellGetParameterPointYValue_id is None:
        _crossPlotMultiWellGetParameterPointYValue_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellGetParameterPointYValue'))
    return _client_service().call(_crossPlotMultiWellGetParameterPointYValue_id, *args, **kwargs)


_crossPlotMultiWellGetRegressions_id = None
def crossPlotMultiWellGetRegressions(*args, **kwargs):
    """
    crossPlotMultiWellGetRegressions(plotID: Number) -> dict
    
    get a dictionary of regressions in a cross-plot multi well
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        dict: dictionary of regressions
    """
    global _crossPlotMultiWellGetRegressions_id
    if _crossPlotMultiWellGetRegressions_id is None:
        _crossPlotMultiWellGetRegressions_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellGetRegressions'))
    return _client_service().call(_crossPlotMultiWellGetRegressions_id, *args, **kwargs)


_crossPlotMultiWellIDFindByName_id = None
def crossPlotMultiWellIDFindByName(*args, **kwargs):
    """
    crossPlotMultiWellIDFindByName(n: str) -> Number
    
    Find the ID of a name-known cross-plot
    
    Args:
        n (str): cross-plot window name
    
    Returns:
        Number: cross-plot window ID
    """
    global _crossPlotMultiWellIDFindByName_id
    if _crossPlotMultiWellIDFindByName_id is None:
        _crossPlotMultiWellIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellIDFindByName'))
    return _client_service().call(_crossPlotMultiWellIDFindByName_id, *args, **kwargs)


_crossPlotMultiWellOpen_id = None
def crossPlotMultiWellOpen(*args, **kwargs):
    """
    crossPlotMultiWellOpen(n: str, f: str='') -> Number
    
    Open an existing cross-plot
    
    Args:
        n (str): cross-plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _crossPlotMultiWellOpen_id
    if _crossPlotMultiWellOpen_id is None:
        _crossPlotMultiWellOpen_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellOpen'))
    return _client_service().call(_crossPlotMultiWellOpen_id, *args, **kwargs)


_crossPlotMultiWellRemoveAllEquations_id = None
def crossPlotMultiWellRemoveAllEquations(*args, **kwargs):
    """
    crossPlotMultiWellRemoveAllEquations(plotID: Number) -> bool
    
    Remove all equations from an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveAllEquations_id
    if _crossPlotMultiWellRemoveAllEquations_id is None:
        _crossPlotMultiWellRemoveAllEquations_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveAllEquations'))
    return _client_service().call(_crossPlotMultiWellRemoveAllEquations_id, *args, **kwargs)


_crossPlotMultiWellRemoveAllParameterPoint_id = None
def crossPlotMultiWellRemoveAllParameterPoint(*args, **kwargs):
    """
    crossPlotMultiWellRemoveAllParameterPoint(plotID: Number) -> bool
    
    Remove all parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveAllParameterPoint_id
    if _crossPlotMultiWellRemoveAllParameterPoint_id is None:
        _crossPlotMultiWellRemoveAllParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveAllParameterPoint'))
    return _client_service().call(_crossPlotMultiWellRemoveAllParameterPoint_id, *args, **kwargs)


_crossPlotMultiWellRemoveDataset_id = None
def crossPlotMultiWellRemoveDataset(*args, **kwargs):
    """
    crossPlotMultiWellRemoveDataset(plotID: Number, ds: str) -> bool
    
    Remove a dataset from a multi well cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveDataset_id
    if _crossPlotMultiWellRemoveDataset_id is None:
        _crossPlotMultiWellRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveDataset'))
    return _client_service().call(_crossPlotMultiWellRemoveDataset_id, *args, **kwargs)


_crossPlotMultiWellRemoveEquation_id = None
def crossPlotMultiWellRemoveEquation(*args, **kwargs):
    """
    crossPlotMultiWellRemoveEquation(plotID: Number, eq: str) -> bool
    
    Remove an equation from an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        eq (str): equation name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveEquation_id
    if _crossPlotMultiWellRemoveEquation_id is None:
        _crossPlotMultiWellRemoveEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveEquation'))
    return _client_service().call(_crossPlotMultiWellRemoveEquation_id, *args, **kwargs)


_crossPlotMultiWellRemoveParameterLineX_id = None
def crossPlotMultiWellRemoveParameterLineX(*args, **kwargs):
    """
    crossPlotMultiWellRemoveParameterLineX(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter line X in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveParameterLineX_id
    if _crossPlotMultiWellRemoveParameterLineX_id is None:
        _crossPlotMultiWellRemoveParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveParameterLineX'))
    return _client_service().call(_crossPlotMultiWellRemoveParameterLineX_id, *args, **kwargs)


_crossPlotMultiWellRemoveParameterLineY_id = None
def crossPlotMultiWellRemoveParameterLineY(*args, **kwargs):
    """
    crossPlotMultiWellRemoveParameterLineY(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter line Y in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveParameterLineY_id
    if _crossPlotMultiWellRemoveParameterLineY_id is None:
        _crossPlotMultiWellRemoveParameterLineY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveParameterLineY'))
    return _client_service().call(_crossPlotMultiWellRemoveParameterLineY_id, *args, **kwargs)


_crossPlotMultiWellRemoveParameterPoint_id = None
def crossPlotMultiWellRemoveParameterPoint(*args, **kwargs):
    """
    crossPlotMultiWellRemoveParameterPoint(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveParameterPoint_id
    if _crossPlotMultiWellRemoveParameterPoint_id is None:
        _crossPlotMultiWellRemoveParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveParameterPoint'))
    return _client_service().call(_crossPlotMultiWellRemoveParameterPoint_id, *args, **kwargs)


_crossPlotMultiWellRemoveWell_id = None
def crossPlotMultiWellRemoveWell(*args, **kwargs):
    """
    crossPlotMultiWellRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a multi well cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellRemoveWell_id
    if _crossPlotMultiWellRemoveWell_id is None:
        _crossPlotMultiWellRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellRemoveWell'))
    return _client_service().call(_crossPlotMultiWellRemoveWell_id, *args, **kwargs)


_crossPlotMultiWellReverseAxes_id = None
def crossPlotMultiWellReverseAxes(*args, **kwargs):
    """
    crossPlotMultiWellReverseAxes(plotID: Number) -> bool
    
    Reverse the cross-plot axes
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellReverseAxes_id
    if _crossPlotMultiWellReverseAxes_id is None:
        _crossPlotMultiWellReverseAxes_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellReverseAxes'))
    return _client_service().call(_crossPlotMultiWellReverseAxes_id, *args, **kwargs)


_crossPlotMultiWellSave_id = None
def crossPlotMultiWellSave(*args, **kwargs):
    """
    crossPlotMultiWellSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): cross-plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSave_id
    if _crossPlotMultiWellSave_id is None:
        _crossPlotMultiWellSave_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSave'))
    return _client_service().call(_crossPlotMultiWellSave_id, *args, **kwargs)


_crossPlotMultiWellSelectVar_id = None
def crossPlotMultiWellSelectVar(*args, **kwargs):
    """
    crossPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    [DEPRECATED] (use crossPlotMultiWellSelectVariable instead) Change the variable selected among one family's variables in a multi well cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSelectVar_id
    if _crossPlotMultiWellSelectVar_id is None:
        _crossPlotMultiWellSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSelectVar'))
    return _client_service().call(_crossPlotMultiWellSelectVar_id, *args, **kwargs)


_crossPlotMultiWellSelectVariable_id = None
def crossPlotMultiWellSelectVariable(*args, **kwargs):
    """
    crossPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a multi well cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSelectVariable_id
    if _crossPlotMultiWellSelectVariable_id is None:
        _crossPlotMultiWellSelectVariable_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSelectVariable'))
    return _client_service().call(_crossPlotMultiWellSelectVariable_id, *args, **kwargs)


_crossPlotMultiWellSetAdvancedFilter_id = None
def crossPlotMultiWellSetAdvancedFilter(*args, **kwargs):
    """
    crossPlotMultiWellSetAdvancedFilter(plotID: Number, Equation: str) -> bool
    
    Set an advanced filter on the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
        Equation (str): equation defining the filter
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetAdvancedFilter_id
    if _crossPlotMultiWellSetAdvancedFilter_id is None:
        _crossPlotMultiWellSetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetAdvancedFilter'))
    return _client_service().call(_crossPlotMultiWellSetAdvancedFilter_id, *args, **kwargs)


_crossPlotMultiWellSetDensityData_id = None
def crossPlotMultiWellSetDensityData(*args, **kwargs):
    """
    crossPlotMultiWellSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str='', yunit: str='', zunit: str='') -> bool
    
    Set the density values of a multi-well cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        xpos (list): list of x positions values
        ypos (list): list of y positions values
        zdata (list): list of data density values (zsize = (xsize-1)*(ysize-1))
        xunit (str): Optional; x unit
        yunit (str): Optional; y unit
        zunit (str): Optional; z unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetDensityData_id
    if _crossPlotMultiWellSetDensityData_id is None:
        _crossPlotMultiWellSetDensityData_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetDensityData'))
    return _client_service().call(_crossPlotMultiWellSetDensityData_id, *args, **kwargs)


_crossPlotMultiWellSetHistogramVisible_id = None
def crossPlotMultiWellSetHistogramVisible(*args, **kwargs):
    """
    crossPlotMultiWellSetHistogramVisible(plotID: Number, cf: bool) -> bool
    
    Display histograms on the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cf (bool): {0 = 'remove the histograms', 1 = 'display the histograms'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetHistogramVisible_id
    if _crossPlotMultiWellSetHistogramVisible_id is None:
        _crossPlotMultiWellSetHistogramVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetHistogramVisible'))
    return _client_service().call(_crossPlotMultiWellSetHistogramVisible_id, *args, **kwargs)


_crossPlotMultiWellSetName_id = None
def crossPlotMultiWellSetName(*args, **kwargs):
    """
    crossPlotMultiWellSetName(plotID: Number, n: str) -> bool
    
    Change the name of multiwell cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): new cross-plot name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetName_id
    if _crossPlotMultiWellSetName_id is None:
        _crossPlotMultiWellSetName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetName'))
    return _client_service().call(_crossPlotMultiWellSetName_id, *args, **kwargs)


_crossPlotMultiWellSetPaletteBoundaries_id = None
def crossPlotMultiWellSetPaletteBoundaries(*args, **kwargs):
    """
    crossPlotMultiWellSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a multi-well cross plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetPaletteBoundaries_id
    if _crossPlotMultiWellSetPaletteBoundaries_id is None:
        _crossPlotMultiWellSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetPaletteBoundaries'))
    return _client_service().call(_crossPlotMultiWellSetPaletteBoundaries_id, *args, **kwargs)


_crossPlotMultiWellSetPointSizeAxisScale_id = None
def crossPlotMultiWellSetPointSizeAxisScale(*args, **kwargs):
    """
    crossPlotMultiWellSetPointSizeAxisScale(plotID: Number, psasc: int) -> bool
    
    Set the cross-plot point size axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        psasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetPointSizeAxisScale_id
    if _crossPlotMultiWellSetPointSizeAxisScale_id is None:
        _crossPlotMultiWellSetPointSizeAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetPointSizeAxisScale'))
    return _client_service().call(_crossPlotMultiWellSetPointSizeAxisScale_id, *args, **kwargs)


_crossPlotMultiWellSetPointSizeAxisSizeLimits_id = None
def crossPlotMultiWellSetPointSizeAxisSizeLimits(*args, **kwargs):
    """
    crossPlotMultiWellSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number) -> bool
    
    Set min & max sizes of cross-plot point size axis
    
    Args:
        plotID (Number): cross-plot window ID
        psamin (Number): point size axis minimum size
        psamax (Number): point size axis maximum size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetPointSizeAxisSizeLimits_id
    if _crossPlotMultiWellSetPointSizeAxisSizeLimits_id is None:
        _crossPlotMultiWellSetPointSizeAxisSizeLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetPointSizeAxisSizeLimits'))
    return _client_service().call(_crossPlotMultiWellSetPointSizeAxisSizeLimits_id, *args, **kwargs)


_crossPlotMultiWellSetPointSizeAxisType_id = None
def crossPlotMultiWellSetPointSizeAxisType(*args, **kwargs):
    """
    crossPlotMultiWellSetPointSizeAxisType(plotID: Number, psat: int) -> bool
    
    Change the type of cross-plot point size axis
    
    Args:
        plotID (Number): cross-plot window ID
        psat (int): point size axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetPointSizeAxisType_id
    if _crossPlotMultiWellSetPointSizeAxisType_id is None:
        _crossPlotMultiWellSetPointSizeAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetPointSizeAxisType'))
    return _client_service().call(_crossPlotMultiWellSetPointSizeAxisType_id, *args, **kwargs)


_crossPlotMultiWellSetPointSizeAxisUserLimits_id = None
def crossPlotMultiWellSetPointSizeAxisUserLimits(*args, **kwargs):
    """
    crossPlotMultiWellSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number) -> bool
    
    Set min & max values of cross-plot point size axis
    
    Args:
        plotID (Number): cross-plot window ID
        psamin (Number): point size axis minimum
        psamax (Number): point size axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetPointSizeAxisUserLimits_id
    if _crossPlotMultiWellSetPointSizeAxisUserLimits_id is None:
        _crossPlotMultiWellSetPointSizeAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetPointSizeAxisUserLimits'))
    return _client_service().call(_crossPlotMultiWellSetPointSizeAxisUserLimits_id, *args, **kwargs)


_crossPlotMultiWellSetXAxisInverse_id = None
def crossPlotMultiWellSetXAxisInverse(*args, **kwargs):
    """
    crossPlotMultiWellSetXAxisInverse(plotID: Number, xainv: bool) -> bool
    
    Inverse the cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetXAxisInverse_id
    if _crossPlotMultiWellSetXAxisInverse_id is None:
        _crossPlotMultiWellSetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetXAxisInverse'))
    return _client_service().call(_crossPlotMultiWellSetXAxisInverse_id, *args, **kwargs)


_crossPlotMultiWellSetXAxisScale_id = None
def crossPlotMultiWellSetXAxisScale(*args, **kwargs):
    """
    crossPlotMultiWellSetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Set the cross-plot X axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetXAxisScale_id
    if _crossPlotMultiWellSetXAxisScale_id is None:
        _crossPlotMultiWellSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetXAxisScale'))
    return _client_service().call(_crossPlotMultiWellSetXAxisScale_id, *args, **kwargs)


_crossPlotMultiWellSetXAxisType_id = None
def crossPlotMultiWellSetXAxisType(*args, **kwargs):
    """
    crossPlotMultiWellSetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetXAxisType_id
    if _crossPlotMultiWellSetXAxisType_id is None:
        _crossPlotMultiWellSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetXAxisType'))
    return _client_service().call(_crossPlotMultiWellSetXAxisType_id, *args, **kwargs)


_crossPlotMultiWellSetXAxisUnit_id = None
def crossPlotMultiWellSetXAxisUnit(*args, **kwargs):
    """
    crossPlotMultiWellSetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetXAxisUnit_id
    if _crossPlotMultiWellSetXAxisUnit_id is None:
        _crossPlotMultiWellSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetXAxisUnit'))
    return _client_service().call(_crossPlotMultiWellSetXAxisUnit_id, *args, **kwargs)


_crossPlotMultiWellSetXAxisUserLimits_id = None
def crossPlotMultiWellSetXAxisUserLimits(*args, **kwargs):
    """
    crossPlotMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetXAxisUserLimits_id
    if _crossPlotMultiWellSetXAxisUserLimits_id is None:
        _crossPlotMultiWellSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetXAxisUserLimits'))
    return _client_service().call(_crossPlotMultiWellSetXAxisUserLimits_id, *args, **kwargs)


_crossPlotMultiWellSetYAxisInverse_id = None
def crossPlotMultiWellSetYAxisInverse(*args, **kwargs):
    """
    crossPlotMultiWellSetYAxisInverse(plotID: Number, yainv: bool) -> bool
    
    Inverse the cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetYAxisInverse_id
    if _crossPlotMultiWellSetYAxisInverse_id is None:
        _crossPlotMultiWellSetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetYAxisInverse'))
    return _client_service().call(_crossPlotMultiWellSetYAxisInverse_id, *args, **kwargs)


_crossPlotMultiWellSetYAxisScale_id = None
def crossPlotMultiWellSetYAxisScale(*args, **kwargs):
    """
    crossPlotMultiWellSetYAxisScale(plotID: Number, yasc: int) -> bool
    
    Set the cross-plot Y axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        yasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetYAxisScale_id
    if _crossPlotMultiWellSetYAxisScale_id is None:
        _crossPlotMultiWellSetYAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetYAxisScale'))
    return _client_service().call(_crossPlotMultiWellSetYAxisScale_id, *args, **kwargs)


_crossPlotMultiWellSetYAxisType_id = None
def crossPlotMultiWellSetYAxisType(*args, **kwargs):
    """
    crossPlotMultiWellSetYAxisType(plotID: Number, yat: int) -> bool
    
    Change the type of cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yat (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetYAxisType_id
    if _crossPlotMultiWellSetYAxisType_id is None:
        _crossPlotMultiWellSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetYAxisType'))
    return _client_service().call(_crossPlotMultiWellSetYAxisType_id, *args, **kwargs)


_crossPlotMultiWellSetYAxisUnit_id = None
def crossPlotMultiWellSetYAxisUnit(*args, **kwargs):
    """
    crossPlotMultiWellSetYAxisUnit(plotID: Number, yau: str) -> bool
    
    Change the unit of cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yau (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetYAxisUnit_id
    if _crossPlotMultiWellSetYAxisUnit_id is None:
        _crossPlotMultiWellSetYAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetYAxisUnit'))
    return _client_service().call(_crossPlotMultiWellSetYAxisUnit_id, *args, **kwargs)


_crossPlotMultiWellSetYAxisUserLimits_id = None
def crossPlotMultiWellSetYAxisUserLimits(*args, **kwargs):
    """
    crossPlotMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number) -> bool
    
    Set min & max values of cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yamin (Number): Y axis minimum
        yamax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetYAxisUserLimits_id
    if _crossPlotMultiWellSetYAxisUserLimits_id is None:
        _crossPlotMultiWellSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetYAxisUserLimits'))
    return _client_service().call(_crossPlotMultiWellSetYAxisUserLimits_id, *args, **kwargs)


_crossPlotMultiWellSetZonation_id = None
def crossPlotMultiWellSetZonation(*args, **kwargs):
    """
    crossPlotMultiWellSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotMultiWellSetZonation_id
    if _crossPlotMultiWellSetZonation_id is None:
        _crossPlotMultiWellSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotMultiWellSetZonation'))
    return _client_service().call(_crossPlotMultiWellSetZonation_id, *args, **kwargs)


_crossPlotOpen_id = None
def crossPlotOpen(*args, **kwargs):
    """
    crossPlotOpen(n: str, f: str='') -> Number
    
    Open an existing cross-plot
    
    Args:
        n (str): cross-plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _crossPlotOpen_id
    if _crossPlotOpen_id is None:
        _crossPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotOpen'))
    return _client_service().call(_crossPlotOpen_id, *args, **kwargs)


_crossPlotPointSizeChange_id = None
def crossPlotPointSizeChange(*args, **kwargs):
    """
    crossPlotPointSizeChange(plotID: Number, Vname: str, ScaleId: str='') -> bool
    
    Set the point size to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable point size name
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotPointSizeChange_id
    if _crossPlotPointSizeChange_id is None:
        _crossPlotPointSizeChange_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotPointSizeChange'))
    return _client_service().call(_crossPlotPointSizeChange_id, *args, **kwargs)


_crossPlotRemoveAllEquations_id = None
def crossPlotRemoveAllEquations(*args, **kwargs):
    """
    crossPlotRemoveAllEquations(plotID: Number) -> bool
    
    Remove all equations from an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveAllEquations_id
    if _crossPlotRemoveAllEquations_id is None:
        _crossPlotRemoveAllEquations_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveAllEquations'))
    return _client_service().call(_crossPlotRemoveAllEquations_id, *args, **kwargs)


_crossPlotRemoveAllParameterPoint_id = None
def crossPlotRemoveAllParameterPoint(*args, **kwargs):
    """
    crossPlotRemoveAllParameterPoint(plotID: Number) -> bool
    
    Remove all parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveAllParameterPoint_id
    if _crossPlotRemoveAllParameterPoint_id is None:
        _crossPlotRemoveAllParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveAllParameterPoint'))
    return _client_service().call(_crossPlotRemoveAllParameterPoint_id, *args, **kwargs)


_crossPlotRemoveChart_id = None
def crossPlotRemoveChart(*args, **kwargs):
    """
    crossPlotRemoveChart(plotID: Number, cn: str) -> bool
    
    Remove a chart from the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cn (str): chart level\\chart name. Chart level is optional and can be:
        Techlog (default), Company, User, Project.
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveChart_id
    if _crossPlotRemoveChart_id is None:
        _crossPlotRemoveChart_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveChart'))
    return _client_service().call(_crossPlotRemoveChart_id, *args, **kwargs)


_crossPlotRemoveEquation_id = None
def crossPlotRemoveEquation(*args, **kwargs):
    """
    crossPlotRemoveEquation(plotID: Number, eq: str) -> bool
    
    Remove an equation from an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        eq (str): equation name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveEquation_id
    if _crossPlotRemoveEquation_id is None:
        _crossPlotRemoveEquation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveEquation'))
    return _client_service().call(_crossPlotRemoveEquation_id, *args, **kwargs)


_crossPlotRemoveParameterLineX_id = None
def crossPlotRemoveParameterLineX(*args, **kwargs):
    """
    crossPlotRemoveParameterLineX(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter line X in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveParameterLineX_id
    if _crossPlotRemoveParameterLineX_id is None:
        _crossPlotRemoveParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveParameterLineX'))
    return _client_service().call(_crossPlotRemoveParameterLineX_id, *args, **kwargs)


_crossPlotRemoveParameterLineY_id = None
def crossPlotRemoveParameterLineY(*args, **kwargs):
    """
    crossPlotRemoveParameterLineY(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter line Y in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveParameterLineY_id
    if _crossPlotRemoveParameterLineY_id is None:
        _crossPlotRemoveParameterLineY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveParameterLineY'))
    return _client_service().call(_crossPlotRemoveParameterLineY_id, *args, **kwargs)


_crossPlotRemoveParameterPoint_id = None
def crossPlotRemoveParameterPoint(*args, **kwargs):
    """
    crossPlotRemoveParameterPoint(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter point in the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotRemoveParameterPoint_id
    if _crossPlotRemoveParameterPoint_id is None:
        _crossPlotRemoveParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotRemoveParameterPoint'))
    return _client_service().call(_crossPlotRemoveParameterPoint_id, *args, **kwargs)


_crossPlotReverseAxes_id = None
def crossPlotReverseAxes(*args, **kwargs):
    """
    crossPlotReverseAxes(plotID: Number) -> bool
    
    Reverse the cross-plot axes
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotReverseAxes_id
    if _crossPlotReverseAxes_id is None:
        _crossPlotReverseAxes_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotReverseAxes'))
    return _client_service().call(_crossPlotReverseAxes_id, *args, **kwargs)


_crossPlotSave_id = None
def crossPlotSave(*args, **kwargs):
    """
    crossPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): cross-plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSave_id
    if _crossPlotSave_id is None:
        _crossPlotSave_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSave'))
    return _client_service().call(_crossPlotSave_id, *args, **kwargs)


_crossPlotSelectFilter_id = None
def crossPlotSelectFilter(*args, **kwargs):
    """
    crossPlotSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): cross-plot window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSelectFilter_id
    if _crossPlotSelectFilter_id is None:
        _crossPlotSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSelectFilter'))
    return _client_service().call(_crossPlotSelectFilter_id, *args, **kwargs)


_crossPlotSetAdvancedFilter_id = None
def crossPlotSetAdvancedFilter(*args, **kwargs):
    """
    crossPlotSetAdvancedFilter(plotID: Number, Equation: str) -> bool
    
    Set an advanced filter on the cross plot
    
    Args:
        plotID (Number): cross-plot window ID
        Equation (str): equation defining the filter
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetAdvancedFilter_id
    if _crossPlotSetAdvancedFilter_id is None:
        _crossPlotSetAdvancedFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetAdvancedFilter'))
    return _client_service().call(_crossPlotSetAdvancedFilter_id, *args, **kwargs)


_crossPlotSetColor_id = None
def crossPlotSetColor(*args, **kwargs):
    """
    crossPlotSetColor(plotID: Number, Vname: str, ScaleId: str='') -> bool
    
    Set the color to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable name for the color
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetColor_id
    if _crossPlotSetColor_id is None:
        _crossPlotSetColor_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetColor'))
    return _client_service().call(_crossPlotSetColor_id, *args, **kwargs)


_crossPlotSetColor2_id = None
def crossPlotSetColor2(*args, **kwargs):
    """
    crossPlotSetColor2(plotID: Number, Vname: str) -> bool
    
    [DEPRECATED] Set the second color to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable second color name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetColor2_id
    if _crossPlotSetColor2_id is None:
        _crossPlotSetColor2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetColor2'))
    return _client_service().call(_crossPlotSetColor2_id, *args, **kwargs)


_crossPlotSetColorValues_id = None
def crossPlotSetColorValues(*args, **kwargs):
    """
    crossPlotSetColorValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='', ScaleId: str='') -> bool
    
    Set a fictive set of user variables to the color scale of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetColorValues_id
    if _crossPlotSetColorValues_id is None:
        _crossPlotSetColorValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetColorValues'))
    return _client_service().call(_crossPlotSetColorValues_id, *args, **kwargs)


_crossPlotSetColour2Values_id = None
def crossPlotSetColour2Values(*args, **kwargs):
    """
    crossPlotSetColour2Values(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    [DEPRECATED] Set a fictive set of user variables to the second color scale of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetColour2Values_id
    if _crossPlotSetColour2Values_id is None:
        _crossPlotSetColour2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetColour2Values'))
    return _client_service().call(_crossPlotSetColour2Values_id, *args, **kwargs)


_crossPlotSetColourValues_id = None
def crossPlotSetColourValues(*args, **kwargs):
    """
    crossPlotSetColourValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='', ScaleId: str='') -> bool
    
    [DEPRECATED] (use crossPlotSetColorValues instead) Set a fictive set of user variables to the color scale of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetColourValues_id
    if _crossPlotSetColourValues_id is None:
        _crossPlotSetColourValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetColourValues'))
    return _client_service().call(_crossPlotSetColourValues_id, *args, **kwargs)


_crossPlotSetDatum_id = None
def crossPlotSetDatum(*args, **kwargs):
    """
    crossPlotSetDatum(plotID: Number, lim: bool, ymin: Number=0, ymax: Number=0) -> bool
    
    Change the reference limitation on cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        lim (bool): 0 for 'whole datum' / 1 for 'user values'
        ymin (Number): Optional; top limitation
        ymax (Number): Optional; bottom limitation
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetDatum_id
    if _crossPlotSetDatum_id is None:
        _crossPlotSetDatum_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetDatum'))
    return _client_service().call(_crossPlotSetDatum_id, *args, **kwargs)


_crossPlotSetDensityData_id = None
def crossPlotSetDensityData(*args, **kwargs):
    """
    crossPlotSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str='', yunit: str='', zunit: str='') -> bool
    
    Set the density values of a cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        xpos (list): list of x positions values
        ypos (list): list of y positions values
        zdata (list): list of data density values (zsize = (xsize-1)*(ysize-1))
        xunit (str): Optional; x unit
        yunit (str): Optional; y unit
        zunit (str): Optional; z unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetDensityData_id
    if _crossPlotSetDensityData_id is None:
        _crossPlotSetDensityData_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetDensityData'))
    return _client_service().call(_crossPlotSetDensityData_id, *args, **kwargs)


_crossPlotSetFilter_id = None
def crossPlotSetFilter(*args, **kwargs):
    """
    crossPlotSetFilter(plotID: Number, Vname: str, ScaleId: str='') -> bool
    
    Set the variable as a filter
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): filter variable name
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetFilter_id
    if _crossPlotSetFilter_id is None:
        _crossPlotSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetFilter'))
    return _client_service().call(_crossPlotSetFilter_id, *args, **kwargs)


_crossPlotSetFilterValues_id = None
def crossPlotSetFilterValues(*args, **kwargs):
    """
    crossPlotSetFilterValues(plotID: Number, f: str) -> bool
    
    Set the variable as a filter
    
    Args:
        plotID (Number): spectrum window ID
        f (str): variable filter
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetFilterValues_id
    if _crossPlotSetFilterValues_id is None:
        _crossPlotSetFilterValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetFilterValues'))
    return _client_service().call(_crossPlotSetFilterValues_id, *args, **kwargs)


_crossPlotSetFirstScaleName_id = None
def crossPlotSetFirstScaleName(*args, **kwargs):
    """
    crossPlotSetFirstScaleName(plotID: Number, n: str) -> bool
    
    Change the name of first scale in a mono cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): new first scale name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetFirstScaleName_id
    if _crossPlotSetFirstScaleName_id is None:
        _crossPlotSetFirstScaleName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetFirstScaleName'))
    return _client_service().call(_crossPlotSetFirstScaleName_id, *args, **kwargs)


_crossPlotSetGridVisible_id = None
def crossPlotSetGridVisible(*args, **kwargs):
    """
    crossPlotSetGridVisible(plotID: Number, grid_X: int=2, grid_Y: int=2) -> bool
    
    Hide or Display the Grid in all plots
    
    Args:
        plotID (Number): window ID
        grid_X (int): Optional; X grid visibility state: {0 = 'HIDDEN', 1 = 'ONLY_PRIMARY', 2 = 'BOTH'}
        grid_Y (int): Optional; Y grid visibility state: {0 = 'HIDDEN', 1 = 'ONLY_PRIMARY', 2 = 'BOTH'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetGridVisible_id
    if _crossPlotSetGridVisible_id is None:
        _crossPlotSetGridVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetGridVisible'))
    return _client_service().call(_crossPlotSetGridVisible_id, *args, **kwargs)


_crossPlotSetHistogramVisible_id = None
def crossPlotSetHistogramVisible(*args, **kwargs):
    """
    crossPlotSetHistogramVisible(plotID: Number, cf: bool) -> bool
    
    Display histograms on the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cf (bool): {0 = 'remove the histograms', 1 = 'display the histograms'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetHistogramVisible_id
    if _crossPlotSetHistogramVisible_id is None:
        _crossPlotSetHistogramVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetHistogramVisible'))
    return _client_service().call(_crossPlotSetHistogramVisible_id, *args, **kwargs)


_crossPlotSetHistogramXYVisible_id = None
def crossPlotSetHistogramXYVisible(*args, **kwargs):
    """
    crossPlotSetHistogramXYVisible(plotID: Number, cf: str) -> bool
    
    Display histograms on the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cf (str): {'NONE' = 'remove the histograms', 'HISTO_X' = 'display the histogram for X axis',
        'HISTO_Y' = 'display the histogram for Y axis', 'BOTH' = 'display the histograms'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetHistogramXYVisible_id
    if _crossPlotSetHistogramXYVisible_id is None:
        _crossPlotSetHistogramXYVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetHistogramXYVisible'))
    return _client_service().call(_crossPlotSetHistogramXYVisible_id, *args, **kwargs)


_crossPlotSetLabel_id = None
def crossPlotSetLabel(*args, **kwargs):
    """
    crossPlotSetLabel(plotID: Number, Vname: str, ScaleId: str='') -> bool
    
    Set the a label to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable label name
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetLabel_id
    if _crossPlotSetLabel_id is None:
        _crossPlotSetLabel_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetLabel'))
    return _client_service().call(_crossPlotSetLabel_id, *args, **kwargs)


_crossPlotSetLabel2_id = None
def crossPlotSetLabel2(*args, **kwargs):
    """
    crossPlotSetLabel2(plotID: Number, Vname: str) -> bool
    
    [DEPRECATED] Set the a second label to an existing cross-plot
    
    Args:
        plotID (Number): cross-plot window windowID
        Vname (str): variable second label name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetLabel2_id
    if _crossPlotSetLabel2_id is None:
        _crossPlotSetLabel2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetLabel2'))
    return _client_service().call(_crossPlotSetLabel2_id, *args, **kwargs)


_crossPlotSetLabelValues_id = None
def crossPlotSetLabelValues(*args, **kwargs):
    """
    crossPlotSetLabelValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='', ScaleId: str='') -> bool
    
    Set a fictive set of user variables to the label axis of a cross-plot
    The variable name must contain two dots, i.e 'Well.Dataset.Variable'
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetLabelValues_id
    if _crossPlotSetLabelValues_id is None:
        _crossPlotSetLabelValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetLabelValues'))
    return _client_service().call(_crossPlotSetLabelValues_id, *args, **kwargs)


_crossPlotSetLegendX_id = None
def crossPlotSetLegendX(*args, **kwargs):
    """
    crossPlotSetLegendX(plotID: Number, legendx: str) -> bool
    
    Set the cross-plot legend for X axis
    
    Args:
        plotID (Number): cross-plot window ID
        legendx (str): legendx
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetLegendX_id
    if _crossPlotSetLegendX_id is None:
        _crossPlotSetLegendX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetLegendX'))
    return _client_service().call(_crossPlotSetLegendX_id, *args, **kwargs)


_crossPlotSetLegendY_id = None
def crossPlotSetLegendY(*args, **kwargs):
    """
    crossPlotSetLegendY(plotID: Number, legendy: str) -> bool
    
    Set the cross-plot legend for Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        legendy (str): legendy
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetLegendY_id
    if _crossPlotSetLegendY_id is None:
        _crossPlotSetLegendY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetLegendY'))
    return _client_service().call(_crossPlotSetLegendY_id, *args, **kwargs)


_crossPlotSetName_id = None
def crossPlotSetName(*args, **kwargs):
    """
    crossPlotSetName(plotID: Number, n: str) -> bool
    
    Change the name of mono cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): new cross-plot name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetName_id
    if _crossPlotSetName_id is None:
        _crossPlotSetName_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetName'))
    return _client_service().call(_crossPlotSetName_id, *args, **kwargs)


_crossPlotSetPaletteBoundaries_id = None
def crossPlotSetPaletteBoundaries(*args, **kwargs):
    """
    crossPlotSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a single-well cross plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetPaletteBoundaries_id
    if _crossPlotSetPaletteBoundaries_id is None:
        _crossPlotSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetPaletteBoundaries'))
    return _client_service().call(_crossPlotSetPaletteBoundaries_id, *args, **kwargs)


_crossPlotSetPointSizeAxisScale_id = None
def crossPlotSetPointSizeAxisScale(*args, **kwargs):
    """
    crossPlotSetPointSizeAxisScale(plotID: Number, psasc: int) -> bool
    
    Set the cross-plot point size axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        psasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetPointSizeAxisScale_id
    if _crossPlotSetPointSizeAxisScale_id is None:
        _crossPlotSetPointSizeAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetPointSizeAxisScale'))
    return _client_service().call(_crossPlotSetPointSizeAxisScale_id, *args, **kwargs)


_crossPlotSetPointSizeAxisSizeLimits_id = None
def crossPlotSetPointSizeAxisSizeLimits(*args, **kwargs):
    """
    crossPlotSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number) -> bool
    
    Set min & max sizes of cross-plot point size axis
    
    Args:
        plotID (Number): cross-plot window ID
        psamin (Number): point size axis minimum size
        psamax (Number): point size axis maximum size
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetPointSizeAxisSizeLimits_id
    if _crossPlotSetPointSizeAxisSizeLimits_id is None:
        _crossPlotSetPointSizeAxisSizeLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetPointSizeAxisSizeLimits'))
    return _client_service().call(_crossPlotSetPointSizeAxisSizeLimits_id, *args, **kwargs)


_crossPlotSetPointSizeAxisType_id = None
def crossPlotSetPointSizeAxisType(*args, **kwargs):
    """
    crossPlotSetPointSizeAxisType(plotID: Number, psat: int) -> bool
    
    Change the type of cross-plot point size axis
    
    Args:
        plotID (Number): cross-plot window ID
        psat (int): point size axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetPointSizeAxisType_id
    if _crossPlotSetPointSizeAxisType_id is None:
        _crossPlotSetPointSizeAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetPointSizeAxisType'))
    return _client_service().call(_crossPlotSetPointSizeAxisType_id, *args, **kwargs)


_crossPlotSetPointSizeAxisUserLimits_id = None
def crossPlotSetPointSizeAxisUserLimits(*args, **kwargs):
    """
    crossPlotSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number) -> bool
    
    Set min & max values of cross-plot point size axis
    
    Args:
        plotID (Number): cross-plot window ID
        psamin (Number): point size axis minimum
        psamax (Number): point size axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetPointSizeAxisUserLimits_id
    if _crossPlotSetPointSizeAxisUserLimits_id is None:
        _crossPlotSetPointSizeAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetPointSizeAxisUserLimits'))
    return _client_service().call(_crossPlotSetPointSizeAxisUserLimits_id, *args, **kwargs)


_crossPlotSetSubtitle_id = None
def crossPlotSetSubtitle(*args, **kwargs):
    """
    crossPlotSetSubtitle(plotID: Number, subtitle: str) -> bool
    
    Set the cross-plot subtitle
    
    Args:
        plotID (Number): cross-plot window ID
        subtitle (str): subtitle
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetSubtitle_id
    if _crossPlotSetSubtitle_id is None:
        _crossPlotSetSubtitle_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetSubtitle'))
    return _client_service().call(_crossPlotSetSubtitle_id, *args, **kwargs)


_crossPlotSetTitle_id = None
def crossPlotSetTitle(*args, **kwargs):
    """
    crossPlotSetTitle(plotID: Number, title: str) -> bool
    
    Set the cross-plot title
    
    Args:
        plotID (Number): cross-plot window ID
        title (str): title
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetTitle_id
    if _crossPlotSetTitle_id is None:
        _crossPlotSetTitle_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetTitle'))
    return _client_service().call(_crossPlotSetTitle_id, *args, **kwargs)


_crossPlotSetX_id = None
def crossPlotSetX(*args, **kwargs):
    """
    crossPlotSetX(plotID: Number, Vname: str, ScaleId: str='') -> bool
    
    Set the variable to X axis
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable X name
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetX_id
    if _crossPlotSetX_id is None:
        _crossPlotSetX_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetX'))
    return _client_service().call(_crossPlotSetX_id, *args, **kwargs)


_crossPlotSetX2_id = None
def crossPlotSetX2(*args, **kwargs):
    """
    crossPlotSetX2(plotID: Number, Vname: str) -> bool
    
    [DEPRECATED] Set the variable to the second X axis
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable X2 name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetX2_id
    if _crossPlotSetX2_id is None:
        _crossPlotSetX2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetX2'))
    return _client_service().call(_crossPlotSetX2_id, *args, **kwargs)


_crossPlotSetX2Values_id = None
def crossPlotSetX2Values(*args, **kwargs):
    """
    crossPlotSetX2Values(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    [DEPRECATED] Set a fictive set of user variables to the second X axis of a cross-plot
    The variable name must contain two dots, i.e 'Well.Dataset.Variable'
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetX2Values_id
    if _crossPlotSetX2Values_id is None:
        _crossPlotSetX2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetX2Values'))
    return _client_service().call(_crossPlotSetX2Values_id, *args, **kwargs)


_crossPlotSetXAxisInverse_id = None
def crossPlotSetXAxisInverse(*args, **kwargs):
    """
    crossPlotSetXAxisInverse(plotID: Number, xainv: bool) -> bool
    
    Inverse the cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetXAxisInverse_id
    if _crossPlotSetXAxisInverse_id is None:
        _crossPlotSetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXAxisInverse'))
    return _client_service().call(_crossPlotSetXAxisInverse_id, *args, **kwargs)


_crossPlotSetXAxisScale_id = None
def crossPlotSetXAxisScale(*args, **kwargs):
    """
    crossPlotSetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Set the cross-plot X axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetXAxisScale_id
    if _crossPlotSetXAxisScale_id is None:
        _crossPlotSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXAxisScale'))
    return _client_service().call(_crossPlotSetXAxisScale_id, *args, **kwargs)


_crossPlotSetXAxisType_id = None
def crossPlotSetXAxisType(*args, **kwargs):
    """
    crossPlotSetXAxisType(plotID: Number, xat: int, ScaleId: str='') -> bool
    
    Change the type of cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetXAxisType_id
    if _crossPlotSetXAxisType_id is None:
        _crossPlotSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXAxisType'))
    return _client_service().call(_crossPlotSetXAxisType_id, *args, **kwargs)


_crossPlotSetXAxisUnit_id = None
def crossPlotSetXAxisUnit(*args, **kwargs):
    """
    crossPlotSetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetXAxisUnit_id
    if _crossPlotSetXAxisUnit_id is None:
        _crossPlotSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXAxisUnit'))
    return _client_service().call(_crossPlotSetXAxisUnit_id, *args, **kwargs)


_crossPlotSetXAxisUserLimits_id = None
def crossPlotSetXAxisUserLimits(*args, **kwargs):
    """
    crossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number, scaleID: str=None) -> bool
    
    Set min & max values of cross-plot X axis for the given scale
    
    Args:
        plotID (Number): cross-plot window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
        scaleID (str): Optional; scale ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetXAxisUserLimits_id
    if _crossPlotSetXAxisUserLimits_id is None:
        _crossPlotSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXAxisUserLimits'))
    return _client_service().call(_crossPlotSetXAxisUserLimits_id, *args, **kwargs)


_crossPlotSetXHistogramBinCount_id = None
def crossPlotSetXHistogramBinCount(*args, **kwargs):
    """
    crossPlotSetXHistogramBinCount(plotID: Number, binCount: int) -> bool
    
    Change the bin count on histogram Horizontal
    
    Args:
        plotID (Number): cross-plot window ID
        binCount (int): the new bin count
    
    Returns:
        bool: operation exit status(TRUE,FALSE or NONE)
    """
    global _crossPlotSetXHistogramBinCount_id
    if _crossPlotSetXHistogramBinCount_id is None:
        _crossPlotSetXHistogramBinCount_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXHistogramBinCount'))
    return _client_service().call(_crossPlotSetXHistogramBinCount_id, *args, **kwargs)


_crossPlotSetXHistogramCumulativeFrequencyVisible_id = None
def crossPlotSetXHistogramCumulativeFrequencyVisible(*args, **kwargs):
    """
    crossPlotSetXHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool) -> bool
    
    Change the cumulative frequency visibility state on histogram Horizontal
    
    Args:
        plotID (Number): cross-plot window ID
        binCount (bool): new visibility state
    
    Returns:
        bool: operation exit status(TRUE,FALSE or NONE)
    """
    global _crossPlotSetXHistogramCumulativeFrequencyVisible_id
    if _crossPlotSetXHistogramCumulativeFrequencyVisible_id is None:
        _crossPlotSetXHistogramCumulativeFrequencyVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXHistogramCumulativeFrequencyVisible'))
    return _client_service().call(_crossPlotSetXHistogramCumulativeFrequencyVisible_id, *args, **kwargs)


_crossPlotSetXValues_id = None
def crossPlotSetXValues(*args, **kwargs):
    """
    crossPlotSetXValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='', ScaleId: str='') -> bool
    
    Set a fictive set of user variables to the X axis of a cross-plot
    The variable name must contain two dots, i.e 'Well.Dataset.Variable'
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetXValues_id
    if _crossPlotSetXValues_id is None:
        _crossPlotSetXValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetXValues'))
    return _client_service().call(_crossPlotSetXValues_id, *args, **kwargs)


_crossPlotSetY_id = None
def crossPlotSetY(*args, **kwargs):
    """
    crossPlotSetY(plotID: Number, Vname: str, ScaleId: str='') -> bool
    
    Set the variable to Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable Y name
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetY_id
    if _crossPlotSetY_id is None:
        _crossPlotSetY_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetY'))
    return _client_service().call(_crossPlotSetY_id, *args, **kwargs)


_crossPlotSetY2_id = None
def crossPlotSetY2(*args, **kwargs):
    """
    crossPlotSetY2(plotID: Number, Vname: str) -> bool
    
    [DEPRECATED] Set the variable to the second Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        Vname (str): variable Y2 name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetY2_id
    if _crossPlotSetY2_id is None:
        _crossPlotSetY2_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetY2'))
    return _client_service().call(_crossPlotSetY2_id, *args, **kwargs)


_crossPlotSetY2Values_id = None
def crossPlotSetY2Values(*args, **kwargs):
    """
    crossPlotSetY2Values(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    [DEPRECATED] Set a fictive set of user variables to the second Y axis of a cross-plot
    The variable name must contain two dots, i.e 'Well.Dataset.Variable'
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetY2Values_id
    if _crossPlotSetY2Values_id is None:
        _crossPlotSetY2Values_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetY2Values'))
    return _client_service().call(_crossPlotSetY2Values_id, *args, **kwargs)


_crossPlotSetYAxisInverse_id = None
def crossPlotSetYAxisInverse(*args, **kwargs):
    """
    crossPlotSetYAxisInverse(plotID: Number, yainv: bool) -> bool
    
    Inverse the cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetYAxisInverse_id
    if _crossPlotSetYAxisInverse_id is None:
        _crossPlotSetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYAxisInverse'))
    return _client_service().call(_crossPlotSetYAxisInverse_id, *args, **kwargs)


_crossPlotSetYAxisScale_id = None
def crossPlotSetYAxisScale(*args, **kwargs):
    """
    crossPlotSetYAxisScale(plotID: Number, yasc: int) -> bool
    
    Set the cross-plot Y axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        yasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetYAxisScale_id
    if _crossPlotSetYAxisScale_id is None:
        _crossPlotSetYAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYAxisScale'))
    return _client_service().call(_crossPlotSetYAxisScale_id, *args, **kwargs)


_crossPlotSetYAxisType_id = None
def crossPlotSetYAxisType(*args, **kwargs):
    """
    crossPlotSetYAxisType(plotID: Number, yat: int, ScaleId: str='') -> bool
    
    Change the type of cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yat (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetYAxisType_id
    if _crossPlotSetYAxisType_id is None:
        _crossPlotSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYAxisType'))
    return _client_service().call(_crossPlotSetYAxisType_id, *args, **kwargs)


_crossPlotSetYAxisUnit_id = None
def crossPlotSetYAxisUnit(*args, **kwargs):
    """
    crossPlotSetYAxisUnit(plotID: Number, yau: str) -> bool
    
    Change the unit of cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yau (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetYAxisUnit_id
    if _crossPlotSetYAxisUnit_id is None:
        _crossPlotSetYAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYAxisUnit'))
    return _client_service().call(_crossPlotSetYAxisUnit_id, *args, **kwargs)


_crossPlotSetYAxisUserLimits_id = None
def crossPlotSetYAxisUserLimits(*args, **kwargs):
    """
    crossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number, scaleID: str=None) -> bool
    
    Set min & max values of cross-plot Y axis for the given scale
    
    Args:
        plotID (Number): cross-plot window ID
        yamin (Number): Y axis minimum
        yamax (Number): Y axis maximum
        scaleID (str): Optional; scale ID
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetYAxisUserLimits_id
    if _crossPlotSetYAxisUserLimits_id is None:
        _crossPlotSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYAxisUserLimits'))
    return _client_service().call(_crossPlotSetYAxisUserLimits_id, *args, **kwargs)


_crossPlotSetYHistogramBinCount_id = None
def crossPlotSetYHistogramBinCount(*args, **kwargs):
    """
    crossPlotSetYHistogramBinCount(plotID: Number, binCount: int) -> bool
    
    Change the bin count on histogram Vertical
    
    Args:
        plotID (Number): cross-plot window ID
        binCount (int): the new bin count
    
    Returns:
        bool: operation exit status(TRUE,FALSE or NONE)
    """
    global _crossPlotSetYHistogramBinCount_id
    if _crossPlotSetYHistogramBinCount_id is None:
        _crossPlotSetYHistogramBinCount_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYHistogramBinCount'))
    return _client_service().call(_crossPlotSetYHistogramBinCount_id, *args, **kwargs)


_crossPlotSetYHistogramCumulativeFrequencyVisible_id = None
def crossPlotSetYHistogramCumulativeFrequencyVisible(*args, **kwargs):
    """
    crossPlotSetYHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool) -> bool
    
    Change the cumulative frequency visibility state on histogram Vertical
    
    Args:
        plotID (Number): cross-plot window ID
        binCount (bool): new visibility state
    
    Returns:
        bool: operation exit status(TRUE,FALSE or NONE)
    """
    global _crossPlotSetYHistogramCumulativeFrequencyVisible_id
    if _crossPlotSetYHistogramCumulativeFrequencyVisible_id is None:
        _crossPlotSetYHistogramCumulativeFrequencyVisible_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYHistogramCumulativeFrequencyVisible'))
    return _client_service().call(_crossPlotSetYHistogramCumulativeFrequencyVisible_id, *args, **kwargs)


_crossPlotSetYValues_id = None
def crossPlotSetYValues(*args, **kwargs):
    """
    crossPlotSetYValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='', ScaleId: str='') -> bool
    
    Set a fictive set of user variables to the Y axis of a cross-plot
    The variable name must contain two dots, i.e 'Well.Dataset.Variable'
    
    Args:
        plotID (Number): cross-plot window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
        ScaleId (str): Optional; Scale id
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetYValues_id
    if _crossPlotSetYValues_id is None:
        _crossPlotSetYValues_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetYValues'))
    return _client_service().call(_crossPlotSetYValues_id, *args, **kwargs)


_crossPlotSetZonation_id = None
def crossPlotSetZonation(*args, **kwargs):
    """
    crossPlotSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _crossPlotSetZonation_id
    if _crossPlotSetZonation_id is None:
        _crossPlotSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'crossPlotSetZonation'))
    return _client_service().call(_crossPlotSetZonation_id, *args, **kwargs)


_crossplotAddRegression_id = None
def crossplotAddRegression(*args, **kwargs):
    """
    crossplotAddRegression(plotID: Number, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Add a regression in a cross-plot & sets the color
    
    Args:
        plotID (Number): cross-plot window ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _crossplotAddRegression_id
    if _crossplotAddRegression_id is None:
        _crossplotAddRegression_id = _client_service().register_static_object(('TechlogPlot', 'crossplotAddRegression'))
    return _client_service().call(_crossplotAddRegression_id, *args, **kwargs)


_crossplotMultiWellAddRegression_id = None
def crossplotMultiWellAddRegression(*args, **kwargs):
    """
    crossplotMultiWellAddRegression(plotID: Number, r: Number=0, g: Number=0, b: Number=0, Regression_Type: int=-1, Explanatory_variable_transformation: int=-1, Explained_variable_transformation: int=-1, Power_Function: bool=False) -> bool
    
    Add a regression in a cross-plot & sets the color
    
    Args:
        plotID (Number): cross-plot window ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
        Regression_Type (int): Optional; Regression type {0 = 'XonY', 1 = 'YonX', 2 = 'MA', 3 = 'RMAXonY', 4 = 'RMAYonX', 5 = 'QUANTILE', 6 = 'SWANSON'}
        Explanatory_variable_transformation (int): Optional; Explanatory variable transformation {0 = 'None', 1 = 'LOG10', 2 = 'EXP'}
        Explained_variable_transformation (int): Optional; Explained variable transformation {0 = 'None', 1 = 'LOG10', 2 = 'EXP'}
        Power_Function (bool): Optional; True if you want to enabled the power function
    
    Returns:
        bool: operation exit status
    """
    global _crossplotMultiWellAddRegression_id
    if _crossplotMultiWellAddRegression_id is None:
        _crossplotMultiWellAddRegression_id = _client_service().register_static_object(('TechlogPlot', 'crossplotMultiWellAddRegression'))
    return _client_service().call(_crossplotMultiWellAddRegression_id, *args, **kwargs)


_cumulativeDipPlotAddZone_id = None
def cumulativeDipPlotAddZone(*args, **kwargs):
    """
    cumulativeDipPlotAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotAddZone_id
    if _cumulativeDipPlotAddZone_id is None:
        _cumulativeDipPlotAddZone_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotAddZone'))
    return _client_service().call(_cumulativeDipPlotAddZone_id, *args, **kwargs)


_cumulativeDipPlotApplyTo_id = None
def cumulativeDipPlotApplyTo(*args, **kwargs):
    """
    cumulativeDipPlotApplyTo(plotID: Number, ds: list) -> bool
    
    Apply the cumulative dip-plot to a data set list
    
    Args:
        plotID (Number): plot window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotApplyTo_id
    if _cumulativeDipPlotApplyTo_id is None:
        _cumulativeDipPlotApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotApplyTo'))
    return _client_service().call(_cumulativeDipPlotApplyTo_id, *args, **kwargs)


_cumulativeDipPlotCleanZonation_id = None
def cumulativeDipPlotCleanZonation(*args, **kwargs):
    """
    cumulativeDipPlotCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the cumulative dip-plot - any display of zone must previously be cancelled
    
    Args:
        plotID (Number): plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotCleanZonation_id
    if _cumulativeDipPlotCleanZonation_id is None:
        _cumulativeDipPlotCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotCleanZonation'))
    return _client_service().call(_cumulativeDipPlotCleanZonation_id, *args, **kwargs)


_cumulativeDipPlotCleanZone_id = None
def cumulativeDipPlotCleanZone(*args, **kwargs):
    """
    cumulativeDipPlotCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotCleanZone_id
    if _cumulativeDipPlotCleanZone_id is None:
        _cumulativeDipPlotCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotCleanZone'))
    return _client_service().call(_cumulativeDipPlotCleanZone_id, *args, **kwargs)


_cumulativeDipPlotCreate_id = None
def cumulativeDipPlotCreate(*args, **kwargs):
    """
    cumulativeDipPlotCreate(n: str, dip: str='', azimuth: str='', color: str='', filter: str='') -> Number
    
    Create a new cumulative dip-plot
    
    Args:
        n (str): plot window name
        dip (str): Optional; variable name
        azimuth (str): Optional; variable name
        color (str): Optional; variable name
        filter (str): Optional; variable name
    
    Returns:
        Number: plot window ID
    """
    global _cumulativeDipPlotCreate_id
    if _cumulativeDipPlotCreate_id is None:
        _cumulativeDipPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotCreate'))
    return _client_service().call(_cumulativeDipPlotCreate_id, *args, **kwargs)


_cumulativeDipPlotDeleteAzimuth_id = None
def cumulativeDipPlotDeleteAzimuth(*args, **kwargs):
    """
    cumulativeDipPlotDeleteAzimuth(plotID: Number) -> bool
    
    Delete the azimuth variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotDeleteAzimuth_id
    if _cumulativeDipPlotDeleteAzimuth_id is None:
        _cumulativeDipPlotDeleteAzimuth_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotDeleteAzimuth'))
    return _client_service().call(_cumulativeDipPlotDeleteAzimuth_id, *args, **kwargs)


_cumulativeDipPlotDeleteColor_id = None
def cumulativeDipPlotDeleteColor(*args, **kwargs):
    """
    cumulativeDipPlotDeleteColor(plotID: Number) -> bool
    
    Delete the color variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotDeleteColor_id
    if _cumulativeDipPlotDeleteColor_id is None:
        _cumulativeDipPlotDeleteColor_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotDeleteColor'))
    return _client_service().call(_cumulativeDipPlotDeleteColor_id, *args, **kwargs)


_cumulativeDipPlotDeleteDip_id = None
def cumulativeDipPlotDeleteDip(*args, **kwargs):
    """
    cumulativeDipPlotDeleteDip(plotID: Number) -> bool
    
    Delete the dip variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotDeleteDip_id
    if _cumulativeDipPlotDeleteDip_id is None:
        _cumulativeDipPlotDeleteDip_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotDeleteDip'))
    return _client_service().call(_cumulativeDipPlotDeleteDip_id, *args, **kwargs)


_cumulativeDipPlotDeleteFilter_id = None
def cumulativeDipPlotDeleteFilter(*args, **kwargs):
    """
    cumulativeDipPlotDeleteFilter(plotID: Number) -> bool
    
    Delete the filter variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotDeleteFilter_id
    if _cumulativeDipPlotDeleteFilter_id is None:
        _cumulativeDipPlotDeleteFilter_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotDeleteFilter'))
    return _client_service().call(_cumulativeDipPlotDeleteFilter_id, *args, **kwargs)


_cumulativeDipPlotDuplicate_id = None
def cumulativeDipPlotDuplicate(*args, **kwargs):
    """
    cumulativeDipPlotDuplicate(plotID: Number) -> Number
    
    Duplicate the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _cumulativeDipPlotDuplicate_id
    if _cumulativeDipPlotDuplicate_id is None:
        _cumulativeDipPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotDuplicate'))
    return _client_service().call(_cumulativeDipPlotDuplicate_id, *args, **kwargs)


_cumulativeDipPlotGetIdByName_id = None
def cumulativeDipPlotGetIdByName(*args, **kwargs):
    """
    cumulativeDipPlotGetIdByName(n: str) -> Number
    
    Find the ID of a name-known cumulative dip-plot
    
    Args:
        n (str): plot name
    
    Returns:
        Number: plot window ID
    """
    global _cumulativeDipPlotGetIdByName_id
    if _cumulativeDipPlotGetIdByName_id is None:
        _cumulativeDipPlotGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotGetIdByName'))
    return _client_service().call(_cumulativeDipPlotGetIdByName_id, *args, **kwargs)


_cumulativeDipPlotLockTitle_id = None
def cumulativeDipPlotLockTitle(*args, **kwargs):
    """
    cumulativeDipPlotLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotLockTitle_id
    if _cumulativeDipPlotLockTitle_id is None:
        _cumulativeDipPlotLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotLockTitle'))
    return _client_service().call(_cumulativeDipPlotLockTitle_id, *args, **kwargs)


_cumulativeDipPlotOpen_id = None
def cumulativeDipPlotOpen(*args, **kwargs):
    """
    cumulativeDipPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing cumulative dip plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _cumulativeDipPlotOpen_id
    if _cumulativeDipPlotOpen_id is None:
        _cumulativeDipPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotOpen'))
    return _client_service().call(_cumulativeDipPlotOpen_id, *args, **kwargs)


_cumulativeDipPlotOpenWalkoutPlot_id = None
def cumulativeDipPlotOpenWalkoutPlot(*args, **kwargs):
    """
    cumulativeDipPlotOpenWalkoutPlot(plotID: Number) -> Number
    
    Open a walkout-plot
    
    Args:
        plotID (Number): cumulative dip-plot window ID
    
    Returns:
        Number: walkout-plot window ID
    """
    global _cumulativeDipPlotOpenWalkoutPlot_id
    if _cumulativeDipPlotOpenWalkoutPlot_id is None:
        _cumulativeDipPlotOpenWalkoutPlot_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotOpenWalkoutPlot'))
    return _client_service().call(_cumulativeDipPlotOpenWalkoutPlot_id, *args, **kwargs)


_cumulativeDipPlotSave_id = None
def cumulativeDipPlotSave(*args, **kwargs):
    """
    cumulativeDipPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        n (str): file name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSave_id
    if _cumulativeDipPlotSave_id is None:
        _cumulativeDipPlotSave_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSave'))
    return _client_service().call(_cumulativeDipPlotSave_id, *args, **kwargs)


_cumulativeDipPlotSelectFilter_id = None
def cumulativeDipPlotSelectFilter(*args, **kwargs):
    """
    cumulativeDipPlotSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): plot window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSelectFilter_id
    if _cumulativeDipPlotSelectFilter_id is None:
        _cumulativeDipPlotSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSelectFilter'))
    return _client_service().call(_cumulativeDipPlotSelectFilter_id, *args, **kwargs)


_cumulativeDipPlotSetAutomaticAdjustment_id = None
def cumulativeDipPlotSetAutomaticAdjustment(*args, **kwargs):
    """
    cumulativeDipPlotSetAutomaticAdjustment(plotID: Number, b: bool) -> bool
    
    Set the automatic adjustment on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): True for automatic adjustment, False else
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetAutomaticAdjustment_id
    if _cumulativeDipPlotSetAutomaticAdjustment_id is None:
        _cumulativeDipPlotSetAutomaticAdjustment_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetAutomaticAdjustment'))
    return _client_service().call(_cumulativeDipPlotSetAutomaticAdjustment_id, *args, **kwargs)


_cumulativeDipPlotSetAzimuth_id = None
def cumulativeDipPlotSetAzimuth(*args, **kwargs):
    """
    cumulativeDipPlotSetAzimuth(plotID: Number, azimuth: str) -> bool
    
    Set the azimuth variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        azimuth (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetAzimuth_id
    if _cumulativeDipPlotSetAzimuth_id is None:
        _cumulativeDipPlotSetAzimuth_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetAzimuth'))
    return _client_service().call(_cumulativeDipPlotSetAzimuth_id, *args, **kwargs)


_cumulativeDipPlotSetColor_id = None
def cumulativeDipPlotSetColor(*args, **kwargs):
    """
    cumulativeDipPlotSetColor(plotID: Number, color: str) -> bool
    
    Set the color variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        color (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetColor_id
    if _cumulativeDipPlotSetColor_id is None:
        _cumulativeDipPlotSetColor_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetColor'))
    return _client_service().call(_cumulativeDipPlotSetColor_id, *args, **kwargs)


_cumulativeDipPlotSetColorMode_id = None
def cumulativeDipPlotSetColorMode(*args, **kwargs):
    """
    cumulativeDipPlotSetColorMode(plotID: Number, mode: str='BY PALETTE') -> bool
    
    Set the color mode on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; color mode {'BY PALETTE', 'BY SOURCE', 'BY ZONE'}
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetColorMode_id
    if _cumulativeDipPlotSetColorMode_id is None:
        _cumulativeDipPlotSetColorMode_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetColorMode'))
    return _client_service().call(_cumulativeDipPlotSetColorMode_id, *args, **kwargs)


_cumulativeDipPlotSetColourMode_id = None
def cumulativeDipPlotSetColourMode(*args, **kwargs):
    """
    cumulativeDipPlotSetColourMode(plotID: Number, mode: str='BY PALETTE') -> bool
    
    [DEPRECATED] (use cumulativeDipPlotSetColorMode instead) Set the color mode on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; color mode {'BY PALETTE', 'BY SOURCE', 'BY ZONE'}
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetColourMode_id
    if _cumulativeDipPlotSetColourMode_id is None:
        _cumulativeDipPlotSetColourMode_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetColourMode'))
    return _client_service().call(_cumulativeDipPlotSetColourMode_id, *args, **kwargs)


_cumulativeDipPlotSetDatum_id = None
def cumulativeDipPlotSetDatum(*args, **kwargs):
    """
    cumulativeDipPlotSetDatum(plotID: Number, lim: bool, ymin: Number=0, ymax: Number=0) -> bool
    
    Change the reference limitation on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        lim (bool): 0 for 'whole datum' / 1 for 'user values'
        ymin (Number): Optional; top limitation
        ymax (Number): Optional; bottom limitation
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetDatum_id
    if _cumulativeDipPlotSetDatum_id is None:
        _cumulativeDipPlotSetDatum_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetDatum'))
    return _client_service().call(_cumulativeDipPlotSetDatum_id, *args, **kwargs)


_cumulativeDipPlotSetDip_id = None
def cumulativeDipPlotSetDip(*args, **kwargs):
    """
    cumulativeDipPlotSetDip(plotID: Number, dip: str) -> bool
    
    Set the dip variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        dip (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetDip_id
    if _cumulativeDipPlotSetDip_id is None:
        _cumulativeDipPlotSetDip_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetDip'))
    return _client_service().call(_cumulativeDipPlotSetDip_id, *args, **kwargs)


_cumulativeDipPlotSetFilter_id = None
def cumulativeDipPlotSetFilter(*args, **kwargs):
    """
    cumulativeDipPlotSetFilter(plotID: Number, filter: str) -> bool
    
    Set the filter variable of a cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        filter (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetFilter_id
    if _cumulativeDipPlotSetFilter_id is None:
        _cumulativeDipPlotSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetFilter'))
    return _client_service().call(_cumulativeDipPlotSetFilter_id, *args, **kwargs)


_cumulativeDipPlotSetMarkersColor_id = None
def cumulativeDipPlotSetMarkersColor(*args, **kwargs):
    """
    cumulativeDipPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the makers color on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetMarkersColor_id
    if _cumulativeDipPlotSetMarkersColor_id is None:
        _cumulativeDipPlotSetMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetMarkersColor'))
    return _client_service().call(_cumulativeDipPlotSetMarkersColor_id, *args, **kwargs)


_cumulativeDipPlotSetMarkersColour_id = None
def cumulativeDipPlotSetMarkersColour(*args, **kwargs):
    """
    cumulativeDipPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use cumulativeDipPlotSetMarkersColor instead) Set the makers color on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetMarkersColour_id
    if _cumulativeDipPlotSetMarkersColour_id is None:
        _cumulativeDipPlotSetMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetMarkersColour'))
    return _client_service().call(_cumulativeDipPlotSetMarkersColour_id, *args, **kwargs)


_cumulativeDipPlotSetMarkersSize_id = None
def cumulativeDipPlotSetMarkersSize(*args, **kwargs):
    """
    cumulativeDipPlotSetMarkersSize(plotID: Number, s: Number) -> bool
    
    Set the makers size on cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        s (Number): size
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetMarkersSize_id
    if _cumulativeDipPlotSetMarkersSize_id is None:
        _cumulativeDipPlotSetMarkersSize_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetMarkersSize'))
    return _client_service().call(_cumulativeDipPlotSetMarkersSize_id, *args, **kwargs)


_cumulativeDipPlotSetName_id = None
def cumulativeDipPlotSetName(*args, **kwargs):
    """
    cumulativeDipPlotSetName(plotID: Number, n: str) -> bool
    
    Change the name of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        n (str): new plot windows name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetName_id
    if _cumulativeDipPlotSetName_id is None:
        _cumulativeDipPlotSetName_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetName'))
    return _client_service().call(_cumulativeDipPlotSetName_id, *args, **kwargs)


_cumulativeDipPlotSetXAxisGraduations_id = None
def cumulativeDipPlotSetXAxisGraduations(*args, **kwargs):
    """
    cumulativeDipPlotSetXAxisGraduations(plotID: Number, f: Number) -> bool
    
    Set the x axis graduations of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        f (Number): graduations
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetXAxisGraduations_id
    if _cumulativeDipPlotSetXAxisGraduations_id is None:
        _cumulativeDipPlotSetXAxisGraduations_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetXAxisGraduations'))
    return _client_service().call(_cumulativeDipPlotSetXAxisGraduations_id, *args, **kwargs)


_cumulativeDipPlotSetXAxisInverse_id = None
def cumulativeDipPlotSetXAxisInverse(*args, **kwargs):
    """
    cumulativeDipPlotSetXAxisInverse(plotID: Number, b: bool) -> bool
    
    Set the x axis inverse of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetXAxisInverse_id
    if _cumulativeDipPlotSetXAxisInverse_id is None:
        _cumulativeDipPlotSetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetXAxisInverse'))
    return _client_service().call(_cumulativeDipPlotSetXAxisInverse_id, *args, **kwargs)


_cumulativeDipPlotSetXAxisType_id = None
def cumulativeDipPlotSetXAxisType(*args, **kwargs):
    """
    cumulativeDipPlotSetXAxisType(plotID: Number, type: str='VARIABLE') -> bool
    
    Set the x axis type of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; axis type {'VARIABLE', 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetXAxisType_id
    if _cumulativeDipPlotSetXAxisType_id is None:
        _cumulativeDipPlotSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetXAxisType'))
    return _client_service().call(_cumulativeDipPlotSetXAxisType_id, *args, **kwargs)


_cumulativeDipPlotSetXAxisUserLimits_id = None
def cumulativeDipPlotSetXAxisUserLimits(*args, **kwargs):
    """
    cumulativeDipPlotSetXAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set the x axis user limits of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        min (Number): min user
        max (Number): max user
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetXAxisUserLimits_id
    if _cumulativeDipPlotSetXAxisUserLimits_id is None:
        _cumulativeDipPlotSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetXAxisUserLimits'))
    return _client_service().call(_cumulativeDipPlotSetXAxisUserLimits_id, *args, **kwargs)


_cumulativeDipPlotSetYAxisGraduations_id = None
def cumulativeDipPlotSetYAxisGraduations(*args, **kwargs):
    """
    cumulativeDipPlotSetYAxisGraduations(plotID: Number, f: Number) -> bool
    
    Set the y axis graduations of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        f (Number): graduations
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetYAxisGraduations_id
    if _cumulativeDipPlotSetYAxisGraduations_id is None:
        _cumulativeDipPlotSetYAxisGraduations_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetYAxisGraduations'))
    return _client_service().call(_cumulativeDipPlotSetYAxisGraduations_id, *args, **kwargs)


_cumulativeDipPlotSetYAxisInverse_id = None
def cumulativeDipPlotSetYAxisInverse(*args, **kwargs):
    """
    cumulativeDipPlotSetYAxisInverse(plotID: Number, b: bool) -> bool
    
    Set the y axis inverse of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetYAxisInverse_id
    if _cumulativeDipPlotSetYAxisInverse_id is None:
        _cumulativeDipPlotSetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetYAxisInverse'))
    return _client_service().call(_cumulativeDipPlotSetYAxisInverse_id, *args, **kwargs)


_cumulativeDipPlotSetYAxisType_id = None
def cumulativeDipPlotSetYAxisType(*args, **kwargs):
    """
    cumulativeDipPlotSetYAxisType(plotID: Number, type: str='VARIABLE') -> bool
    
    Set the y axis type of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; axis type {'VARIABLE', 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetYAxisType_id
    if _cumulativeDipPlotSetYAxisType_id is None:
        _cumulativeDipPlotSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetYAxisType'))
    return _client_service().call(_cumulativeDipPlotSetYAxisType_id, *args, **kwargs)


_cumulativeDipPlotSetYAxisUserLimits_id = None
def cumulativeDipPlotSetYAxisUserLimits(*args, **kwargs):
    """
    cumulativeDipPlotSetYAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set the y axis user limits of the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        min (Number): min user
        max (Number): max user
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetYAxisUserLimits_id
    if _cumulativeDipPlotSetYAxisUserLimits_id is None:
        _cumulativeDipPlotSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetYAxisUserLimits'))
    return _client_service().call(_cumulativeDipPlotSetYAxisUserLimits_id, *args, **kwargs)


_cumulativeDipPlotSetZonation_id = None
def cumulativeDipPlotSetZonation(*args, **kwargs):
    """
    cumulativeDipPlotSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the cumulative dip-plot
    
    Args:
        plotID (Number): plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _cumulativeDipPlotSetZonation_id
    if _cumulativeDipPlotSetZonation_id is None:
        _cumulativeDipPlotSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'cumulativeDipPlotSetZonation'))
    return _client_service().call(_cumulativeDipPlotSetZonation_id, *args, **kwargs)


_customPlotAddAction_id = None
def customPlotAddAction(*args, **kwargs):
    """
    customPlotAddAction(plotID: Number, ActionName: str, Location: int, GlobalPosition: int=4, ActionAfter: str) -> bool
    
    Add an action to toolbar, mouseMode and/or contextMenu with the given position (begin, middle or end)
    
    Args:
        plotID (Number): custom-plot window ID
        ActionName (str): Name of action
        Location (int): Location of action : Tool-bar = 1,Mouse-mode = 2, Context-menu = 4. You can associate it.
        GlobalPosition (int): Optional; Global position of action : Begin = 1, Middle = 2, End = 4.
        ActionAfter (str): [=]: Name of action we want to introduce before.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddAction_id
    if _customPlotAddAction_id is None:
        _customPlotAddAction_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddAction'))
    return _client_service().call(_customPlotAddAction_id, *args, **kwargs)


_customPlotAddActionToCreatedMenu_id = None
def customPlotAddActionToCreatedMenu(*args, **kwargs):
    """
    customPlotAddActionToCreatedMenu(plotID: Number, MenuName: str, ActionName: str, ActionAfter: str) -> bool
    
    Add action to existing menu before the given action name.
    
    Args:
        plotID (Number): custom-plot window ID
        MenuName (str): Name of menu.
        ActionName (str): Name of action.
        ActionAfter (str): [=]: Name of action we want to introduce before.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddActionToCreatedMenu_id
    if _customPlotAddActionToCreatedMenu_id is None:
        _customPlotAddActionToCreatedMenu_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddActionToCreatedMenu'))
    return _client_service().call(_customPlotAddActionToCreatedMenu_id, *args, **kwargs)


_customPlotAddActionToDefaultMenu_id = None
def customPlotAddActionToDefaultMenu(*args, **kwargs):
    """
    customPlotAddActionToDefaultMenu(plotID: Number, Menu: int, ActionName: str, GlobalPosition: int) -> bool
    
    Add action to existing menu.
    
    Args:
        plotID (Number): custom-plot window ID
        Menu (int): Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.
        ActionName (str): Name of action.
        GlobalPosition (int): Global position of action : Begin = 1, Middle = 2, End = 4.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddActionToDefaultMenu_id
    if _customPlotAddActionToDefaultMenu_id is None:
        _customPlotAddActionToDefaultMenu_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddActionToDefaultMenu'))
    return _client_service().call(_customPlotAddActionToDefaultMenu_id, *args, **kwargs)


_customPlotAddActionToDefaultMenuDynamic_id = None
def customPlotAddActionToDefaultMenuDynamic(*args, **kwargs):
    """
    customPlotAddActionToDefaultMenuDynamic(plotID: Number, Menu: int, ActionName: str, ActionAfter: str) -> bool
    
    Add action to existing menu.
    
    Args:
        plotID (Number): custom-plot window ID
        Menu (int): Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.
        ActionName (str): Name of action.
        ActionAfter (str): Name of action we want to introduce before.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddActionToDefaultMenuDynamic_id
    if _customPlotAddActionToDefaultMenuDynamic_id is None:
        _customPlotAddActionToDefaultMenuDynamic_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddActionToDefaultMenuDynamic'))
    return _client_service().call(_customPlotAddActionToDefaultMenuDynamic_id, *args, **kwargs)


_customPlotAddNewMenu_id = None
def customPlotAddNewMenu(*args, **kwargs):
    """
    customPlotAddNewMenu(plotID: Number, MenuName: str, ActionList: list) -> bool
    
    Add a menu.
    
    Args:
        plotID (Number): custom-plot window ID.
        MenuName (str): Name of menu.
        ActionList (list): List of action we want to add to menu.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddNewMenu_id
    if _customPlotAddNewMenu_id is None:
        _customPlotAddNewMenu_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddNewMenu'))
    return _client_service().call(_customPlotAddNewMenu_id, *args, **kwargs)


_customPlotAddNewTable_id = None
def customPlotAddNewTable(*args, **kwargs):
    """
    customPlotAddNewTable(plotID: Number, TableName: str) -> bool
    
    Add a new table widget on left part of custom plot. (Here for this exemple, the widget are empty)
    
    Args:
        plotID (Number): custom-plot window ID
        TableName (str): Name of table.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddNewTable_id
    if _customPlotAddNewTable_id is None:
        _customPlotAddNewTable_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddNewTable'))
    return _client_service().call(_customPlotAddNewTable_id, *args, **kwargs)


_customPlotAddPlotToWorkspace_id = None
def customPlotAddPlotToWorkspace(*args, **kwargs):
    """
    customPlotAddPlotToWorkspace(plotID: Number) -> bool
    
    Add the plot to workspace.
    
    Args:
        plotID (Number): custom-plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _customPlotAddPlotToWorkspace_id
    if _customPlotAddPlotToWorkspace_id is None:
        _customPlotAddPlotToWorkspace_id = _client_service().register_static_object(('TechlogPlot', 'customPlotAddPlotToWorkspace'))
    return _client_service().call(_customPlotAddPlotToWorkspace_id, *args, **kwargs)


_customPlotCreate_id = None
def customPlotCreate(*args, **kwargs):
    """
    customPlotCreate(n: str) -> Number
    
    Create a  custom plot, you have to add it to workspace for see it.
    
    Args:
        n (str): custom plot window name
    
    Returns:
        Number: custom-plot window ID
    """
    global _customPlotCreate_id
    if _customPlotCreate_id is None:
        _customPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'customPlotCreate'))
    return _client_service().call(_customPlotCreate_id, *args, **kwargs)


_customPlotDisplayDefaultActions_id = None
def customPlotDisplayDefaultActions(*args, **kwargs):
    """
    customPlotDisplayDefaultActions(plotID: Number, IsDisplay: bool) -> bool
    
    Say if you want to display default action.
    
    Args:
        plotID (Number): custom-plot window ID
        IsDisplay (bool): True if you want to display default menu.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotDisplayDefaultActions_id
    if _customPlotDisplayDefaultActions_id is None:
        _customPlotDisplayDefaultActions_id = _client_service().register_static_object(('TechlogPlot', 'customPlotDisplayDefaultActions'))
    return _client_service().call(_customPlotDisplayDefaultActions_id, *args, **kwargs)


_customPlotDisplayMenu_id = None
def customPlotDisplayMenu(*args, **kwargs):
    """
    customPlotDisplayMenu(plotID: Number, IsDisplay: bool) -> bool
    
    Say if you want to hide menu when they are empty.
    
    Args:
        plotID (Number): custom-plot window ID
        IsDisplay (bool): True if you want to display default menu.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotDisplayMenu_id
    if _customPlotDisplayMenu_id is None:
        _customPlotDisplayMenu_id = _client_service().register_static_object(('TechlogPlot', 'customPlotDisplayMenu'))
    return _client_service().call(_customPlotDisplayMenu_id, *args, **kwargs)


_customPlotInsertChart_id = None
def customPlotInsertChart(*args, **kwargs):
    """
    customPlotInsertChart(plotID: Number, chartFile: str) -> bool
    
    Insert a chart in custom plot
    
    Args:
        plotID (Number): custom-plot window ID
        chartFile (str): Name of chart we want to insert
    
    Returns:
        bool: operation exit status
    """
    global _customPlotInsertChart_id
    if _customPlotInsertChart_id is None:
        _customPlotInsertChart_id = _client_service().register_static_object(('TechlogPlot', 'customPlotInsertChart'))
    return _client_service().call(_customPlotInsertChart_id, *args, **kwargs)


_customPlotInsertDynamicChart_id = None
def customPlotInsertDynamicChart(*args, **kwargs):
    """
    customPlotInsertDynamicChart(plotID: Number, chart: str, chartName: str) -> bool
    
    Insert a chart dynamically in custom plot
    
    Args:
        plotID (Number): custom-plot window ID
        chart (str): Chart we want to insert
        chartName (str): Title of chart
    
    Returns:
        bool: operation exit status
    """
    global _customPlotInsertDynamicChart_id
    if _customPlotInsertDynamicChart_id is None:
        _customPlotInsertDynamicChart_id = _client_service().register_static_object(('TechlogPlot', 'customPlotInsertDynamicChart'))
    return _client_service().call(_customPlotInsertDynamicChart_id, *args, **kwargs)


_customPlotRemoveChart_id = None
def customPlotRemoveChart(*args, **kwargs):
    """
    customPlotRemoveChart(plotID: Number, chartFile: str) -> bool
    
    Remove a chart in custom plot
    
    Args:
        plotID (Number): custom-plot window ID
        chartFile (str): Name of chart we want to remove
    
    Returns:
        bool: operation exit status
    """
    global _customPlotRemoveChart_id
    if _customPlotRemoveChart_id is None:
        _customPlotRemoveChart_id = _client_service().register_static_object(('TechlogPlot', 'customPlotRemoveChart'))
    return _client_service().call(_customPlotRemoveChart_id, *args, **kwargs)


_customPlotResize_id = None
def customPlotResize(*args, **kwargs):
    """
    customPlotResize(plotID: Number, width: Number, height: Number) -> bool
    
    Resize the widget
    
    Args:
        plotID (Number): custom-plot window ID
        width (Number): Width of widget after resize
        height (Number): Height of widget after resize
    
    Returns:
        bool: operation exit status
    """
    global _customPlotResize_id
    if _customPlotResize_id is None:
        _customPlotResize_id = _client_service().register_static_object(('TechlogPlot', 'customPlotResize'))
    return _client_service().call(_customPlotResize_id, *args, **kwargs)


_customPlotSetCursorToAction_id = None
def customPlotSetCursorToAction(*args, **kwargs):
    """
    customPlotSetCursorToAction(plotID: Number, ActionName: str, Cursor: int) -> bool
    
    Associate a cursor for a given action when you are in viewer. (Here for this exemple, create an action in Mouse Mode begin)
    
    Args:
        plotID (Number): custom-plot window ID
        ActionName (str): Name of action
        Cursor (int): Qt::CursorShape, see website for number.
    
    Returns:
        bool: operation exit status
    """
    global _customPlotSetCursorToAction_id
    if _customPlotSetCursorToAction_id is None:
        _customPlotSetCursorToAction_id = _client_service().register_static_object(('TechlogPlot', 'customPlotSetCursorToAction'))
    return _client_service().call(_customPlotSetCursorToAction_id, *args, **kwargs)


_customPlotSetHorizontalLegendName_id = None
def customPlotSetHorizontalLegendName(*args, **kwargs):
    """
    customPlotSetHorizontalLegendName(plotID: Number, legendY: str) -> bool
    
    Set the name of the horizontal legend
    
    Args:
        plotID (Number): custom-plot window ID
        legendY (str): Name of legend on Y
    
    Returns:
        bool: operation exit status
    """
    global _customPlotSetHorizontalLegendName_id
    if _customPlotSetHorizontalLegendName_id is None:
        _customPlotSetHorizontalLegendName_id = _client_service().register_static_object(('TechlogPlot', 'customPlotSetHorizontalLegendName'))
    return _client_service().call(_customPlotSetHorizontalLegendName_id, *args, **kwargs)


_customPlotSetPlotSubTitle_id = None
def customPlotSetPlotSubTitle(*args, **kwargs):
    """
    customPlotSetPlotSubTitle(plotID: Number, subtitle: str) -> bool
    
    Set a subtitle to plot
    
    Args:
        plotID (Number): custom-plot window ID
        subtitle (str): Name of subtitle
    
    Returns:
        bool: operation exit status
    """
    global _customPlotSetPlotSubTitle_id
    if _customPlotSetPlotSubTitle_id is None:
        _customPlotSetPlotSubTitle_id = _client_service().register_static_object(('TechlogPlot', 'customPlotSetPlotSubTitle'))
    return _client_service().call(_customPlotSetPlotSubTitle_id, *args, **kwargs)


_customPlotSetPlotTitle_id = None
def customPlotSetPlotTitle(*args, **kwargs):
    """
    customPlotSetPlotTitle(plotID: Number, title: str) -> bool
    
    Set a title to plot
    
    Args:
        plotID (Number): custom-plot window ID
        title (str): Name of title
    
    Returns:
        bool: operation exit status
    """
    global _customPlotSetPlotTitle_id
    if _customPlotSetPlotTitle_id is None:
        _customPlotSetPlotTitle_id = _client_service().register_static_object(('TechlogPlot', 'customPlotSetPlotTitle'))
    return _client_service().call(_customPlotSetPlotTitle_id, *args, **kwargs)


_customPlotSetVerticalLegendName_id = None
def customPlotSetVerticalLegendName(*args, **kwargs):
    """
    customPlotSetVerticalLegendName(plotID: Number, legendY: str) -> bool
    
    Set the name of the vertical legend
    
    Args:
        plotID (Number): custom-plot window ID
        legendY (str): Name of legend on Y
    
    Returns:
        bool: operation exit status
    """
    global _customPlotSetVerticalLegendName_id
    if _customPlotSetVerticalLegendName_id is None:
        _customPlotSetVerticalLegendName_id = _client_service().register_static_object(('TechlogPlot', 'customPlotSetVerticalLegendName'))
    return _client_service().call(_customPlotSetVerticalLegendName_id, *args, **kwargs)


_customPlotSetWindowTitle_id = None
def customPlotSetWindowTitle(*args, **kwargs):
    """
    customPlotSetWindowTitle(plotID: Number, title: str) -> bool
    
    Set a title to window
    
    Args:
        plotID (Number): custom-plot window ID
        title (str): Name of title
    
    Returns:
        bool: operation exit status
    """
    global _customPlotSetWindowTitle_id
    if _customPlotSetWindowTitle_id is None:
        _customPlotSetWindowTitle_id = _client_service().register_static_object(('TechlogPlot', 'customPlotSetWindowTitle'))
    return _client_service().call(_customPlotSetWindowTitle_id, *args, **kwargs)


_depthArrayPlotDuplicate_id = None
def depthArrayPlotDuplicate(*args, **kwargs):
    """
    depthArrayPlotDuplicate(plotID: Number) -> Number
    
    Duplicate an existing depth array plot
    
    Args:
        plotID (Number): plot Id to duplicate
    
    Returns:
        Number: plot ID
    """
    global _depthArrayPlotDuplicate_id
    if _depthArrayPlotDuplicate_id is None:
        _depthArrayPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'depthArrayPlotDuplicate'))
    return _client_service().call(_depthArrayPlotDuplicate_id, *args, **kwargs)


_depthArrayPlotOpen_id = None
def depthArrayPlotOpen(*args, **kwargs):
    """
    depthArrayPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing depth array plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _depthArrayPlotOpen_id
    if _depthArrayPlotOpen_id is None:
        _depthArrayPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'depthArrayPlotOpen'))
    return _client_service().call(_depthArrayPlotOpen_id, *args, **kwargs)


_depthMapPlotCreate_id = None
def depthMapPlotCreate(*args, **kwargs):
    """
    depthMapPlotCreate(n: str) -> Number
    
    Create a new depth map plot
    
    Args:
        n (str): plot name
    
    Returns:
        Number: plot ID
    """
    global _depthMapPlotCreate_id
    if _depthMapPlotCreate_id is None:
        _depthMapPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'depthMapPlotCreate'))
    return _client_service().call(_depthMapPlotCreate_id, *args, **kwargs)


_depthMapPlotSetData_id = None
def depthMapPlotSetData(*args, **kwargs):
    """
    depthMapPlotSetData(plotID: Number, fileName: str, t: list, nbL: Number, nbC: Number, minX: Number, stepX: Number, unitX: str, minY: Number, stepY: Number, unitY: str, referenceValues: list, referenceName: str, referenceUnit: str, referenceFamily: str) -> bool
    
    Set the data of a depth map plot
    
    Args:
        plotID (Number): plot window ID
        fileName (str): name for the reference
        t (list): list of the map data
        nbL (Number): number of row
        nbC (Number): number of column
        minX (Number): minimum X axis
        stepX (Number): step X axis
        unitX (str): unit X axis
        minY (Number): minimum Y axis
        stepY (Number): step Y axis
        unitY (str): unit Y axis
        referenceValues (list): list of reference values
        referenceName (str): name of the reference variable
        referenceUnit (str): unit of the reference variable
        referenceFamily (str): reference Family
    
    Returns:
        bool: operation exit status
    """
    global _depthMapPlotSetData_id
    if _depthMapPlotSetData_id is None:
        _depthMapPlotSetData_id = _client_service().register_static_object(('TechlogPlot', 'depthMapPlotSetData'))
    return _client_service().call(_depthMapPlotSetData_id, *args, **kwargs)


_enableBenchmark_id = None
def enableBenchmark(*args, **kwargs):
    """
    enableBenchmark(enable: bool)
    
    start the benchmarking
    
    Args:
        enable (bool): True  start, False stop
    
    Returns:
    """
    global _enableBenchmark_id
    if _enableBenchmark_id is None:
        _enableBenchmark_id = _client_service().register_static_object(('TechlogPlot', 'enableBenchmark'))
    return _client_service().call(_enableBenchmark_id, *args, **kwargs)


_geometryAddBasePolygon_id = None
def geometryAddBasePolygon(*args, **kwargs):
    """
    geometryAddBasePolygon(ID: Number, points: list) -> bool
    
    add a new base polygon in the geometry engine. If new polygon intersect geometry, operation fails
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        points (list): polygon points [(x1, y1), (x2, y2), ...], for polygon ABCDA, user should only provide A, B, C, D points
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryAddBasePolygon_id
    if _geometryAddBasePolygon_id is None:
        _geometryAddBasePolygon_id = _client_service().register_static_object(('TechlogPlot', 'geometryAddBasePolygon'))
    return _client_service().call(_geometryAddBasePolygon_id, *args, **kwargs)


_geometryAddBoundary_id = None
def geometryAddBoundary(*args, **kwargs):
    """
    geometryAddBoundary(ID: Number, points: list) -> bool
    
    Split the geometry with a new boundary.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        points (list): boundary points list [(x1, y1), (x2, y2), ...]
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryAddBoundary_id
    if _geometryAddBoundary_id is None:
        _geometryAddBoundary_id = _client_service().register_static_object(('TechlogPlot', 'geometryAddBoundary'))
    return _client_service().call(_geometryAddBoundary_id, *args, **kwargs)


_geometryAddProperty_id = None
def geometryAddProperty(*args, **kwargs):
    """
    geometryAddProperty(ID: Number, propertyName: str, measurement: str, unit: str, paletteName: str) -> bool
    
    Add a new property family to the geometry.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        propertyName (str): name of the property family to add
        measurement (str): measurement name
        unit (str): unit of the family values
        paletteName (str): name of the palette to use for displaying the family
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryAddProperty_id
    if _geometryAddProperty_id is None:
        _geometryAddProperty_id = _client_service().register_static_object(('TechlogPlot', 'geometryAddProperty'))
    return _client_service().call(_geometryAddProperty_id, *args, **kwargs)


_geometryDeleteBoundary_id = None
def geometryDeleteBoundary(*args, **kwargs):
    """
    geometryDeleteBoundary(ID: Number, point: tuple) -> bool
    
    Delete a geometry boundary.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        point (tuple): point selection for boundary
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryDeleteBoundary_id
    if _geometryDeleteBoundary_id is None:
        _geometryDeleteBoundary_id = _client_service().register_static_object(('TechlogPlot', 'geometryDeleteBoundary'))
    return _client_service().call(_geometryDeleteBoundary_id, *args, **kwargs)


_geometryDeletePoint_id = None
def geometryDeletePoint(*args, **kwargs):
    """
    geometryDeletePoint(ID: Number, point: tuple) -> bool
    
    Delete a geometry point.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        point (tuple): point position
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryDeletePoint_id
    if _geometryDeletePoint_id is None:
        _geometryDeletePoint_id = _client_service().register_static_object(('TechlogPlot', 'geometryDeletePoint'))
    return _client_service().call(_geometryDeletePoint_id, *args, **kwargs)


_geometryDeleteProperty_id = None
def geometryDeleteProperty(*args, **kwargs):
    """
    geometryDeleteProperty(ID: Number, propertyName: str) -> bool
    
    Delete a property family.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        propertyName (str): name of the property family to delete
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryDeleteProperty_id
    if _geometryDeleteProperty_id is None:
        _geometryDeleteProperty_id = _client_service().register_static_object(('TechlogPlot', 'geometryDeleteProperty'))
    return _client_service().call(_geometryDeleteProperty_id, *args, **kwargs)


_geometryGetPolygons_id = None
def geometryGetPolygons(*args, **kwargs):
    """
    geometryGetPolygons(ID: Number) -> list
    
    Get all geometry polygons.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
    
    Returns:
        list: list of list of point(x,y)
    """
    global _geometryGetPolygons_id
    if _geometryGetPolygons_id is None:
        _geometryGetPolygons_id = _client_service().register_static_object(('TechlogPlot', 'geometryGetPolygons'))
    return _client_service().call(_geometryGetPolygons_id, *args, **kwargs)


_geometryMoveBoundary_id = None
def geometryMoveBoundary(*args, **kwargs):
    """
    geometryMoveBoundary(ID: Number, point: tuple, point: tuple) -> bool
    
    Move a geometry boundary.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        point (tuple): boundary point initial position
        point (tuple): translation vector
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryMoveBoundary_id
    if _geometryMoveBoundary_id is None:
        _geometryMoveBoundary_id = _client_service().register_static_object(('TechlogPlot', 'geometryMoveBoundary'))
    return _client_service().call(_geometryMoveBoundary_id, *args, **kwargs)


_geometryMovePoint_id = None
def geometryMovePoint(*args, **kwargs):
    """
    geometryMovePoint(ID: Number, point: tuple, point: tuple) -> bool
    
    Move a geometry point.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        point (tuple): point initial position
        point (tuple): point destination position
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryMovePoint_id
    if _geometryMovePoint_id is None:
        _geometryMovePoint_id = _client_service().register_static_object(('TechlogPlot', 'geometryMovePoint'))
    return _client_service().call(_geometryMovePoint_id, *args, **kwargs)


_geometryReset_id = None
def geometryReset(*args, **kwargs):
    """
    geometryReset(ID: Number) -> bool
    
    delete all geometry features of the geometric engine.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryReset_id
    if _geometryReset_id is None:
        _geometryReset_id = _client_service().register_static_object(('TechlogPlot', 'geometryReset'))
    return _client_service().call(_geometryReset_id, *args, **kwargs)


_geometryRotateBoundary_id = None
def geometryRotateBoundary(*args, **kwargs):
    """
    geometryRotateBoundary(ID: Number, point: tuple, center: tuple, angle: Number) -> bool
    
    Rotate a geometry Boundary.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        point (tuple): Boundary point selection
        center (tuple): rotation center
        angle (Number): rotation angle in degree
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometryRotateBoundary_id
    if _geometryRotateBoundary_id is None:
        _geometryRotateBoundary_id = _client_service().register_static_object(('TechlogPlot', 'geometryRotateBoundary'))
    return _client_service().call(_geometryRotateBoundary_id, *args, **kwargs)


_geometrySelectProperty_id = None
def geometrySelectProperty(*args, **kwargs):
    """
    geometrySelectProperty(ID: Number, propertyName: str) -> bool
    
    select the property family to display.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        propertyName (str): name of the property family to display
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometrySelectProperty_id
    if _geometrySelectProperty_id is None:
        _geometrySelectProperty_id = _client_service().register_static_object(('TechlogPlot', 'geometrySelectProperty'))
    return _client_service().call(_geometrySelectProperty_id, *args, **kwargs)


_geometrySetPolygonProperty_id = None
def geometrySetPolygonProperty(*args, **kwargs):
    """
    geometrySetPolygonProperty(ID: Number, point: tuple, propertyName: str, propertyValue: Number) -> bool
    
    Set polygon property.
    
    Args:
        ID (Number): id of the plot - geometry feature is only available for 3DP and 2DWT
        point (tuple): point selection for polygon
        propertyName (str): name of the property family to delete
        propertyValue (Number): new value for the property family of the selected polygon
    
    Returns:
        bool: True if operation is done else exception
    """
    global _geometrySetPolygonProperty_id
    if _geometrySetPolygonProperty_id is None:
        _geometrySetPolygonProperty_id = _client_service().register_static_object(('TechlogPlot', 'geometrySetPolygonProperty'))
    return _client_service().call(_geometrySetPolygonProperty_id, *args, **kwargs)


_headerEditorAddBox_id = None
def headerEditorAddBox(*args, **kwargs):
    """
    headerEditorAddBox(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number) -> Number
    
    Add a box to a header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        x (Number): left coordinate of the box
        y (Number): top coordinate of the box
        w (Number): width of the box
        h (Number): height of the box
    
    Returns:
        Number: header object ID
    """
    global _headerEditorAddBox_id
    if _headerEditorAddBox_id is None:
        _headerEditorAddBox_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddBox'))
    return _client_service().call(_headerEditorAddBox_id, *args, **kwargs)


_headerEditorAddHeader_id = None
def headerEditorAddHeader(*args, **kwargs):
    """
    headerEditorAddHeader(headerEditorID: Number, n: str, f: str=None) -> Number
    
    Add an existing header to the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        n (str): header name
        f (str): Optional; folder
    
    Returns:
        Number: header ID
    """
    global _headerEditorAddHeader_id
    if _headerEditorAddHeader_id is None:
        _headerEditorAddHeader_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddHeader'))
    return _client_service().call(_headerEditorAddHeader_id, *args, **kwargs)


_headerEditorAddImage_id = None
def headerEditorAddImage(*args, **kwargs):
    """
    headerEditorAddImage(headerEditorID: Number, path: str, x: Number=0, y: Number=0) -> Number
    
    Add an image to the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        path (str): image path
        x (Number): Optional; left coordinate of the image
        y (Number): Optional; top coordinate of the image
    
    Returns:
        Number: header object ID
    """
    global _headerEditorAddImage_id
    if _headerEditorAddImage_id is None:
        _headerEditorAddImage_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddImage'))
    return _client_service().call(_headerEditorAddImage_id, *args, **kwargs)


_headerEditorAddImageFromProperty_id = None
def headerEditorAddImageFromProperty(*args, **kwargs):
    """
    headerEditorAddImageFromProperty(headerEditorID: Number, path: str, x: Number=0, y: Number=0) -> Number
    
    Add an image to the header editor using properties
    
    Args:
        headerEditorID (Number): header editor window ID
        path (str): image path using properties
        x (Number): Optional; left coordinate of the image
        y (Number): Optional; top coordinate of the image
    
    Returns:
        Number: header object ID
    """
    global _headerEditorAddImageFromProperty_id
    if _headerEditorAddImageFromProperty_id is None:
        _headerEditorAddImageFromProperty_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddImageFromProperty'))
    return _client_service().call(_headerEditorAddImageFromProperty_id, *args, **kwargs)


_headerEditorAddLine_id = None
def headerEditorAddLine(*args, **kwargs):
    """
    headerEditorAddLine(headerEditorID: Number, x1: Number, y1: Number, x2: Number, y2: Number) -> Number
    
    Add a line to a header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        x1 (Number): x coordinate of the first extremity of the line
        y1 (Number): y coordinate of the first extremity of the line
        x2 (Number): x coordinate of the second extremity of the line
        y2 (Number): y coordinate of the second extremity of the line
    
    Returns:
        Number: header object ID
    """
    global _headerEditorAddLine_id
    if _headerEditorAddLine_id is None:
        _headerEditorAddLine_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddLine'))
    return _client_service().call(_headerEditorAddLine_id, *args, **kwargs)


_headerEditorAddProperty_id = None
def headerEditorAddProperty(*args, **kwargs):
    """
    headerEditorAddProperty(headerEditorID: Number, objectID: Number, text: str) -> bool
    
    Add a property to the header object
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
        text (str): text of the property (using '%')
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorAddProperty_id
    if _headerEditorAddProperty_id is None:
        _headerEditorAddProperty_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddProperty'))
    return _client_service().call(_headerEditorAddProperty_id, *args, **kwargs)


_headerEditorAddTable_id = None
def headerEditorAddTable(*args, **kwargs):
    """
    headerEditorAddTable(headerEditorID: Number, rowCount: Number, columnCount: Number) -> Number
    
    Add a table to a header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        rowCount (Number): Number of row of the table
        columnCount (Number): Number of column of the table
    
    Returns:
        Number: header object ID
    """
    global _headerEditorAddTable_id
    if _headerEditorAddTable_id is None:
        _headerEditorAddTable_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddTable'))
    return _client_service().call(_headerEditorAddTable_id, *args, **kwargs)


_headerEditorAddText_id = None
def headerEditorAddText(*args, **kwargs):
    """
    headerEditorAddText(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number, text: str=None) -> Number
    
    Add a text to a header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        x (Number): left coordinate of the text
        y (Number): top coordinate of the text
        w (Number): width of the text
        h (Number): height of the text
        text (str): Optional; text
    
    Returns:
        Number: header object ID
    """
    global _headerEditorAddText_id
    if _headerEditorAddText_id is None:
        _headerEditorAddText_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAddText'))
    return _client_service().call(_headerEditorAddText_id, *args, **kwargs)


_headerEditorAlignObjectsOnTheGrid_id = None
def headerEditorAlignObjectsOnTheGrid(*args, **kwargs):
    """
    headerEditorAlignObjectsOnTheGrid(headerEditorID: Number, align: bool) -> bool
    
    Enable to align objects on the grid
    
    Args:
        headerEditorID (Number): header editor window ID
        align (bool): 1 = align; 0 = don't align
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorAlignObjectsOnTheGrid_id
    if _headerEditorAlignObjectsOnTheGrid_id is None:
        _headerEditorAlignObjectsOnTheGrid_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorAlignObjectsOnTheGrid'))
    return _client_service().call(_headerEditorAlignObjectsOnTheGrid_id, *args, **kwargs)


_headerEditorApplyPropertiesTo_id = None
def headerEditorApplyPropertiesTo(*args, **kwargs):
    """
    headerEditorApplyPropertiesTo(headerEditorID: Number, well: str=None, dataset: str=None) -> bool
    
    Apply the properties (tags) of the header to a particular well and dataset
    
    Args:
        headerEditorID (Number): header editor window ID
        well (str): Optional; well name
        dataset (str): Optional; dataset name
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorApplyPropertiesTo_id
    if _headerEditorApplyPropertiesTo_id is None:
        _headerEditorApplyPropertiesTo_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorApplyPropertiesTo'))
    return _client_service().call(_headerEditorApplyPropertiesTo_id, *args, **kwargs)


_headerEditorChangeDisplayMode_id = None
def headerEditorChangeDisplayMode(*args, **kwargs):
    """
    headerEditorChangeDisplayMode(headerEditorID: Number, result: bool) -> bool
    
    Change the display mode
    
    Args:
        headerEditorID (Number): header editor window ID
        result (bool): 1 = display result texts; 0 = display tags
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorChangeDisplayMode_id
    if _headerEditorChangeDisplayMode_id is None:
        _headerEditorChangeDisplayMode_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorChangeDisplayMode'))
    return _client_service().call(_headerEditorChangeDisplayMode_id, *args, **kwargs)


_headerEditorCreate_id = None
def headerEditorCreate(*args, **kwargs):
    """
    headerEditorCreate() -> Number
    
    Create a new header editor
    
    Returns:
        Number: header editor ID
    """
    global _headerEditorCreate_id
    if _headerEditorCreate_id is None:
        _headerEditorCreate_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorCreate'))
    return _client_service().call(_headerEditorCreate_id, *args, **kwargs)


_headerEditorNew_id = None
def headerEditorNew(*args, **kwargs):
    """
    headerEditorNew(headerEditorID: Number) -> bool
    
    Reset a header editor
    
    Args:
        headerEditorID (Number): header editor window ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorNew_id
    if _headerEditorNew_id is None:
        _headerEditorNew_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorNew'))
    return _client_service().call(_headerEditorNew_id, *args, **kwargs)


_headerEditorObjectBringForward_id = None
def headerEditorObjectBringForward(*args, **kwargs):
    """
    headerEditorObjectBringForward(headerEditorID: Number, objectID: Number) -> bool
    
    Bring forward an object of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorObjectBringForward_id
    if _headerEditorObjectBringForward_id is None:
        _headerEditorObjectBringForward_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorObjectBringForward'))
    return _client_service().call(_headerEditorObjectBringForward_id, *args, **kwargs)


_headerEditorObjectBringToFront_id = None
def headerEditorObjectBringToFront(*args, **kwargs):
    """
    headerEditorObjectBringToFront(headerEditorID: Number, objectID: Number) -> bool
    
    Bring to front an object of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorObjectBringToFront_id
    if _headerEditorObjectBringToFront_id is None:
        _headerEditorObjectBringToFront_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorObjectBringToFront'))
    return _client_service().call(_headerEditorObjectBringToFront_id, *args, **kwargs)


_headerEditorObjectSendBackward_id = None
def headerEditorObjectSendBackward(*args, **kwargs):
    """
    headerEditorObjectSendBackward(headerEditorID: Number, objectID: Number) -> bool
    
    Send backward an object of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorObjectSendBackward_id
    if _headerEditorObjectSendBackward_id is None:
        _headerEditorObjectSendBackward_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorObjectSendBackward'))
    return _client_service().call(_headerEditorObjectSendBackward_id, *args, **kwargs)


_headerEditorObjectSendToBack_id = None
def headerEditorObjectSendToBack(*args, **kwargs):
    """
    headerEditorObjectSendToBack(headerEditorID: Number, objectID: Number) -> bool
    
    Send to back an object of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorObjectSendToBack_id
    if _headerEditorObjectSendToBack_id is None:
        _headerEditorObjectSendToBack_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorObjectSendToBack'))
    return _client_service().call(_headerEditorObjectSendToBack_id, *args, **kwargs)


_headerEditorOpen_id = None
def headerEditorOpen(*args, **kwargs):
    """
    headerEditorOpen(n: str, f: str=None) -> Number
    
    Open an existing header editor
    
    Args:
        n (str): header name
        f (str): Optional; folder
    
    Returns:
        Number: header editor ID
    """
    global _headerEditorOpen_id
    if _headerEditorOpen_id is None:
        _headerEditorOpen_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorOpen'))
    return _client_service().call(_headerEditorOpen_id, *args, **kwargs)


_headerEditorRemoveHeader_id = None
def headerEditorRemoveHeader(*args, **kwargs):
    """
    headerEditorRemoveHeader(headerEditorID: Number, headerID: Number) -> bool
    
    Remove an existing header from the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        headerID (Number): header ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorRemoveHeader_id
    if _headerEditorRemoveHeader_id is None:
        _headerEditorRemoveHeader_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorRemoveHeader'))
    return _client_service().call(_headerEditorRemoveHeader_id, *args, **kwargs)


_headerEditorRemoveObject_id = None
def headerEditorRemoveObject(*args, **kwargs):
    """
    headerEditorRemoveObject(headerEditorID: Number, objectID: Number) -> bool
    
    Remove an object from the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorRemoveObject_id
    if _headerEditorRemoveObject_id is None:
        _headerEditorRemoveObject_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorRemoveObject'))
    return _client_service().call(_headerEditorRemoveObject_id, *args, **kwargs)


_headerEditorSave_id = None
def headerEditorSave(*args, **kwargs):
    """
    headerEditorSave(headerEditorID: Number, n: str, f: str=None, Copy_pictures: bool=True) -> bool
    
    Save a header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        n (str): header editor name
        f (str): Optional; folder
        Copy_pictures (bool): Optional; True to copy the pictures if needed, False else
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSave_id
    if _headerEditorSave_id is None:
        _headerEditorSave_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSave'))
    return _client_service().call(_headerEditorSave_id, *args, **kwargs)


_headerEditorSetBackgroundColor_id = None
def headerEditorSetBackgroundColor(*args, **kwargs):
    """
    headerEditorSetBackgroundColor(headerEditorID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change the background color of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetBackgroundColor_id
    if _headerEditorSetBackgroundColor_id is None:
        _headerEditorSetBackgroundColor_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetBackgroundColor'))
    return _client_service().call(_headerEditorSetBackgroundColor_id, *args, **kwargs)


_headerEditorSetBoxAreaFill_id = None
def headerEditorSetBoxAreaFill(*args, **kwargs):
    """
    headerEditorSetBoxAreaFill(headerEditorID: Number, objectID: Number, filled: bool) -> bool
    
    Set if the box is transparent
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the box
        filled (bool): 1 = yes; 0 = no
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetBoxAreaFill_id
    if _headerEditorSetBoxAreaFill_id is None:
        _headerEditorSetBoxAreaFill_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetBoxAreaFill'))
    return _client_service().call(_headerEditorSetBoxAreaFill_id, *args, **kwargs)


_headerEditorSetBoxAreaFillColor_id = None
def headerEditorSetBoxAreaFillColor(*args, **kwargs):
    """
    headerEditorSetBoxAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change the text field background color
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the box
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetBoxAreaFillColor_id
    if _headerEditorSetBoxAreaFillColor_id is None:
        _headerEditorSetBoxAreaFillColor_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetBoxAreaFillColor'))
    return _client_service().call(_headerEditorSetBoxAreaFillColor_id, *args, **kwargs)


_headerEditorSetCurrentHeader_id = None
def headerEditorSetCurrentHeader(*args, **kwargs):
    """
    headerEditorSetCurrentHeader(headerEditorID: Number, headerID: Number) -> bool
    
    Change the header used for modifications by other header editor functions
    
    Args:
        headerEditorID (Number): header editor window ID
        headerID (Number): header ID (first header ID is 0, and so on...)
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetCurrentHeader_id
    if _headerEditorSetCurrentHeader_id is None:
        _headerEditorSetCurrentHeader_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetCurrentHeader'))
    return _client_service().call(_headerEditorSetCurrentHeader_id, *args, **kwargs)


_headerEditorSetGridVisibility_id = None
def headerEditorSetGridVisibility(*args, **kwargs):
    """
    headerEditorSetGridVisibility(headerEditorID: Number, visible: bool) -> bool
    
    Change the grid visibility
    
    Args:
        headerEditorID (Number): header editor window ID
        visible (bool): 1 = show; 0 = hide
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetGridVisibility_id
    if _headerEditorSetGridVisibility_id is None:
        _headerEditorSetGridVisibility_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetGridVisibility'))
    return _client_service().call(_headerEditorSetGridVisibility_id, *args, **kwargs)


_headerEditorSetHeight_id = None
def headerEditorSetHeight(*args, **kwargs):
    """
    headerEditorSetHeight(headerEditorID: Number, height: Number) -> bool
    
    Set the height of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        height (Number): new height in the current header editor unit
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetHeight_id
    if _headerEditorSetHeight_id is None:
        _headerEditorSetHeight_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetHeight'))
    return _client_service().call(_headerEditorSetHeight_id, *args, **kwargs)


_headerEditorSetHorizontalRulerVisibility_id = None
def headerEditorSetHorizontalRulerVisibility(*args, **kwargs):
    """
    headerEditorSetHorizontalRulerVisibility(headerEditorID: Number, visible: bool) -> bool
    
    Change the horizontal ruler visibility
    
    Args:
        headerEditorID (Number): header editor window ID
        visible (bool): 1 = show; 0 = hide
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetHorizontalRulerVisibility_id
    if _headerEditorSetHorizontalRulerVisibility_id is None:
        _headerEditorSetHorizontalRulerVisibility_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetHorizontalRulerVisibility'))
    return _client_service().call(_headerEditorSetHorizontalRulerVisibility_id, *args, **kwargs)


_headerEditorSetImageKeepProportions_id = None
def headerEditorSetImageKeepProportions(*args, **kwargs):
    """
    headerEditorSetImageKeepProportions(headerEditorID: Number, objectID: Number, keep: bool) -> bool
    
    Set if the image has to keep its original proportions
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the image
        keep (bool): 1 = yes; 0 = no
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetImageKeepProportions_id
    if _headerEditorSetImageKeepProportions_id is None:
        _headerEditorSetImageKeepProportions_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetImageKeepProportions'))
    return _client_service().call(_headerEditorSetImageKeepProportions_id, *args, **kwargs)


_headerEditorSetImageOpacity_id = None
def headerEditorSetImageOpacity(*args, **kwargs):
    """
    headerEditorSetImageOpacity(headerEditorID: Number, objectID: Number, opacity: Number) -> bool
    
    Set the opacity of an image
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the image
        opacity (Number): between 0 (fully transparent) and 1 (fully opaque)
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetImageOpacity_id
    if _headerEditorSetImageOpacity_id is None:
        _headerEditorSetImageOpacity_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetImageOpacity'))
    return _client_service().call(_headerEditorSetImageOpacity_id, *args, **kwargs)


_headerEditorSetImageOriginalSize_id = None
def headerEditorSetImageOriginalSize(*args, **kwargs):
    """
    headerEditorSetImageOriginalSize(headerEditorID: Number, objectID: Number, keep: bool) -> bool
    
    Set if the image has to keep its original size
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the image
        keep (bool): 1 = yes; 0 = no
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetImageOriginalSize_id
    if _headerEditorSetImageOriginalSize_id is None:
        _headerEditorSetImageOriginalSize_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetImageOriginalSize'))
    return _client_service().call(_headerEditorSetImageOriginalSize_id, *args, **kwargs)


_headerEditorSetImageRotation_id = None
def headerEditorSetImageRotation(*args, **kwargs):
    """
    headerEditorSetImageRotation(headerEditorID: Number, objectID: Number, rotation: Number) -> bool
    
    Set the orientation of an image
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the image
        rotation (Number): rotation in ° (0, 90, 180 or 270)
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetImageRotation_id
    if _headerEditorSetImageRotation_id is None:
        _headerEditorSetImageRotation_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetImageRotation'))
    return _client_service().call(_headerEditorSetImageRotation_id, *args, **kwargs)


_headerEditorSetObjectAlignment_id = None
def headerEditorSetObjectAlignment(*args, **kwargs):
    """
    headerEditorSetObjectAlignment(headerEditorID: Number, objectID: Number, position: Number) -> bool
    
    Change the header object alignment
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
        position (Number): 0 = left; 1 = center; 2 = right
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetObjectAlignment_id
    if _headerEditorSetObjectAlignment_id is None:
        _headerEditorSetObjectAlignment_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetObjectAlignment'))
    return _client_service().call(_headerEditorSetObjectAlignment_id, *args, **kwargs)


_headerEditorSetObjectBorderColor_id = None
def headerEditorSetObjectBorderColor(*args, **kwargs):
    """
    headerEditorSetObjectBorderColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change the header object border color
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetObjectBorderColor_id
    if _headerEditorSetObjectBorderColor_id is None:
        _headerEditorSetObjectBorderColor_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetObjectBorderColor'))
    return _client_service().call(_headerEditorSetObjectBorderColor_id, *args, **kwargs)


_headerEditorSetObjectBorderWidth_id = None
def headerEditorSetObjectBorderWidth(*args, **kwargs):
    """
    headerEditorSetObjectBorderWidth(headerEditorID: Number, objectID: Number, width: Number) -> bool
    
    Change the header object border width
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
        width (Number): width of the border
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetObjectBorderWidth_id
    if _headerEditorSetObjectBorderWidth_id is None:
        _headerEditorSetObjectBorderWidth_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetObjectBorderWidth'))
    return _client_service().call(_headerEditorSetObjectBorderWidth_id, *args, **kwargs)


_headerEditorSetObjectPosition_id = None
def headerEditorSetObjectPosition(*args, **kwargs):
    """
    headerEditorSetObjectPosition(headerEditorID: Number, objectID: Number, x: Number, y: Number) -> bool
    
    Change the header object position
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
        x (Number): horizontal position
        y (Number): vertical position
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetObjectPosition_id
    if _headerEditorSetObjectPosition_id is None:
        _headerEditorSetObjectPosition_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetObjectPosition'))
    return _client_service().call(_headerEditorSetObjectPosition_id, *args, **kwargs)


_headerEditorSetObjectSize_id = None
def headerEditorSetObjectSize(*args, **kwargs):
    """
    headerEditorSetObjectSize(headerEditorID: Number, objectID: Number, w: Number, h: Number) -> bool
    
    Change the header object size
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID
        w (Number): horizontal size
        h (Number): vertical size
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetObjectSize_id
    if _headerEditorSetObjectSize_id is None:
        _headerEditorSetObjectSize_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetObjectSize'))
    return _client_service().call(_headerEditorSetObjectSize_id, *args, **kwargs)


_headerEditorSetText_id = None
def headerEditorSetText(*args, **kwargs):
    """
    headerEditorSetText(headerEditorID: Number, objectID: Number, text: str) -> bool
    
    Set the text of a text field
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the text field
        text (str): text to set
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetText_id
    if _headerEditorSetText_id is None:
        _headerEditorSetText_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetText'))
    return _client_service().call(_headerEditorSetText_id, *args, **kwargs)


_headerEditorSetTextAllWidthAvailable_id = None
def headerEditorSetTextAllWidthAvailable(*args, **kwargs):
    """
    headerEditorSetTextAllWidthAvailable(headerEditorID: Number, objectID: Number, all: bool) -> bool
    
    Set if the text has to use all the width available
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the text field
        all (bool): 1 = yes; 0 = no
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetTextAllWidthAvailable_id
    if _headerEditorSetTextAllWidthAvailable_id is None:
        _headerEditorSetTextAllWidthAvailable_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetTextAllWidthAvailable'))
    return _client_service().call(_headerEditorSetTextAllWidthAvailable_id, *args, **kwargs)


_headerEditorSetTextAreaFill_id = None
def headerEditorSetTextAreaFill(*args, **kwargs):
    """
    headerEditorSetTextAreaFill(headerEditorID: Number, objectID: Number, filled: bool) -> bool
    
    Set if the text field is transparent
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the text field
        filled (bool): 1 = yes; 0 = no
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetTextAreaFill_id
    if _headerEditorSetTextAreaFill_id is None:
        _headerEditorSetTextAreaFill_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetTextAreaFill'))
    return _client_service().call(_headerEditorSetTextAreaFill_id, *args, **kwargs)


_headerEditorSetTextAreaFillColor_id = None
def headerEditorSetTextAreaFillColor(*args, **kwargs):
    """
    headerEditorSetTextAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number) -> bool
    
    Change the text field background color
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the text field
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetTextAreaFillColor_id
    if _headerEditorSetTextAreaFillColor_id is None:
        _headerEditorSetTextAreaFillColor_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetTextAreaFillColor'))
    return _client_service().call(_headerEditorSetTextAreaFillColor_id, *args, **kwargs)


_headerEditorSetTextOrientation_id = None
def headerEditorSetTextOrientation(*args, **kwargs):
    """
    headerEditorSetTextOrientation(headerEditorID: Number, objectID: Number, orientation: Number) -> bool
    
    Set the orientation of a text field
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the text field
        orientation (Number): orientation in ° (0, 90, 180 or 270)
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetTextOrientation_id
    if _headerEditorSetTextOrientation_id is None:
        _headerEditorSetTextOrientation_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetTextOrientation'))
    return _client_service().call(_headerEditorSetTextOrientation_id, *args, **kwargs)


_headerEditorSetUnit_id = None
def headerEditorSetUnit(*args, **kwargs):
    """
    headerEditorSetUnit(headerEditorID: Number, unit: str) -> bool
    
    Set the unit of the header editor
    
    Args:
        headerEditorID (Number): header editor window ID
        unit (str): new unit
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetUnit_id
    if _headerEditorSetUnit_id is None:
        _headerEditorSetUnit_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetUnit'))
    return _client_service().call(_headerEditorSetUnit_id, *args, **kwargs)


_headerEditorSetVerticalRulerVisibility_id = None
def headerEditorSetVerticalRulerVisibility(*args, **kwargs):
    """
    headerEditorSetVerticalRulerVisibility(headerEditorID: Number, visible: bool) -> bool
    
    Change the vertical ruler visibility
    
    Args:
        headerEditorID (Number): header editor window ID
        visible (bool): 1 = show; 0 = hide
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorSetVerticalRulerVisibility_id
    if _headerEditorSetVerticalRulerVisibility_id is None:
        _headerEditorSetVerticalRulerVisibility_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorSetVerticalRulerVisibility'))
    return _client_service().call(_headerEditorSetVerticalRulerVisibility_id, *args, **kwargs)


_headerEditorTableAddColumn_id = None
def headerEditorTableAddColumn(*args, **kwargs):
    """
    headerEditorTableAddColumn(headerEditorID: Number, objectID: Number) -> bool
    
    Add a column to the table
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the table
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorTableAddColumn_id
    if _headerEditorTableAddColumn_id is None:
        _headerEditorTableAddColumn_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorTableAddColumn'))
    return _client_service().call(_headerEditorTableAddColumn_id, *args, **kwargs)


_headerEditorTableAddRow_id = None
def headerEditorTableAddRow(*args, **kwargs):
    """
    headerEditorTableAddRow(headerEditorID: Number, objectID: Number) -> bool
    
    Add a row to the table
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the table
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorTableAddRow_id
    if _headerEditorTableAddRow_id is None:
        _headerEditorTableAddRow_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorTableAddRow'))
    return _client_service().call(_headerEditorTableAddRow_id, *args, **kwargs)


_headerEditorTableDeleteColumn_id = None
def headerEditorTableDeleteColumn(*args, **kwargs):
    """
    headerEditorTableDeleteColumn(headerEditorID: Number, objectID: Number, column_index: Number) -> bool
    
    Delete a column of the table
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the table
        column_index (Number): index of the column (from 0) to remove
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorTableDeleteColumn_id
    if _headerEditorTableDeleteColumn_id is None:
        _headerEditorTableDeleteColumn_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorTableDeleteColumn'))
    return _client_service().call(_headerEditorTableDeleteColumn_id, *args, **kwargs)


_headerEditorTableDeleteRow_id = None
def headerEditorTableDeleteRow(*args, **kwargs):
    """
    headerEditorTableDeleteRow(headerEditorID: Number, objectID: Number, row_index: Number) -> bool
    
    Delete a row of the table
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the table
        row_index (Number): index of the row (from 0) to remove
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorTableDeleteRow_id
    if _headerEditorTableDeleteRow_id is None:
        _headerEditorTableDeleteRow_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorTableDeleteRow'))
    return _client_service().call(_headerEditorTableDeleteRow_id, *args, **kwargs)


_headerEditorTableInsertColumn_id = None
def headerEditorTableInsertColumn(*args, **kwargs):
    """
    headerEditorTableInsertColumn(headerEditorID: Number, objectID: Number, column_index: Number) -> bool
    
    Insert a column in the table
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the table
        column_index (Number): index of the column (from 0) where the new one has to be inserted
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorTableInsertColumn_id
    if _headerEditorTableInsertColumn_id is None:
        _headerEditorTableInsertColumn_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorTableInsertColumn'))
    return _client_service().call(_headerEditorTableInsertColumn_id, *args, **kwargs)


_headerEditorTableInsertRow_id = None
def headerEditorTableInsertRow(*args, **kwargs):
    """
    headerEditorTableInsertRow(headerEditorID: Number, objectID: Number, row_index: Number) -> bool
    
    Insert a row in the table
    
    Args:
        headerEditorID (Number): header editor window ID
        objectID (Number): header object ID of the table
        row_index (Number): index of the row (from 0) where the new one has to be inserted
    
    Returns:
        bool: operation exit status
    """
    global _headerEditorTableInsertRow_id
    if _headerEditorTableInsertRow_id is None:
        _headerEditorTableInsertRow_id = _client_service().register_static_object(('TechlogPlot', 'headerEditorTableInsertRow'))
    return _client_service().call(_headerEditorTableInsertRow_id, *args, **kwargs)


_histogramAddParameterLineX_id = None
def histogramAddParameterLineX(*args, **kwargs):
    """
    histogramAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> Number
    
    Add a parameter line to the histogram
    
    Args:
        plotID (Number): histogram window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of X parameter
        val1 (Number): value of X parameter
        min1 (Number): minimum of X parameter
        max1 (Number): maximum of X parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        Number: parameter point id
    """
    global _histogramAddParameterLineX_id
    if _histogramAddParameterLineX_id is None:
        _histogramAddParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'histogramAddParameterLineX'))
    return _client_service().call(_histogramAddParameterLineX_id, *args, **kwargs)


_histogramAddParameterPointXY_id = None
def histogramAddParameterPointXY(*args, **kwargs):
    """
    histogramAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> str
    
    Add a parameter point to the histogram
    
    Args:
        plotID (Number): histogram window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of first parameter
        val1 (Number): value of first parameter
        min1 (Number): minimum of first parameter
        max1 (Number): maximum of first parameter
        pn2 (str): name of second parameter
        val2 (Number): value of second parameter
        min2 (Number): minimum of second parameter
        max2 (Number): maximum of second parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        str: parameter point id's
    """
    global _histogramAddParameterPointXY_id
    if _histogramAddParameterPointXY_id is None:
        _histogramAddParameterPointXY_id = _client_service().register_static_object(('TechlogPlot', 'histogramAddParameterPointXY'))
    return _client_service().call(_histogramAddParameterPointXY_id, *args, **kwargs)


_histogramAddZone_id = None
def histogramAddZone(*args, **kwargs):
    """
    histogramAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the histogram
    
    Args:
        plotID (Number): histogram window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _histogramAddZone_id
    if _histogramAddZone_id is None:
        _histogramAddZone_id = _client_service().register_static_object(('TechlogPlot', 'histogramAddZone'))
    return _client_service().call(_histogramAddZone_id, *args, **kwargs)


_histogramApplyTo_id = None
def histogramApplyTo(*args, **kwargs):
    """
    histogramApplyTo(plotID: Number, ds: list) -> list
    
    Apply the histogram to a data set list
    
    Args:
        plotID (Number): histogram window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _histogramApplyTo_id
    if _histogramApplyTo_id is None:
        _histogramApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'histogramApplyTo'))
    return _client_service().call(_histogramApplyTo_id, *args, **kwargs)


_histogramCleanZonation_id = None
def histogramCleanZonation(*args, **kwargs):
    """
    histogramCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): histogram window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _histogramCleanZonation_id
    if _histogramCleanZonation_id is None:
        _histogramCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'histogramCleanZonation'))
    return _client_service().call(_histogramCleanZonation_id, *args, **kwargs)


_histogramCleanZone_id = None
def histogramCleanZone(*args, **kwargs):
    """
    histogramCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the histogram
    
    Args:
        plotID (Number): histogram window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _histogramCleanZone_id
    if _histogramCleanZone_id is None:
        _histogramCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'histogramCleanZone'))
    return _client_service().call(_histogramCleanZone_id, *args, **kwargs)


_histogramCreate_id = None
def histogramCreate(*args, **kwargs):
    """
    histogramCreate(n: str, vl: list=None, f: str='') -> Number
    
    Create a new histogram
    
    Args:
        n (str): histogram window name
        vl (list): Optional; variable list name
        f (str): Optional; filter variable name
    
    Returns:
        Number: histogram window ID
    """
    global _histogramCreate_id
    if _histogramCreate_id is None:
        _histogramCreate_id = _client_service().register_static_object(('TechlogPlot', 'histogramCreate'))
    return _client_service().call(_histogramCreate_id, *args, **kwargs)


_histogramDeleteFilterValues_id = None
def histogramDeleteFilterValues(*args, **kwargs):
    """
    histogramDeleteFilterValues(plotID: Number) -> bool
    
    Delete the filter variable of a histogram
    
    Args:
        plotID (Number): histogram window ID
    
    Returns:
        bool: operation exit status
    """
    global _histogramDeleteFilterValues_id
    if _histogramDeleteFilterValues_id is None:
        _histogramDeleteFilterValues_id = _client_service().register_static_object(('TechlogPlot', 'histogramDeleteFilterValues'))
    return _client_service().call(_histogramDeleteFilterValues_id, *args, **kwargs)


_histogramDeleteVariables_id = None
def histogramDeleteVariables(*args, **kwargs):
    """
    histogramDeleteVariables(plotID: Number, vn: list) -> bool
    
    Delete the variable list of the histogram
    
    Args:
        plotID (Number): histogram window ID
        vn (list): variable list
    
    Returns:
        bool: operation exit status
    """
    global _histogramDeleteVariables_id
    if _histogramDeleteVariables_id is None:
        _histogramDeleteVariables_id = _client_service().register_static_object(('TechlogPlot', 'histogramDeleteVariables'))
    return _client_service().call(_histogramDeleteVariables_id, *args, **kwargs)


_histogramDuplicate_id = None
def histogramDuplicate(*args, **kwargs):
    """
    histogramDuplicate(plotID: Number) -> Number
    
    Duplicate the histogram
    
    Args:
        plotID (Number): histogram window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _histogramDuplicate_id
    if _histogramDuplicate_id is None:
        _histogramDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'histogramDuplicate'))
    return _client_service().call(_histogramDuplicate_id, *args, **kwargs)


_histogramGetIdByName_id = None
def histogramGetIdByName(*args, **kwargs):
    """
    histogramGetIdByName(n: str) -> Number
    
    Returns the ID of a name-known histogram
    
    Args:
        n (str): histogram name
    
    Returns:
        Number: histogram window ID
    """
    global _histogramGetIdByName_id
    if _histogramGetIdByName_id is None:
        _histogramGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'histogramGetIdByName'))
    return _client_service().call(_histogramGetIdByName_id, *args, **kwargs)


_histogramGetParameterPointXValue_id = None
def histogramGetParameterPointXValue(*args, **kwargs):
    """
    histogramGetParameterPointXValue(plotID: Number, ppid1: str) -> Number
    
    Return X value of a parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: x value of parameter point
    """
    global _histogramGetParameterPointXValue_id
    if _histogramGetParameterPointXValue_id is None:
        _histogramGetParameterPointXValue_id = _client_service().register_static_object(('TechlogPlot', 'histogramGetParameterPointXValue'))
    return _client_service().call(_histogramGetParameterPointXValue_id, *args, **kwargs)


_histogramGetParameterPointYValue_id = None
def histogramGetParameterPointYValue(*args, **kwargs):
    """
    histogramGetParameterPointYValue(plotID: Number, ppid1: str) -> Number
    
    Return Y value of a parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: y value of parameter point
    """
    global _histogramGetParameterPointYValue_id
    if _histogramGetParameterPointYValue_id is None:
        _histogramGetParameterPointYValue_id = _client_service().register_static_object(('TechlogPlot', 'histogramGetParameterPointYValue'))
    return _client_service().call(_histogramGetParameterPointYValue_id, *args, **kwargs)


_histogramLockAxisX_id = None
def histogramLockAxisX(*args, **kwargs):
    """
    histogramLockAxisX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis limits of the histogram
    
    Args:
        plotID (Number): histogram window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _histogramLockAxisX_id
    if _histogramLockAxisX_id is None:
        _histogramLockAxisX_id = _client_service().register_static_object(('TechlogPlot', 'histogramLockAxisX'))
    return _client_service().call(_histogramLockAxisX_id, *args, **kwargs)


_histogramLockLegendX_id = None
def histogramLockLegendX(*args, **kwargs):
    """
    histogramLockLegendX(plotID: Number, locked: bool) -> bool
    
    Lock x-axis legend of the histogram
    
    Args:
        plotID (Number): histogram window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _histogramLockLegendX_id
    if _histogramLockLegendX_id is None:
        _histogramLockLegendX_id = _client_service().register_static_object(('TechlogPlot', 'histogramLockLegendX'))
    return _client_service().call(_histogramLockLegendX_id, *args, **kwargs)


_histogramLockLegendY_id = None
def histogramLockLegendY(*args, **kwargs):
    """
    histogramLockLegendY(plotID: Number, locked: bool) -> bool
    
    Lock y-axis legend of the histogram
    
    Args:
        plotID (Number): histogram window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _histogramLockLegendY_id
    if _histogramLockLegendY_id is None:
        _histogramLockLegendY_id = _client_service().register_static_object(('TechlogPlot', 'histogramLockLegendY'))
    return _client_service().call(_histogramLockLegendY_id, *args, **kwargs)


_histogramLockTitle_id = None
def histogramLockTitle(*args, **kwargs):
    """
    histogramLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the histogram
    
    Args:
        plotID (Number): histogram window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _histogramLockTitle_id
    if _histogramLockTitle_id is None:
        _histogramLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'histogramLockTitle'))
    return _client_service().call(_histogramLockTitle_id, *args, **kwargs)


_histogramMultiWellAddData_id = None
def histogramMultiWellAddData(*args, **kwargs):
    """
    histogramMultiWellAddData(plotID: Number, ds: list) -> bool
    
    Add a dataset to a multi well histogram
    
    Args:
        plotID (Number): histogram window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellAddData_id
    if _histogramMultiWellAddData_id is None:
        _histogramMultiWellAddData_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellAddData'))
    return _client_service().call(_histogramMultiWellAddData_id, *args, **kwargs)


_histogramMultiWellAddParameterLineX_id = None
def histogramMultiWellAddParameterLineX(*args, **kwargs):
    """
    histogramMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> Number
    
    Add a parameter line to the histogram
    
    Args:
        plotID (Number): histogram window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of  Xparameter
        val1 (Number): value of X parameter
        min1 (Number): minimum of X parameter
        max1 (Number): maximum of X parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        Number: parameter point id
    """
    global _histogramMultiWellAddParameterLineX_id
    if _histogramMultiWellAddParameterLineX_id is None:
        _histogramMultiWellAddParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellAddParameterLineX'))
    return _client_service().call(_histogramMultiWellAddParameterLineX_id, *args, **kwargs)


_histogramMultiWellAddParameterPointXY_id = None
def histogramMultiWellAddParameterPointXY(*args, **kwargs):
    """
    histogramMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number=MissingValue, cmaxx: Number=MissingValue, cminy: Number=MissingValue, cmaxy: Number=MissingValue, update: bool=True) -> str
    
    Add a parameter point to the histogram
    
    Args:
        plotID (Number): histogram window ID
        well (str): well name
        dataset (str): dataset name
        zonation (str): zonation dataset name
        zone (str): zone name
        pn1 (str): name of first parameter
        val1 (Number): value of first parameter
        min1 (Number): minimum of first parameter
        max1 (Number): maximum of first parameter
        pn2 (str): name of second parameter
        val2 (Number): value of second parameter
        min2 (Number): minimum of second parameter
        max2 (Number): maximum of second parameter
        cminx (Number): Optional; x min of constraint
        cmaxx (Number): Optional; x max of constraint
        cminy (Number): Optional; y min of constraint
        cmaxy (Number): Optional; y max of constraint
        update (bool): Optional; True if overwrite, false else
    
    Returns:
        str: parameter point id's
    """
    global _histogramMultiWellAddParameterPointXY_id
    if _histogramMultiWellAddParameterPointXY_id is None:
        _histogramMultiWellAddParameterPointXY_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellAddParameterPointXY'))
    return _client_service().call(_histogramMultiWellAddParameterPointXY_id, *args, **kwargs)


_histogramMultiWellAddZone_id = None
def histogramMultiWellAddZone(*args, **kwargs):
    """
    histogramMultiWellAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the histogram
    
    Args:
        plotID (Number): histogram window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellAddZone_id
    if _histogramMultiWellAddZone_id is None:
        _histogramMultiWellAddZone_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellAddZone'))
    return _client_service().call(_histogramMultiWellAddZone_id, *args, **kwargs)


_histogramMultiWellCleanZonation_id = None
def histogramMultiWellCleanZonation(*args, **kwargs):
    """
    histogramMultiWellCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): histogram window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellCleanZonation_id
    if _histogramMultiWellCleanZonation_id is None:
        _histogramMultiWellCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellCleanZonation'))
    return _client_service().call(_histogramMultiWellCleanZonation_id, *args, **kwargs)


_histogramMultiWellCleanZone_id = None
def histogramMultiWellCleanZone(*args, **kwargs):
    """
    histogramMultiWellCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the histogram
    
    Args:
        plotID (Number): histogram window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellCleanZone_id
    if _histogramMultiWellCleanZone_id is None:
        _histogramMultiWellCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellCleanZone'))
    return _client_service().call(_histogramMultiWellCleanZone_id, *args, **kwargs)


_histogramMultiWellCreate_id = None
def histogramMultiWellCreate(*args, **kwargs):
    """
    histogramMultiWellCreate(ml: list) -> Number
    
    Create a multi well histogram
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: histogram window ID
    """
    global _histogramMultiWellCreate_id
    if _histogramMultiWellCreate_id is None:
        _histogramMultiWellCreate_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellCreate'))
    return _client_service().call(_histogramMultiWellCreate_id, *args, **kwargs)


_histogramMultiWellDuplicate_id = None
def histogramMultiWellDuplicate(*args, **kwargs):
    """
    histogramMultiWellDuplicate(plotID: Number) -> Number
    
    Duplicate the histogram
    
    Args:
        plotID (Number): histogram window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _histogramMultiWellDuplicate_id
    if _histogramMultiWellDuplicate_id is None:
        _histogramMultiWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellDuplicate'))
    return _client_service().call(_histogramMultiWellDuplicate_id, *args, **kwargs)


_histogramMultiWellGetIdByName_id = None
def histogramMultiWellGetIdByName(*args, **kwargs):
    """
    histogramMultiWellGetIdByName(n: str) -> Number
    
    Returns the ID of a name-known histogram
    
    Args:
        n (str): histogram name
    
    Returns:
        Number: histogram window ID
    """
    global _histogramMultiWellGetIdByName_id
    if _histogramMultiWellGetIdByName_id is None:
        _histogramMultiWellGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellGetIdByName'))
    return _client_service().call(_histogramMultiWellGetIdByName_id, *args, **kwargs)


_histogramMultiWellGetParameterPointXValue_id = None
def histogramMultiWellGetParameterPointXValue(*args, **kwargs):
    """
    histogramMultiWellGetParameterPointXValue(plotID: Number, ppid1: str) -> Number
    
    Return X value of a parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: x value of parameter point
    """
    global _histogramMultiWellGetParameterPointXValue_id
    if _histogramMultiWellGetParameterPointXValue_id is None:
        _histogramMultiWellGetParameterPointXValue_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellGetParameterPointXValue'))
    return _client_service().call(_histogramMultiWellGetParameterPointXValue_id, *args, **kwargs)


_histogramMultiWellGetParameterPointYValue_id = None
def histogramMultiWellGetParameterPointYValue(*args, **kwargs):
    """
    histogramMultiWellGetParameterPointYValue(plotID: Number, ppid1: str) -> Number
    
    Return Y value of a parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        Number: y value of parameter point
    """
    global _histogramMultiWellGetParameterPointYValue_id
    if _histogramMultiWellGetParameterPointYValue_id is None:
        _histogramMultiWellGetParameterPointYValue_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellGetParameterPointYValue'))
    return _client_service().call(_histogramMultiWellGetParameterPointYValue_id, *args, **kwargs)


_histogramMultiWellOpen_id = None
def histogramMultiWellOpen(*args, **kwargs):
    """
    histogramMultiWellOpen(n: str, f: str='') -> Number
    
    Open an existing histogram
    
    Args:
        n (str): histogram wname
        f (str): Optional; folder
    
    Returns:
        Number: histogram window ID
    """
    global _histogramMultiWellOpen_id
    if _histogramMultiWellOpen_id is None:
        _histogramMultiWellOpen_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellOpen'))
    return _client_service().call(_histogramMultiWellOpen_id, *args, **kwargs)


_histogramMultiWellQuantile1Value_id = None
def histogramMultiWellQuantile1Value(*args, **kwargs):
    """
    histogramMultiWellQuantile1Value(plotID: Number, q1: Number) -> bool
    
    Set user value for quantile 1
    
    Args:
        plotID (Number): histogram window ID
        q1 (Number): quantile 1 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantile1Value_id
    if _histogramMultiWellQuantile1Value_id is None:
        _histogramMultiWellQuantile1Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantile1Value'))
    return _client_service().call(_histogramMultiWellQuantile1Value_id, *args, **kwargs)


_histogramMultiWellQuantile2Value_id = None
def histogramMultiWellQuantile2Value(*args, **kwargs):
    """
    histogramMultiWellQuantile2Value(plotID: Number, q2: Number) -> bool
    
    Set user value for quantile 2
    
    Args:
        plotID (Number): histogram window ID
        q2 (Number): quantile 2 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantile2Value_id
    if _histogramMultiWellQuantile2Value_id is None:
        _histogramMultiWellQuantile2Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantile2Value'))
    return _client_service().call(_histogramMultiWellQuantile2Value_id, *args, **kwargs)


_histogramMultiWellQuantile3Value_id = None
def histogramMultiWellQuantile3Value(*args, **kwargs):
    """
    histogramMultiWellQuantile3Value(plotID: Number, q3: Number) -> bool
    
    Set user value for quantile 3
    
    Args:
        plotID (Number): histogram window ID
        q3 (Number): quantile 3 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantile3Value_id
    if _histogramMultiWellQuantile3Value_id is None:
        _histogramMultiWellQuantile3Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantile3Value'))
    return _client_service().call(_histogramMultiWellQuantile3Value_id, *args, **kwargs)


_histogramMultiWellQuantile4Value_id = None
def histogramMultiWellQuantile4Value(*args, **kwargs):
    """
    histogramMultiWellQuantile4Value(plotID: Number, q4: Number) -> bool
    
    Set user value for quantile 4
    
    Args:
        plotID (Number): histogram window ID
        q4 (Number): quantile 4 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantile4Value_id
    if _histogramMultiWellQuantile4Value_id is None:
        _histogramMultiWellQuantile4Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantile4Value'))
    return _client_service().call(_histogramMultiWellQuantile4Value_id, *args, **kwargs)


_histogramMultiWellQuantile5Value_id = None
def histogramMultiWellQuantile5Value(*args, **kwargs):
    """
    histogramMultiWellQuantile5Value(plotID: Number, q5: Number) -> bool
    
    Set user value for quantile 5
    
    Args:
        plotID (Number): histogram window ID
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantile5Value_id
    if _histogramMultiWellQuantile5Value_id is None:
        _histogramMultiWellQuantile5Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantile5Value'))
    return _client_service().call(_histogramMultiWellQuantile5Value_id, *args, **kwargs)


_histogramMultiWellQuantileDisplay_id = None
def histogramMultiWellQuantileDisplay(*args, **kwargs):
    """
    histogramMultiWellQuantileDisplay(plotID: Number, quant: bool, line: bool=False) -> bool
    
    Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram
    
    Args:
        plotID (Number): histogram window ID
        quant (bool): 1 = quantiles display else 0
        line (bool): Optional; = 1 if display quantiles by lines
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantileDisplay_id
    if _histogramMultiWellQuantileDisplay_id is None:
        _histogramMultiWellQuantileDisplay_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantileDisplay'))
    return _client_service().call(_histogramMultiWellQuantileDisplay_id, *args, **kwargs)


_histogramMultiWellQuantileValues_id = None
def histogramMultiWellQuantileValues(*args, **kwargs):
    """
    histogramMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number) -> bool
    
    Set user values to the histogram quantiles
    
    Args:
        plotID (Number): histogram window ID
        q1 (Number): quantile 1 percentage
        q2 (Number): quantile 2 percentage
        q3 (Number): quantile 3 percentage
        q4 (Number): quantile 4 percentage
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellQuantileValues_id
    if _histogramMultiWellQuantileValues_id is None:
        _histogramMultiWellQuantileValues_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellQuantileValues'))
    return _client_service().call(_histogramMultiWellQuantileValues_id, *args, **kwargs)


_histogramMultiWellRemoveAllParameterPoint_id = None
def histogramMultiWellRemoveAllParameterPoint(*args, **kwargs):
    """
    histogramMultiWellRemoveAllParameterPoint(plotID: Number) -> bool
    
    Remove all parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellRemoveAllParameterPoint_id
    if _histogramMultiWellRemoveAllParameterPoint_id is None:
        _histogramMultiWellRemoveAllParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellRemoveAllParameterPoint'))
    return _client_service().call(_histogramMultiWellRemoveAllParameterPoint_id, *args, **kwargs)


_histogramMultiWellRemoveDataset_id = None
def histogramMultiWellRemoveDataset(*args, **kwargs):
    """
    histogramMultiWellRemoveDataset(plotID: Number, ds: str) -> bool
    
    Remove a dataset from a multi well histogram
    
    Args:
        plotID (Number): histogram window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellRemoveDataset_id
    if _histogramMultiWellRemoveDataset_id is None:
        _histogramMultiWellRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellRemoveDataset'))
    return _client_service().call(_histogramMultiWellRemoveDataset_id, *args, **kwargs)


_histogramMultiWellRemoveParameterLineX_id = None
def histogramMultiWellRemoveParameterLineX(*args, **kwargs):
    """
    histogramMultiWellRemoveParameterLineX(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter line X in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellRemoveParameterLineX_id
    if _histogramMultiWellRemoveParameterLineX_id is None:
        _histogramMultiWellRemoveParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellRemoveParameterLineX'))
    return _client_service().call(_histogramMultiWellRemoveParameterLineX_id, *args, **kwargs)


_histogramMultiWellRemoveParameterPoint_id = None
def histogramMultiWellRemoveParameterPoint(*args, **kwargs):
    """
    histogramMultiWellRemoveParameterPoint(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellRemoveParameterPoint_id
    if _histogramMultiWellRemoveParameterPoint_id is None:
        _histogramMultiWellRemoveParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellRemoveParameterPoint'))
    return _client_service().call(_histogramMultiWellRemoveParameterPoint_id, *args, **kwargs)


_histogramMultiWellRemoveWell_id = None
def histogramMultiWellRemoveWell(*args, **kwargs):
    """
    histogramMultiWellRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a multi well histogram
    
    Args:
        plotID (Number): histogram window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellRemoveWell_id
    if _histogramMultiWellRemoveWell_id is None:
        _histogramMultiWellRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellRemoveWell'))
    return _client_service().call(_histogramMultiWellRemoveWell_id, *args, **kwargs)


_histogramMultiWellSave_id = None
def histogramMultiWellSave(*args, **kwargs):
    """
    histogramMultiWellSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the histogram
    
    Args:
        plotID (Number): histogram window ID
        n (str): histogram window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSave_id
    if _histogramMultiWellSave_id is None:
        _histogramMultiWellSave_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSave'))
    return _client_service().call(_histogramMultiWellSave_id, *args, **kwargs)


_histogramMultiWellSelectVar_id = None
def histogramMultiWellSelectVar(*args, **kwargs):
    """
    histogramMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    [DEPRECATED] (use histogramMultiWellSelectVariable instead) Change the variable selected among one family's variables in a multi well histogram
    
    Args:
        plotID (Number): histogram window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSelectVar_id
    if _histogramMultiWellSelectVar_id is None:
        _histogramMultiWellSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSelectVar'))
    return _client_service().call(_histogramMultiWellSelectVar_id, *args, **kwargs)


_histogramMultiWellSelectVariable_id = None
def histogramMultiWellSelectVariable(*args, **kwargs):
    """
    histogramMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a multi well histogram
    
    Args:
        plotID (Number): histogram window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSelectVariable_id
    if _histogramMultiWellSelectVariable_id is None:
        _histogramMultiWellSelectVariable_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSelectVariable'))
    return _client_service().call(_histogramMultiWellSelectVariable_id, *args, **kwargs)


_histogramMultiWellSetCumul_id = None
def histogramMultiWellSetCumul(*args, **kwargs):
    """
    histogramMultiWellSetCumul(plotID: Number, cf: bool) -> bool
    
    Display of cumulative frequencies on the histogram
    
    Args:
        plotID (Number): histogram window ID
        cf (bool): {0 = 'remove cumulative frequencies', 1 = 'display of cumulative frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetCumul_id
    if _histogramMultiWellSetCumul_id is None:
        _histogramMultiWellSetCumul_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetCumul'))
    return _client_service().call(_histogramMultiWellSetCumul_id, *args, **kwargs)


_histogramMultiWellSetCumulate_id = None
def histogramMultiWellSetCumulate(*args, **kwargs):
    """
    histogramMultiWellSetCumulate(plotID: Number, cum: bool=True) -> bool
    
    Cumul of the histogram values
    
    Args:
        plotID (Number): histogram window ID
        cum (bool): Optional; 1 = cumulate histo else 0
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetCumulate_id
    if _histogramMultiWellSetCumulate_id is None:
        _histogramMultiWellSetCumulate_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetCumulate'))
    return _client_service().call(_histogramMultiWellSetCumulate_id, *args, **kwargs)


_histogramMultiWellSetFill_id = None
def histogramMultiWellSetFill(*args, **kwargs):
    """
    histogramMultiWellSetFill(plotID: Number, fill: bool) -> bool
    
    Filling of histogram crenels
    
    Args:
        plotID (Number): histogram window ID
        fill (bool): {0 = 'remove filling', 1 = 'display filling'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetFill_id
    if _histogramMultiWellSetFill_id is None:
        _histogramMultiWellSetFill_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetFill'))
    return _client_service().call(_histogramMultiWellSetFill_id, *args, **kwargs)


_histogramMultiWellSetFillingColor_id = None
def histogramMultiWellSetFillingColor(*args, **kwargs):
    """
    histogramMultiWellSetFillingColor(plotID: Number, var: str, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Choose the histogram filling color
    
    Args:
        plotID (Number): histogram window ID
        var (str): variable ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetFillingColor_id
    if _histogramMultiWellSetFillingColor_id is None:
        _histogramMultiWellSetFillingColor_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetFillingColor'))
    return _client_service().call(_histogramMultiWellSetFillingColor_id, *args, **kwargs)


_histogramMultiWellSetFillingColour_id = None
def histogramMultiWellSetFillingColour(*args, **kwargs):
    """
    histogramMultiWellSetFillingColour(plotID: Number, var: str, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    [DEPRECATED] (use histogramMultiWellSetFillingColor instead) Choose the histogram filling color
    
    Args:
        plotID (Number): histogram window ID
        var (str): variable ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetFillingColour_id
    if _histogramMultiWellSetFillingColour_id is None:
        _histogramMultiWellSetFillingColour_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetFillingColour'))
    return _client_service().call(_histogramMultiWellSetFillingColour_id, *args, **kwargs)


_histogramMultiWellSetName_id = None
def histogramMultiWellSetName(*args, **kwargs):
    """
    histogramMultiWellSetName(plotID: Number, n: str) -> bool
    
    Change the name of the histogram
    
    Args:
        plotID (Number): histogram window ID
        n (str): new histogram window name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetName_id
    if _histogramMultiWellSetName_id is None:
        _histogramMultiWellSetName_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetName'))
    return _client_service().call(_histogramMultiWellSetName_id, *args, **kwargs)


_histogramMultiWellSetPrecision_id = None
def histogramMultiWellSetPrecision(*args, **kwargs):
    """
    histogramMultiWellSetPrecision(plotID: Number, bins: Number) -> bool
    
    Change number of bins on the histogram
    
    Args:
        plotID (Number): histogram window ID
        bins (Number): number of bins
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetPrecision_id
    if _histogramMultiWellSetPrecision_id is None:
        _histogramMultiWellSetPrecision_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetPrecision'))
    return _client_service().call(_histogramMultiWellSetPrecision_id, *args, **kwargs)


_histogramMultiWellSetStandardise_id = None
def histogramMultiWellSetStandardise(*args, **kwargs):
    """
    histogramMultiWellSetStandardise(plotID: Number, std: bool) -> bool
    
    [DEPRECATED] (use histogramMultiWellSetStandardize instead) Display of number of samples or frequencies on Y axis on the histogram
    
    Args:
        plotID (Number): histogram window ID
        std (bool): {0 = 'number of samples', 1 = 'frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetStandardise_id
    if _histogramMultiWellSetStandardise_id is None:
        _histogramMultiWellSetStandardise_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetStandardise'))
    return _client_service().call(_histogramMultiWellSetStandardise_id, *args, **kwargs)


_histogramMultiWellSetStandardize_id = None
def histogramMultiWellSetStandardize(*args, **kwargs):
    """
    histogramMultiWellSetStandardize(plotID: Number, std: bool) -> bool
    
    Display of number of samples or frequencies on Y axis on the histogram
    
    Args:
        plotID (Number): histogram window ID
        std (bool): {0 = 'number of samples', 1 = 'frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetStandardize_id
    if _histogramMultiWellSetStandardize_id is None:
        _histogramMultiWellSetStandardize_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetStandardize'))
    return _client_service().call(_histogramMultiWellSetStandardize_id, *args, **kwargs)


_histogramMultiWellSetStyle_id = None
def histogramMultiWellSetStyle(*args, **kwargs):
    """
    histogramMultiWellSetStyle(plotID: Number, st: int) -> bool
    
    Change the style of display of the histogram
    
    Args:
        plotID (Number): histogram window ID
        st (int): display style: {0 = 'CRENEL_CLOSE', 1 = 'CRENEL_OPEN', 2 = 'CONTINUOUS_LINE'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetStyle_id
    if _histogramMultiWellSetStyle_id is None:
        _histogramMultiWellSetStyle_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetStyle'))
    return _client_service().call(_histogramMultiWellSetStyle_id, *args, **kwargs)


_histogramMultiWellSetType_id = None
def histogramMultiWellSetType(*args, **kwargs):
    """
    histogramMultiWellSetType(plotID: Number, ty: int) -> bool
    
    Change histogram type
    
    Args:
        plotID (Number): histogram window ID
        ty (int): histogram type: {0 = 'VARIABLES', 1 = 'FILTER', 2 = 'ZONATION'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetType_id
    if _histogramMultiWellSetType_id is None:
        _histogramMultiWellSetType_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetType'))
    return _client_service().call(_histogramMultiWellSetType_id, *args, **kwargs)


_histogramMultiWellSetXAxisScale_id = None
def histogramMultiWellSetXAxisScale(*args, **kwargs):
    """
    histogramMultiWellSetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Change the histogram X axis scale
    
    Args:
        plotID (Number): histogram window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetXAxisScale_id
    if _histogramMultiWellSetXAxisScale_id is None:
        _histogramMultiWellSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetXAxisScale'))
    return _client_service().call(_histogramMultiWellSetXAxisScale_id, *args, **kwargs)


_histogramMultiWellSetXAxisType_id = None
def histogramMultiWellSetXAxisType(*args, **kwargs):
    """
    histogramMultiWellSetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of histogram X axis
    
    Args:
        plotID (Number): histogram window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetXAxisType_id
    if _histogramMultiWellSetXAxisType_id is None:
        _histogramMultiWellSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetXAxisType'))
    return _client_service().call(_histogramMultiWellSetXAxisType_id, *args, **kwargs)


_histogramMultiWellSetXAxisUnit_id = None
def histogramMultiWellSetXAxisUnit(*args, **kwargs):
    """
    histogramMultiWellSetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of histogram X axis
    
    Args:
        plotID (Number): histogram window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetXAxisUnit_id
    if _histogramMultiWellSetXAxisUnit_id is None:
        _histogramMultiWellSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetXAxisUnit'))
    return _client_service().call(_histogramMultiWellSetXAxisUnit_id, *args, **kwargs)


_histogramMultiWellSetXAxisUserLimits_id = None
def histogramMultiWellSetXAxisUserLimits(*args, **kwargs):
    """
    histogramMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of histogram X axis
    
    Args:
        plotID (Number): histogram window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetXAxisUserLimits_id
    if _histogramMultiWellSetXAxisUserLimits_id is None:
        _histogramMultiWellSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetXAxisUserLimits'))
    return _client_service().call(_histogramMultiWellSetXAxisUserLimits_id, *args, **kwargs)


_histogramMultiWellSetYAxisMinMax_id = None
def histogramMultiWellSetYAxisMinMax(*args, **kwargs):
    """
    histogramMultiWellSetYAxisMinMax(plotID: Number, ymin: Number, ymax: Number) -> bool
    
    Set min & max values of histogram Y axis
    
    Args:
        plotID (Number): histogram window ID
        ymin (Number): Y axis minimum
        ymax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetYAxisMinMax_id
    if _histogramMultiWellSetYAxisMinMax_id is None:
        _histogramMultiWellSetYAxisMinMax_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetYAxisMinMax'))
    return _client_service().call(_histogramMultiWellSetYAxisMinMax_id, *args, **kwargs)


_histogramMultiWellSetZonation_id = None
def histogramMultiWellSetZonation(*args, **kwargs):
    """
    histogramMultiWellSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the histogram
    
    Args:
        plotID (Number): histogram window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _histogramMultiWellSetZonation_id
    if _histogramMultiWellSetZonation_id is None:
        _histogramMultiWellSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'histogramMultiWellSetZonation'))
    return _client_service().call(_histogramMultiWellSetZonation_id, *args, **kwargs)


_histogramOpen_id = None
def histogramOpen(*args, **kwargs):
    """
    histogramOpen(n: str, f: str='') -> Number
    
    Open an existing histogram
    
    Args:
        n (str): histogram name
        f (str): Optional; folder
    
    Returns:
        Number: histogram window ID
    """
    global _histogramOpen_id
    if _histogramOpen_id is None:
        _histogramOpen_id = _client_service().register_static_object(('TechlogPlot', 'histogramOpen'))
    return _client_service().call(_histogramOpen_id, *args, **kwargs)


_histogramQuantile1Value_id = None
def histogramQuantile1Value(*args, **kwargs):
    """
    histogramQuantile1Value(plotID: Number, q1: Number) -> bool
    
    Set user value for quantile 1
    
    Args:
        plotID (Number): histogram window ID
        q1 (Number): quantile 1 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantile1Value_id
    if _histogramQuantile1Value_id is None:
        _histogramQuantile1Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantile1Value'))
    return _client_service().call(_histogramQuantile1Value_id, *args, **kwargs)


_histogramQuantile2Value_id = None
def histogramQuantile2Value(*args, **kwargs):
    """
    histogramQuantile2Value(plotID: Number, q2: Number) -> bool
    
    Set user value for quantile 2
    
    Args:
        plotID (Number): histogram window ID
        q2 (Number): quantile 2 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantile2Value_id
    if _histogramQuantile2Value_id is None:
        _histogramQuantile2Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantile2Value'))
    return _client_service().call(_histogramQuantile2Value_id, *args, **kwargs)


_histogramQuantile3Value_id = None
def histogramQuantile3Value(*args, **kwargs):
    """
    histogramQuantile3Value(plotID: Number, q3: Number) -> bool
    
    Set user value for quantile 3
    
    Args:
        plotID (Number): histogram window ID
        q3 (Number): quantile 3 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantile3Value_id
    if _histogramQuantile3Value_id is None:
        _histogramQuantile3Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantile3Value'))
    return _client_service().call(_histogramQuantile3Value_id, *args, **kwargs)


_histogramQuantile4Value_id = None
def histogramQuantile4Value(*args, **kwargs):
    """
    histogramQuantile4Value(plotID: Number, q4: Number) -> bool
    
    Set user value for quantile 4
    
    Args:
        plotID (Number): histogram window ID
        q4 (Number): quantile 4 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantile4Value_id
    if _histogramQuantile4Value_id is None:
        _histogramQuantile4Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantile4Value'))
    return _client_service().call(_histogramQuantile4Value_id, *args, **kwargs)


_histogramQuantile5Value_id = None
def histogramQuantile5Value(*args, **kwargs):
    """
    histogramQuantile5Value(plotID: Number, q5: Number) -> bool
    
    Set user value for quantile 5
    
    Args:
        plotID (Number): histogram window ID
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantile5Value_id
    if _histogramQuantile5Value_id is None:
        _histogramQuantile5Value_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantile5Value'))
    return _client_service().call(_histogramQuantile5Value_id, *args, **kwargs)


_histogramQuantileDisplay_id = None
def histogramQuantileDisplay(*args, **kwargs):
    """
    histogramQuantileDisplay(plotID: Number, quant: bool, line: bool=False) -> bool
    
    Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram
    
    Args:
        plotID (Number): histogram window ID
        quant (bool): 1 = quantiles display else 0
        line (bool): Optional; = 1 if display quantiles by lines
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantileDisplay_id
    if _histogramQuantileDisplay_id is None:
        _histogramQuantileDisplay_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantileDisplay'))
    return _client_service().call(_histogramQuantileDisplay_id, *args, **kwargs)


_histogramQuantileValues_id = None
def histogramQuantileValues(*args, **kwargs):
    """
    histogramQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number) -> bool
    
    Set user values to the histogram quantiles
    
    Args:
        plotID (Number): histogram window ID
        q1 (Number): quantile 1 percentage
        q2 (Number): quantile 2 percentage
        q3 (Number): quantile 3 percentage
        q4 (Number): quantile 4 percentage
        q5 (Number): quantile 5 percentage
    
    Returns:
        bool: operation exit status
    """
    global _histogramQuantileValues_id
    if _histogramQuantileValues_id is None:
        _histogramQuantileValues_id = _client_service().register_static_object(('TechlogPlot', 'histogramQuantileValues'))
    return _client_service().call(_histogramQuantileValues_id, *args, **kwargs)


_histogramRemoveAllParameterPoint_id = None
def histogramRemoveAllParameterPoint(*args, **kwargs):
    """
    histogramRemoveAllParameterPoint(plotID: Number) -> bool
    
    Remove all parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
    
    Returns:
        bool: operation exit status
    """
    global _histogramRemoveAllParameterPoint_id
    if _histogramRemoveAllParameterPoint_id is None:
        _histogramRemoveAllParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'histogramRemoveAllParameterPoint'))
    return _client_service().call(_histogramRemoveAllParameterPoint_id, *args, **kwargs)


_histogramRemoveParameterLineX_id = None
def histogramRemoveParameterLineX(*args, **kwargs):
    """
    histogramRemoveParameterLineX(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter line X in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _histogramRemoveParameterLineX_id
    if _histogramRemoveParameterLineX_id is None:
        _histogramRemoveParameterLineX_id = _client_service().register_static_object(('TechlogPlot', 'histogramRemoveParameterLineX'))
    return _client_service().call(_histogramRemoveParameterLineX_id, *args, **kwargs)


_histogramRemoveParameterPoint_id = None
def histogramRemoveParameterPoint(*args, **kwargs):
    """
    histogramRemoveParameterPoint(plotID: Number, ppid1: str) -> bool
    
    Remove a parameter point in the histogram
    
    Args:
        plotID (Number): histogram window ID
        ppid1 (str): parameter point id
    
    Returns:
        bool: operation exit status
    """
    global _histogramRemoveParameterPoint_id
    if _histogramRemoveParameterPoint_id is None:
        _histogramRemoveParameterPoint_id = _client_service().register_static_object(('TechlogPlot', 'histogramRemoveParameterPoint'))
    return _client_service().call(_histogramRemoveParameterPoint_id, *args, **kwargs)


_histogramSave_id = None
def histogramSave(*args, **kwargs):
    """
    histogramSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the histogram
    
    Args:
        plotID (Number): histogram window ID
        n (str): histogram window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _histogramSave_id
    if _histogramSave_id is None:
        _histogramSave_id = _client_service().register_static_object(('TechlogPlot', 'histogramSave'))
    return _client_service().call(_histogramSave_id, *args, **kwargs)


_histogramSelectFilter_id = None
def histogramSelectFilter(*args, **kwargs):
    """
    histogramSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): histogram window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _histogramSelectFilter_id
    if _histogramSelectFilter_id is None:
        _histogramSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'histogramSelectFilter'))
    return _client_service().call(_histogramSelectFilter_id, *args, **kwargs)


_histogramSetCumul_id = None
def histogramSetCumul(*args, **kwargs):
    """
    histogramSetCumul(plotID: Number, cf: bool) -> bool
    
    [DEPRECATED] (use histogramSetCumulative instead) Display of cumulative frequencies on the histogram
    
    Args:
        plotID (Number): histogram window ID
        cf (bool): {0 = 'remove cumulative frequencies', 1 = 'display of cumulative frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetCumul_id
    if _histogramSetCumul_id is None:
        _histogramSetCumul_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetCumul'))
    return _client_service().call(_histogramSetCumul_id, *args, **kwargs)


_histogramSetCumulate_id = None
def histogramSetCumulate(*args, **kwargs):
    """
    histogramSetCumulate(plotID: Number, cum: bool=True) -> bool
    
    Cumul of the histogram values
    
    Args:
        plotID (Number): histogram window ID
        cum (bool): Optional; True = cumulate histo else False
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetCumulate_id
    if _histogramSetCumulate_id is None:
        _histogramSetCumulate_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetCumulate'))
    return _client_service().call(_histogramSetCumulate_id, *args, **kwargs)


_histogramSetCumulative_id = None
def histogramSetCumulative(*args, **kwargs):
    """
    histogramSetCumulative(plotID: Number, cf: bool) -> bool
    
    Display of cumulative frequencies on the histogram
    
    Args:
        plotID (Number): histogram window ID
        cf (bool): {0 = 'remove cumulative frequencies', 1 = 'display of cumulative frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetCumulative_id
    if _histogramSetCumulative_id is None:
        _histogramSetCumulative_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetCumulative'))
    return _client_service().call(_histogramSetCumulative_id, *args, **kwargs)


_histogramSetDatum_id = None
def histogramSetDatum(*args, **kwargs):
    """
    histogramSetDatum(plotID: Number, lim: bool, ymin: Number=0, ymax: Number=0) -> bool
    
    Change the reference limitation on histogram
    
    Args:
        plotID (Number): histogram window ID
        lim (bool): 0 for 'whole datum' / 1 for 'user values'
        ymin (Number): Optional; top limitation
        ymax (Number): Optional; bottom limitation
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetDatum_id
    if _histogramSetDatum_id is None:
        _histogramSetDatum_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetDatum'))
    return _client_service().call(_histogramSetDatum_id, *args, **kwargs)


_histogramSetFill_id = None
def histogramSetFill(*args, **kwargs):
    """
    histogramSetFill(plotID: Number, fill: bool) -> bool
    
    Filling of histogram crenels
    
    Args:
        plotID (Number): histogram window ID
        fill (bool): {0 = 'remove filling', 1 = 'display filling'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetFill_id
    if _histogramSetFill_id is None:
        _histogramSetFill_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetFill'))
    return _client_service().call(_histogramSetFill_id, *args, **kwargs)


_histogramSetFillingColor_id = None
def histogramSetFillingColor(*args, **kwargs):
    """
    histogramSetFillingColor(plotID: Number, var: str, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Choose the histogram filling color
    
    Args:
        plotID (Number): plot ID
        var (str): variable ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetFillingColor_id
    if _histogramSetFillingColor_id is None:
        _histogramSetFillingColor_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetFillingColor'))
    return _client_service().call(_histogramSetFillingColor_id, *args, **kwargs)


_histogramSetFillingColour_id = None
def histogramSetFillingColour(*args, **kwargs):
    """
    histogramSetFillingColour(plotID: Number, var: str, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    [DEPRECATED] (use histogramSetFillingColor instead) Choose the histogram filling color
    
    Args:
        plotID (Number): plot ID
        var (str): variable ID
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetFillingColour_id
    if _histogramSetFillingColour_id is None:
        _histogramSetFillingColour_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetFillingColour'))
    return _client_service().call(_histogramSetFillingColour_id, *args, **kwargs)


_histogramSetFilter_id = None
def histogramSetFilter(*args, **kwargs):
    """
    histogramSetFilter(plotID: Number, f: str) -> bool
    
    Set the variable as a filter
    
    Args:
        plotID (Number): histogram window ID
        f (str): variable filter
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetFilter_id
    if _histogramSetFilter_id is None:
        _histogramSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetFilter'))
    return _client_service().call(_histogramSetFilter_id, *args, **kwargs)


_histogramSetName_id = None
def histogramSetName(*args, **kwargs):
    """
    histogramSetName(plotID: Number, n: str) -> bool
    
    Change the name of the histogram
    
    Args:
        plotID (Number): histogram window ID
        n (str): new histogram window name
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetName_id
    if _histogramSetName_id is None:
        _histogramSetName_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetName'))
    return _client_service().call(_histogramSetName_id, *args, **kwargs)


_histogramSetPrecision_id = None
def histogramSetPrecision(*args, **kwargs):
    """
    histogramSetPrecision(plotID: Number, bins: Number) -> bool
    
    Change number of bins on the histogram
    
    Args:
        plotID (Number): histogram window ID
        bins (Number): number of bins
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetPrecision_id
    if _histogramSetPrecision_id is None:
        _histogramSetPrecision_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetPrecision'))
    return _client_service().call(_histogramSetPrecision_id, *args, **kwargs)


_histogramSetStandardise_id = None
def histogramSetStandardise(*args, **kwargs):
    """
    histogramSetStandardise(plotID: Number, std: bool) -> bool
    
    [DEPRECATED] (use histogramSetStandardize instead) Display of number of samples or frequencies on Y axis on the histogram
    
    Args:
        plotID (Number): histogram window ID
        std (bool): {0 = 'number of samples', 1 = 'frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetStandardise_id
    if _histogramSetStandardise_id is None:
        _histogramSetStandardise_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetStandardise'))
    return _client_service().call(_histogramSetStandardise_id, *args, **kwargs)


_histogramSetStandardize_id = None
def histogramSetStandardize(*args, **kwargs):
    """
    histogramSetStandardize(plotID: Number, std: bool) -> bool
    
    Display of number of samples or frequencies on Y axis on the histogram
    
    Args:
        plotID (Number): histogram window ID
        std (bool): {0 = 'number of samples', 1 = 'frequencies'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetStandardize_id
    if _histogramSetStandardize_id is None:
        _histogramSetStandardize_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetStandardize'))
    return _client_service().call(_histogramSetStandardize_id, *args, **kwargs)


_histogramSetStyle_id = None
def histogramSetStyle(*args, **kwargs):
    """
    histogramSetStyle(plotID: Number, st: int) -> bool
    
    Change the style of display of the histogram
    
    Args:
        plotID (Number): histogram window ID
        st (int): display style: {0 = 'CRENEL_CLOSE', 1 = 'CRENEL_OPEN', 2 = 'CONTINUOUS_LINE'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetStyle_id
    if _histogramSetStyle_id is None:
        _histogramSetStyle_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetStyle'))
    return _client_service().call(_histogramSetStyle_id, *args, **kwargs)


_histogramSetType_id = None
def histogramSetType(*args, **kwargs):
    """
    histogramSetType(plotID: Number, ty: int) -> bool
    
    Change histogram type
    
    Args:
        plotID (Number): histogram window ID
        ty (int): histogram type: {0 = 'VARIABLES', 1 = 'FILTER', 2 = 'ZONATION'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetType_id
    if _histogramSetType_id is None:
        _histogramSetType_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetType'))
    return _client_service().call(_histogramSetType_id, *args, **kwargs)


_histogramSetVariablesList_id = None
def histogramSetVariablesList(*args, **kwargs):
    """
    histogramSetVariablesList(plotID: Number, vn: list) -> bool
    
    Set the variable list to the histogram
    
    Args:
        plotID (Number): histogram window ID
        vn (list): variable list
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetVariablesList_id
    if _histogramSetVariablesList_id is None:
        _histogramSetVariablesList_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetVariablesList'))
    return _client_service().call(_histogramSetVariablesList_id, *args, **kwargs)


_histogramSetVariablesValues_id = None
def histogramSetVariablesValues(*args, **kwargs):
    """
    histogramSetVariablesValues(plotID: Number, vn: str, vl: list, fam: str='', un: str='') -> bool
    
    Set a fictive set of user variables to the X axis of a histogram
    
    Args:
        plotID (Number): histogram window ID
        vn (str): variable name
        vl (list): list of values
        fam (str): Optional; variable family
        un (str): Optional; variable unit
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetVariablesValues_id
    if _histogramSetVariablesValues_id is None:
        _histogramSetVariablesValues_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetVariablesValues'))
    return _client_service().call(_histogramSetVariablesValues_id, *args, **kwargs)


_histogramSetXAxisScale_id = None
def histogramSetXAxisScale(*args, **kwargs):
    """
    histogramSetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Change the histogram X axis scale
    
    Args:
        plotID (Number): histogram window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetXAxisScale_id
    if _histogramSetXAxisScale_id is None:
        _histogramSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetXAxisScale'))
    return _client_service().call(_histogramSetXAxisScale_id, *args, **kwargs)


_histogramSetXAxisType_id = None
def histogramSetXAxisType(*args, **kwargs):
    """
    histogramSetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of histogram X axis
    
    Args:
        plotID (Number): histogram window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetXAxisType_id
    if _histogramSetXAxisType_id is None:
        _histogramSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetXAxisType'))
    return _client_service().call(_histogramSetXAxisType_id, *args, **kwargs)


_histogramSetXAxisUnit_id = None
def histogramSetXAxisUnit(*args, **kwargs):
    """
    histogramSetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of histogram X axis
    
    Args:
        plotID (Number): histogram window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetXAxisUnit_id
    if _histogramSetXAxisUnit_id is None:
        _histogramSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetXAxisUnit'))
    return _client_service().call(_histogramSetXAxisUnit_id, *args, **kwargs)


_histogramSetXAxisUserLimits_id = None
def histogramSetXAxisUserLimits(*args, **kwargs):
    """
    histogramSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of histogram X axis
    
    Args:
        plotID (Number): histogram window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetXAxisUserLimits_id
    if _histogramSetXAxisUserLimits_id is None:
        _histogramSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetXAxisUserLimits'))
    return _client_service().call(_histogramSetXAxisUserLimits_id, *args, **kwargs)


_histogramSetYAxisMinMax_id = None
def histogramSetYAxisMinMax(*args, **kwargs):
    """
    histogramSetYAxisMinMax(plotID: Number, ymin: Number, ymax: Number) -> bool
    
    Set min & max values of histogram Y axis
    
    Args:
        plotID (Number): histogram window ID
        ymin (Number): Y axis minimum
        ymax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetYAxisMinMax_id
    if _histogramSetYAxisMinMax_id is None:
        _histogramSetYAxisMinMax_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetYAxisMinMax'))
    return _client_service().call(_histogramSetYAxisMinMax_id, *args, **kwargs)


_histogramSetZonation_id = None
def histogramSetZonation(*args, **kwargs):
    """
    histogramSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the histogram
    
    Args:
        plotID (Number): histogram window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _histogramSetZonation_id
    if _histogramSetZonation_id is None:
        _histogramSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'histogramSetZonation'))
    return _client_service().call(_histogramSetZonation_id, *args, **kwargs)


_histogramVAOpen_id = None
def histogramVAOpen(*args, **kwargs):
    """
    histogramVAOpen(n: str, f: str='') -> Number
    
    Open an existing histogram VA
    
    Args:
        n (str): histogram name
        f (str): Optional; folder
    
    Returns:
        Number: histogram window ID
    """
    global _histogramVAOpen_id
    if _histogramVAOpen_id is None:
        _histogramVAOpen_id = _client_service().register_static_object(('TechlogPlot', 'histogramVAOpen'))
    return _client_service().call(_histogramVAOpen_id, *args, **kwargs)


_logViewAddAnnotationsByTrack_id = None
def logViewAddAnnotationsByTrack(*args, **kwargs):
    """
    logViewAddAnnotationsByTrack(plotID: Number, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, listFamilyFont: list='Verdana', listSize: list=12, listBold: list=None, listItalic: list=None, listUnderline: list=None) -> bool
    
    Add annotation to track in the logview
    
    Args:
        plotID (Number): logview window ID
        pos (Number): track position
        size (Number): size of list for annotations
        listText (list): text list for annotations
        listTop (list): top list for annotations
        listBottom (list): bottom list for annotation
        listFamilyFont (list): Optional; family font list for annotations
        listSize (list): Optional; font size list for annotations
        listBold (list): Optional; bold state list for annotations fonts
        listItalic (list): Optional; italic state list for annotations fonts
        listUnderline (list): Optional; underline state list for annotations fonts
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddAnnotationsByTrack_id
    if _logViewAddAnnotationsByTrack_id is None:
        _logViewAddAnnotationsByTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddAnnotationsByTrack'))
    return _client_service().call(_logViewAddAnnotationsByTrack_id, *args, **kwargs)


_logViewAddAnnotationsByTrackWithSameFont_id = None
def logViewAddAnnotationsByTrackWithSameFont(*args, **kwargs):
    """
    logViewAddAnnotationsByTrackWithSameFont(plotID: Number, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, FamilyFont: str, Size: Number, Bold: bool=False, Italic: bool=False, Underline: bool=False) -> bool
    
    Add annotation to track in the logview
    
    Args:
        plotID (Number): logview window ID
        pos (Number): track position
        size (Number): size of list for annotations
        listText (list): text list for annotations
        listTop (list): top list for annotations
        listBottom (list): bottom list for annotation
        FamilyFont (str): family font for annotations fonts
        Size (Number): font size for annotations fonts
        Bold (bool): Optional; bold state for annotations fonts
        Italic (bool): Optional; italic state for annotations fonts
        Underline (bool): Optional; underline state for annotations fonts
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddAnnotationsByTrackWithSameFont_id
    if _logViewAddAnnotationsByTrackWithSameFont_id is None:
        _logViewAddAnnotationsByTrackWithSameFont_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddAnnotationsByTrackWithSameFont'))
    return _client_service().call(_logViewAddAnnotationsByTrackWithSameFont_id, *args, **kwargs)


_logViewAddAnnotationsByWell_id = None
def logViewAddAnnotationsByWell(*args, **kwargs):
    """
    logViewAddAnnotationsByWell(plotID: Number, w: str, groupName: str, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, listBackgroundColour: list=None, listBorderColour: list=None, listHorizontalTextAlignment: list='CENTER', listVerticalTextAlignment: list='TOP', listTextOrientation: list='HORIZONTAL', listFamilyFont: list='Verdana', listSize: list=12, listBold: list=None, listItalic: list=None, listUnderline: list=None) -> bool
    
    Add annotation to track in the logview
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        groupName (str): name of the annotations group
        pos (Number): track position
        size (Number): size of list for annotations
        listText (list): text list for annotations
        listTop (list): top list for annotations
        listBottom (list): bottom list for annotation
        listBackgroundColour (list): Optional; background color (hexadecimal code) list for annotations
        listBorderColour (list): Optional; border color (hexadecimal code) list for annotations
        listHorizontalTextAlignment (list): Optional; list of string enum for the horizontal alignment of each annotation, {'LEFT', 'CENTER', 'RIGHT'}
        listVerticalTextAlignment (list): Optional; list of string enum for the vertical alignment of each annotation, {'TOP', 'CENTER', 'BOTTOM'}
        listTextOrientation (list): Optional; list of string enum for the orientation of each annotation, {'HORIZONTAL', 'VERTICAL'}
        listFamilyFont (list): Optional; family font list for annotations fonts
        listSize (list): Optional; font size list for annotations fonts
        listBold (list): Optional; bold state list for annotations fonts
        listItalic (list): Optional; italic state list for annotations fonts
        listUnderline (list): Optional; underline state list for annotations fonts
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddAnnotationsByWell_id
    if _logViewAddAnnotationsByWell_id is None:
        _logViewAddAnnotationsByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddAnnotationsByWell'))
    return _client_service().call(_logViewAddAnnotationsByWell_id, *args, **kwargs)


_logViewAddAnnotationsByWellWithSameFont_id = None
def logViewAddAnnotationsByWellWithSameFont(*args, **kwargs):
    """
    logViewAddAnnotationsByWellWithSameFont(plotID: Number, w: str, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, FamilyFont: str, Size: Number, Bold: bool=False, Italic: bool=False, Underline: bool=False) -> bool
    
    Add annotation to track in the logview
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): track position
        size (Number): size of list for annotations
        listText (list): text list for annotations
        listTop (list): top list for annotations
        listBottom (list): bottom list for annotation
        FamilyFont (str): family font for annotations fonts
        Size (Number): font size for annotations fonts
        Bold (bool): Optional; bold state for annotations fonts
        Italic (bool): Optional; italic state for annotations fonts
        Underline (bool): Optional; underline state for annotations fonts
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddAnnotationsByWellWithSameFont_id
    if _logViewAddAnnotationsByWellWithSameFont_id is None:
        _logViewAddAnnotationsByWellWithSameFont_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddAnnotationsByWellWithSameFont'))
    return _client_service().call(_logViewAddAnnotationsByWellWithSameFont_id, *args, **kwargs)


_logViewAddFooters_id = None
def logViewAddFooters(*args, **kwargs):
    """
    logViewAddFooters(plotID: Number, footers: Union[str, list]) -> bool
    
    Add footers to the layout
    
    Args:
        plotID (Number): logview window ID
        footers (Union[str, list]): footer(s) name (Folder.FooterName)
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddFooters_id
    if _logViewAddFooters_id is None:
        _logViewAddFooters_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddFooters'))
    return _client_service().call(_logViewAddFooters_id, *args, **kwargs)


_logViewAddHeaders_id = None
def logViewAddHeaders(*args, **kwargs):
    """
    logViewAddHeaders(plotID: Number, headers: Union[str, list]) -> bool
    
    Add headers to the layout
    
    Args:
        plotID (Number): logview window ID
        headers (Union[str, list]): header(s) name (Folder.HeaderName)
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddHeaders_id
    if _logViewAddHeaders_id is None:
        _logViewAddHeaders_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddHeaders'))
    return _client_service().call(_logViewAddHeaders_id, *args, **kwargs)


_logViewAddMultipleTopHeaderNoteByTrack_id = None
def logViewAddMultipleTopHeaderNoteByTrack(*args, **kwargs):
    """
    logViewAddMultipleTopHeaderNoteByTrack(plotID: Number, listPos: list, text: str, centered: bool=True) -> bool
    
    Add a top header note for multiple tracks in the logview
    
    Args:
        plotID (Number): logview window ID
        listPos (list): track position for starting and finishing top header
        text (str): text of the top header note
        centered (bool): Optional; 1 if text is centered, 0 else
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddMultipleTopHeaderNoteByTrack_id
    if _logViewAddMultipleTopHeaderNoteByTrack_id is None:
        _logViewAddMultipleTopHeaderNoteByTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddMultipleTopHeaderNoteByTrack'))
    return _client_service().call(_logViewAddMultipleTopHeaderNoteByTrack_id, *args, **kwargs)


_logViewAddMultipleTrackTopHeaderNoteByWell_id = None
def logViewAddMultipleTrackTopHeaderNoteByWell(*args, **kwargs):
    """
    logViewAddMultipleTrackTopHeaderNoteByWell(plotID: Number, w: str, listPos: list, text: str, centered: bool=True) -> bool
    
    Add a top header note for multiple tracks in the logview
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        listPos (list): track position for starting and finishing top header
        text (str): text of the top header note
        centered (bool): Optional; 1 if text is centered, 0 else
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddMultipleTrackTopHeaderNoteByWell_id
    if _logViewAddMultipleTrackTopHeaderNoteByWell_id is None:
        _logViewAddMultipleTrackTopHeaderNoteByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddMultipleTrackTopHeaderNoteByWell'))
    return _client_service().call(_logViewAddMultipleTrackTopHeaderNoteByWell_id, *args, **kwargs)


_logViewAddTopHeaderNoteByTrack_id = None
def logViewAddTopHeaderNoteByTrack(*args, **kwargs):
    """
    logViewAddTopHeaderNoteByTrack(plotID: Number, pos: Number, text: str, centered: bool=True) -> bool
    
    Add a top header note for a track in the logview
    
    Args:
        plotID (Number): logview window ID
        pos (Number): track position
        text (str): text of the top header note
        centered (bool): Optional; 1 if text is centered, 0 else
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddTopHeaderNoteByTrack_id
    if _logViewAddTopHeaderNoteByTrack_id is None:
        _logViewAddTopHeaderNoteByTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddTopHeaderNoteByTrack'))
    return _client_service().call(_logViewAddTopHeaderNoteByTrack_id, *args, **kwargs)


_logViewAddTrackTopHeaderNoteByWell_id = None
def logViewAddTrackTopHeaderNoteByWell(*args, **kwargs):
    """
    logViewAddTrackTopHeaderNoteByWell(plotID: Number, w: str, pos: Number, text: str, centered: bool=True) -> bool
    
    Add a top header note for a track in the logview
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): track position
        text (str): text of the top header note
        centered (bool): Optional; 1 if text is centered, 0 else
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddTrackTopHeaderNoteByWell_id
    if _logViewAddTrackTopHeaderNoteByWell_id is None:
        _logViewAddTrackTopHeaderNoteByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddTrackTopHeaderNoteByWell'))
    return _client_service().call(_logViewAddTrackTopHeaderNoteByWell_id, *args, **kwargs)


_logViewAddZone_id = None
def logViewAddZone(*args, **kwargs):
    """
    logViewAddZone(plotID: Number, z: str) -> bool
    
    Display of one zone of the zonation set of the logview
    
    Args:
        plotID (Number): logview window ID
        z (str): name of the zone to display
    
    Returns:
        bool: operation exit status
    """
    global _logViewAddZone_id
    if _logViewAddZone_id is None:
        _logViewAddZone_id = _client_service().register_static_object(('TechlogPlot', 'logViewAddZone'))
    return _client_service().call(_logViewAddZone_id, *args, **kwargs)


_logViewApplyTemplate_id = None
def logViewApplyTemplate(*args, **kwargs):
    """
    logViewApplyTemplate(nameTemplate: str, nameObject: str, set: bool) -> Number
    
    Apply a layout template to a dataset or a well
    
    Args:
        nameTemplate (str): layout template name (level can be set in the name by following the syntax: 'level\\filename.xml')
        nameObject (str): well name if the template is applied by well. Well and dataset name (with the syntax 'wellName_datasetName') if the template is applied by dataset
        set (bool): True if dataset, False else
    
    Returns:
        Number: layout window ID
    """
    global _logViewApplyTemplate_id
    if _logViewApplyTemplate_id is None:
        _logViewApplyTemplate_id = _client_service().register_static_object(('TechlogPlot', 'logViewApplyTemplate'))
    return _client_service().call(_logViewApplyTemplate_id, *args, **kwargs)


_logViewCreate_id = None
def logViewCreate(*args, **kwargs):
    """
    logViewCreate(n: str, vl: list=None, mw: bool=True) -> Number
    
    Create a new logview
    
    Args:
        n (str): logview window name
        vl (list): Optional; variable list
        mw (bool): Optional; True = multiwell else False
    
    Returns:
        Number: logview window ID
    """
    global _logViewCreate_id
    if _logViewCreate_id is None:
        _logViewCreate_id = _client_service().register_static_object(('TechlogPlot', 'logViewCreate'))
    return _client_service().call(_logViewCreate_id, *args, **kwargs)


_logViewCreateBoreholeShape_id = None
def logViewCreateBoreholeShape(*args, **kwargs):
    """
    logViewCreateBoreholeShape(plotID: Number, wellName: str, datasetName: str, varNameList: list, padAAzimuthName: str='', relativeBearingName: str='', useAsCaliper: bool=True) -> bool
    
    Create and insert a borehole shape in an existing logview
    
    Args:
        plotID (Number): logview window ID
        wellName (str): name of the well
        datasetName (str): name of the dataset
        varNameList (list): list of calipers or radius names
        padAAzimuthName (str): Optional; name of the pad A azimuth
        relativeBearingName (str): Optional; name of the relative bearing
        useAsCaliper (bool): Optional; use the variable list as calipers if True, else use the variable list as radius
    
    Returns:
        bool: operation exit status
    """
    global _logViewCreateBoreholeShape_id
    if _logViewCreateBoreholeShape_id is None:
        _logViewCreateBoreholeShape_id = _client_service().register_static_object(('TechlogPlot', 'logViewCreateBoreholeShape'))
    return _client_service().call(_logViewCreateBoreholeShape_id, *args, **kwargs)


_logViewCreateCrossReference_id = None
def logViewCreateCrossReference(*args, **kwargs):
    """
    logViewCreateCrossReference(plotID: Number, reference: str, variable: str, track: Number, type: int, color: str='black', type: int='MARKER_CIRCLE', size: Number=5) -> bool
    
    Create a cross reference object.
    
    Args:
        plotID (Number): logview window ID
        reference (str): Custom reference WellName.DatasetName.VariableName
        variable (str): Variable WellName.DatasetName.VariableName
        track (Number): Position of the track in the logview
        type (int): 0: Cloud, 1: Mean
        color (str): Optional; Point color
        type (int): Optional; markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND',
           'MARKER_TRIANGLE', 'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT',
           'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN',
           'MARKER_EMPTY_TRIANGLE_LEFT', 'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN',
           'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size
    
    
    Returns:
        bool: operation exit status
    """
    global _logViewCreateCrossReference_id
    if _logViewCreateCrossReference_id is None:
        _logViewCreateCrossReference_id = _client_service().register_static_object(('TechlogPlot', 'logViewCreateCrossReference'))
    return _client_service().call(_logViewCreateCrossReference_id, *args, **kwargs)


_logViewCreateDipMeters_id = None
def logViewCreateDipMeters(*args, **kwargs):
    """
    logViewCreateDipMeters(plotID: Number, wellName: str, datasetName: str, varName: str, toolName: str, varNameList: list, orientationVar: str, doi: float=0.0, associatedCaliperVar: str='', associatedHoleAzimuthVar: str='', associatedHoleDeviationVar: str='') -> bool
    
    Create and insert a dip meters in an existing logview
    
    Args:
        plotID (Number): logview window ID
        wellName (str): name of the well
        datasetName (str): name of the dataset
        varName (str): name of the variable
        toolName (str): name of the tool (ARMS_4, ARMS_6, SHDT)
        varNameList (list): list of arms names
        orientationVar (str): name of the orientation variable
        doi (float): Optional; depth of investigation
        associatedCaliperVar (str): Optional; name of the associated caliper
        associatedHoleAzimuthVar (str): Optional; name of the associated hole azimuth
        associatedHoleDeviationVar (str): Optional; name of the associated hole deviation
    
    Returns:
        bool: operation exit status
    """
    global _logViewCreateDipMeters_id
    if _logViewCreateDipMeters_id is None:
        _logViewCreateDipMeters_id = _client_service().register_static_object(('TechlogPlot', 'logViewCreateDipMeters'))
    return _client_service().call(_logViewCreateDipMeters_id, *args, **kwargs)


_logViewDelta_id = None
def logViewDelta(*args, **kwargs):
    """
    logViewDelta(plotID: Number, log1: str, log2: str) -> bool
    
    Delta computation between two log lines (same well) or arrays (same well and dataset). Computed log is added to the current layout with name 'Delta_log1name_log2name'
    
    Args:
        plotID (Number): logview window ID
        log1 (str): first variable name
        log2 (str): second variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewDelta_id
    if _logViewDelta_id is None:
        _logViewDelta_id = _client_service().register_static_object(('TechlogPlot', 'logViewDelta'))
    return _client_service().call(_logViewDelta_id, *args, **kwargs)


_logViewDuplicate_id = None
def logViewDuplicate(*args, **kwargs):
    """
    logViewDuplicate(plotID: Number) -> Number
    
    Duplicate the logview
    
    Args:
        plotID (Number): logview window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _logViewDuplicate_id
    if _logViewDuplicate_id is None:
        _logViewDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'logViewDuplicate'))
    return _client_service().call(_logViewDuplicate_id, *args, **kwargs)


_logViewFillWithColor_id = None
def logViewFillWithColor(*args, **kwargs):
    """
    logViewFillWithColor(plotID: Number, v: str, left: bool, r: Number, g: Number, b: Number) -> bool
    
    Add a filling to variable with color
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        left (bool): 1 = fill left, 0 else
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _logViewFillWithColor_id
    if _logViewFillWithColor_id is None:
        _logViewFillWithColor_id = _client_service().register_static_object(('TechlogPlot', 'logViewFillWithColor'))
    return _client_service().call(_logViewFillWithColor_id, *args, **kwargs)


_logViewFillWithPalette_id = None
def logViewFillWithPalette(*args, **kwargs):
    """
    logViewFillWithPalette(plotID: Number, v: str, left: bool, pal: str) -> bool
    
    Add a filling to variable with palette
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        left (bool): 1 = fill left, 0 else
        pal (str): palette name (level can be set in the name by following the syntax: 'level\\palette')
    
    Returns:
        bool: operation exit status
    """
    global _logViewFillWithPalette_id
    if _logViewFillWithPalette_id is None:
        _logViewFillWithPalette_id = _client_service().register_static_object(('TechlogPlot', 'logViewFillWithPalette'))
    return _client_service().call(_logViewFillWithPalette_id, *args, **kwargs)


_logViewFillWithPattern_id = None
def logViewFillWithPattern(*args, **kwargs):
    """
    logViewFillWithPattern(plotID: Number, v: str, left: bool, pal: str) -> bool
    
    Add a filling to variable with pattern
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        left (bool): 1 = fill left, 0 else
        pal (str): pattern name
    
    Returns:
        bool: operation exit status
    """
    global _logViewFillWithPattern_id
    if _logViewFillWithPattern_id is None:
        _logViewFillWithPattern_id = _client_service().register_static_object(('TechlogPlot', 'logViewFillWithPattern'))
    return _client_service().call(_logViewFillWithPattern_id, *args, **kwargs)


_logViewGetApplyTheFamilyPropertiesStatus_id = None
def logViewGetApplyTheFamilyPropertiesStatus(*args, **kwargs):
    """
    logViewGetApplyTheFamilyPropertiesStatus(plotID: Number) -> bool
    
    Get the Property Apply the family properties status.
    
    Args:
        plotID (Number): logview window ID
    
    Returns:
        bool: True if the property is applied, false otherwise
    """
    global _logViewGetApplyTheFamilyPropertiesStatus_id
    if _logViewGetApplyTheFamilyPropertiesStatus_id is None:
        _logViewGetApplyTheFamilyPropertiesStatus_id = _client_service().register_static_object(('TechlogPlot', 'logViewGetApplyTheFamilyPropertiesStatus'))
    return _client_service().call(_logViewGetApplyTheFamilyPropertiesStatus_id, *args, **kwargs)


_logViewGetAxeUnitByVariable_id = None
def logViewGetAxeUnitByVariable(*args, **kwargs):
    """
    logViewGetAxeUnitByVariable(plotID: Number, v: str) -> str
    
    Get a variable axis unit in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
    
    Returns:
        str: unit of the first log found for the given variable
    """
    global _logViewGetAxeUnitByVariable_id
    if _logViewGetAxeUnitByVariable_id is None:
        _logViewGetAxeUnitByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewGetAxeUnitByVariable'))
    return _client_service().call(_logViewGetAxeUnitByVariable_id, *args, **kwargs)


_logViewGetIdByName_id = None
def logViewGetIdByName(*args, **kwargs):
    """
    logViewGetIdByName(n: str) -> Number
    
    Find the ID of a name-known logview
    
    Args:
        n (str): logview name
    
    Returns:
        Number: logview window ID
    """
    global _logViewGetIdByName_id
    if _logViewGetIdByName_id is None:
        _logViewGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'logViewGetIdByName'))
    return _client_service().call(_logViewGetIdByName_id, *args, **kwargs)


_logViewGetVariableListByTrack_id = None
def logViewGetVariableListByTrack(*args, **kwargs):
    """
    logViewGetVariableListByTrack(plotID: int) -> dict
    
    Get the list of variables by track in a layout
    
    Args:
        plotID (int): logview window ID
    
    Returns:
        dict: A dictionary with track index as key and a list [Well.Dataset.Variable] as value
    """
    global _logViewGetVariableListByTrack_id
    if _logViewGetVariableListByTrack_id is None:
        _logViewGetVariableListByTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewGetVariableListByTrack'))
    return _client_service().call(_logViewGetVariableListByTrack_id, *args, **kwargs)


_logViewHorizontalGridDisplay_id = None
def logViewHorizontalGridDisplay(*args, **kwargs):
    """
    logViewHorizontalGridDisplay(plotID: Number, w: str, pos: Number, g: int=0) -> bool
    
    Change horizontal grid display in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        g (int): Optional; display type {0 = 'HORIZONTAL_BELOW', 1 = 'HORIZONTAL_TOP', 2 = 'HORIZONTAL_NONE'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewHorizontalGridDisplay_id
    if _logViewHorizontalGridDisplay_id is None:
        _logViewHorizontalGridDisplay_id = _client_service().register_static_object(('TechlogPlot', 'logViewHorizontalGridDisplay'))
    return _client_service().call(_logViewHorizontalGridDisplay_id, *args, **kwargs)


_logViewInsertBaseline_id = None
def logViewInsertBaseline(*args, **kwargs):
    """
    logViewInsertBaseline(plotID: Number, v: str, val: Number) -> bool
    
    Display of a baseline on the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable ID
        val (Number): baseline value
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertBaseline_id
    if _logViewInsertBaseline_id is None:
        _logViewInsertBaseline_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertBaseline'))
    return _client_service().call(_logViewInsertBaseline_id, *args, **kwargs)


_logViewInsertCrossPlot_id = None
def logViewInsertCrossPlot(*args, **kwargs):
    """
    logViewInsertCrossPlot(plotID: Number, var1: str, var2: str, top: Number, bottom: Number, var3: str=None) -> bool
    
    Insert a cross-plot object in the logview
    
    Args:
        plotID (Number): logview window ID
        var1 (str): X variable name
        var2 (str): Y variable name
        top (Number): top value for insertion
        bottom (Number): bottom value for insertion
        var3 (str): Optional; color variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertCrossPlot_id
    if _logViewInsertCrossPlot_id is None:
        _logViewInsertCrossPlot_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertCrossPlot'))
    return _client_service().call(_logViewInsertCrossPlot_id, *args, **kwargs)


_logViewInsertCrossPlotByDepth_id = None
def logViewInsertCrossPlotByDepth(*args, **kwargs):
    """
    logViewInsertCrossPlotByDepth(plotID: Number, var1: str, var2: str, step: Number, top: Number, bottom: Number, var3: str=None) -> bool
    
    Insert cross-plot object by depth in the logview
    
    Args:
        plotID (Number): logview window ID
        var1 (str): X variable name
        var2 (str): Y variable name
        step (Number): step for inserting cross-plot
        top (Number): top value for insertion
        bottom (Number): bottom value for insertion
        var3 (str): Optional; color variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertCrossPlotByDepth_id
    if _logViewInsertCrossPlotByDepth_id is None:
        _logViewInsertCrossPlotByDepth_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertCrossPlotByDepth'))
    return _client_service().call(_logViewInsertCrossPlotByDepth_id, *args, **kwargs)


_logViewInsertCrossPlotByZone_id = None
def logViewInsertCrossPlotByZone(*args, **kwargs):
    """
    logViewInsertCrossPlotByZone(plotID: Number, var1: str, var2: str, zn: str, var3: str=None) -> bool
    
    Insert cross-plot object by zone in the logview
    
    Args:
        plotID (Number): logview window ID
        var1 (str): X variable name
        var2 (str): Y variable name
        zn (str): zonation name
        var3 (str): Optional; color variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertCrossPlotByZone_id
    if _logViewInsertCrossPlotByZone_id is None:
        _logViewInsertCrossPlotByZone_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertCrossPlotByZone'))
    return _client_service().call(_logViewInsertCrossPlotByZone_id, *args, **kwargs)


_logViewInsertHistogram_id = None
def logViewInsertHistogram(*args, **kwargs):
    """
    logViewInsertHistogram(plotID: Number, var: str, top: Number, bottom: Number) -> bool
    
    Insert a histogram object in the logview
    
    Args:
        plotID (Number): logview window ID
        var (str): variable name
        top (Number): top value for insertion
        bottom (Number): bottom value for insertion
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertHistogram_id
    if _logViewInsertHistogram_id is None:
        _logViewInsertHistogram_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertHistogram'))
    return _client_service().call(_logViewInsertHistogram_id, *args, **kwargs)


_logViewInsertHistogramByDepth_id = None
def logViewInsertHistogramByDepth(*args, **kwargs):
    """
    logViewInsertHistogramByDepth(plotID: Number, var: str, step: Number, top: Number, bottom: Number) -> bool
    
    Insert histogram object by depth in the logview
    
    Args:
        plotID (Number): logview window ID
        var (str): variable name
        step (Number): step for inserting histogram
        top (Number): top value for insertion
        bottom (Number): bottom value for insertion
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertHistogramByDepth_id
    if _logViewInsertHistogramByDepth_id is None:
        _logViewInsertHistogramByDepth_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertHistogramByDepth'))
    return _client_service().call(_logViewInsertHistogramByDepth_id, *args, **kwargs)


_logViewInsertHistogramByZone_id = None
def logViewInsertHistogramByZone(*args, **kwargs):
    """
    logViewInsertHistogramByZone(plotID: Number, var: str, zn: str) -> bool
    
    Insert histogram object by zone in the logview
    
    Args:
        plotID (Number): logview window ID
        var (str): variable name
        zn (str): zonation name
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertHistogramByZone_id
    if _logViewInsertHistogramByZone_id is None:
        _logViewInsertHistogramByZone_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertHistogramByZone'))
    return _client_service().call(_logViewInsertHistogramByZone_id, *args, **kwargs)


_logViewInsertStereonet_id = None
def logViewInsertStereonet(*args, **kwargs):
    """
    logViewInsertStereonet(plotID: Number, var: str, top: Number, bottom: Number, var2: str=None) -> bool
    
    Insert a stereonet object in the logview
    
    Args:
        plotID (Number): logview window ID
        var (str): dip variable name or angular variable name for azimuth
        top (Number): top value for insertion
        bottom (Number): bottom value for insertion
        var2 (str): Optional; second angular variable name for dip
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertStereonet_id
    if _logViewInsertStereonet_id is None:
        _logViewInsertStereonet_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertStereonet'))
    return _client_service().call(_logViewInsertStereonet_id, *args, **kwargs)


_logViewInsertStereonetByDepth_id = None
def logViewInsertStereonetByDepth(*args, **kwargs):
    """
    logViewInsertStereonetByDepth(plotID: Number, var: str, step: Number, top: Number, bottom: Number, var2: str=None) -> bool
    
    Insert stereonet object by depth in the logview
    
    Args:
        plotID (Number): logview window ID
        var (str): dip variable name or angular variable name for azimuth
        step (Number): step for inserting steronet
        top (Number): top value for insertion
        bottom (Number): bottom value for insertion
        var2 (str): Optional; second angular variable name for dip
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertStereonetByDepth_id
    if _logViewInsertStereonetByDepth_id is None:
        _logViewInsertStereonetByDepth_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertStereonetByDepth'))
    return _client_service().call(_logViewInsertStereonetByDepth_id, *args, **kwargs)


_logViewInsertStereonetByZone_id = None
def logViewInsertStereonetByZone(*args, **kwargs):
    """
    logViewInsertStereonetByZone(plotID: Number, var: str, zn: str, var2: str=None) -> bool
    
    Insert stereonet object by zone in the logview
    
    Args:
        plotID (Number): logview window ID
        var (str): dip variable name or angular variable name for azimuth
        zn (str): zonation name
        var2 (str): Optional; second angular variable name for dip
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertStereonetByZone_id
    if _logViewInsertStereonetByZone_id is None:
        _logViewInsertStereonetByZone_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertStereonetByZone'))
    return _client_service().call(_logViewInsertStereonetByZone_id, *args, **kwargs)


_logViewInsertTrack_id = None
def logViewInsertTrack(*args, **kwargs):
    """
    logViewInsertTrack(plotID: Number, tr: int, pos: Number=0) -> Number
    
    Insert any type of track in a logview
    
    Args:
        plotID (Number): logview window ID
        tr (int): track type {'NORMAL', 'REFERENCE', 'SEPARATOR',
        'PLOT', 'ZONATION', 'ANNOTATION', 'ARRAY'}
        pos (Number): Optional; position of the track in the layout
    
    Returns:
        Number: reference number of the track if success, else -1
    """
    global _logViewInsertTrack_id
    if _logViewInsertTrack_id is None:
        _logViewInsertTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertTrack'))
    return _client_service().call(_logViewInsertTrack_id, *args, **kwargs)


_logViewInsertTrackByWell_id = None
def logViewInsertTrackByWell(*args, **kwargs):
    """
    logViewInsertTrackByWell(plotID: Number, n: str, tr: int, pos: Number=0, zs: str='') -> Number
    
    Insert any type of track in a multiwell logview
    
    Args:
        plotID (Number): logview window ID
        n (str): well name
        tr (int): track type {'NORMAL', 'REFERENCE', 'SEPARATOR',
        'PLOT', 'ZONATION', 'ANNOTATION', 'ARRAY'}
        pos (Number): Optional; position of the track in the layout
        zs (str): Optional; zonation set (if insertion of a zonation track)
    
    Returns:
        Number: reference number of the track if success, else -1
    """
    global _logViewInsertTrackByWell_id
    if _logViewInsertTrackByWell_id is None:
        _logViewInsertTrackByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertTrackByWell'))
    return _client_service().call(_logViewInsertTrackByWell_id, *args, **kwargs)


_logViewInsertUncertaintyConstant_id = None
def logViewInsertUncertaintyConstant(*args, **kwargs):
    """
    logViewInsertUncertaintyConstant(plotID: Number, v: str, lowerBound: Number, upperBound: Number, r: Number=255, g: Number=255, b: Number=0) -> bool
    
    Insert an incertitude range for this variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable ID
        lowerBound (Number): lower limit for uncertainty value
        upperBound (Number): upper limit for uncertainty value
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertUncertaintyConstant_id
    if _logViewInsertUncertaintyConstant_id is None:
        _logViewInsertUncertaintyConstant_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertUncertaintyConstant'))
    return _client_service().call(_logViewInsertUncertaintyConstant_id, *args, **kwargs)


_logViewInsertUncertaintyVariable_id = None
def logViewInsertUncertaintyVariable(*args, **kwargs):
    """
    logViewInsertUncertaintyVariable(plotID: Number, v: str, variableLowerBound: str, variableUpperBound: str, r: Number=255, g: Number=255, b: Number=0) -> bool
    
    Insert an incertitude range for this variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable ID
        variableLowerBound (str): lower limit for uncertainty values
        variableUpperBound (str): upper limit for uncertainty values
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertUncertaintyVariable_id
    if _logViewInsertUncertaintyVariable_id is None:
        _logViewInsertUncertaintyVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertUncertaintyVariable'))
    return _client_service().call(_logViewInsertUncertaintyVariable_id, *args, **kwargs)


_logViewInsertVariable_id = None
def logViewInsertVariable(*args, **kwargs):
    """
    logViewInsertVariable(plotID: Number, vl: list, tr: Number=None) -> bool
    
    Insert a new logs in a layout - it is possible to specify a track by its position to insert logs
    
    Args:
        plotID (Number): logview window ID
        vl (list): variables list to insert
        tr (Number): Optional; position of the track
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertVariable_id
    if _logViewInsertVariable_id is None:
        _logViewInsertVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertVariable'))
    return _client_service().call(_logViewInsertVariable_id, *args, **kwargs)


_logViewInsertVariableInTrack_id = None
def logViewInsertVariableInTrack(*args, **kwargs):
    """
    logViewInsertVariableInTrack(plotID: Number, var: str, newvar: list) -> bool
    
    Insert a new logs in a track already existing & containing log(s) in the layout - takes a variable already in the wanted track to find it
    
    Args:
        plotID (Number): logview window ID
        var (str): name of one variable which log is in the track
        newvar (list): new variable or variables list
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertVariableInTrack_id
    if _logViewInsertVariableInTrack_id is None:
        _logViewInsertVariableInTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertVariableInTrack'))
    return _client_service().call(_logViewInsertVariableInTrack_id, *args, **kwargs)


_logViewInsertVariablesInCumulatedTrack_id = None
def logViewInsertVariablesInCumulatedTrack(*args, **kwargs):
    """
    logViewInsertVariablesInCumulatedTrack(plotID: Number, varlist: list, pos: Number=-1, colorlist: list=None, patternlist: list=None, lock: bool=False) -> bool
    
    Insert variables in a cumulated track - it is possible to specify the track position
    
    Args:
        plotID (Number): logview window ID
        varlist (list): variables list to insert
        pos (Number): Optional; position of the track
        colorlist (list): Optional; colors list
        patternlist (list): Optional; patterns list
        lock (bool): Optional; {False = 'Cumulate the variables', True = 'Lock the track. Does not cumulate the variables'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertVariablesInCumulatedTrack_id
    if _logViewInsertVariablesInCumulatedTrack_id is None:
        _logViewInsertVariablesInCumulatedTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertVariablesInCumulatedTrack'))
    return _client_service().call(_logViewInsertVariablesInCumulatedTrack_id, *args, **kwargs)


_logViewInsertVariablesInCumulatedTrackByWell_id = None
def logViewInsertVariablesInCumulatedTrackByWell(*args, **kwargs):
    """
    logViewInsertVariablesInCumulatedTrackByWell(plotID: Number, well: str, varlist: list, pos: Number=-1, colorlist: list=None, patternlist: list=None, noCumulVarList: list=None) -> bool
    
    Insert variables in a cumulated track in a specified well - it is possible to specify the track position according to the well
    
    Args:
        plotID (Number): logview window ID
        well (str): well name
        varlist (list): variables list to insert
        pos (Number): Optional; position of the track
        colorlist (list): Optional; colors list
        patternlist (list): Optional; patterns list
        noCumulVarList (list): Optional; variables list to insert without cumulating
    
    Returns:
        bool: operation exit status
    """
    global _logViewInsertVariablesInCumulatedTrackByWell_id
    if _logViewInsertVariablesInCumulatedTrackByWell_id is None:
        _logViewInsertVariablesInCumulatedTrackByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewInsertVariablesInCumulatedTrackByWell'))
    return _client_service().call(_logViewInsertVariablesInCumulatedTrackByWell_id, *args, **kwargs)


_logViewInverseArrayBHI_id = None
def logViewInverseArrayBHI(*args, **kwargs):
    """
    logViewInverseArrayBHI(plotID: Number, variableName: str, inverse: bool) -> bool
    
    Inverse arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the arrayBHI [wellName.datasetName.variableName]
        inverse (bool): inversion status
    
    Returns:
        bool: operation exit status
    """
    global _logViewInverseArrayBHI_id
    if _logViewInverseArrayBHI_id is None:
        _logViewInverseArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewInverseArrayBHI'))
    return _client_service().call(_logViewInverseArrayBHI_id, *args, **kwargs)


_logViewLimitsByVariable_id = None
def logViewLimitsByVariable(*args, **kwargs):
    """
    logViewLimitsByVariable(plotID: Number, variableName: str) -> list
    
    Get the limits of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
    
    Returns:
        list: limits [[float] lower limit, [float] upper limit, [bool] inverted]
    """
    global _logViewLimitsByVariable_id
    if _logViewLimitsByVariable_id is None:
        _logViewLimitsByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewLimitsByVariable'))
    return _client_service().call(_logViewLimitsByVariable_id, *args, **kwargs)


_logViewLimitsTypeByVariable_id = None
def logViewLimitsTypeByVariable(*args, **kwargs):
    """
    logViewLimitsTypeByVariable(plotID: Number, variableName: str) -> str
    
    Get the limits type of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
    
    Returns:
        str: limits type ['variable', 'user', 'family']
    """
    global _logViewLimitsTypeByVariable_id
    if _logViewLimitsTypeByVariable_id is None:
        _logViewLimitsTypeByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewLimitsTypeByVariable'))
    return _client_service().call(_logViewLimitsTypeByVariable_id, *args, **kwargs)


_logViewLoadFooter_id = None
def logViewLoadFooter(*args, **kwargs):
    """
    logViewLoadFooter(plotID: Number, footer: str) -> bool
    
    Load the footer as main footer of the layout
    
    Args:
        plotID (Number): logview window ID
        footer (str): footer name (Folder.FooterName)
    
    Returns:
        bool: operation exit status
    """
    global _logViewLoadFooter_id
    if _logViewLoadFooter_id is None:
        _logViewLoadFooter_id = _client_service().register_static_object(('TechlogPlot', 'logViewLoadFooter'))
    return _client_service().call(_logViewLoadFooter_id, *args, **kwargs)


_logViewLoadHeader_id = None
def logViewLoadHeader(*args, **kwargs):
    """
    logViewLoadHeader(plotID: Number, header: str) -> bool
    
    Load the header as main header of the layout
    
    Args:
        plotID (Number): logview window ID
        header (str): header name (Folder.HeaderName)
    
    Returns:
        bool: operation exit status
    """
    global _logViewLoadHeader_id
    if _logViewLoadHeader_id is None:
        _logViewLoadHeader_id = _client_service().register_static_object(('TechlogPlot', 'logViewLoadHeader'))
    return _client_service().call(_logViewLoadHeader_id, *args, **kwargs)


_logViewOpen_id = None
def logViewOpen(*args, **kwargs):
    """
    logViewOpen(n: str, f: str='', type: int=0) -> Number
    
    Open an existing Logview
    
    Args:
        n (str): logview window name
        f (str): Optional; folder
        type (int): Optional; layout type {'LAYOUT', 'LAYOUTTEMPLATE'}
    
    Returns:
        Number: logview window ID
    """
    global _logViewOpen_id
    if _logViewOpen_id is None:
        _logViewOpen_id = _client_service().register_static_object(('TechlogPlot', 'logViewOpen'))
    return _client_service().call(_logViewOpen_id, *args, **kwargs)


_logViewOptimised_id = None
def logViewOptimised(*args, **kwargs):
    """
    logViewOptimised(plotID: Number, v: str, optimised: bool) -> bool
    
    [DEPRECATED] (use logViewOptimized instead) Change if a log display is optimised or not
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimised_id
    if _logViewOptimised_id is None:
        _logViewOptimised_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimised'))
    return _client_service().call(_logViewOptimised_id, *args, **kwargs)


_logViewOptimisedByArrayBHI_id = None
def logViewOptimisedByArrayBHI(*args, **kwargs):
    """
    logViewOptimisedByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number=3) -> bool
    
    [DEPRECATED] (use logViewOptimizedByArrayBHI instead) Set if optimised & threshold value for arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
        value (Number): Optional; threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimisedByArrayBHI_id
    if _logViewOptimisedByArrayBHI_id is None:
        _logViewOptimisedByArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimisedByArrayBHI'))
    return _client_service().call(_logViewOptimisedByArrayBHI_id, *args, **kwargs)


_logViewOptimisedX_id = None
def logViewOptimisedX(*args, **kwargs):
    """
    logViewOptimisedX(plotID: Number, v: str, optimised: bool, value: Number=3) -> bool
    
    [DEPRECATED] (use logViewOptimizedX instead) Set if optimised horizontally & threshold value for array or arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
        value (Number): Optional; threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimisedX_id
    if _logViewOptimisedX_id is None:
        _logViewOptimisedX_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimisedX'))
    return _client_service().call(_logViewOptimisedX_id, *args, **kwargs)


_logViewOptimisedXByArrayBHI_id = None
def logViewOptimisedXByArrayBHI(*args, **kwargs):
    """
    logViewOptimisedXByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number=3) -> bool
    
    [DEPRECATED] (use logViewOptimizedByArrayBHI instead) Set if optimised horizontally & threshold value for arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
        value (Number): Optional; threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimisedXByArrayBHI_id
    if _logViewOptimisedXByArrayBHI_id is None:
        _logViewOptimisedXByArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimisedXByArrayBHI'))
    return _client_service().call(_logViewOptimisedXByArrayBHI_id, *args, **kwargs)


_logViewOptimized_id = None
def logViewOptimized(*args, **kwargs):
    """
    logViewOptimized(plotID: Number, v: str, optimised: bool) -> bool
    
    Change if a log display is optimised or not
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimized_id
    if _logViewOptimized_id is None:
        _logViewOptimized_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimized'))
    return _client_service().call(_logViewOptimized_id, *args, **kwargs)


_logViewOptimizedByArrayBHI_id = None
def logViewOptimizedByArrayBHI(*args, **kwargs):
    """
    logViewOptimizedByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number=3) -> bool
    
    Set if optimised & threshold value for arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
        value (Number): Optional; threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimizedByArrayBHI_id
    if _logViewOptimizedByArrayBHI_id is None:
        _logViewOptimizedByArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimizedByArrayBHI'))
    return _client_service().call(_logViewOptimizedByArrayBHI_id, *args, **kwargs)


_logViewOptimizedX_id = None
def logViewOptimizedX(*args, **kwargs):
    """
    logViewOptimizedX(plotID: Number, v: str, optimised: bool, value: Number=3) -> bool
    
    Set if optimised horizontally & threshold value for array or arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
        value (Number): Optional; threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimizedX_id
    if _logViewOptimizedX_id is None:
        _logViewOptimizedX_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimizedX'))
    return _client_service().call(_logViewOptimizedX_id, *args, **kwargs)


_logViewOptimizedXByArrayBHI_id = None
def logViewOptimizedXByArrayBHI(*args, **kwargs):
    """
    logViewOptimizedXByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number=3) -> bool
    
    Set if optimised horizontally & threshold value for arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        optimised (bool): True if optimised, False else
        value (Number): Optional; threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewOptimizedXByArrayBHI_id
    if _logViewOptimizedXByArrayBHI_id is None:
        _logViewOptimizedXByArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewOptimizedXByArrayBHI'))
    return _client_service().call(_logViewOptimizedXByArrayBHI_id, *args, **kwargs)


_logViewRemoveAll_id = None
def logViewRemoveAll(*args, **kwargs):
    """
    logViewRemoveAll(plotID: Number) -> bool
    
    Remove all tracks from the layout
    
    Args:
        plotID (Number): logview window ID
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveAll_id
    if _logViewRemoveAll_id is None:
        _logViewRemoveAll_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveAll'))
    return _client_service().call(_logViewRemoveAll_id, *args, **kwargs)


_logViewRemoveFill_id = None
def logViewRemoveFill(*args, **kwargs):
    """
    logViewRemoveFill(plotID: Number, v: str) -> bool
    
    remove a filling to variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveFill_id
    if _logViewRemoveFill_id is None:
        _logViewRemoveFill_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveFill'))
    return _client_service().call(_logViewRemoveFill_id, *args, **kwargs)


_logViewRemoveLog_id = None
def logViewRemoveLog(*args, **kwargs):
    """
    logViewRemoveLog(plotID: Number, v: str, tr: bool=False) -> bool
    
    Remove a log from the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable ID of the log to remove
        tr (bool): Optional; =1 if remove the empty track after removing log
        warning: all empty tracks of the logview will be removed
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveLog_id
    if _logViewRemoveLog_id is None:
        _logViewRemoveLog_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveLog'))
    return _client_service().call(_logViewRemoveLog_id, *args, **kwargs)


_logViewRemoveTrackByPosition_id = None
def logViewRemoveTrackByPosition(*args, **kwargs):
    """
    logViewRemoveTrackByPosition(plotID: Number, pos: Number, n: str=None, trackType: int=0) -> bool
    
    Remove a track from the layout - track selected by its position
    
    Args:
        plotID (Number): logview window ID
        pos (Number): position of the track to delete
        n (str): Optional; well name (if multiwell logview)
        trackType (int): Optional; track type {'NORMAL', 'REFERENCE', 'SEPARATOR',
        'PLOT', 'ZONATION', 'ANNOTATION'} (if multiwell logview)
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveTrackByPosition_id
    if _logViewRemoveTrackByPosition_id is None:
        _logViewRemoveTrackByPosition_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveTrackByPosition'))
    return _client_service().call(_logViewRemoveTrackByPosition_id, *args, **kwargs)


_logViewRemoveTrackByVar_id = None
def logViewRemoveTrackByVar(*args, **kwargs):
    """
    logViewRemoveTrackByVar(plotID: Number, var: str) -> bool
    
    [DEPRECATED] (use logViewRemoveTrackByVariable instead) Remove a track from the layout - track selected by variable
    
    Args:
        plotID (Number): logview window ID
        var (str): variable in track to delete
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveTrackByVar_id
    if _logViewRemoveTrackByVar_id is None:
        _logViewRemoveTrackByVar_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveTrackByVar'))
    return _client_service().call(_logViewRemoveTrackByVar_id, *args, **kwargs)


_logViewRemoveTrackByVariable_id = None
def logViewRemoveTrackByVariable(*args, **kwargs):
    """
    logViewRemoveTrackByVariable(plotID: Number, var: str) -> bool
    
    Remove a track from the layout - track selected by variable
    
    Args:
        plotID (Number): logview window ID
        var (str): variable in track to delete
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveTrackByVariable_id
    if _logViewRemoveTrackByVariable_id is None:
        _logViewRemoveTrackByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveTrackByVariable'))
    return _client_service().call(_logViewRemoveTrackByVariable_id, *args, **kwargs)


_logViewRemoveWell_id = None
def logViewRemoveWell(*args, **kwargs):
    """
    logViewRemoveWell(plotID: Number, w: str) -> bool
    
    Remove all logs from a well from a layout
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveWell_id
    if _logViewRemoveWell_id is None:
        _logViewRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveWell'))
    return _client_service().call(_logViewRemoveWell_id, *args, **kwargs)


_logViewRemoveZonation_id = None
def logViewRemoveZonation(*args, **kwargs):
    """
    logViewRemoveZonation(plotID: Number, sn: str) -> bool
    
    Remove a set of zonation from the logview - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): logview window ID
        sn (str): name of the set of zonation
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveZonation_id
    if _logViewRemoveZonation_id is None:
        _logViewRemoveZonation_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveZonation'))
    return _client_service().call(_logViewRemoveZonation_id, *args, **kwargs)


_logViewRemoveZone_id = None
def logViewRemoveZone(*args, **kwargs):
    """
    logViewRemoveZone(plotID: Number, z: str) -> bool
    
    Remove the display of one zone of the zonation set of the logview
    
    Args:
        plotID (Number): logview window ID
        z (str): name of the zone
    
    Returns:
        bool: operation exit status
    """
    global _logViewRemoveZone_id
    if _logViewRemoveZone_id is None:
        _logViewRemoveZone_id = _client_service().register_static_object(('TechlogPlot', 'logViewRemoveZone'))
    return _client_service().call(_logViewRemoveZone_id, *args, **kwargs)


_logViewSave_id = None
def logViewSave(*args, **kwargs):
    """
    logViewSave(plotID: Number, n: str, f: str='', type: int=0) -> bool
    
    Save the logview
    
    Args:
        plotID (Number): logview window ID
        n (str): logview window name
        f (str): Optional; folder
        type (int): Optional; layout type {0='LAYOUT', 1='LAYOUTTEMPLATE'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSave_id
    if _logViewSave_id is None:
        _logViewSave_id = _client_service().register_static_object(('TechlogPlot', 'logViewSave'))
    return _client_service().call(_logViewSave_id, *args, **kwargs)


_logViewScaleByVariable_id = None
def logViewScaleByVariable(*args, **kwargs):
    """
    logViewScaleByVariable(plotID: Number, variableName: str) -> str
    
    Get the scale of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
    
    Returns:
        str: scale ['linear', 'logarithmic']
    """
    global _logViewScaleByVariable_id
    if _logViewScaleByVariable_id is None:
        _logViewScaleByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewScaleByVariable'))
    return _client_service().call(_logViewScaleByVariable_id, *args, **kwargs)


_logViewScaleUnitByVariable_id = None
def logViewScaleUnitByVariable(*args, **kwargs):
    """
    logViewScaleUnitByVariable(plotID: Number, variableName: str) -> str
    
    Get the scale unit a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
    
    Returns:
        str: scale unit
    """
    global _logViewScaleUnitByVariable_id
    if _logViewScaleUnitByVariable_id is None:
        _logViewScaleUnitByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewScaleUnitByVariable'))
    return _client_service().call(_logViewScaleUnitByVariable_id, *args, **kwargs)


_logViewSetApplyTheFamilyPropertiesStatus_id = None
def logViewSetApplyTheFamilyPropertiesStatus(*args, **kwargs):
    """
    logViewSetApplyTheFamilyPropertiesStatus(plotID: Number, status: bool=True) -> bool
    
    Set the Property Apply the family properties.
    
    Args:
        plotID (Number): logview window ID
        status (bool): Optional; state
    
    Returns:
        bool: True if operation is OK else return False
    """
    global _logViewSetApplyTheFamilyPropertiesStatus_id
    if _logViewSetApplyTheFamilyPropertiesStatus_id is None:
        _logViewSetApplyTheFamilyPropertiesStatus_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetApplyTheFamilyPropertiesStatus'))
    return _client_service().call(_logViewSetApplyTheFamilyPropertiesStatus_id, *args, **kwargs)


_logViewSetArrayBHIOrientation_id = None
def logViewSetArrayBHIOrientation(*args, **kwargs):
    """
    logViewSetArrayBHIOrientation(plotID: Number, v: str, value: Number) -> bool
    
    Set orientation value for arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        value (Number): orientation value
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetArrayBHIOrientation_id
    if _logViewSetArrayBHIOrientation_id is None:
        _logViewSetArrayBHIOrientation_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetArrayBHIOrientation'))
    return _client_service().call(_logViewSetArrayBHIOrientation_id, *args, **kwargs)


_logViewSetAxeLimitTypeByVariable_id = None
def logViewSetAxeLimitTypeByVariable(*args, **kwargs):
    """
    logViewSetAxeLimitTypeByVariable(plotID: Number, v: str, sc: int) -> bool
    
    Change a variable axis type in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        sc (int): limit type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeLimitTypeByVariable_id
    if _logViewSetAxeLimitTypeByVariable_id is None:
        _logViewSetAxeLimitTypeByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeLimitTypeByVariable'))
    return _client_service().call(_logViewSetAxeLimitTypeByVariable_id, *args, **kwargs)


_logViewSetAxeScaleByVariable_id = None
def logViewSetAxeScaleByVariable(*args, **kwargs):
    """
    logViewSetAxeScaleByVariable(plotID: Number, v: str, sc: int) -> bool
    
    Change a variable axis scale in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        sc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeScaleByVariable_id
    if _logViewSetAxeScaleByVariable_id is None:
        _logViewSetAxeScaleByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeScaleByVariable'))
    return _client_service().call(_logViewSetAxeScaleByVariable_id, *args, **kwargs)


_logViewSetAxeUnitByVariable_id = None
def logViewSetAxeUnitByVariable(*args, **kwargs):
    """
    logViewSetAxeUnitByVariable(plotID: Number, v: str, u: str) -> bool
    
    Change a variable axis unit in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        u (str): new unit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeUnitByVariable_id
    if _logViewSetAxeUnitByVariable_id is None:
        _logViewSetAxeUnitByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeUnitByVariable'))
    return _client_service().call(_logViewSetAxeUnitByVariable_id, *args, **kwargs)


_logViewSetAxeXAxeIndexTypeToArray_id = None
def logViewSetAxeXAxeIndexTypeToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeIndexTypeToArray(plotID: Number, v: str, xat: int) -> bool
    
    Change the X index axis limits types for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xat (int): X axis type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeIndexTypeToArray_id
    if _logViewSetAxeXAxeIndexTypeToArray_id is None:
        _logViewSetAxeXAxeIndexTypeToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeIndexTypeToArray'))
    return _client_service().call(_logViewSetAxeXAxeIndexTypeToArray_id, *args, **kwargs)


_logViewSetAxeXAxeIndexValMaxUserToArray_id = None
def logViewSetAxeXAxeIndexValMaxUserToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeIndexValMaxUserToArray(plotID: Number, v: str, max: Number) -> bool
    
    Change the X index axis user upper  limits  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        max (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeIndexValMaxUserToArray_id
    if _logViewSetAxeXAxeIndexValMaxUserToArray_id is None:
        _logViewSetAxeXAxeIndexValMaxUserToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeIndexValMaxUserToArray'))
    return _client_service().call(_logViewSetAxeXAxeIndexValMaxUserToArray_id, *args, **kwargs)


_logViewSetAxeXAxeIndexValMinUserToArray_id = None
def logViewSetAxeXAxeIndexValMinUserToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeIndexValMinUserToArray(plotID: Number, v: str, min: Number) -> bool
    
    Change the X index axis user lower  limits  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeIndexValMinUserToArray_id
    if _logViewSetAxeXAxeIndexValMinUserToArray_id is None:
        _logViewSetAxeXAxeIndexValMinUserToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeIndexValMinUserToArray'))
    return _client_service().call(_logViewSetAxeXAxeIndexValMinUserToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVarMaxUserToArray_id = None
def logViewSetAxeXAxeVarMaxUserToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVarMaxUserToArray(plotID: Number, v: str, max: Number) -> bool
    
    [DEPRECATED] (use logViewSetAxeXAxeVariableMaxUserToArray instead) Change the X variable axis user upper  limits  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        max (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVarMaxUserToArray_id
    if _logViewSetAxeXAxeVarMaxUserToArray_id is None:
        _logViewSetAxeXAxeVarMaxUserToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVarMaxUserToArray'))
    return _client_service().call(_logViewSetAxeXAxeVarMaxUserToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVarMinUserToArray_id = None
def logViewSetAxeXAxeVarMinUserToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVarMinUserToArray(plotID: Number, v: str, min: Number) -> bool
    
    [DEPRECATED] (use logViewSetAxeXAxeVariableMinUserToArray instead) Change the X variable axis user lower  limits  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVarMinUserToArray_id
    if _logViewSetAxeXAxeVarMinUserToArray_id is None:
        _logViewSetAxeXAxeVarMinUserToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVarMinUserToArray'))
    return _client_service().call(_logViewSetAxeXAxeVarMinUserToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVarNameToArray_id = None
def logViewSetAxeXAxeVarNameToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVarNameToArray(plotID: Number, v: str, v: str) -> bool
    
    [DEPRECATED] (use logViewSetAxeXAxeVariableNameToArray instead) Change the X variable axis variable name  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        v (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVarNameToArray_id
    if _logViewSetAxeXAxeVarNameToArray_id is None:
        _logViewSetAxeXAxeVarNameToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVarNameToArray'))
    return _client_service().call(_logViewSetAxeXAxeVarNameToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVarScaleTypeToArray_id = None
def logViewSetAxeXAxeVarScaleTypeToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVarScaleTypeToArray(plotID: Number, v: str, xasc: int) -> bool
    
    [DEPRECATED] (use logViewSetAxeXAxeVariableScaleTypeToArray instead) Change the X variable axis scale for a array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVarScaleTypeToArray_id
    if _logViewSetAxeXAxeVarScaleTypeToArray_id is None:
        _logViewSetAxeXAxeVarScaleTypeToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVarScaleTypeToArray'))
    return _client_service().call(_logViewSetAxeXAxeVarScaleTypeToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVarTypeToArray_id = None
def logViewSetAxeXAxeVarTypeToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVarTypeToArray(plotID: Number, v: str, xat: int) -> bool
    
    [DEPRECATED] (use logViewSetAxeXAxeVariableTypeToArray instead) Change the X variable axis limits types for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xat (int): X axis type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVarTypeToArray_id
    if _logViewSetAxeXAxeVarTypeToArray_id is None:
        _logViewSetAxeXAxeVarTypeToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVarTypeToArray'))
    return _client_service().call(_logViewSetAxeXAxeVarTypeToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVariableMaxUserToArray_id = None
def logViewSetAxeXAxeVariableMaxUserToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVariableMaxUserToArray(plotID: Number, v: str, max: Number) -> bool
    
    Change the X variable axis user upper  limits  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        max (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVariableMaxUserToArray_id
    if _logViewSetAxeXAxeVariableMaxUserToArray_id is None:
        _logViewSetAxeXAxeVariableMaxUserToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVariableMaxUserToArray'))
    return _client_service().call(_logViewSetAxeXAxeVariableMaxUserToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVariableMinUserToArray_id = None
def logViewSetAxeXAxeVariableMinUserToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVariableMinUserToArray(plotID: Number, v: str, min: Number) -> bool
    
    Change the X variable axis user lower  limits  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVariableMinUserToArray_id
    if _logViewSetAxeXAxeVariableMinUserToArray_id is None:
        _logViewSetAxeXAxeVariableMinUserToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVariableMinUserToArray'))
    return _client_service().call(_logViewSetAxeXAxeVariableMinUserToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVariableNameToArray_id = None
def logViewSetAxeXAxeVariableNameToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVariableNameToArray(plotID: Number, v: str, v: str) -> bool
    
    Change the X variable axis variable name  for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        v (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVariableNameToArray_id
    if _logViewSetAxeXAxeVariableNameToArray_id is None:
        _logViewSetAxeXAxeVariableNameToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVariableNameToArray'))
    return _client_service().call(_logViewSetAxeXAxeVariableNameToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVariableScaleTypeToArray_id = None
def logViewSetAxeXAxeVariableScaleTypeToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVariableScaleTypeToArray(plotID: Number, v: str, xasc: int) -> bool
    
    Change the X variable axis scale for a array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVariableScaleTypeToArray_id
    if _logViewSetAxeXAxeVariableScaleTypeToArray_id is None:
        _logViewSetAxeXAxeVariableScaleTypeToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVariableScaleTypeToArray'))
    return _client_service().call(_logViewSetAxeXAxeVariableScaleTypeToArray_id, *args, **kwargs)


_logViewSetAxeXAxeVariableTypeToArray_id = None
def logViewSetAxeXAxeVariableTypeToArray(*args, **kwargs):
    """
    logViewSetAxeXAxeVariableTypeToArray(plotID: Number, v: str, xat: int) -> bool
    
    Change the X variable axis limits types for a  array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xat (int): X axis type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXAxeVariableTypeToArray_id
    if _logViewSetAxeXAxeVariableTypeToArray_id is None:
        _logViewSetAxeXAxeVariableTypeToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXAxeVariableTypeToArray'))
    return _client_service().call(_logViewSetAxeXAxeVariableTypeToArray_id, *args, **kwargs)


_logViewSetAxeXInverseToCumulatedTrack_id = None
def logViewSetAxeXInverseToCumulatedTrack(*args, **kwargs):
    """
    logViewSetAxeXInverseToCumulatedTrack(plotID: Number, variableNames: list, inverted: bool) -> bool
    
    Change the orientation of the X Axis for a cumulated track in a logview
    
    Args:
        plotID (Number): logview window  ID
        variableNames (list): list of wellName.datasetName.variableName
        inverted (bool): inversion status
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXInverseToCumulatedTrack_id
    if _logViewSetAxeXInverseToCumulatedTrack_id is None:
        _logViewSetAxeXInverseToCumulatedTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXInverseToCumulatedTrack'))
    return _client_service().call(_logViewSetAxeXInverseToCumulatedTrack_id, *args, **kwargs)


_logViewSetAxeXInversedToArray_id = None
def logViewSetAxeXInversedToArray(*args, **kwargs):
    """
    logViewSetAxeXInversedToArray(plotID: Number, v: str, inversed: bool) -> bool
    
    Set the  Invert X axis's property  for a array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        inversed (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXInversedToArray_id
    if _logViewSetAxeXInversedToArray_id is None:
        _logViewSetAxeXInversedToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXInversedToArray'))
    return _client_service().call(_logViewSetAxeXInversedToArray_id, *args, **kwargs)


_logViewSetAxeXMaxUserToCumulatedArray_id = None
def logViewSetAxeXMaxUserToCumulatedArray(*args, **kwargs):
    """
    logViewSetAxeXMaxUserToCumulatedArray(plotID: Number, v: str, min: Number) -> bool
    
    Change a the X axis upper limit for a  cumulated array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXMaxUserToCumulatedArray_id
    if _logViewSetAxeXMaxUserToCumulatedArray_id is None:
        _logViewSetAxeXMaxUserToCumulatedArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXMaxUserToCumulatedArray'))
    return _client_service().call(_logViewSetAxeXMaxUserToCumulatedArray_id, *args, **kwargs)


_logViewSetAxeXMaxUserToHistoArray_id = None
def logViewSetAxeXMaxUserToHistoArray(*args, **kwargs):
    """
    logViewSetAxeXMaxUserToHistoArray(plotID: Number, v: str, max: Number) -> bool
    
    Change the X axis user upper limits  for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        max (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXMaxUserToHistoArray_id
    if _logViewSetAxeXMaxUserToHistoArray_id is None:
        _logViewSetAxeXMaxUserToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXMaxUserToHistoArray'))
    return _client_service().call(_logViewSetAxeXMaxUserToHistoArray_id, *args, **kwargs)


_logViewSetAxeXMinMaxUserToCrossReference_id = None
def logViewSetAxeXMinMaxUserToCrossReference(*args, **kwargs):
    """
    logViewSetAxeXMinMaxUserToCrossReference(plotId: Number, variable: str, min: Number, max: Number) -> bool
    
    
    Args:
        plotId (Number): plot window ID
        variable (str): Variable WellName.DatasetName.VariableName
        min (Number): Min user value
        max (Number): Max user value
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXMinMaxUserToCrossReference_id
    if _logViewSetAxeXMinMaxUserToCrossReference_id is None:
        _logViewSetAxeXMinMaxUserToCrossReference_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXMinMaxUserToCrossReference'))
    return _client_service().call(_logViewSetAxeXMinMaxUserToCrossReference_id, *args, **kwargs)


_logViewSetAxeXMinUserToCumulatedArray_id = None
def logViewSetAxeXMinUserToCumulatedArray(*args, **kwargs):
    """
    logViewSetAxeXMinUserToCumulatedArray(plotID: Number, v: str, min: Number) -> bool
    
    Change a the X axis lower limit for a  cumulated array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXMinUserToCumulatedArray_id
    if _logViewSetAxeXMinUserToCumulatedArray_id is None:
        _logViewSetAxeXMinUserToCumulatedArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXMinUserToCumulatedArray'))
    return _client_service().call(_logViewSetAxeXMinUserToCumulatedArray_id, *args, **kwargs)


_logViewSetAxeXMinUserToHistoArray_id = None
def logViewSetAxeXMinUserToHistoArray(*args, **kwargs):
    """
    logViewSetAxeXMinUserToHistoArray(plotID: Number, v: str, min: Number) -> bool
    
    Change the X axis user lower limits  for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXMinUserToHistoArray_id
    if _logViewSetAxeXMinUserToHistoArray_id is None:
        _logViewSetAxeXMinUserToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXMinUserToHistoArray'))
    return _client_service().call(_logViewSetAxeXMinUserToHistoArray_id, *args, **kwargs)


_logViewSetAxeXScaleTypeToHistoArray_id = None
def logViewSetAxeXScaleTypeToHistoArray(*args, **kwargs):
    """
    logViewSetAxeXScaleTypeToHistoArray(plotID: Number, v: str, xasc: int) -> bool
    
    Change the X axis scale for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXScaleTypeToHistoArray_id
    if _logViewSetAxeXScaleTypeToHistoArray_id is None:
        _logViewSetAxeXScaleTypeToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXScaleTypeToHistoArray'))
    return _client_service().call(_logViewSetAxeXScaleTypeToHistoArray_id, *args, **kwargs)


_logViewSetAxeXTypeToCumulatedArray_id = None
def logViewSetAxeXTypeToCumulatedArray(*args, **kwargs):
    """
    logViewSetAxeXTypeToCumulatedArray(plotID: Number, v: str, xat: int) -> bool
    
    Change the X axis limits types for a  cumulated array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xat (int): X axis type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXTypeToCumulatedArray_id
    if _logViewSetAxeXTypeToCumulatedArray_id is None:
        _logViewSetAxeXTypeToCumulatedArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXTypeToCumulatedArray'))
    return _client_service().call(_logViewSetAxeXTypeToCumulatedArray_id, *args, **kwargs)


_logViewSetAxeXTypeToHistoArray_id = None
def logViewSetAxeXTypeToHistoArray(*args, **kwargs):
    """
    logViewSetAxeXTypeToHistoArray(plotID: Number, v: str, xat: int) -> bool
    
    Change the X axis limits types for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xat (int): X axis type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXTypeToHistoArray_id
    if _logViewSetAxeXTypeToHistoArray_id is None:
        _logViewSetAxeXTypeToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXTypeToHistoArray'))
    return _client_service().call(_logViewSetAxeXTypeToHistoArray_id, *args, **kwargs)


_logViewSetAxeXUnitToCrossReference_id = None
def logViewSetAxeXUnitToCrossReference(*args, **kwargs):
    """
    logViewSetAxeXUnitToCrossReference(plotId: Number, variable: str, unit: str) -> bool
    
    
    Args:
        plotId (Number): plot window ID
        variable (str): Variable WellName.DatasetName.VariableName
        unit (str): Axis X unit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXUnitToCrossReference_id
    if _logViewSetAxeXUnitToCrossReference_id is None:
        _logViewSetAxeXUnitToCrossReference_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXUnitToCrossReference'))
    return _client_service().call(_logViewSetAxeXUnitToCrossReference_id, *args, **kwargs)


_logViewSetAxeXWithVarToArray_id = None
def logViewSetAxeXWithVarToArray(*args, **kwargs):
    """
    logViewSetAxeXWithVarToArray(plotID: Number, v: str, variable_axis: bool) -> bool
    
    [DEPRECATED] (use logViewSetAxeXWithVariableToArray instead) Switch X axis from index axis to variable axis for a array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        variable_axis (bool): True if variable axis, False if index axis
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXWithVarToArray_id
    if _logViewSetAxeXWithVarToArray_id is None:
        _logViewSetAxeXWithVarToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXWithVarToArray'))
    return _client_service().call(_logViewSetAxeXWithVarToArray_id, *args, **kwargs)


_logViewSetAxeXWithVariableToArray_id = None
def logViewSetAxeXWithVariableToArray(*args, **kwargs):
    """
    logViewSetAxeXWithVariableToArray(plotID: Number, v: str, variable_axis: bool) -> bool
    
    Switch X axis from index axis to variable axis for a array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        variable_axis (bool): True if variable axis, False if index axis
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetAxeXWithVariableToArray_id
    if _logViewSetAxeXWithVariableToArray_id is None:
        _logViewSetAxeXWithVariableToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetAxeXWithVariableToArray'))
    return _client_service().call(_logViewSetAxeXWithVariableToArray_id, *args, **kwargs)


_logViewSetCallTypeByVariable_id = None
def logViewSetCallTypeByVariable(*args, **kwargs):
    """
    logViewSetCallTypeByVariable(plotID: Number, v: str, ct: int) -> bool
    
    Change the call type of a variable in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        ct (int): new call type {0 = 'VAR_NAME_CT', 1 = 'FAMILY_CT', 2 = 'ALIAS_CT'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetCallTypeByVariable_id
    if _logViewSetCallTypeByVariable_id is None:
        _logViewSetCallTypeByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetCallTypeByVariable'))
    return _client_service().call(_logViewSetCallTypeByVariable_id, *args, **kwargs)


_logViewSetDisplayOnXOutputValueOnYToArray_id = None
def logViewSetDisplayOnXOutputValueOnYToArray(*args, **kwargs):
    """
    logViewSetDisplayOnXOutputValueOnYToArray(plotID: Number, v: str, always: bool) -> bool
    
    Change the always display property  for a array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        always (bool): True if always display, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetDisplayOnXOutputValueOnYToArray_id
    if _logViewSetDisplayOnXOutputValueOnYToArray_id is None:
        _logViewSetDisplayOnXOutputValueOnYToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetDisplayOnXOutputValueOnYToArray'))
    return _client_service().call(_logViewSetDisplayOnXOutputValueOnYToArray_id, *args, **kwargs)


_logViewSetHeaderOrientation_id = None
def logViewSetHeaderOrientation(*args, **kwargs):
    """
    logViewSetHeaderOrientation(plotID: Number, posTrackList: list, vertical: bool) -> bool
    
    Change the orientation of the header in a track
    
    Args:
        plotID (Number): logview window ID
        posTrackList (list): list of position of tracks
        vertical (bool): header vertical if True, else header horizontal
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetHeaderOrientation_id
    if _logViewSetHeaderOrientation_id is None:
        _logViewSetHeaderOrientation_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetHeaderOrientation'))
    return _client_service().call(_logViewSetHeaderOrientation_id, *args, **kwargs)


_logViewSetHorizontal_id = None
def logViewSetHorizontal(*args, **kwargs):
    """
    logViewSetHorizontal(plotID: Number, horizontal: bool) -> Number
    
    Set the logview orientation
    
    Args:
        plotID (Number): logview window ID
        horizontal (bool): horizontal if True, else vertical
    
    Returns:
        Number: logview window ID
    """
    global _logViewSetHorizontal_id
    if _logViewSetHorizontal_id is None:
        _logViewSetHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetHorizontal'))
    return _client_service().call(_logViewSetHorizontal_id, *args, **kwargs)


_logViewSetLayoutScale_id = None
def logViewSetLayoutScale(*args, **kwargs):
    """
    logViewSetLayoutScale(plotID: Number, sc: Number=200) -> bool
    
    Change the layout global scale
    
    Args:
        plotID (Number): logview window ID
        sc (Number): Optional; wanted scale - scale format is '1 : sc', only enter sc
        default scale is '1 : 200', to have it back only enter logview ID
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetLayoutScale_id
    if _logViewSetLayoutScale_id is None:
        _logViewSetLayoutScale_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetLayoutScale'))
    return _client_service().call(_logViewSetLayoutScale_id, *args, **kwargs)


_logViewSetLimitsByVariable_id = None
def logViewSetLimitsByVariable(*args, **kwargs):
    """
    logViewSetLimitsByVariable(plotID: Number, variableName: str, lowerLimit: float, upperLimit: float, inverted: bool) -> bool
    
    Set the limits of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
        lowerLimit (float): new lower limit of the variable
        upperLimit (float): new upper limit of the variable
        inverted (bool): inverse or not the limit of the variable
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetLimitsByVariable_id
    if _logViewSetLimitsByVariable_id is None:
        _logViewSetLimitsByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetLimitsByVariable'))
    return _client_service().call(_logViewSetLimitsByVariable_id, *args, **kwargs)


_logViewSetLimitsTypeByVariable_id = None
def logViewSetLimitsTypeByVariable(*args, **kwargs):
    """
    logViewSetLimitsTypeByVariable(plotID: Number, variableName: str, limitsType: str) -> bool
    
    Set the limits type of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
        limitsType (str): limits type ['variable', 'user', 'family']
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetLimitsTypeByVariable_id
    if _logViewSetLimitsTypeByVariable_id is None:
        _logViewSetLimitsTypeByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetLimitsTypeByVariable'))
    return _client_service().call(_logViewSetLimitsTypeByVariable_id, *args, **kwargs)


_logViewSetLineProperties_id = None
def logViewSetLineProperties(*args, **kwargs):
    """
    logViewSetLineProperties(plotID: Number, v: str, st: int=0, ty: Number=0, thk: Number=2) -> bool
    
    Set user preferences for line display of logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        st (int): Optional; line type {'NoPen', 'SolidLine', 'DashLine', 'DotLine', 'DashDotLine', 'DashDotDotLine', 'DotDashDashLine', 'ShortDashLine', 'LongDashLine'}
        ty (Number): Optional; line continuity {'NO_CONNECTION', 'POINT_TO_POINT', 'STEP_H_V', 'STEP_V_H', 'STEP_CENTER'}
        thk (Number): Optional; line thickness (between 1 & 8)
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetLineProperties_id
    if _logViewSetLineProperties_id is None:
        _logViewSetLineProperties_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetLineProperties'))
    return _client_service().call(_logViewSetLineProperties_id, *args, **kwargs)


_logViewSetMarkers_id = None
def logViewSetMarkers(*args, **kwargs):
    """
    logViewSetMarkers(plotID: Number, v: str, show: bool, ty: int=0, size: Number=2) -> bool
    
    Set user preferences for variable markers.
    It works exclusively on variable, not dataset.
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        show (bool): 1 = show markers on log
        ty (int): Optional; markers type {'MARKER_CIRCLE', 'MARKER_SQUARE', 'MARKER_DIAMOND', 'MARKER_TRIANGLE',
           'MARKER_TRIANGLE_DOWN', 'MARKER_TRIANGLE_LEFT', 'MARKER_TRIANGLE_RIGHT', 'MARKER_EMPTY_CIRCLE', 'MARKER_EMPTY_SQUARE',
           'MARKER_EMPTY_DIAMOND', 'MARKER_EMPTY_TRIANGLE', 'MARKER_EMPTY_TRIANGLE_DOWN', 'MARKER_EMPTY_TRIANGLE_LEFT',
           'MARKER_EMPTY_TRIANGLE_RIGHT', 'MARKER_SHURIKEN', 'MARKER_EMPTY_SHURIKEN', 'MARKER_PLUS', 'MARKER_CROSS',
           'MARKER_STAR', 'MARKER_RIG', 'NB_MARKER'}
        size (Number): Optional; markers size (between 2 & 20)
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetMarkers_id
    if _logViewSetMarkers_id is None:
        _logViewSetMarkers_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetMarkers'))
    return _client_service().call(_logViewSetMarkers_id, *args, **kwargs)


_logViewSetMaxUserByVariable_id = None
def logViewSetMaxUserByVariable(*args, **kwargs):
    """
    logViewSetMaxUserByVariable(plotID: Number, v: str, max: Number, inversed: bool) -> bool
    
    Change a variable bottom limit in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        max (Number): bottom limit
        inversed (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetMaxUserByVariable_id
    if _logViewSetMaxUserByVariable_id is None:
        _logViewSetMaxUserByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetMaxUserByVariable'))
    return _client_service().call(_logViewSetMaxUserByVariable_id, *args, **kwargs)


_logViewSetMaxUserToMatrixArrayBHI_id = None
def logViewSetMaxUserToMatrixArrayBHI(*args, **kwargs):
    """
    logViewSetMaxUserToMatrixArrayBHI(plotID: Number, v: str, min: Number) -> bool
    
    Change a the upper  limit for a matrix array BHI  in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetMaxUserToMatrixArrayBHI_id
    if _logViewSetMaxUserToMatrixArrayBHI_id is None:
        _logViewSetMaxUserToMatrixArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetMaxUserToMatrixArrayBHI'))
    return _client_service().call(_logViewSetMaxUserToMatrixArrayBHI_id, *args, **kwargs)


_logViewSetMinMaxUserByVariable_id = None
def logViewSetMinMaxUserByVariable(*args, **kwargs):
    """
    logViewSetMinMaxUserByVariable(plotID: Number, v: str, min: Number, max: Number, inversed: bool) -> bool
    
    [DEPRECATED] Change a variable top and bottom limits in the logview
    Please use logViewSetLimitsByVariable instead.
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
        max (Number): bottom limit
        inversed (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetMinMaxUserByVariable_id
    if _logViewSetMinMaxUserByVariable_id is None:
        _logViewSetMinMaxUserByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetMinMaxUserByVariable'))
    return _client_service().call(_logViewSetMinMaxUserByVariable_id, *args, **kwargs)


_logViewSetMinUserByVariable_id = None
def logViewSetMinUserByVariable(*args, **kwargs):
    """
    logViewSetMinUserByVariable(plotID: Number, v: str, min: Number, inversed: bool) -> bool
    
    Change a variable top limit in the logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
        inversed (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetMinUserByVariable_id
    if _logViewSetMinUserByVariable_id is None:
        _logViewSetMinUserByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetMinUserByVariable'))
    return _client_service().call(_logViewSetMinUserByVariable_id, *args, **kwargs)


_logViewSetMinUserToMatrixArrayBHI_id = None
def logViewSetMinUserToMatrixArrayBHI(*args, **kwargs):
    """
    logViewSetMinUserToMatrixArrayBHI(plotID: Number, v: str, min: Number) -> bool
    
    Change a the lower limit for a matrix array BHI  in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetMinUserToMatrixArrayBHI_id
    if _logViewSetMinUserToMatrixArrayBHI_id is None:
        _logViewSetMinUserToMatrixArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetMinUserToMatrixArrayBHI'))
    return _client_service().call(_logViewSetMinUserToMatrixArrayBHI_id, *args, **kwargs)


_logViewSetName_id = None
def logViewSetName(*args, **kwargs):
    """
    logViewSetName(plotID: Number, n: str) -> bool
    
    Change the name of the logview
    
    Args:
        plotID (Number): logview window ID
        n (str): new logview windows name
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetName_id
    if _logViewSetName_id is None:
        _logViewSetName_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetName'))
    return _client_service().call(_logViewSetName_id, *args, **kwargs)


_logViewSetPalette_id = None
def logViewSetPalette(*args, **kwargs):
    """
    logViewSetPalette(plotID: Number, v: str, pal: str) -> bool
    
    Add a palette to variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        pal (str): palette name (level can be set in the name by following the syntax: 'level\\palette')
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetPalette_id
    if _logViewSetPalette_id is None:
        _logViewSetPalette_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetPalette'))
    return _client_service().call(_logViewSetPalette_id, *args, **kwargs)


_logViewSetPaletteLimits_id = None
def logViewSetPaletteLimits(*args, **kwargs):
    """
    logViewSetPaletteLimits(plotID: Number, v: str, limitMin: float, limitMax: float) -> bool
    
    Set palette limits for variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        limitMin (float): Lower limit
        limitMax (float): Upper limit (> limitMin)
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetPaletteLimits_id
    if _logViewSetPaletteLimits_id is None:
        _logViewSetPaletteLimits_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetPaletteLimits'))
    return _client_service().call(_logViewSetPaletteLimits_id, *args, **kwargs)


_logViewSetPartialTrackStartStopByVariable_id = None
def logViewSetPartialTrackStartStopByVariable(*args, **kwargs):
    """
    logViewSetPartialTrackStartStopByVariable(plotID: Number, varName: str, start: Number, stop: Number) -> bool
    
    Set start stop values for partial track to log line
    
    Args:
        plotID (Number): logview window ID
        varName (str): variable name wellName.datasetName.variableName
        start (Number): start value for partial track
        stop (Number): stop value for partial track
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetPartialTrackStartStopByVariable_id
    if _logViewSetPartialTrackStartStopByVariable_id is None:
        _logViewSetPartialTrackStartStopByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetPartialTrackStartStopByVariable'))
    return _client_service().call(_logViewSetPartialTrackStartStopByVariable_id, *args, **kwargs)


_logViewSetPartialTrackStartStopToArray_id = None
def logViewSetPartialTrackStartStopToArray(*args, **kwargs):
    """
    logViewSetPartialTrackStartStopToArray(plotID: Number, varName: str, start: Number, stop: Number) -> bool
    
    Set start stop values for partial track to array
    
    Args:
        plotID (Number): logview window ID
        varName (str): variable name wellName.datasetName.variableName
        start (Number): start value for partial track
        stop (Number): stop value for partial track
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetPartialTrackStartStopToArray_id
    if _logViewSetPartialTrackStartStopToArray_id is None:
        _logViewSetPartialTrackStartStopToArray_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetPartialTrackStartStopToArray'))
    return _client_service().call(_logViewSetPartialTrackStartStopToArray_id, *args, **kwargs)


_logViewSetReferenceDisplay_id = None
def logViewSetReferenceDisplay(*args, **kwargs):
    """
    logViewSetReferenceDisplay(plotID: Number, r: str, u: str=None) -> bool
    
    Change the reference space & the reference unit in the logview
    
    Args:
        plotID (Number): logview window ID
        r (str): reference scale
        u (str): Optional; new unit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetReferenceDisplay_id
    if _logViewSetReferenceDisplay_id is None:
        _logViewSetReferenceDisplay_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetReferenceDisplay'))
    return _client_service().call(_logViewSetReferenceDisplay_id, *args, **kwargs)


_logViewSetReferenceDisplayByTrack_id = None
def logViewSetReferenceDisplayByTrack(*args, **kwargs):
    """
    logViewSetReferenceDisplayByTrack(plotID: Number, pos: Number, r: str) -> bool
    
    Change the reference space of a reference track in the logview
    
    Args:
        plotID (Number): logview window ID
        pos (Number): track position
        r (str): reference scale
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetReferenceDisplayByTrack_id
    if _logViewSetReferenceDisplayByTrack_id is None:
        _logViewSetReferenceDisplayByTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetReferenceDisplayByTrack'))
    return _client_service().call(_logViewSetReferenceDisplayByTrack_id, *args, **kwargs)


_logViewSetReferenceUnit_id = None
def logViewSetReferenceUnit(*args, **kwargs):
    """
    logViewSetReferenceUnit(plotID: Number, u: str=None) -> bool
    
    Change the reference unit in the logview
    
    Args:
        plotID (Number): logview window ID
        u (str): Optional; new unit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetReferenceUnit_id
    if _logViewSetReferenceUnit_id is None:
        _logViewSetReferenceUnit_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetReferenceUnit'))
    return _client_service().call(_logViewSetReferenceUnit_id, *args, **kwargs)


_logViewSetReferenceUnitByTrack_id = None
def logViewSetReferenceUnitByTrack(*args, **kwargs):
    """
    logViewSetReferenceUnitByTrack(plotID: Number, pos: Number, u: str) -> bool
    
    Change the reference unit of a reference track in the logview
    
    Args:
        plotID (Number): logview window ID
        pos (Number): track position
        u (str): new unit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetReferenceUnitByTrack_id
    if _logViewSetReferenceUnitByTrack_id is None:
        _logViewSetReferenceUnitByTrack_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetReferenceUnitByTrack'))
    return _client_service().call(_logViewSetReferenceUnitByTrack_id, *args, **kwargs)


_logViewSetScaleByVariable_id = None
def logViewSetScaleByVariable(*args, **kwargs):
    """
    logViewSetScaleByVariable(plotID: Number, variableName: str, scale: str) -> bool
    
    Set the scale of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
        scale (str): scale of the variable ['linear', 'logarithmic']
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetScaleByVariable_id
    if _logViewSetScaleByVariable_id is None:
        _logViewSetScaleByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetScaleByVariable'))
    return _client_service().call(_logViewSetScaleByVariable_id, *args, **kwargs)


_logViewSetScaleTypeToMatrixArrayBHI_id = None
def logViewSetScaleTypeToMatrixArrayBHI(*args, **kwargs):
    """
    logViewSetScaleTypeToMatrixArrayBHI(plotID: Number, v: str, xasc: int) -> bool
    
    Change the scale for a matrix array BHI  in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetScaleTypeToMatrixArrayBHI_id
    if _logViewSetScaleTypeToMatrixArrayBHI_id is None:
        _logViewSetScaleTypeToMatrixArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetScaleTypeToMatrixArrayBHI'))
    return _client_service().call(_logViewSetScaleTypeToMatrixArrayBHI_id, *args, **kwargs)


_logViewSetScaleUnitByVariable_id = None
def logViewSetScaleUnitByVariable(*args, **kwargs):
    """
    logViewSetScaleUnitByVariable(plotID: Number, variableName: str, scaleUnit: str) -> bool
    
    Set the scale unit of a variable in a logview
    
    Args:
        plotID (Number): logview window ID
        variableName (str): name of the variable ["Well.Dataset.Variable"]
        scaleUnit (str): scale unit of the variable
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetScaleUnitByVariable_id
    if _logViewSetScaleUnitByVariable_id is None:
        _logViewSetScaleUnitByVariable_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetScaleUnitByVariable'))
    return _client_service().call(_logViewSetScaleUnitByVariable_id, *args, **kwargs)


_logViewSetThresholdY_id = None
def logViewSetThresholdY(*args, **kwargs):
    """
    logViewSetThresholdY(plotID: Number, v: str, value: Number) -> bool
    
    Set threshold value for optimised array or arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        value (Number): threshold pixel value
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetThresholdY_id
    if _logViewSetThresholdY_id is None:
        _logViewSetThresholdY_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetThresholdY'))
    return _client_service().call(_logViewSetThresholdY_id, *args, **kwargs)


_logViewSetTrackReferenceDisplayByWell_id = None
def logViewSetTrackReferenceDisplayByWell(*args, **kwargs):
    """
    logViewSetTrackReferenceDisplayByWell(plotID: Number, w: str, pos: Number, r: str) -> bool
    
    Change the reference space of a reference track in the logview
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): track position
        r (str): reference scale
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetTrackReferenceDisplayByWell_id
    if _logViewSetTrackReferenceDisplayByWell_id is None:
        _logViewSetTrackReferenceDisplayByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetTrackReferenceDisplayByWell'))
    return _client_service().call(_logViewSetTrackReferenceDisplayByWell_id, *args, **kwargs)


_logViewSetTrackReferenceUnitByWell_id = None
def logViewSetTrackReferenceUnitByWell(*args, **kwargs):
    """
    logViewSetTrackReferenceUnitByWell(plotID: Number, w: str, pos: Number, u: str) -> bool
    
    Change the reference unit of a reference track in the logview
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): track position
        u (str): new unit
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetTrackReferenceUnitByWell_id
    if _logViewSetTrackReferenceUnitByWell_id is None:
        _logViewSetTrackReferenceUnitByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetTrackReferenceUnitByWell'))
    return _client_service().call(_logViewSetTrackReferenceUnitByWell_id, *args, **kwargs)


_logViewSetVariableColor_id = None
def logViewSetVariableColor(*args, **kwargs):
    """
    logViewSetVariableColor(plotID: Number, var: str, r: Number, g: Number, b: Number) -> bool
    
    Change the default color of a variable log
    
    Args:
        plotID (Number): logview window ID
        var (str): variable ID to modify (WellName.DatasetName.VariableName)
        r (Number): red (0-255)
        g (Number): green (0-255)
        b (Number): blue (0-255)
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetVariableColor_id
    if _logViewSetVariableColor_id is None:
        _logViewSetVariableColor_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetVariableColor'))
    return _client_service().call(_logViewSetVariableColor_id, *args, **kwargs)


_logViewSetVariableColour_id = None
def logViewSetVariableColour(*args, **kwargs):
    """
    logViewSetVariableColour(plotID: Number, var: str, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use logViewSetVariableColor instead) Change the default color of a variable log
    
    Args:
        plotID (Number): logview window ID
        var (str): variable ID to modify (WellName.DatasetName.VariableName)
        r (Number): red (0-255)
        g (Number): green (0-255)
        b (Number): blue (0-255)
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetVariableColour_id
    if _logViewSetVariableColour_id is None:
        _logViewSetVariableColour_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetVariableColour'))
    return _client_service().call(_logViewSetVariableColour_id, *args, **kwargs)


_logViewSetWellDatum_id = None
def logViewSetWellDatum(*args, **kwargs):
    """
    logViewSetWellDatum(plotID: Number, w: str, lim: bool, min: Number=0, max: Number=0) -> bool
    
    Set a user reference limitation to a well
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        lim (bool): 1 = user limits else 0
        min (Number): Optional; top limit
        max (Number): Optional; bottom limit
        if inputs 4 & 5 are not given by user (& lim =1), min = 0 & max = last registered max
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetWellDatum_id
    if _logViewSetWellDatum_id is None:
        _logViewSetWellDatum_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetWellDatum'))
    return _client_service().call(_logViewSetWellDatum_id, *args, **kwargs)


_logViewSetZonation_id = None
def logViewSetZonation(*args, **kwargs):
    """
    logViewSetZonation(plotID: Number, sn: str) -> bool
    
    Assign a set of zonation to the logview
    
    Args:
        plotID (Number): logview window ID
        sn (str): name of the set of zonation
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetZonation_id
    if _logViewSetZonation_id is None:
        _logViewSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetZonation'))
    return _client_service().call(_logViewSetZonation_id, *args, **kwargs)


_logViewSetZonationTrackColorationMode_id = None
def logViewSetZonationTrackColorationMode(*args, **kwargs):
    """
    logViewSetZonationTrackColorationMode(plotID: Number, trackID: Number, mode: str='COLOUR') -> bool
    
    Change the coloring mode of a zonation track
    
    Args:
        plotID (Number): logview window ID
        trackID (Number): reference number of the zonation track
        mode (str): Optional; coloring mode, {'COLOUR', 'PATTERN', 'BOTH'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetZonationTrackColorationMode_id
    if _logViewSetZonationTrackColorationMode_id is None:
        _logViewSetZonationTrackColorationMode_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetZonationTrackColorationMode'))
    return _client_service().call(_logViewSetZonationTrackColorationMode_id, *args, **kwargs)


_logViewSetZonationTrackColourationMode_id = None
def logViewSetZonationTrackColourationMode(*args, **kwargs):
    """
    logViewSetZonationTrackColourationMode(plotID: Number, trackID: Number, mode: str='COLOUR') -> bool
    
    [DEPRECATED] (use logViewSetZonationTrackColorationMode instead) Change the coloring mode of a zonation track
    
    Args:
        plotID (Number): logview window ID
        trackID (Number): reference number of the zonation track
        mode (str): Optional; coloring mode, {'COLOUR', 'PATTERN', 'BOTH'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetZonationTrackColourationMode_id
    if _logViewSetZonationTrackColourationMode_id is None:
        _logViewSetZonationTrackColourationMode_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetZonationTrackColourationMode'))
    return _client_service().call(_logViewSetZonationTrackColourationMode_id, *args, **kwargs)


_logViewSetZonationTrackFamily_id = None
def logViewSetZonationTrackFamily(*args, **kwargs):
    """
    logViewSetZonationTrackFamily(plotID: Number, trackID: Number, family: str='ZONE_NAME') -> bool
    
    Change the family of a zonation track
    
    Args:
        plotID (Number): logview window ID
        trackID (Number): reference number of the zonation track
        family (str): Optional; family type, {'ZONE_NAME', 'HYDRAULIC_ZONE', 'FAULT_BLOCK'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetZonationTrackFamily_id
    if _logViewSetZonationTrackFamily_id is None:
        _logViewSetZonationTrackFamily_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetZonationTrackFamily'))
    return _client_service().call(_logViewSetZonationTrackFamily_id, *args, **kwargs)


_logViewSetZonationTrackSet_id = None
def logViewSetZonationTrackSet(*args, **kwargs):
    """
    logViewSetZonationTrackSet(plotID: Number, trackID: Number, set: str) -> bool
    
    Change the dataset of a zonation track
    
    Args:
        plotID (Number): logview window ID
        trackID (Number): reference number of the zonation track
        set (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetZonationTrackSet_id
    if _logViewSetZonationTrackSet_id is None:
        _logViewSetZonationTrackSet_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetZonationTrackSet'))
    return _client_service().call(_logViewSetZonationTrackSet_id, *args, **kwargs)


_logViewSetZonationTrackTextOrientation_id = None
def logViewSetZonationTrackTextOrientation(*args, **kwargs):
    """
    logViewSetZonationTrackTextOrientation(plotID: Number, trackID: Number, b: bool=True) -> bool
    
    Change the orientation of the text in a zonation track
    
    Args:
        plotID (Number): logview window ID
        trackID (Number): reference number of the zonation track
        b (bool): Optional; text vertical if True, else text horizontal
    
    Returns:
        bool: operation exit status
    """
    global _logViewSetZonationTrackTextOrientation_id
    if _logViewSetZonationTrackTextOrientation_id is None:
        _logViewSetZonationTrackTextOrientation_id = _client_service().register_static_object(('TechlogPlot', 'logViewSetZonationTrackTextOrientation'))
    return _client_service().call(_logViewSetZonationTrackTextOrientation_id, *args, **kwargs)


_logViewSmooth_id = None
def logViewSmooth(*args, **kwargs):
    """
    logViewSmooth(plotID: Number, v: str, smooth: bool) -> bool
    
    Smooth for array or arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        smooth (bool): True if smoothed, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSmooth_id
    if _logViewSmooth_id is None:
        _logViewSmooth_id = _client_service().register_static_object(('TechlogPlot', 'logViewSmooth'))
    return _client_service().call(_logViewSmooth_id, *args, **kwargs)


_logViewSmoothByArrayBHI_id = None
def logViewSmoothByArrayBHI(*args, **kwargs):
    """
    logViewSmoothByArrayBHI(plotID: Number, v: str, smooth: bool) -> bool
    
    Smooth for array or arrayBHI logs
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        smooth (bool): True if smoothed, False else
    
    Returns:
        bool: operation exit status
    """
    global _logViewSmoothByArrayBHI_id
    if _logViewSmoothByArrayBHI_id is None:
        _logViewSmoothByArrayBHI_id = _client_service().register_static_object(('TechlogPlot', 'logViewSmoothByArrayBHI'))
    return _client_service().call(_logViewSmoothByArrayBHI_id, *args, **kwargs)


_logViewTrackSize_id = None
def logViewTrackSize(*args, **kwargs):
    """
    logViewTrackSize(plotID: Number, pos: Number, s: Number) -> bool
    
    Set track size in the logview
    
    Args:
        plotID (Number): logview window ID
        pos (Number): track position
        s (Number): size of track (in pixels)
    
    Returns:
        bool: operation exit status
    """
    global _logViewTrackSize_id
    if _logViewTrackSize_id is None:
        _logViewTrackSize_id = _client_service().register_static_object(('TechlogPlot', 'logViewTrackSize'))
    return _client_service().call(_logViewTrackSize_id, *args, **kwargs)


_logViewTrackSizeByWell_id = None
def logViewTrackSizeByWell(*args, **kwargs):
    """
    logViewTrackSizeByWell(plotID: Number, w: str, pos: Number, s: Number) -> bool
    
    Set track size in the logview for a given well
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): track position
        s (Number): size of track (in pixels)
    
    Returns:
        bool: operation exit status
    """
    global _logViewTrackSizeByWell_id
    if _logViewTrackSizeByWell_id is None:
        _logViewTrackSizeByWell_id = _client_service().register_static_object(('TechlogPlot', 'logViewTrackSizeByWell'))
    return _client_service().call(_logViewTrackSizeByWell_id, *args, **kwargs)


_logViewVerticalGridDisplay_id = None
def logViewVerticalGridDisplay(*args, **kwargs):
    """
    logViewVerticalGridDisplay(plotID: Number, w: str, pos: Number, g: int=0) -> bool
    
    Change vertical grid display in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        g (int): Optional; display type {0 = 'VERTICAL_BELOW', 1 = 'VERTICAL_TOP', 2 = 'VERTICAL_NONE'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewVerticalGridDisplay_id
    if _logViewVerticalGridDisplay_id is None:
        _logViewVerticalGridDisplay_id = _client_service().register_static_object(('TechlogPlot', 'logViewVerticalGridDisplay'))
    return _client_service().call(_logViewVerticalGridDisplay_id, *args, **kwargs)


_logViewVerticalGridLineColor_id = None
def logViewVerticalGridLineColor(*args, **kwargs):
    """
    logViewVerticalGridLineColor(plotID: Number, w: str, pos: Number, r: Number=173, g: Number=173, b: Number=173) -> bool
    
    Change the color of vertical grid lines in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
        default line color is grey
    
    Returns:
        bool: operation exit status
    """
    global _logViewVerticalGridLineColor_id
    if _logViewVerticalGridLineColor_id is None:
        _logViewVerticalGridLineColor_id = _client_service().register_static_object(('TechlogPlot', 'logViewVerticalGridLineColor'))
    return _client_service().call(_logViewVerticalGridLineColor_id, *args, **kwargs)


_logViewVerticalGridLineColour_id = None
def logViewVerticalGridLineColour(*args, **kwargs):
    """
    logViewVerticalGridLineColour(plotID: Number, w: str, pos: Number, r: Number=173, g: Number=173, b: Number=173) -> bool
    
    [DEPRECATED] (use logViewVerticalGridLineColor instead) Change the color of vertical grid lines in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
        default line color is grey
    
    Returns:
        bool: operation exit status
    """
    global _logViewVerticalGridLineColour_id
    if _logViewVerticalGridLineColour_id is None:
        _logViewVerticalGridLineColour_id = _client_service().register_static_object(('TechlogPlot', 'logViewVerticalGridLineColour'))
    return _client_service().call(_logViewVerticalGridLineColour_id, *args, **kwargs)


_logViewVerticalGridLineCount_id = None
def logViewVerticalGridLineCount(*args, **kwargs):
    """
    logViewVerticalGridLineCount(plotID: Number, w: str, pos: Number, count: Number=4) -> bool
    
    Change the number of line of vertical grid in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        count (Number): Optional; number of lines (default = 4)
    
    Returns:
        bool: operation exit status
    """
    global _logViewVerticalGridLineCount_id
    if _logViewVerticalGridLineCount_id is None:
        _logViewVerticalGridLineCount_id = _client_service().register_static_object(('TechlogPlot', 'logViewVerticalGridLineCount'))
    return _client_service().call(_logViewVerticalGridLineCount_id, *args, **kwargs)


_logViewVerticalGridLineThickness_id = None
def logViewVerticalGridLineThickness(*args, **kwargs):
    """
    logViewVerticalGridLineThickness(plotID: Number, w: str, pos: Number, thk: Number=4) -> bool
    
    Change the thickness of vertical grid lines in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        thk (Number): Optional; line thickness (default = 1)
    
    Returns:
        bool: operation exit status
    """
    global _logViewVerticalGridLineThickness_id
    if _logViewVerticalGridLineThickness_id is None:
        _logViewVerticalGridLineThickness_id = _client_service().register_static_object(('TechlogPlot', 'logViewVerticalGridLineThickness'))
    return _client_service().call(_logViewVerticalGridLineThickness_id, *args, **kwargs)


_logViewVerticalGrigLineCount_id = None
def logViewVerticalGrigLineCount(*args, **kwargs):
    """
    logViewVerticalGrigLineCount(plotID: Number, w: str, pos: Number, count: Number=4) -> bool
    
    [DEPRECATED] (use logViewVerticalGridLineCount instead) Change the number of line of vertical grid in one specified track
    
    Args:
        plotID (Number): logview window ID
        w (str): well name
        pos (Number): position of the track
        count (Number): Optional; number of lines (default = 4)
    
    Returns:
        bool: operation exit status
    """
    global _logViewVerticalGrigLineCount_id
    if _logViewVerticalGrigLineCount_id is None:
        _logViewVerticalGrigLineCount_id = _client_service().register_static_object(('TechlogPlot', 'logViewVerticalGrigLineCount'))
    return _client_service().call(_logViewVerticalGrigLineCount_id, *args, **kwargs)


_logViewZonationAreaFilling_id = None
def logViewZonationAreaFilling(*args, **kwargs):
    """
    logViewZonationAreaFilling(plotID: Number, fill: bool, transp: Number=4) -> bool
    
    Set filling proprieties of colored zonation
    
    Args:
        plotID (Number): logview window ID
        fill (bool): 1 = show filled else 0
        transp (Number): Optional; transparency (between 0 & 10)
    
    Returns:
        bool: operation exit status
    """
    global _logViewZonationAreaFilling_id
    if _logViewZonationAreaFilling_id is None:
        _logViewZonationAreaFilling_id = _client_service().register_static_object(('TechlogPlot', 'logViewZonationAreaFilling'))
    return _client_service().call(_logViewZonationAreaFilling_id, *args, **kwargs)


_logViewZonationBordersProperties_id = None
def logViewZonationBordersProperties(*args, **kwargs):
    """
    logViewZonationBordersProperties(plotID: Number, thk: Number=2, r: Number=0, g: Number=0, b: Number=0) -> bool
    
    Set border proprieties of coloured zonation
    
    Args:
        plotID (Number): logview window ID
        thk (Number): Optional; border line thikness (between 1 & 5)
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _logViewZonationBordersProperties_id
    if _logViewZonationBordersProperties_id is None:
        _logViewZonationBordersProperties_id = _client_service().register_static_object(('TechlogPlot', 'logViewZonationBordersProperties'))
    return _client_service().call(_logViewZonationBordersProperties_id, *args, **kwargs)


_logViewZonationDisplay_id = None
def logViewZonationDisplay(*args, **kwargs):
    """
    logViewZonationDisplay(plotID: Number, ty: int=0) -> bool
    
    Change the display of zonation on logview
    
    Args:
        plotID (Number): logview window ID
        ty (int): Optional; zonation display type {0 = 'BELOW_GRID (default)', 1 = 'OVER_GRID', 2 = 'OVER_LOG'}
    
    Returns:
        bool: operation exit status
    """
    global _logViewZonationDisplay_id
    if _logViewZonationDisplay_id is None:
        _logViewZonationDisplay_id = _client_service().register_static_object(('TechlogPlot', 'logViewZonationDisplay'))
    return _client_service().call(_logViewZonationDisplay_id, *args, **kwargs)


_logviewInsertUncertaintyConstant_id = None
def logviewInsertUncertaintyConstant(*args, **kwargs):
    """
    logviewInsertUncertaintyConstant(plotID: Number, v: str, lowerBound: Number, upperBound: Number, r: Number=255, g: Number=255, b: Number=0) -> bool
    
    [DEPRECATED] (use logViewInsertUncertaintyConstant instead) Insert an incertitude range for this variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable ID
        lowerBound (Number): lower limit for uncertainty value
        upperBound (Number): upper limit for uncertainty value
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _logviewInsertUncertaintyConstant_id
    if _logviewInsertUncertaintyConstant_id is None:
        _logviewInsertUncertaintyConstant_id = _client_service().register_static_object(('TechlogPlot', 'logviewInsertUncertaintyConstant'))
    return _client_service().call(_logviewInsertUncertaintyConstant_id, *args, **kwargs)


_logviewInsertUncertaintyVariable_id = None
def logviewInsertUncertaintyVariable(*args, **kwargs):
    """
    logviewInsertUncertaintyVariable(plotID: Number, v: str, variableLowerBound: str, variableUpperBound: str, r: Number=255, g: Number=255, b: Number=0) -> bool
    
    [DEPRECATED] (use logViewInsertUncertaintyVariable instead) Insert an incertitude range for this variable
    
    Args:
        plotID (Number): logview window ID
        v (str): variable ID
        variableLowerBound (str): lower limit for uncertainty values
        variableUpperBound (str): upper limit for uncertainty values
        r (Number): Optional; red
        g (Number): Optional; green
        b (Number): Optional; blue
    
    Returns:
        bool: operation exit status
    """
    global _logviewInsertUncertaintyVariable_id
    if _logviewInsertUncertaintyVariable_id is None:
        _logviewInsertUncertaintyVariable_id = _client_service().register_static_object(('TechlogPlot', 'logviewInsertUncertaintyVariable'))
    return _client_service().call(_logviewInsertUncertaintyVariable_id, *args, **kwargs)


_logviewSetAxeXMaxUserToHistoArray_id = None
def logviewSetAxeXMaxUserToHistoArray(*args, **kwargs):
    """
    logviewSetAxeXMaxUserToHistoArray(plotID: Number, v: str, max: Number) -> bool
    
    [DEPRECATED] (use logViewSetAxeXMaxUserToHistoArray instead) Change the X axis user upper limits  for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        max (Number): bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _logviewSetAxeXMaxUserToHistoArray_id
    if _logviewSetAxeXMaxUserToHistoArray_id is None:
        _logviewSetAxeXMaxUserToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logviewSetAxeXMaxUserToHistoArray'))
    return _client_service().call(_logviewSetAxeXMaxUserToHistoArray_id, *args, **kwargs)


_logviewSetAxeXMinUserToHistoArray_id = None
def logviewSetAxeXMinUserToHistoArray(*args, **kwargs):
    """
    logviewSetAxeXMinUserToHistoArray(plotID: Number, v: str, min: Number) -> bool
    
    [DEPRECATED] (use logViewSetAxeXMinUserToHistoArray instead) Change the X axis user lower limits  for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        min (Number): top limit
    
    Returns:
        bool: operation exit status
    """
    global _logviewSetAxeXMinUserToHistoArray_id
    if _logviewSetAxeXMinUserToHistoArray_id is None:
        _logviewSetAxeXMinUserToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logviewSetAxeXMinUserToHistoArray'))
    return _client_service().call(_logviewSetAxeXMinUserToHistoArray_id, *args, **kwargs)


_logviewSetAxeXTypeToHistoArray_id = None
def logviewSetAxeXTypeToHistoArray(*args, **kwargs):
    """
    logviewSetAxeXTypeToHistoArray(plotID: Number, v: str, xat: int) -> bool
    
    [DEPRECATED] (use logViewSetAxeXTypeToHistoArray instead) Change the X axis limits types for a histogram array variable in a logview
    
    Args:
        plotID (Number): logview window ID
        v (str): variable name
        xat (int): X axis type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _logviewSetAxeXTypeToHistoArray_id
    if _logviewSetAxeXTypeToHistoArray_id is None:
        _logviewSetAxeXTypeToHistoArray_id = _client_service().register_static_object(('TechlogPlot', 'logviewSetAxeXTypeToHistoArray'))
    return _client_service().call(_logviewSetAxeXTypeToHistoArray_id, *args, **kwargs)


_macroKeyboardPress_id = None
def macroKeyboardPress(*args, **kwargs):
    """
    macroKeyboardPress()
    
    Simulate the keyboard
    """
    global _macroKeyboardPress_id
    if _macroKeyboardPress_id is None:
        _macroKeyboardPress_id = _client_service().register_static_object(('TechlogPlot', 'macroKeyboardPress'))
    return _client_service().call(_macroKeyboardPress_id, *args, **kwargs)


_macroKeyboardRelease_id = None
def macroKeyboardRelease(*args, **kwargs):
    """
    macroKeyboardRelease()
    
    Simulate the keyboard
    """
    global _macroKeyboardRelease_id
    if _macroKeyboardRelease_id is None:
        _macroKeyboardRelease_id = _client_service().register_static_object(('TechlogPlot', 'macroKeyboardRelease'))
    return _client_service().call(_macroKeyboardRelease_id, *args, **kwargs)


_macroKeyboardType_id = None
def macroKeyboardType(*args, **kwargs):
    """
    macroKeyboardType(keyboard_string: str)
    
    Simulate the keyboard
    
    Args:
        keyboard_string (str): Keyboard key
    """
    global _macroKeyboardType_id
    if _macroKeyboardType_id is None:
        _macroKeyboardType_id = _client_service().register_static_object(('TechlogPlot', 'macroKeyboardType'))
    return _client_service().call(_macroKeyboardType_id, *args, **kwargs)


_macroMouseLeftDown_id = None
def macroMouseLeftDown(*args, **kwargs):
    """
    macroMouseLeftDown()
    
    Simulate the mouse left button getting down
    """
    global _macroMouseLeftDown_id
    if _macroMouseLeftDown_id is None:
        _macroMouseLeftDown_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseLeftDown'))
    return _client_service().call(_macroMouseLeftDown_id, *args, **kwargs)


_macroMouseLeftUp_id = None
def macroMouseLeftUp(*args, **kwargs):
    """
    macroMouseLeftUp()
    
    Simulate the mouse left button getting up
    """
    global _macroMouseLeftUp_id
    if _macroMouseLeftUp_id is None:
        _macroMouseLeftUp_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseLeftUp'))
    return _client_service().call(_macroMouseLeftUp_id, *args, **kwargs)


_macroMouseMiddleDown_id = None
def macroMouseMiddleDown(*args, **kwargs):
    """
    macroMouseMiddleDown()
    
    Simulate the mouse middle button getting down
    """
    global _macroMouseMiddleDown_id
    if _macroMouseMiddleDown_id is None:
        _macroMouseMiddleDown_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseMiddleDown'))
    return _client_service().call(_macroMouseMiddleDown_id, *args, **kwargs)


_macroMouseMiddleUp_id = None
def macroMouseMiddleUp(*args, **kwargs):
    """
    macroMouseMiddleUp()
    
    Simulate the mouse middle button getting up
    """
    global _macroMouseMiddleUp_id
    if _macroMouseMiddleUp_id is None:
        _macroMouseMiddleUp_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseMiddleUp'))
    return _client_service().call(_macroMouseMiddleUp_id, *args, **kwargs)


_macroMouseMove_id = None
def macroMouseMove(*args, **kwargs):
    """
    macroMouseMove()
    
    Simulate the mouse movement
    """
    global _macroMouseMove_id
    if _macroMouseMove_id is None:
        _macroMouseMove_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseMove'))
    return _client_service().call(_macroMouseMove_id, *args, **kwargs)


_macroMouseRightDown_id = None
def macroMouseRightDown(*args, **kwargs):
    """
    macroMouseRightDown()
    
    Simulate the mouse right button getting down
    """
    global _macroMouseRightDown_id
    if _macroMouseRightDown_id is None:
        _macroMouseRightDown_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseRightDown'))
    return _client_service().call(_macroMouseRightDown_id, *args, **kwargs)


_macroMouseRightUp_id = None
def macroMouseRightUp(*args, **kwargs):
    """
    macroMouseRightUp()
    
    Simulate the mouse right button getting up
    """
    global _macroMouseRightUp_id
    if _macroMouseRightUp_id is None:
        _macroMouseRightUp_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseRightUp'))
    return _client_service().call(_macroMouseRightUp_id, *args, **kwargs)


_macroMouseWheel_id = None
def macroMouseWheel(*args, **kwargs):
    """
    macroMouseWheel()
    
    Simulate the mouse wheel
    """
    global _macroMouseWheel_id
    if _macroMouseWheel_id is None:
        _macroMouseWheel_id = _client_service().register_static_object(('TechlogPlot', 'macroMouseWheel'))
    return _client_service().call(_macroMouseWheel_id, *args, **kwargs)


_macroObjectExists_id = None
def macroObjectExists(*args, **kwargs):
    """
    macroObjectExists()
    
    Return true if a widget exists and is visible (param: widgetDescriptor)
    """
    global _macroObjectExists_id
    if _macroObjectExists_id is None:
        _macroObjectExists_id = _client_service().register_static_object(('TechlogPlot', 'macroObjectExists'))
    return _client_service().call(_macroObjectExists_id, *args, **kwargs)


_macroObjectHeight_id = None
def macroObjectHeight(*args, **kwargs):
    """
    macroObjectHeight()
    
    (param: widgetDescriptor)
    """
    global _macroObjectHeight_id
    if _macroObjectHeight_id is None:
        _macroObjectHeight_id = _client_service().register_static_object(('TechlogPlot', 'macroObjectHeight'))
    return _client_service().call(_macroObjectHeight_id, *args, **kwargs)


_macroObjectLeft_id = None
def macroObjectLeft(*args, **kwargs):
    """
    macroObjectLeft()
    
    (param: widgetDescriptor)
    """
    global _macroObjectLeft_id
    if _macroObjectLeft_id is None:
        _macroObjectLeft_id = _client_service().register_static_object(('TechlogPlot', 'macroObjectLeft'))
    return _client_service().call(_macroObjectLeft_id, *args, **kwargs)


_macroObjectTop_id = None
def macroObjectTop(*args, **kwargs):
    """
    macroObjectTop()
    
    (param: widgetDescriptor)
    """
    global _macroObjectTop_id
    if _macroObjectTop_id is None:
        _macroObjectTop_id = _client_service().register_static_object(('TechlogPlot', 'macroObjectTop'))
    return _client_service().call(_macroObjectTop_id, *args, **kwargs)


_macroObjectWidth_id = None
def macroObjectWidth(*args, **kwargs):
    """
    macroObjectWidth()
    
    (param: widgetDescriptor)
    """
    global _macroObjectWidth_id
    if _macroObjectWidth_id is None:
        _macroObjectWidth_id = _client_service().register_static_object(('TechlogPlot', 'macroObjectWidth'))
    return _client_service().call(_macroObjectWidth_id, *args, **kwargs)


_macroWait_id = None
def macroWait(*args, **kwargs):
    """
    macroWait()
    
    Wait before the next action (in ms)
    """
    global _macroWait_id
    if _macroWait_id is None:
        _macroWait_id = _client_service().register_static_object(('TechlogPlot', 'macroWait'))
    return _client_service().call(_macroWait_id, *args, **kwargs)


_matrixBoxPlotByZoneOpen_id = None
def matrixBoxPlotByZoneOpen(*args, **kwargs):
    """
    matrixBoxPlotByZoneOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix box-plot by zone
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixBoxPlotByZoneOpen_id
    if _matrixBoxPlotByZoneOpen_id is None:
        _matrixBoxPlotByZoneOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixBoxPlotByZoneOpen'))
    return _client_service().call(_matrixBoxPlotByZoneOpen_id, *args, **kwargs)


_matrixBoxPlotOpen_id = None
def matrixBoxPlotOpen(*args, **kwargs):
    """
    matrixBoxPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix box-plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixBoxPlotOpen_id
    if _matrixBoxPlotOpen_id is None:
        _matrixBoxPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixBoxPlotOpen'))
    return _client_service().call(_matrixBoxPlotOpen_id, *args, **kwargs)


_matrixCreate_id = None
def matrixCreate(*args, **kwargs):
    """
    matrixCreate(n: str, nbl: Number=1, nbc: Number=2, t: str='', f: str='') -> Number
    
    Open an empty matrix custom window
    
    Args:
        n (str): matrix window name
        nbl (Number): Optional; number of lines of the matrix
        nbc (Number): Optional; number of columns of the matrix
        t (str): Optional; matrix title
        f (str): Optional; folder
    
    Returns:
        Number: matrix window ID
    """
    global _matrixCreate_id
    if _matrixCreate_id is None:
        _matrixCreate_id = _client_service().register_static_object(('TechlogPlot', 'matrixCreate'))
    return _client_service().call(_matrixCreate_id, *args, **kwargs)


_matrixCrossPlotAddChart_id = None
def matrixCrossPlotAddChart(*args, **kwargs):
    """
    matrixCrossPlotAddChart(plotID: Number, cn: str) -> bool
    
    Add chart to the cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        cn (str): chart name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotAddChart_id
    if _matrixCrossPlotAddChart_id is None:
        _matrixCrossPlotAddChart_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotAddChart'))
    return _client_service().call(_matrixCrossPlotAddChart_id, *args, **kwargs)


_matrixCrossPlotAddData_id = None
def matrixCrossPlotAddData(*args, **kwargs):
    """
    matrixCrossPlotAddData(plotID: Number, ds: list) -> bool
    
    Add a dataset to a matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotAddData_id
    if _matrixCrossPlotAddData_id is None:
        _matrixCrossPlotAddData_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotAddData'))
    return _client_service().call(_matrixCrossPlotAddData_id, *args, **kwargs)


_matrixCrossPlotAddZone_id = None
def matrixCrossPlotAddZone(*args, **kwargs):
    """
    matrixCrossPlotAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotAddZone_id
    if _matrixCrossPlotAddZone_id is None:
        _matrixCrossPlotAddZone_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotAddZone'))
    return _client_service().call(_matrixCrossPlotAddZone_id, *args, **kwargs)


_matrixCrossPlotCleanZonation_id = None
def matrixCrossPlotCleanZonation(*args, **kwargs):
    """
    matrixCrossPlotCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotCleanZonation_id
    if _matrixCrossPlotCleanZonation_id is None:
        _matrixCrossPlotCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotCleanZonation'))
    return _client_service().call(_matrixCrossPlotCleanZonation_id, *args, **kwargs)


_matrixCrossPlotCleanZone_id = None
def matrixCrossPlotCleanZone(*args, **kwargs):
    """
    matrixCrossPlotCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotCleanZone_id
    if _matrixCrossPlotCleanZone_id is None:
        _matrixCrossPlotCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotCleanZone'))
    return _client_service().call(_matrixCrossPlotCleanZone_id, *args, **kwargs)


_matrixCrossPlotCreate_id = None
def matrixCrossPlotCreate(*args, **kwargs):
    """
    matrixCrossPlotCreate(ml: list) -> Number
    
    Create a new matrix cross-plot
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: cross-plot window ID
    """
    global _matrixCrossPlotCreate_id
    if _matrixCrossPlotCreate_id is None:
        _matrixCrossPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotCreate'))
    return _client_service().call(_matrixCrossPlotCreate_id, *args, **kwargs)


_matrixCrossPlotDensityGridHorizontal_id = None
def matrixCrossPlotDensityGridHorizontal(*args, **kwargs):
    """
    matrixCrossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number=0, xmax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of X density grid
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        xmin (Number): Optional; X axis minimum
        xmax (Number): Optional; X axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotDensityGridHorizontal_id
    if _matrixCrossPlotDensityGridHorizontal_id is None:
        _matrixCrossPlotDensityGridHorizontal_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotDensityGridHorizontal'))
    return _client_service().call(_matrixCrossPlotDensityGridHorizontal_id, *args, **kwargs)


_matrixCrossPlotDensityGridVertical_id = None
def matrixCrossPlotDensityGridVertical(*args, **kwargs):
    """
    matrixCrossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number=0, ymax: Number=0, dim: Number=50) -> bool
    
    Set characteristics of Y density grid
    
    Args:
        plotID (Number): cross-plot window ID
        type (int): type {0 = 'VARIABLE', 1 = 'USER', 2 = 'FAMILY'}
        ymin (Number): Optional; Y axis minimum
        ymax (Number): Optional; Y axis maximum
        dim (Number): Optional; box dimension
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotDensityGridVertical_id
    if _matrixCrossPlotDensityGridVertical_id is None:
        _matrixCrossPlotDensityGridVertical_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotDensityGridVertical'))
    return _client_service().call(_matrixCrossPlotDensityGridVertical_id, *args, **kwargs)


_matrixCrossPlotDensitySmooth_id = None
def matrixCrossPlotDensitySmooth(*args, **kwargs):
    """
    matrixCrossPlotDensitySmooth(plotID: Number, smooth: bool) -> bool
    
    Display of smoothed density values
    
    Args:
        plotID (Number): cross-plot window ID
        smooth (bool): 1 = smooth else 0
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotDensitySmooth_id
    if _matrixCrossPlotDensitySmooth_id is None:
        _matrixCrossPlotDensitySmooth_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotDensitySmooth'))
    return _client_service().call(_matrixCrossPlotDensitySmooth_id, *args, **kwargs)


_matrixCrossPlotDensityType_id = None
def matrixCrossPlotDensityType(*args, **kwargs):
    """
    matrixCrossPlotDensityType(plotID: Number, dst: bool) -> bool
    
    Display of the matrix cross-plot in normal or density type
    
    Args:
        plotID (Number): cross-plot window ID
        dst (bool): 1 = density display else 0
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotDensityType_id
    if _matrixCrossPlotDensityType_id is None:
        _matrixCrossPlotDensityType_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotDensityType'))
    return _client_service().call(_matrixCrossPlotDensityType_id, *args, **kwargs)


_matrixCrossPlotDuplicate_id = None
def matrixCrossPlotDuplicate(*args, **kwargs):
    """
    matrixCrossPlotDuplicate(plotID: Number) -> Number
    
    Duplicate the matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _matrixCrossPlotDuplicate_id
    if _matrixCrossPlotDuplicate_id is None:
        _matrixCrossPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotDuplicate'))
    return _client_service().call(_matrixCrossPlotDuplicate_id, *args, **kwargs)


_matrixCrossPlotIDFindByName_id = None
def matrixCrossPlotIDFindByName(*args, **kwargs):
    """
    matrixCrossPlotIDFindByName(n: str) -> Number
    
    Find the ID of a name-known cross-plot
    
    Args:
        n (str): cross-plot window name
    
    Returns:
        Number: cross-plot window ID
    """
    global _matrixCrossPlotIDFindByName_id
    if _matrixCrossPlotIDFindByName_id is None:
        _matrixCrossPlotIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotIDFindByName'))
    return _client_service().call(_matrixCrossPlotIDFindByName_id, *args, **kwargs)


_matrixCrossPlotOpen_id = None
def matrixCrossPlotOpen(*args, **kwargs):
    """
    matrixCrossPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix cross-plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixCrossPlotOpen_id
    if _matrixCrossPlotOpen_id is None:
        _matrixCrossPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotOpen'))
    return _client_service().call(_matrixCrossPlotOpen_id, *args, **kwargs)


_matrixCrossPlotRemoveDataset_id = None
def matrixCrossPlotRemoveDataset(*args, **kwargs):
    """
    matrixCrossPlotRemoveDataset(plotID: Number, ds: str) -> bool
    
    Remove a dataset from a matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotRemoveDataset_id
    if _matrixCrossPlotRemoveDataset_id is None:
        _matrixCrossPlotRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotRemoveDataset'))
    return _client_service().call(_matrixCrossPlotRemoveDataset_id, *args, **kwargs)


_matrixCrossPlotRemoveWell_id = None
def matrixCrossPlotRemoveWell(*args, **kwargs):
    """
    matrixCrossPlotRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotRemoveWell_id
    if _matrixCrossPlotRemoveWell_id is None:
        _matrixCrossPlotRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotRemoveWell'))
    return _client_service().call(_matrixCrossPlotRemoveWell_id, *args, **kwargs)


_matrixCrossPlotSave_id = None
def matrixCrossPlotSave(*args, **kwargs):
    """
    matrixCrossPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): cross-plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSave_id
    if _matrixCrossPlotSave_id is None:
        _matrixCrossPlotSave_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSave'))
    return _client_service().call(_matrixCrossPlotSave_id, *args, **kwargs)


_matrixCrossPlotSelectVar_id = None
def matrixCrossPlotSelectVar(*args, **kwargs):
    """
    matrixCrossPlotSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    [DEPRECATED] (use matrixCrossPlotSelectVariable instead) Change the variable selected among one family's variables in a matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSelectVar_id
    if _matrixCrossPlotSelectVar_id is None:
        _matrixCrossPlotSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSelectVar'))
    return _client_service().call(_matrixCrossPlotSelectVar_id, *args, **kwargs)


_matrixCrossPlotSelectVariable_id = None
def matrixCrossPlotSelectVariable(*args, **kwargs):
    """
    matrixCrossPlotSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSelectVariable_id
    if _matrixCrossPlotSelectVariable_id is None:
        _matrixCrossPlotSelectVariable_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSelectVariable'))
    return _client_service().call(_matrixCrossPlotSelectVariable_id, *args, **kwargs)


_matrixCrossPlotSetName_id = None
def matrixCrossPlotSetName(*args, **kwargs):
    """
    matrixCrossPlotSetName(plotID: Number, n: str) -> bool
    
    Change the name of matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        n (str): new cross-plot name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetName_id
    if _matrixCrossPlotSetName_id is None:
        _matrixCrossPlotSetName_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetName'))
    return _client_service().call(_matrixCrossPlotSetName_id, *args, **kwargs)


_matrixCrossPlotSetPaletteBoundaries_id = None
def matrixCrossPlotSetPaletteBoundaries(*args, **kwargs):
    """
    matrixCrossPlotSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a matrix cross plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetPaletteBoundaries_id
    if _matrixCrossPlotSetPaletteBoundaries_id is None:
        _matrixCrossPlotSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetPaletteBoundaries'))
    return _client_service().call(_matrixCrossPlotSetPaletteBoundaries_id, *args, **kwargs)


_matrixCrossPlotSetXAxisInverse_id = None
def matrixCrossPlotSetXAxisInverse(*args, **kwargs):
    """
    matrixCrossPlotSetXAxisInverse(plotID: Number, xainv: bool) -> bool
    
    Inverse the matrix cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetXAxisInverse_id
    if _matrixCrossPlotSetXAxisInverse_id is None:
        _matrixCrossPlotSetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetXAxisInverse'))
    return _client_service().call(_matrixCrossPlotSetXAxisInverse_id, *args, **kwargs)


_matrixCrossPlotSetXAxisScale_id = None
def matrixCrossPlotSetXAxisScale(*args, **kwargs):
    """
    matrixCrossPlotSetXAxisScale(plotID: Number, xasc: int) -> bool
    
    Set the matrix cross-plot X axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        xasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetXAxisScale_id
    if _matrixCrossPlotSetXAxisScale_id is None:
        _matrixCrossPlotSetXAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetXAxisScale'))
    return _client_service().call(_matrixCrossPlotSetXAxisScale_id, *args, **kwargs)


_matrixCrossPlotSetXAxisType_id = None
def matrixCrossPlotSetXAxisType(*args, **kwargs):
    """
    matrixCrossPlotSetXAxisType(plotID: Number, xat: int) -> bool
    
    Change the type of matrix cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xat (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetXAxisType_id
    if _matrixCrossPlotSetXAxisType_id is None:
        _matrixCrossPlotSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetXAxisType'))
    return _client_service().call(_matrixCrossPlotSetXAxisType_id, *args, **kwargs)


_matrixCrossPlotSetXAxisUnit_id = None
def matrixCrossPlotSetXAxisUnit(*args, **kwargs):
    """
    matrixCrossPlotSetXAxisUnit(plotID: Number, xau: str) -> bool
    
    Change the unit of matrix cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xau (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetXAxisUnit_id
    if _matrixCrossPlotSetXAxisUnit_id is None:
        _matrixCrossPlotSetXAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetXAxisUnit'))
    return _client_service().call(_matrixCrossPlotSetXAxisUnit_id, *args, **kwargs)


_matrixCrossPlotSetXAxisUserLimits_id = None
def matrixCrossPlotSetXAxisUserLimits(*args, **kwargs):
    """
    matrixCrossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number) -> bool
    
    Set min & max values of matrix cross-plot X axis
    
    Args:
        plotID (Number): cross-plot window ID
        xamin (Number): X axis minimum
        xamax (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetXAxisUserLimits_id
    if _matrixCrossPlotSetXAxisUserLimits_id is None:
        _matrixCrossPlotSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetXAxisUserLimits'))
    return _client_service().call(_matrixCrossPlotSetXAxisUserLimits_id, *args, **kwargs)


_matrixCrossPlotSetYAxisInverse_id = None
def matrixCrossPlotSetYAxisInverse(*args, **kwargs):
    """
    matrixCrossPlotSetYAxisInverse(plotID: Number, yainv: bool) -> bool
    
    Inverse the matrix cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yainv (bool): 1 = inverse else 0
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetYAxisInverse_id
    if _matrixCrossPlotSetYAxisInverse_id is None:
        _matrixCrossPlotSetYAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetYAxisInverse'))
    return _client_service().call(_matrixCrossPlotSetYAxisInverse_id, *args, **kwargs)


_matrixCrossPlotSetYAxisScale_id = None
def matrixCrossPlotSetYAxisScale(*args, **kwargs):
    """
    matrixCrossPlotSetYAxisScale(plotID: Number, yasc: int) -> bool
    
    Set the matrix cross-plot Y axis scale
    
    Args:
        plotID (Number): cross-plot window ID
        yasc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetYAxisScale_id
    if _matrixCrossPlotSetYAxisScale_id is None:
        _matrixCrossPlotSetYAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetYAxisScale'))
    return _client_service().call(_matrixCrossPlotSetYAxisScale_id, *args, **kwargs)


_matrixCrossPlotSetYAxisType_id = None
def matrixCrossPlotSetYAxisType(*args, **kwargs):
    """
    matrixCrossPlotSetYAxisType(plotID: Number, yat: int) -> bool
    
    Change the type of matrix cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yat (int): Y axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetYAxisType_id
    if _matrixCrossPlotSetYAxisType_id is None:
        _matrixCrossPlotSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetYAxisType'))
    return _client_service().call(_matrixCrossPlotSetYAxisType_id, *args, **kwargs)


_matrixCrossPlotSetYAxisUnit_id = None
def matrixCrossPlotSetYAxisUnit(*args, **kwargs):
    """
    matrixCrossPlotSetYAxisUnit(plotID: Number, yau: str) -> bool
    
    Change the unit of matrix cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yau (str): Y axis unit
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetYAxisUnit_id
    if _matrixCrossPlotSetYAxisUnit_id is None:
        _matrixCrossPlotSetYAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetYAxisUnit'))
    return _client_service().call(_matrixCrossPlotSetYAxisUnit_id, *args, **kwargs)


_matrixCrossPlotSetYAxisUserLimits_id = None
def matrixCrossPlotSetYAxisUserLimits(*args, **kwargs):
    """
    matrixCrossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number) -> bool
    
    Set min & max values of matrix cross-plot Y axis
    
    Args:
        plotID (Number): cross-plot window ID
        yamin (Number): Y axis minimum
        yamax (Number): Y axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetYAxisUserLimits_id
    if _matrixCrossPlotSetYAxisUserLimits_id is None:
        _matrixCrossPlotSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetYAxisUserLimits'))
    return _client_service().call(_matrixCrossPlotSetYAxisUserLimits_id, *args, **kwargs)


_matrixCrossPlotSetZonation_id = None
def matrixCrossPlotSetZonation(*args, **kwargs):
    """
    matrixCrossPlotSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the matrix cross-plot
    
    Args:
        plotID (Number): cross-plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _matrixCrossPlotSetZonation_id
    if _matrixCrossPlotSetZonation_id is None:
        _matrixCrossPlotSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'matrixCrossPlotSetZonation'))
    return _client_service().call(_matrixCrossPlotSetZonation_id, *args, **kwargs)


_matrixDashBoardOpen_id = None
def matrixDashBoardOpen(*args, **kwargs):
    """
    matrixDashBoardOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix dashboard
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixDashBoardOpen_id
    if _matrixDashBoardOpen_id is None:
        _matrixDashBoardOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixDashBoardOpen'))
    return _client_service().call(_matrixDashBoardOpen_id, *args, **kwargs)


_matrixHistogramAddData_id = None
def matrixHistogramAddData(*args, **kwargs):
    """
    matrixHistogramAddData(plotID: Number, ds: list) -> bool
    
    Add a dataset to a matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramAddData_id
    if _matrixHistogramAddData_id is None:
        _matrixHistogramAddData_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramAddData'))
    return _client_service().call(_matrixHistogramAddData_id, *args, **kwargs)


_matrixHistogramAddZone_id = None
def matrixHistogramAddZone(*args, **kwargs):
    """
    matrixHistogramAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramAddZone_id
    if _matrixHistogramAddZone_id is None:
        _matrixHistogramAddZone_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramAddZone'))
    return _client_service().call(_matrixHistogramAddZone_id, *args, **kwargs)


_matrixHistogramCleanZonation_id = None
def matrixHistogramCleanZonation(*args, **kwargs):
    """
    matrixHistogramCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramCleanZonation_id
    if _matrixHistogramCleanZonation_id is None:
        _matrixHistogramCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramCleanZonation'))
    return _client_service().call(_matrixHistogramCleanZonation_id, *args, **kwargs)


_matrixHistogramCleanZone_id = None
def matrixHistogramCleanZone(*args, **kwargs):
    """
    matrixHistogramCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramCleanZone_id
    if _matrixHistogramCleanZone_id is None:
        _matrixHistogramCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramCleanZone'))
    return _client_service().call(_matrixHistogramCleanZone_id, *args, **kwargs)


_matrixHistogramCreate_id = None
def matrixHistogramCreate(*args, **kwargs):
    """
    matrixHistogramCreate(ml: list) -> Number
    
    Create a new matrix histogram
    
    Args:
        ml (list): mnemonic list
    
    Returns:
        Number: cross-plot window ID
    """
    global _matrixHistogramCreate_id
    if _matrixHistogramCreate_id is None:
        _matrixHistogramCreate_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramCreate'))
    return _client_service().call(_matrixHistogramCreate_id, *args, **kwargs)


_matrixHistogramDuplicate_id = None
def matrixHistogramDuplicate(*args, **kwargs):
    """
    matrixHistogramDuplicate(plotID: Number) -> Number
    
    Duplicate the matrix histogram
    
    Args:
        plotID (Number): histogram window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _matrixHistogramDuplicate_id
    if _matrixHistogramDuplicate_id is None:
        _matrixHistogramDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramDuplicate'))
    return _client_service().call(_matrixHistogramDuplicate_id, *args, **kwargs)


_matrixHistogramIDFindByName_id = None
def matrixHistogramIDFindByName(*args, **kwargs):
    """
    matrixHistogramIDFindByName(n: str) -> Number
    
    Find the ID of a name-known matrix histogram
    
    Args:
        n (str): matrix histogram window name
    
    Returns:
        Number: matrix histogram window ID
    """
    global _matrixHistogramIDFindByName_id
    if _matrixHistogramIDFindByName_id is None:
        _matrixHistogramIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramIDFindByName'))
    return _client_service().call(_matrixHistogramIDFindByName_id, *args, **kwargs)


_matrixHistogramOpen_id = None
def matrixHistogramOpen(*args, **kwargs):
    """
    matrixHistogramOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix histogram
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixHistogramOpen_id
    if _matrixHistogramOpen_id is None:
        _matrixHistogramOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramOpen'))
    return _client_service().call(_matrixHistogramOpen_id, *args, **kwargs)


_matrixHistogramRemoveDataset_id = None
def matrixHistogramRemoveDataset(*args, **kwargs):
    """
    matrixHistogramRemoveDataset(plotID: Number, ds: str) -> bool
    
    Remove a dataset from a matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramRemoveDataset_id
    if _matrixHistogramRemoveDataset_id is None:
        _matrixHistogramRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramRemoveDataset'))
    return _client_service().call(_matrixHistogramRemoveDataset_id, *args, **kwargs)


_matrixHistogramRemoveWell_id = None
def matrixHistogramRemoveWell(*args, **kwargs):
    """
    matrixHistogramRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramRemoveWell_id
    if _matrixHistogramRemoveWell_id is None:
        _matrixHistogramRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramRemoveWell'))
    return _client_service().call(_matrixHistogramRemoveWell_id, *args, **kwargs)


_matrixHistogramSave_id = None
def matrixHistogramSave(*args, **kwargs):
    """
    matrixHistogramSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the matrix histogram
    
    Args:
        plotID (Number): matrix histogram window ID
        n (str): matrix histogram name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramSave_id
    if _matrixHistogramSave_id is None:
        _matrixHistogramSave_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramSave'))
    return _client_service().call(_matrixHistogramSave_id, *args, **kwargs)


_matrixHistogramSelectVar_id = None
def matrixHistogramSelectVar(*args, **kwargs):
    """
    matrixHistogramSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    [DEPRECATED] (use matrixHistogramSelectVariable instead) Change the variable selected among one family's variables in a matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramSelectVar_id
    if _matrixHistogramSelectVar_id is None:
        _matrixHistogramSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramSelectVar'))
    return _client_service().call(_matrixHistogramSelectVar_id, *args, **kwargs)


_matrixHistogramSelectVariable_id = None
def matrixHistogramSelectVariable(*args, **kwargs):
    """
    matrixHistogramSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramSelectVariable_id
    if _matrixHistogramSelectVariable_id is None:
        _matrixHistogramSelectVariable_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramSelectVariable'))
    return _client_service().call(_matrixHistogramSelectVariable_id, *args, **kwargs)


_matrixHistogramSetFill_id = None
def matrixHistogramSetFill(*args, **kwargs):
    """
    matrixHistogramSetFill(plotID: Number, fill: bool) -> bool
    
    Fill or not the inside of the histograms with a color
    
    Args:
        plotID (Number): matrix histogram window ID
        fill (bool): 1 = fill; 0 = don't fill
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramSetFill_id
    if _matrixHistogramSetFill_id is None:
        _matrixHistogramSetFill_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramSetFill'))
    return _client_service().call(_matrixHistogramSetFill_id, *args, **kwargs)


_matrixHistogramSetName_id = None
def matrixHistogramSetName(*args, **kwargs):
    """
    matrixHistogramSetName(plotID: Number, n: str) -> bool
    
    Change the name of matrix histogram
    
    Args:
        plotID (Number): matrix histogram window ID
        n (str): new matrix histogram name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramSetName_id
    if _matrixHistogramSetName_id is None:
        _matrixHistogramSetName_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramSetName'))
    return _client_service().call(_matrixHistogramSetName_id, *args, **kwargs)


_matrixHistogramSetZonation_id = None
def matrixHistogramSetZonation(*args, **kwargs):
    """
    matrixHistogramSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the matrix histogram
    
    Args:
        plotID (Number): histogram window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _matrixHistogramSetZonation_id
    if _matrixHistogramSetZonation_id is None:
        _matrixHistogramSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'matrixHistogramSetZonation'))
    return _client_service().call(_matrixHistogramSetZonation_id, *args, **kwargs)


_matrixIDFindByName_id = None
def matrixIDFindByName(*args, **kwargs):
    """
    matrixIDFindByName(n: str) -> Number
    
    Find the ID of a name-known matrix custom-plot
    
    Args:
        n (str): matrix custom-plot name
    
    Returns:
        Number: matrix custom-plot window ID
    """
    global _matrixIDFindByName_id
    if _matrixIDFindByName_id is None:
        _matrixIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'matrixIDFindByName'))
    return _client_service().call(_matrixIDFindByName_id, *args, **kwargs)


_matrixInsertPlot_id = None
def matrixInsertPlot(*args, **kwargs):
    """
    matrixInsertPlot(matrixID: Number, plotID: Number, posx: Number=0, posy: Number=0, n: str) -> bool
    
    Insert a plot in a matrix custom
    
    Args:
        matrixID (Number): matrix window ID
        plotID (Number): plot window ID
        posx (Number): Optional; horizontal position of the plot in the matrix
        posy (Number): Optional; vertical position of the plot in the matrix
        n (str): plot name
    
    Returns:
        bool: operation exit status
    """
    global _matrixInsertPlot_id
    if _matrixInsertPlot_id is None:
        _matrixInsertPlot_id = _client_service().register_static_object(('TechlogPlot', 'matrixInsertPlot'))
    return _client_service().call(_matrixInsertPlot_id, *args, **kwargs)


_matrixPCAOpen_id = None
def matrixPCAOpen(*args, **kwargs):
    """
    matrixPCAOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix PCA
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixPCAOpen_id
    if _matrixPCAOpen_id is None:
        _matrixPCAOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixPCAOpen'))
    return _client_service().call(_matrixPCAOpen_id, *args, **kwargs)


_matrixPlotIDFindByName_id = None
def matrixPlotIDFindByName(*args, **kwargs):
    """
    matrixPlotIDFindByName(matrixID: Number, n: str) -> Number
    
    Find the ID of a name-known plot of a matrix custom-plot
    
    Args:
        matrixID (Number): matrix window ID
        n (str): plot name
    
    Returns:
        Number: matrix custom-plot window ID
    """
    global _matrixPlotIDFindByName_id
    if _matrixPlotIDFindByName_id is None:
        _matrixPlotIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'matrixPlotIDFindByName'))
    return _client_service().call(_matrixPlotIDFindByName_id, *args, **kwargs)


_matrixSPLOMOpen_id = None
def matrixSPLOMOpen(*args, **kwargs):
    """
    matrixSPLOMOpen(n: str, f: str=None) -> Number
    
    Open an existing matrix SPLOM
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixSPLOMOpen_id
    if _matrixSPLOMOpen_id is None:
        _matrixSPLOMOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixSPLOMOpen'))
    return _client_service().call(_matrixSPLOMOpen_id, *args, **kwargs)


_matrixSplomOpen_id = None
def matrixSplomOpen(*args, **kwargs):
    """
    matrixSplomOpen(n: str, f: str=None) -> Number
    
    [DEPRECATED] (use matrixSPLOMOpen instead) Open an existing matrix SPLOM
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _matrixSplomOpen_id
    if _matrixSplomOpen_id is None:
        _matrixSplomOpen_id = _client_service().register_static_object(('TechlogPlot', 'matrixSplomOpen'))
    return _client_service().call(_matrixSplomOpen_id, *args, **kwargs)


_objectList_id = None
def objectList(*args, **kwargs):
    """
    objectList(o: str, f: str='') -> bool
    
    Return the list of the objects
    
    Args:
        o (str): object type (cross-plot,logView)
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _objectList_id
    if _objectList_id is None:
        _objectList_id = _client_service().register_static_object(('TechlogPlot', 'objectList'))
    return _client_service().call(_objectList_id, *args, **kwargs)


_paletteAddOrUpdateDiscreteValue_id = None
def paletteAddOrUpdateDiscreteValue(*args, **kwargs):
    """
    paletteAddOrUpdateDiscreteValue(paletteID: Number, patternID: Number, value: Number, color: str, description: str) -> bool
    
    Add or update a discrete value to the palette.
    
    Args:
        paletteID (Number): palette ID returned by the plot.paletteDiscreteCreateOrGet function
        patternID (Number): pattern ID returned by the plot.patternID function
        value (Number): discrete value
        color (str): hexadecimal color code to be assigned to the discrete value
        description (str): description to be assigned to the discrete value
    
    Returns:
        bool: operation exit status
    """
    global _paletteAddOrUpdateDiscreteValue_id
    if _paletteAddOrUpdateDiscreteValue_id is None:
        _paletteAddOrUpdateDiscreteValue_id = _client_service().register_static_object(('TechlogPlot', 'paletteAddOrUpdateDiscreteValue'))
    return _client_service().call(_paletteAddOrUpdateDiscreteValue_id, *args, **kwargs)


_paletteDiscreteCreateOrGet_id = None
def paletteDiscreteCreateOrGet(*args, **kwargs):
    """
    paletteDiscreteCreateOrGet(paletteName: str, storageLevel: str) -> Number
    
    Create a discrete values palette at a given storage level or get the palette if this one already exists by its name at the given storage level.
    
    Args:
        paletteName (str): name of the discrete values palette
        storageLevel (str): Techlog storage level where the palette is created ('project', 'company', 'user')
    
    Returns:
        Number: returns a palette ID if the palette has been created or already exists by its name at the given storage level (returns None if the palette failed to be created)
    """
    global _paletteDiscreteCreateOrGet_id
    if _paletteDiscreteCreateOrGet_id is None:
        _paletteDiscreteCreateOrGet_id = _client_service().register_static_object(('TechlogPlot', 'paletteDiscreteCreateOrGet'))
    return _client_service().call(_paletteDiscreteCreateOrGet_id, *args, **kwargs)


_paletteDiscreteID_id = None
def paletteDiscreteID(*args, **kwargs):
    """
    paletteDiscreteID(paletteName: str, storageLevel: str) -> Number
    
    Gets the palette by its name at the given storage level.
    
    Args:
        paletteName (str): name of the discrete values palette
        storageLevel (str): Techlog storage level where the palette is created ('project', 'company', 'user')
    
    Returns:
        Number: returns a palette ID if the palette already exists by its name at the given storage level (returns None if the palette does not exist)
    """
    global _paletteDiscreteID_id
    if _paletteDiscreteID_id is None:
        _paletteDiscreteID_id = _client_service().register_static_object(('TechlogPlot', 'paletteDiscreteID'))
    return _client_service().call(_paletteDiscreteID_id, *args, **kwargs)


_paletteDiscreteValueGetColor_id = None
def paletteDiscreteValueGetColor(*args, **kwargs):
    """
    paletteDiscreteValueGetColor(paletteID: Number, value: Number) -> str
    
    Gets a color assigned to a palette discrete value
    
    Args:
        paletteID (Number): palette ID returned by the plot.paletteDiscreteCreateOrGet function
        value (Number): discrete value for which you want to get the color
    
    Returns:
        str: returns an hexadecimal color code (returns None if no color assigned to the discrete value)
    """
    global _paletteDiscreteValueGetColor_id
    if _paletteDiscreteValueGetColor_id is None:
        _paletteDiscreteValueGetColor_id = _client_service().register_static_object(('TechlogPlot', 'paletteDiscreteValueGetColor'))
    return _client_service().call(_paletteDiscreteValueGetColor_id, *args, **kwargs)


_paletteDiscreteValueGetPatternName_id = None
def paletteDiscreteValueGetPatternName(*args, **kwargs):
    """
    paletteDiscreteValueGetPatternName(paletteID: Number, value: Number) -> str
    
    Gets a pattern name assigned to a palette discrete value
    
    Args:
        paletteID (Number): palette ID returned by the plot.paletteDiscreteCreateOrGet function
        value (Number): discrete value for which you want to get the pattern name
    
    Returns:
        str: returns the pattern name with the format classification__patternName (returns None if no pattern assigned to the discrete value)
    """
    global _paletteDiscreteValueGetPatternName_id
    if _paletteDiscreteValueGetPatternName_id is None:
        _paletteDiscreteValueGetPatternName_id = _client_service().register_static_object(('TechlogPlot', 'paletteDiscreteValueGetPatternName'))
    return _client_service().call(_paletteDiscreteValueGetPatternName_id, *args, **kwargs)


_paletteDiscreteValueGetPatternStorageLevel_id = None
def paletteDiscreteValueGetPatternStorageLevel(*args, **kwargs):
    """
    paletteDiscreteValueGetPatternStorageLevel(paletteID: Number, value: Number) -> str
    
    Gets a pattern name assigned to a palette discrete value
    
    Args:
        paletteID (Number): palette ID returned by the plot.paletteDiscreteCreateOrGet function
        value (Number): discrete value for which you want to get the pattern storage level
    
    Returns:
        str: returns the pattern storage level (returns None if no pattern assigned to the discrete value)
    """
    global _paletteDiscreteValueGetPatternStorageLevel_id
    if _paletteDiscreteValueGetPatternStorageLevel_id is None:
        _paletteDiscreteValueGetPatternStorageLevel_id = _client_service().register_static_object(('TechlogPlot', 'paletteDiscreteValueGetPatternStorageLevel'))
    return _client_service().call(_paletteDiscreteValueGetPatternStorageLevel_id, *args, **kwargs)


_patternID_id = None
def patternID(*args, **kwargs):
    """
    patternID(patternClassification: str, patternName: str, patternStorageLevel: str) -> Number
    
    Gets the patternID from a pattern name at a given storage level.
    
    Args:
        patternClassification (str): classification of the pattern to be assigned to the discrete value
        patternName (str): name of the pattern to be assigned to the discrete value
        patternStorageLevel (str): Techlog storage level of the pattern ('techlog', 'project', 'company', 'user')
    
    Returns:
        Number: returns a pattern ID if the pattern exists by its name at the given storage level (returns None if the pattern doesn't exist)
    """
    global _patternID_id
    if _patternID_id is None:
        _patternID_id = _client_service().register_static_object(('TechlogPlot', 'patternID'))
    return _client_service().call(_patternID_id, *args, **kwargs)


_piePlotOpen_id = None
def piePlotOpen(*args, **kwargs):
    """
    piePlotOpen(n: str, f: str='') -> Number
    
    Open an existing pie plot
    
    Args:
        n (str): pie plot name
        f (str): Optional; folder
    
    Returns:
        Number: pie plot window ID
    """
    global _piePlotOpen_id
    if _piePlotOpen_id is None:
        _piePlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'piePlotOpen'))
    return _client_service().call(_piePlotOpen_id, *args, **kwargs)


_printCompleted_id = None
def printCompleted(*args, **kwargs):
    """
    printCompleted(threadid: str) -> bool
    
    Returns True if multithread print is completed
    
    Args:
        threadid (str): the print thread name
    
    Returns:
        bool: print completed
    """
    global _printCompleted_id
    if _printCompleted_id is None:
        _printCompleted_id = _client_service().register_static_object(('TechlogPlot', 'printCompleted'))
    return _client_service().call(_printCompleted_id, *args, **kwargs)


_printPlot_id = None
def printPlot(*args, **kwargs):
    """
    printPlot(plotID: Number) -> bool
    
    Print a plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _printPlot_id
    if _printPlot_id is None:
        _printPlot_id = _client_service().register_static_object(('TechlogPlot', 'printPlot'))
    return _client_service().call(_printPlot_id, *args, **kwargs)


_printToFile_id = None
def printToFile(*args, **kwargs):
    """
    printToFile(plotID: Number, paperFormat: str, outputFormat: str, outputName: str, paperWidth: Number=0, paperHeight: Number=0, adjustWidthType: Number=0, adjustWidthValue: Number=-1, adjustHeightType: Number=0, adjustHeightValue: Number=-1, scale: Number=-1, officeCompatible: bool=False, resolution: Number=600) -> bool
    
    Export the plot into a file
    
    Args:
        plotID (Number): object ID
        paperFormat (str): 'A4', 'Letter'...
        outputFormat (str): '.jpg', '.cgm', '.emf', '.pdf'... or 'printer'
        outputName (str): file name (saved in Various folder) or printer name if output format is set to 'printer'
        paperWidth (Number): Optional; paper width in cm
        paperHeight (Number): Optional; paper width in cm
        adjustWidthType (Number): Optional; can be 'adjust to the page' (=0), 'fixed scale' (=1), 'keep proportions' (=2), 'custom' (=3)
        adjustWidthValue (Number): Optional; adjust width value in cm
        adjustHeightType (Number): Optional; can be 'adjust to n pages' (=0), 'fixed scale' (=1), 'keep proportions' (=2), 'custom' (=3)
        adjustHeightValue (Number): Optional; adjust height value in cm if adjust height is 'custom' or number of pages if adjust height is 'adjust to n pages'
        scale (Number): Optional; scale
        officeCompatible (bool): Optional; useful only with CGM format. must be set to true if the generated file is to be used in Microsoft Office applications such
        as Word, PowerPoint...
        resolution (Number): Optional; dpi resolution to print or export the file
    
    Returns:
        bool: operation exit status
    """
    global _printToFile_id
    if _printToFile_id is None:
        _printToFile_id = _client_service().register_static_object(('TechlogPlot', 'printToFile'))
    return _client_service().call(_printToFile_id, *args, **kwargs)


_printToFileMultiThread_id = None
def printToFileMultiThread(*args, **kwargs):
    """
    printToFileMultiThread(plotID: Number, paperFormat: str, outputFormat: str, outputName: str, paperWidth: Number=0, paperHeight: Number=0, adjustWidthType: Number=0, adjustWidthValue: Number=-1, adjustHeightType: Number=0, adjustHeightValue: Number=-1, scale: Number=-1, officeCompatible: bool=False, resolution: Number=600) -> str
    
    Export the plot into a file, using a separate thread
    
    Args:
        plotID (Number): object ID
        paperFormat (str): 'A4', 'Letter'...
        outputFormat (str): '.jpg', '.cgm', '.emf', '.pdf'... or 'printer'
        outputName (str): file name (saved in Various folder) or printer name if output format is set to 'printer'
        paperWidth (Number): Optional; paper width in cm
        paperHeight (Number): Optional; paper width in cm
        adjustWidthType (Number): Optional; can be 'adjust to the page' (=0), 'fixed scale' (=1), 'keep proportions' (=2), 'custom' (=3)
        adjustWidthValue (Number): Optional; adjust width value in cm
        adjustHeightType (Number): Optional; an be 'adjust to n pages' (=0), 'fixed scale' (=1), 'keep proportions' (=2), 'custom' (=3)
        adjustHeightValue (Number): Optional; adjust height value in cm if adjust height is 'custom', or number of pages if adjust height is 'adjust to n pages'
        scale (Number): Optional; scale
        officeCompatible (bool): Optional; seful only with CGM format. must be set to true if the generated file is to be used in Microsoft Office applications such
        as Word, PowerPoint...
        resolution (Number): Optional; resolution in dpi to print or export the file
    
    Returns:
        str: thread name
    """
    global _printToFileMultiThread_id
    if _printToFileMultiThread_id is None:
        _printToFileMultiThread_id = _client_service().register_static_object(('TechlogPlot', 'printToFileMultiThread'))
    return _client_service().call(_printToFileMultiThread_id, *args, **kwargs)


_reportEditorAddItem_id = None
def reportEditorAddItem(*args, **kwargs):
    """
    reportEditorAddItem(reN: int, pN: int, inS: str, speS: str, itNE: int) -> int
    
    Add an item into an existing page
    
    Args:
        reN (int): report editor ID
        pN (int): page ID
        inS (str): depends on item type
            Saved items : item name as in your project browser
            Others items : desired item name in your report browser
        speS (str): depends on item type
            Saved items : folder name : Project, User, Company or Techlog
            Generic items : generic item description (text displayed over your item in report)
            Text item : text content (can contain HTML content if compliant with Qt's rich text engine)
            Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html
            Table of item : title of the table of in your report page
        itNE (int): item type = { 0 - Image, 1 - Layout, 2 - Layout Template, 3 - Crossplot, 4 - Crossplot MW,
            6 - Crossplot AA, 7 - Crossplot Template, 8 - Histogram, 9 - Histogram MW, 10 - Histogram Template,
            11 - Stereonet, 12 - Lineplot, 13 - Header, 14 - Text, 15 - Generic Header,
            16 - Generic Layout, 17 - Generic Crossplot, 18 - Generic Histogram, 19 - Generic Stereonet, 20 - Generic Lineplot,
            21 - Generic Image, 22 - Generic Text, 23 - Ternary, 24 - Walkout, 25 - Cumulative Dip,
            26 - Single Depth, 27 - Generic Ternary, 28 - Generic Walkout, 29 - Generic Cumulative Dip, 30 - Generic Single Depth,
            31 - Table of Contents, 32 - Table of Figures, 33 - Tables of Tables, 34 - Crossplot AVA, 35 - Waveform,
            36 - Generic Waveform, 37 - Wellbore Centrid Grid, 38 - Generic Wellbore Centrid Grid, 39 - Borehole Section, 40 - Generic Borehole Section,
            41 - Cross section profile plot, 42 - Cross section profile plot template, 43 - Generic cross section profile plot,
            44 - Axial section profile plot, 45 - Axial section profile plot template, 46 - Generic axial section profile plot}
    
    Returns:
        int: Success : item ID, else Exception
    """
    global _reportEditorAddItem_id
    if _reportEditorAddItem_id is None:
        _reportEditorAddItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddItem'))
    return _client_service().call(_reportEditorAddItem_id, *args, **kwargs)


_reportEditorAddItemToMasterPage_id = None
def reportEditorAddItemToMasterPage(*args, **kwargs):
    """
    reportEditorAddItemToMasterPage(reN: Number, sN: Number, inS: str, speS: str, itNE: int) -> Number
    
    Add an item to an existing master page:
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        inS (str): item name
        speS (str): depends on item type
            Image item : folder name : Project, User, Company or Techlog
            Text item : text content (can contain HTML content if compliant with Qt's rich text engine)
            Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html
        itNE (int): item type = { 0 - Image, 1 - Text}
    
    Returns:
        Number: Success : item ID, else Exception
    """
    global _reportEditorAddItemToMasterPage_id
    if _reportEditorAddItemToMasterPage_id is None:
        _reportEditorAddItemToMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddItemToMasterPage'))
    return _client_service().call(_reportEditorAddItemToMasterPage_id, *args, **kwargs)


_reportEditorAddLineItem_id = None
def reportEditorAddLineItem(*args, **kwargs):
    """
    reportEditorAddLineItem(reN: Number, pN: Number, x1N: Number, y1N: Number, x2N: Number, y2N: Number) -> Number
    
    Add a line item in a page
    
    Args:
        reN (Number): report editor ID
        pN (Number): page ID
        x1N (Number): begin point horizontal position in current unit
        y1N (Number): begin point vertical position in current unit
        x2N (Number): end point horizontal position in current unit
        y2N (Number): end point vertical position in current unit
    
    Returns:
        Number: Success : item ID, else Exception
    """
    global _reportEditorAddLineItem_id
    if _reportEditorAddLineItem_id is None:
        _reportEditorAddLineItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddLineItem'))
    return _client_service().call(_reportEditorAddLineItem_id, *args, **kwargs)


_reportEditorAddLineItemInMasterPage_id = None
def reportEditorAddLineItemInMasterPage(*args, **kwargs):
    """
    reportEditorAddLineItemInMasterPage(reN: Number, sN: Number, x1N: Number, y1N: Number, x2N: Number, y2N: Number) -> Number
    
    Add a line item in a master page
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        x1N (Number): begin point horizontal position in current unit
        y1N (Number): begin point vertical position in current unit
        x2N (Number): end point horizontal position in current unit
        y2N (Number): end point vertical position in current unit
    
    Returns:
        Number: Success : item ID, else Exception
    """
    global _reportEditorAddLineItemInMasterPage_id
    if _reportEditorAddLineItemInMasterPage_id is None:
        _reportEditorAddLineItemInMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddLineItemInMasterPage'))
    return _client_service().call(_reportEditorAddLineItemInMasterPage_id, *args, **kwargs)


_reportEditorAddPage_id = None
def reportEditorAddPage(*args, **kwargs):
    """
    reportEditorAddPage(reN: Number, snN: Number, pnS: str='Page X') -> Number
    
    Add a page to an existing section
    
    Args:
        reN (Number): report editor ID
        snN (Number): section ID
        pnS (str): Optional; page name
    
    Returns:
        Number: Success : page ID, else Exception
    """
    global _reportEditorAddPage_id
    if _reportEditorAddPage_id is None:
        _reportEditorAddPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddPage'))
    return _client_service().call(_reportEditorAddPage_id, *args, **kwargs)


_reportEditorAddRectItem_id = None
def reportEditorAddRectItem(*args, **kwargs):
    """
    reportEditorAddRectItem(reN: Number, pN: Number, xN: Number, yN: Number, wN: Number, hN: Number) -> Number
    
    Add a rectangle item in a page
    
    Args:
        reN (Number): report editor ID
        pN (Number): page ID
        xN (Number): horizontal position in current unit
        yN (Number): vertical position in current unit
        wN (Number): width in current unit
        hN (Number): height in current unit
    
    Returns:
        Number: Success : item ID, else Exception
    """
    global _reportEditorAddRectItem_id
    if _reportEditorAddRectItem_id is None:
        _reportEditorAddRectItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddRectItem'))
    return _client_service().call(_reportEditorAddRectItem_id, *args, **kwargs)


_reportEditorAddRectItemInMasterPage_id = None
def reportEditorAddRectItemInMasterPage(*args, **kwargs):
    """
    reportEditorAddRectItemInMasterPage(reN: Number, sN: Number, xN: Number, yN: Number, wN: Number, hN: Number) -> Number
    
    Add a rectangle item in a master page
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        xN (Number): horizontal position in current unit
        yN (Number): vertical position in current unit
        wN (Number): width in current unit
        hN (Number): height in current unit
    
    Returns:
        Number: Success : item ID, else Exception
    """
    global _reportEditorAddRectItemInMasterPage_id
    if _reportEditorAddRectItemInMasterPage_id is None:
        _reportEditorAddRectItemInMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddRectItemInMasterPage'))
    return _client_service().call(_reportEditorAddRectItemInMasterPage_id, *args, **kwargs)


_reportEditorAddSection_id = None
def reportEditorAddSection(*args, **kwargs):
    """
    reportEditorAddSection(reN: Number, snS: str) -> Number
    
    Add a section to your report
    
    Args:
        reN (Number): report editor ID
        snS (str): section name
    
    Returns:
        Number: Success : section ID, else Exception
    """
    global _reportEditorAddSection_id
    if _reportEditorAddSection_id is None:
        _reportEditorAddSection_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddSection'))
    return _client_service().call(_reportEditorAddSection_id, *args, **kwargs)


_reportEditorAddSpecialItemToMasterPage_id = None
def reportEditorAddSpecialItemToMasterPage(*args, **kwargs):
    """
    reportEditorAddSpecialItemToMasterPage(reN: Number, sN: Number, inS: str, hpN: Number, vpN: Number) -> Number
    
    Add special item to the master page
    Only page number available at the moment
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        inS (str): item name in report browser
        hpN (Number): horizontal position in current unit
        vpN (Number): vertical position in current unit
    
    Returns:
        Number: Success : item ID, else Exception
    """
    global _reportEditorAddSpecialItemToMasterPage_id
    if _reportEditorAddSpecialItemToMasterPage_id is None:
        _reportEditorAddSpecialItemToMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddSpecialItemToMasterPage'))
    return _client_service().call(_reportEditorAddSpecialItemToMasterPage_id, *args, **kwargs)


_reportEditorAddTable_id = None
def reportEditorAddTable(*args, **kwargs):
    """
    reportEditorAddTable(reN: Number, ptN: Number, rcN: Number, ccN: Number, rhN: Number=1, cwN: Number=1, xN: Number=0, yN: Number=0) -> Number
    
    Add a table to the report
    
    Args:
        reN (Number): report editor ID
        ptN (Number): page ID
        rcN (Number): row count
        ccN (Number): column count
        rhN (Number): Optional; row height in current unit
        cwN (Number): Optional; column width in current unit
        xN (Number): Optional; horizontal position in current unit
        yN (Number): Optional; vertical position in current unit
    
    Returns:
        Number: Success : table ID, else Exception
    """
    global _reportEditorAddTable_id
    if _reportEditorAddTable_id is None:
        _reportEditorAddTable_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAddTable'))
    return _client_service().call(_reportEditorAddTable_id, *args, **kwargs)


_reportEditorAdjustItemToPage_id = None
def reportEditorAdjustItemToPage(*args, **kwargs):
    """
    reportEditorAdjustItemToPage(reN: Number, iN: Number, aB: bool) -> bool
    
    Adjust an item to the page width
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        aB (bool): adjusted to the page width
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorAdjustItemToPage_id
    if _reportEditorAdjustItemToPage_id is None:
        _reportEditorAdjustItemToPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorAdjustItemToPage'))
    return _client_service().call(_reportEditorAdjustItemToPage_id, *args, **kwargs)


_reportEditorApplyTo_id = None
def reportEditorApplyTo(*args, **kwargs):
    """
    reportEditorApplyTo(reN: Number, wS: str, dS: str='') -> bool
    
    Apply a dataset or well to your report
    
    Args:
        reN (Number): report editor ID
        wS (str): well name
        dS (str): Optional; dataset name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorApplyTo_id
    if _reportEditorApplyTo_id is None:
        _reportEditorApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorApplyTo'))
    return _client_service().call(_reportEditorApplyTo_id, *args, **kwargs)


_reportEditorChangeItemPage_id = None
def reportEditorChangeItemPage(*args, **kwargs):
    """
    reportEditorChangeItemPage(reN: Number, iN: Number, pN: Number) -> bool
    
    Move an item to an other page
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        pN (Number): page ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorChangeItemPage_id
    if _reportEditorChangeItemPage_id is None:
        _reportEditorChangeItemPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorChangeItemPage'))
    return _client_service().call(_reportEditorChangeItemPage_id, *args, **kwargs)


_reportEditorClose_id = None
def reportEditorClose(*args, **kwargs):
    """
    reportEditorClose(reN: Number) -> bool
    
    Close the report editor
    
    Args:
        reN (Number): report editor ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorClose_id
    if _reportEditorClose_id is None:
        _reportEditorClose_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorClose'))
    return _client_service().call(_reportEditorClose_id, *args, **kwargs)


_reportEditorCreate_id = None
def reportEditorCreate(*args, **kwargs):
    """
    reportEditorCreate() -> Number
    
    Create a report editor
    
    Returns:
        Number: report editor ID
    """
    global _reportEditorCreate_id
    if _reportEditorCreate_id is None:
        _reportEditorCreate_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorCreate'))
    return _client_service().call(_reportEditorCreate_id, *args, **kwargs)


_reportEditorDeleteItem_id = None
def reportEditorDeleteItem(*args, **kwargs):
    """
    reportEditorDeleteItem(reN: Number, iN: Number) -> bool
    
    Delete an item of the report
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorDeleteItem_id
    if _reportEditorDeleteItem_id is None:
        _reportEditorDeleteItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorDeleteItem'))
    return _client_service().call(_reportEditorDeleteItem_id, *args, **kwargs)


_reportEditorDeleteItemInMasterPage_id = None
def reportEditorDeleteItemInMasterPage(*args, **kwargs):
    """
    reportEditorDeleteItemInMasterPage(reN: Number, iN: Number) -> bool
    
    Delete an item of the report
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorDeleteItemInMasterPage_id
    if _reportEditorDeleteItemInMasterPage_id is None:
        _reportEditorDeleteItemInMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorDeleteItemInMasterPage'))
    return _client_service().call(_reportEditorDeleteItemInMasterPage_id, *args, **kwargs)


_reportEditorDeletePage_id = None
def reportEditorDeletePage(*args, **kwargs):
    """
    reportEditorDeletePage(reN: Number, pN: Number) -> bool
    
    Delete a page of the report
    
    Args:
        reN (Number): report editor ID
        pN (Number): page ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorDeletePage_id
    if _reportEditorDeletePage_id is None:
        _reportEditorDeletePage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorDeletePage'))
    return _client_service().call(_reportEditorDeletePage_id, *args, **kwargs)


_reportEditorDeleteSection_id = None
def reportEditorDeleteSection(*args, **kwargs):
    """
    reportEditorDeleteSection(reN: Number, sN: Number) -> bool
    
    Delete a section in the report
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorDeleteSection_id
    if _reportEditorDeleteSection_id is None:
        _reportEditorDeleteSection_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorDeleteSection'))
    return _client_service().call(_reportEditorDeleteSection_id, *args, **kwargs)


_reportEditorHeaderLinkToLayout_id = None
def reportEditorHeaderLinkToLayout(*args, **kwargs):
    """
    reportEditorHeaderLinkToLayout(reN: Number, hN: Number, lN: Number) -> bool
    
    Apply layout properties to a header
    
    Args:
        reN (Number): report editor ID
        hN (Number): header ID
        lN (Number): layout ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorHeaderLinkToLayout_id
    if _reportEditorHeaderLinkToLayout_id is None:
        _reportEditorHeaderLinkToLayout_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorHeaderLinkToLayout'))
    return _client_service().call(_reportEditorHeaderLinkToLayout_id, *args, **kwargs)


_reportEditorInsertPage_id = None
def reportEditorInsertPage(*args, **kwargs):
    """
    reportEditorInsertPage(reN: Number, sN: Number, iN: Number, pnS: str='Page n') -> Number
    
    Insert a page in an existing section
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        iN (Number): index (0 to n - 1)
        pnS (str): Optional; page name
    
    Returns:
        Number: Success : page ID, else Exception
    """
    global _reportEditorInsertPage_id
    if _reportEditorInsertPage_id is None:
        _reportEditorInsertPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorInsertPage'))
    return _client_service().call(_reportEditorInsertPage_id, *args, **kwargs)


_reportEditorInsertSection_id = None
def reportEditorInsertSection(*args, **kwargs):
    """
    reportEditorInsertSection(reN: Number, iN: Number, snS: str='Section n') -> Number
    
    Insert a section in the report
    
    Args:
        reN (Number): report editor ID
        iN (Number): index (0 to n - 1)
        snS (str): Optional; section name
    
    Returns:
        Number: Success : section ID, else Exception
    """
    global _reportEditorInsertSection_id
    if _reportEditorInsertSection_id is None:
        _reportEditorInsertSection_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorInsertSection'))
    return _client_service().call(_reportEditorInsertSection_id, *args, **kwargs)


_reportEditorItemApplyTo_id = None
def reportEditorItemApplyTo(*args, **kwargs):
    """
    reportEditorItemApplyTo(reN: Number, iN: Number, dS: str='') -> bool
    
    Apply a Dataset or Well to a report item
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID 3. wS [string]: well name
        dS (str): Optional; dataset name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemApplyTo_id
    if _reportEditorItemApplyTo_id is None:
        _reportEditorItemApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemApplyTo'))
    return _client_service().call(_reportEditorItemApplyTo_id, *args, **kwargs)


_reportEditorItemImageKeepProportions_id = None
def reportEditorItemImageKeepProportions(*args, **kwargs):
    """
    reportEditorItemImageKeepProportions(reN: Number, iN: Number, kpB: bool) -> bool
    
    Set the keepProportions property of an image item
    
    Args:
        reN (Number): report editor ID
        iN (Number): image item ID
        kpB (bool): keeps proportions
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemImageKeepProportions_id
    if _reportEditorItemImageKeepProportions_id is None:
        _reportEditorItemImageKeepProportions_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemImageKeepProportions'))
    return _client_service().call(_reportEditorItemImageKeepProportions_id, *args, **kwargs)


_reportEditorItemSetAlignment_id = None
def reportEditorItemSetAlignment(*args, **kwargs):
    """
    reportEditorItemSetAlignment(reN: Number, iN: Number, aNE: int) -> bool
    
    Set item alignment
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        aNE (int): alignment = {0 - Left, 1 - Center, 2 - Right, 3 - Justify}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetAlignment_id
    if _reportEditorItemSetAlignment_id is None:
        _reportEditorItemSetAlignment_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetAlignment'))
    return _client_service().call(_reportEditorItemSetAlignment_id, *args, **kwargs)


_reportEditorItemSetBackgroundColor_id = None
def reportEditorItemSetBackgroundColor(*args, **kwargs):
    """
    reportEditorItemSetBackgroundColor(reN: Number, iN: Number, bcS: str, aB: bool=True) -> bool
    
    Set item's background color
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        bcS (str): background color
        aB (bool): Optional; activate background color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetBackgroundColor_id
    if _reportEditorItemSetBackgroundColor_id is None:
        _reportEditorItemSetBackgroundColor_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetBackgroundColor'))
    return _client_service().call(_reportEditorItemSetBackgroundColor_id, *args, **kwargs)


_reportEditorItemSetFontColor_id = None
def reportEditorItemSetFontColor(*args, **kwargs):
    """
    reportEditorItemSetFontColor(reN: Number, itN: Number, fcS: str) -> bool
    
    Set item's text content font color
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        itN (Number): item ID
        fcS (str): font color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetFontColor_id
    if _reportEditorItemSetFontColor_id is None:
        _reportEditorItemSetFontColor_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetFontColor'))
    return _client_service().call(_reportEditorItemSetFontColor_id, *args, **kwargs)


_reportEditorItemSetFontFamily_id = None
def reportEditorItemSetFontFamily(*args, **kwargs):
    """
    reportEditorItemSetFontFamily(reN: Number, itN: Number, ffS: str) -> bool
    
    Set item's font family
    Check available families in the report editor toolbar
    
    Args:
        reN (Number): report editor ID
        itN (Number): item ID
        ffS (str): font family
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetFontFamily_id
    if _reportEditorItemSetFontFamily_id is None:
        _reportEditorItemSetFontFamily_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetFontFamily'))
    return _client_service().call(_reportEditorItemSetFontFamily_id, *args, **kwargs)


_reportEditorItemSetFontSize_id = None
def reportEditorItemSetFontSize(*args, **kwargs):
    """
    reportEditorItemSetFontSize(reN: Number, itN: Number, fsN: Number) -> bool
    
    Set item's font size
    
    Args:
        reN (Number): report editor ID
        itN (Number): item ID
        fsN (Number): font size
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetFontSize_id
    if _reportEditorItemSetFontSize_id is None:
        _reportEditorItemSetFontSize_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetFontSize'))
    return _client_service().call(_reportEditorItemSetFontSize_id, *args, **kwargs)


_reportEditorItemSetFontStyle_id = None
def reportEditorItemSetFontStyle(*args, **kwargs):
    """
    reportEditorItemSetFontStyle(reN: Number, itN: Number, fsNE: int, aB: bool) -> bool
    
    Set item's font style
    
    Args:
        reN (Number): report editor ID
        itN (Number): item ID
        fsNE (int): font style = {0 - Bold, 1 - Italic, 2 - Underline}
        aB (bool): apply or remove chosen style
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetFontStyle_id
    if _reportEditorItemSetFontStyle_id is None:
        _reportEditorItemSetFontStyle_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetFontStyle'))
    return _client_service().call(_reportEditorItemSetFontStyle_id, *args, **kwargs)


_reportEditorItemSetHeight_id = None
def reportEditorItemSetHeight(*args, **kwargs):
    """
    reportEditorItemSetHeight(reN: Number, iN: Number, hN: Number) -> bool
    
    Set item's height attribute
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        hN (Number): height in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetHeight_id
    if _reportEditorItemSetHeight_id is None:
        _reportEditorItemSetHeight_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetHeight'))
    return _client_service().call(_reportEditorItemSetHeight_id, *args, **kwargs)


_reportEditorItemSetHighlightColor_id = None
def reportEditorItemSetHighlightColor(*args, **kwargs):
    """
    reportEditorItemSetHighlightColor(reN: Number, itN: Number, fcS: str) -> bool
    
    Set item's text content highlight color
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        itN (Number): item ID
        fcS (str): highlight color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetHighlightColor_id
    if _reportEditorItemSetHighlightColor_id is None:
        _reportEditorItemSetHighlightColor_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetHighlightColor'))
    return _client_service().call(_reportEditorItemSetHighlightColor_id, *args, **kwargs)


_reportEditorItemSetLockState_id = None
def reportEditorItemSetLockState(*args, **kwargs):
    """
    reportEditorItemSetLockState(reN: Number, iN: Number, lsNE: int) -> bool
    
    Set item lock state
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        lsNE (int): lock state = {0 - No lock, 1 - Lock Position, 2 - Lock Position & Content}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetLockState_id
    if _reportEditorItemSetLockState_id is None:
        _reportEditorItemSetLockState_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetLockState'))
    return _client_service().call(_reportEditorItemSetLockState_id, *args, **kwargs)


_reportEditorItemSetOrientation_id = None
def reportEditorItemSetOrientation(*args, **kwargs):
    """
    reportEditorItemSetOrientation(reN: Number, iN: Number, oNE: int) -> bool
    
    Set item orientation
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        oNE (int): orientation = {0 - 0deg, 1 - 90deg, 2 - 180deg, 3 - 270deg}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetOrientation_id
    if _reportEditorItemSetOrientation_id is None:
        _reportEditorItemSetOrientation_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetOrientation'))
    return _client_service().call(_reportEditorItemSetOrientation_id, *args, **kwargs)


_reportEditorItemSetWidth_id = None
def reportEditorItemSetWidth(*args, **kwargs):
    """
    reportEditorItemSetWidth(reN: Number, iN: Number, wN: Number) -> bool
    
    Set item's width attribute
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        wN (Number): width in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemSetWidth_id
    if _reportEditorItemSetWidth_id is None:
        _reportEditorItemSetWidth_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemSetWidth'))
    return _client_service().call(_reportEditorItemSetWidth_id, *args, **kwargs)


_reportEditorItemShowInTableOfContents_id = None
def reportEditorItemShowInTableOfContents(*args, **kwargs):
    """
    reportEditorItemShowInTableOfContents(reN: Number, iN: Number, sB: bool, inS: str='default') -> bool
    
    Show item in table of contents
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        sB (bool): visible
        inS (str): Optional; item name in table of contents
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemShowInTableOfContents_id
    if _reportEditorItemShowInTableOfContents_id is None:
        _reportEditorItemShowInTableOfContents_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemShowInTableOfContents'))
    return _client_service().call(_reportEditorItemShowInTableOfContents_id, *args, **kwargs)


_reportEditorItemShowInTableOfFigures_id = None
def reportEditorItemShowInTableOfFigures(*args, **kwargs):
    """
    reportEditorItemShowInTableOfFigures(reN: Number, iN: Number, sB: bool, inS: str='default') -> bool
    
    Show item in table of figures
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        sB (bool): visible
        inS (str): Optional; item name in table of figures
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemShowInTableOfFigures_id
    if _reportEditorItemShowInTableOfFigures_id is None:
        _reportEditorItemShowInTableOfFigures_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemShowInTableOfFigures'))
    return _client_service().call(_reportEditorItemShowInTableOfFigures_id, *args, **kwargs)


_reportEditorItemShowInTableOfTables_id = None
def reportEditorItemShowInTableOfTables(*args, **kwargs):
    """
    reportEditorItemShowInTableOfTables(reN: Number, iN: Number, sB: bool, inS: str='default') -> bool
    
    Show item in table of tables
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        sB (bool): visible
        inS (str): Optional; item name in table of tables
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemShowInTableOfTables_id
    if _reportEditorItemShowInTableOfTables_id is None:
        _reportEditorItemShowInTableOfTables_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemShowInTableOfTables'))
    return _client_service().call(_reportEditorItemShowInTableOfTables_id, *args, **kwargs)


_reportEditorItemTextAutoAdjustHeight_id = None
def reportEditorItemTextAutoAdjustHeight(*args, **kwargs):
    """
    reportEditorItemTextAutoAdjustHeight(reN: Number, iN: Number, aahB: bool) -> bool
    
    Auto adjust item text's height
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        aahB (bool): auto adjust height
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemTextAutoAdjustHeight_id
    if _reportEditorItemTextAutoAdjustHeight_id is None:
        _reportEditorItemTextAutoAdjustHeight_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemTextAutoAdjustHeight'))
    return _client_service().call(_reportEditorItemTextAutoAdjustHeight_id, *args, **kwargs)


_reportEditorItemTextSetText_id = None
def reportEditorItemTextSetText(*args, **kwargs):
    """
    reportEditorItemTextSetText(reN: Number, itN: Number, tcS: str) -> bool
    
    Set item text's content
    Can contain HTML content if compliant with Qt's rich text engine
    Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html
    
    Args:
        reN (Number): report editor ID
        itN (Number): item text ID
        tcS (str): text content
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorItemTextSetText_id
    if _reportEditorItemTextSetText_id is None:
        _reportEditorItemTextSetText_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorItemTextSetText'))
    return _client_service().call(_reportEditorItemTextSetText_id, *args, **kwargs)


_reportEditorLayoutApplyReferenceLimitation_id = None
def reportEditorLayoutApplyReferenceLimitation(*args, **kwargs):
    """
    reportEditorLayoutApplyReferenceLimitation(reN: Number, lN: Number, top: Number, bottom: Number) -> Number
    
    Applies a depth limitation on a logview
    
    Args:
        reN (Number): report editor ID
        lN (Number): layout ID
        top (Number): top reference limitation
        bottom (Number): bottom reference limitation
    
    Returns:
        Number: Success : True, else Exception
    """
    global _reportEditorLayoutApplyReferenceLimitation_id
    if _reportEditorLayoutApplyReferenceLimitation_id is None:
        _reportEditorLayoutApplyReferenceLimitation_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorLayoutApplyReferenceLimitation'))
    return _client_service().call(_reportEditorLayoutApplyReferenceLimitation_id, *args, **kwargs)


_reportEditorLayoutSetScale_id = None
def reportEditorLayoutSetScale(*args, **kwargs):
    """
    reportEditorLayoutSetScale(reN: Number, lN: Number, svN: Number) -> bool
    
    Set the layout's scale
    
    Args:
        reN (Number): report editor ID
        lN (Number): layout ID
        svN (Number): scale value
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorLayoutSetScale_id
    if _reportEditorLayoutSetScale_id is None:
        _reportEditorLayoutSetScale_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorLayoutSetScale'))
    return _client_service().call(_reportEditorLayoutSetScale_id, *args, **kwargs)


_reportEditorLayoutShowTrackHeaderAtBottom_id = None
def reportEditorLayoutShowTrackHeaderAtBottom(*args, **kwargs):
    """
    reportEditorLayoutShowTrackHeaderAtBottom(reN: Number, lN: Number, thvB: bool) -> bool
    
    Show the layout's track header at bottom
    
    Args:
        reN (Number): report editor ID
        lN (Number): layout ID
        thvB (bool): visible
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorLayoutShowTrackHeaderAtBottom_id
    if _reportEditorLayoutShowTrackHeaderAtBottom_id is None:
        _reportEditorLayoutShowTrackHeaderAtBottom_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorLayoutShowTrackHeaderAtBottom'))
    return _client_service().call(_reportEditorLayoutShowTrackHeaderAtBottom_id, *args, **kwargs)


_reportEditorListItems_id = None
def reportEditorListItems(*args, **kwargs):
    """
    reportEditorListItems(reportEditorId: int, itemType: int) -> int
    
    Return the list of item ids in the given report id(be careful some types are equals, example histogram and Generic histogram)
    
    Args:
        reportEditorId (int): report editor ID
        itemType (int): item type = { 0 - Image, 1 - Layout, 2 - Layout Template, 3 - Crossplot, 4 - Crossplot MW,
                                            6 - Crossplot AA, 7 - Crossplot Template, 8 - Histogram, 9 - Histogram MW, 10 - Histogram Template,
                                            11 - Stereonet, 12 - Lineplot, 13 - Header, 14 - Text, 15 - Generic Header,
                                            16 - Generic Layout, 17 - Generic Crossplot, 18 - Generic Histogram, 19 - Generic Stereonet, 20 - Generic Lineplot,
                                            21 - Generic Image, 22 - Generic Text, 23 - Ternary, 24 - Walkout, 25 - Cumulative Dip,
                                            26 - Single Depth, 27 - Generic Ternary, 28 - Generic Walkout, 29 - Generic Cumulative Dip, 30 - Generic Single Depth,
                                            31 - Table of Contents, 32 - Table of Figures, 33 - Tables of Tables, 34 - Crossplot AVA, 35 - Waveform,
                                            36 - Generic Waveform, 37 - Wellbore Centrid Grid, 38 - Generic Wellbore Centrid Grid, 39 - Borehole Section, 40 - Generic Borehole Section,
                                            41 - Cross section profile plot, 42 - Cross section profile plot template, 43 - Generic cross section profile plot,
                                            44 - Axial section profile plot, 45 - Axial section profile plot template, 46 - Generic axial section profile plot}
    
    Returns:
        int: Success : list of item ids, else Exception
    """
    global _reportEditorListItems_id
    if _reportEditorListItems_id is None:
        _reportEditorListItems_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorListItems'))
    return _client_service().call(_reportEditorListItems_id, *args, **kwargs)


_reportEditorListPages_id = None
def reportEditorListPages(*args, **kwargs):
    """
    reportEditorListPages(reportEditorId: int, sectionId: int) -> int
    
    Return the list of page ids in the given report id for a specific section
    
    Args:
        reportEditorId (int): report editor ID
        sectionId (int): section ID
    
    Returns:
        int: Success : list of page ids, else Exception
    """
    global _reportEditorListPages_id
    if _reportEditorListPages_id is None:
        _reportEditorListPages_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorListPages'))
    return _client_service().call(_reportEditorListPages_id, *args, **kwargs)


_reportEditorListSections_id = None
def reportEditorListSections(*args, **kwargs):
    """
    reportEditorListSections(reportEditorId: int) -> int
    
    Return the list of section ids in the given report id
    
    Args:
        reportEditorId (int): report editor ID
    
    Returns:
        int: Success : list of section ids, else Exception
    """
    global _reportEditorListSections_id
    if _reportEditorListSections_id is None:
        _reportEditorListSections_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorListSections'))
    return _client_service().call(_reportEditorListSections_id, *args, **kwargs)


_reportEditorMoveItem_id = None
def reportEditorMoveItem(*args, **kwargs):
    """
    reportEditorMoveItem(reN: Number, iN: Number, xN: Number, yN: Number) -> bool
    
    Move an item of the report
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        xN (Number): horizontal position in current unit
        yN (Number): vertical position in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorMoveItem_id
    if _reportEditorMoveItem_id is None:
        _reportEditorMoveItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorMoveItem'))
    return _client_service().call(_reportEditorMoveItem_id, *args, **kwargs)


_reportEditorMoveItemInMasterPage_id = None
def reportEditorMoveItemInMasterPage(*args, **kwargs):
    """
    reportEditorMoveItemInMasterPage(reN: Number, iN: Number, xN: Number, yN: Number) -> bool
    
    Move an item of the report
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        xN (Number): horizontal position in current unit
        yN (Number): vertical position in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorMoveItemInMasterPage_id
    if _reportEditorMoveItemInMasterPage_id is None:
        _reportEditorMoveItemInMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorMoveItemInMasterPage'))
    return _client_service().call(_reportEditorMoveItemInMasterPage_id, *args, **kwargs)


_reportEditorNew_id = None
def reportEditorNew(*args, **kwargs):
    """
    reportEditorNew(reN: Number) -> bool
    
    Create a new report document
    
    Args:
        reN (Number): report editor ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorNew_id
    if _reportEditorNew_id is None:
        _reportEditorNew_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorNew'))
    return _client_service().call(_reportEditorNew_id, *args, **kwargs)


_reportEditorOpen_id = None
def reportEditorOpen(*args, **kwargs):
    """
    reportEditorOpen(file: str, interactive: bool=True) -> Number
    
    Open a report editor
    If it is a template, popup dialog asks user to choose well and dataset to apply
    unless interactive parameter is set to False
    
    Args:
        file (str): file name to open
        interactive (bool): Optional; True to have interactive dialog else False
    
    Returns:
        Number: report editor ID
    """
    global _reportEditorOpen_id
    if _reportEditorOpen_id is None:
        _reportEditorOpen_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorOpen'))
    return _client_service().call(_reportEditorOpen_id, *args, **kwargs)


_reportEditorPageDuplicateWithID_id = None
def reportEditorPageDuplicateWithID(*args, **kwargs):
    """
    reportEditorPageDuplicateWithID(reN: Number, epN: Number, sN: Number, npS: str='Page n') -> Number
    
    Duplicate a page of the report with IDs
    
    Args:
        reN (Number): report editor ID
        epN (Number): source page ID
        sN (Number): destination section ID (section to insert duplicated page)
        npS (str): Optional; duplicated page name
    
    Returns:
        Number: Success : page ID, else Exception
    """
    global _reportEditorPageDuplicateWithID_id
    if _reportEditorPageDuplicateWithID_id is None:
        _reportEditorPageDuplicateWithID_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorPageDuplicateWithID'))
    return _client_service().call(_reportEditorPageDuplicateWithID_id, *args, **kwargs)


_reportEditorPageDuplicateWithName_id = None
def reportEditorPageDuplicateWithName(*args, **kwargs):
    """
    reportEditorPageDuplicateWithName(reN: Number, esN: str, epN: str, sN: str, npS: str='Page n') -> Number
    
    Duplicate a page of the report with names
    
    Args:
        reN (Number): report editor ID
        esN (str): source section name
        epN (str): source page name
        sN (str): destination section name (section to insert duplicated page)
        npS (str): Optional; duplicated page name
    
    Returns:
        Number: Success : page ID, else Exception
    """
    global _reportEditorPageDuplicateWithName_id
    if _reportEditorPageDuplicateWithName_id is None:
        _reportEditorPageDuplicateWithName_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorPageDuplicateWithName'))
    return _client_service().call(_reportEditorPageDuplicateWithName_id, *args, **kwargs)


_reportEditorPrint_id = None
def reportEditorPrint(*args, **kwargs):
    """
    reportEditorPrint(reN: Number) -> bool
    
    Print a report document
    
    Args:
        reN (Number): report editor ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorPrint_id
    if _reportEditorPrint_id is None:
        _reportEditorPrint_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorPrint'))
    return _client_service().call(_reportEditorPrint_id, *args, **kwargs)


_reportEditorPrintIntoPDF_id = None
def reportEditorPrintIntoPDF(*args, **kwargs):
    """
    reportEditorPrintIntoPDF(reN: Number, fnS: str) -> bool
    
    Print a report document into a PDF
    
    Args:
        reN (Number): report editor ID
        fnS (str): report name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorPrintIntoPDF_id
    if _reportEditorPrintIntoPDF_id is None:
        _reportEditorPrintIntoPDF_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorPrintIntoPDF'))
    return _client_service().call(_reportEditorPrintIntoPDF_id, *args, **kwargs)


_reportEditorPrintIntoTiff_id = None
def reportEditorPrintIntoTiff(*args, **kwargs):
    """
    reportEditorPrintIntoTiff(reN: Number, fnS: str) -> bool
    
    Print a report document into a Tiff file
    
    Args:
        reN (Number): report editor ID
        fnS (str): report name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorPrintIntoTiff_id
    if _reportEditorPrintIntoTiff_id is None:
        _reportEditorPrintIntoTiff_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorPrintIntoTiff'))
    return _client_service().call(_reportEditorPrintIntoTiff_id, *args, **kwargs)


_reportEditorRenameItem_id = None
def reportEditorRenameItem(*args, **kwargs):
    """
    reportEditorRenameItem(reN: Number, iN: Number, inS: str) -> bool
    
    Rename an item in the report
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        inS (str): item name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorRenameItem_id
    if _reportEditorRenameItem_id is None:
        _reportEditorRenameItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorRenameItem'))
    return _client_service().call(_reportEditorRenameItem_id, *args, **kwargs)


_reportEditorRenamePage_id = None
def reportEditorRenamePage(*args, **kwargs):
    """
    reportEditorRenamePage(reN: Number, pN: Number, pnS: str) -> bool
    
    Rename a page in the report
    
    Args:
        reN (Number): report editor ID
        pN (Number): page ID
        pnS (str): page name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorRenamePage_id
    if _reportEditorRenamePage_id is None:
        _reportEditorRenamePage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorRenamePage'))
    return _client_service().call(_reportEditorRenamePage_id, *args, **kwargs)


_reportEditorRenameSection_id = None
def reportEditorRenameSection(*args, **kwargs):
    """
    reportEditorRenameSection(reN: Number, sN: Number, snS: str) -> bool
    
    Rename a section in the report
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        snS (str): section name
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorRenameSection_id
    if _reportEditorRenameSection_id is None:
        _reportEditorRenameSection_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorRenameSection'))
    return _client_service().call(_reportEditorRenameSection_id, *args, **kwargs)


_reportEditorSave_id = None
def reportEditorSave(*args, **kwargs):
    """
    reportEditorSave(reN: Number, rnS: str, fnSE: str) -> bool
    
    Save a report
    
    Args:
        reN (Number): report editor ID
        rnS (str): report name
        fnSE (str): folder name = {'Project', 'User', 'Company', 'Techlog'}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSave_id
    if _reportEditorSave_id is None:
        _reportEditorSave_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSave'))
    return _client_service().call(_reportEditorSave_id, *args, **kwargs)


_reportEditorSaveAsTemplate_id = None
def reportEditorSaveAsTemplate(*args, **kwargs):
    """
    reportEditorSaveAsTemplate(reN: Number, rnS: str, fnSE: str) -> bool
    
    Save a report as a template
    
    Args:
        reN (Number): report editor ID
        rnS (str): report name
        fnSE (str): folder name = {'Project', 'User', 'Company', 'Techlog'}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSaveAsTemplate_id
    if _reportEditorSaveAsTemplate_id is None:
        _reportEditorSaveAsTemplate_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSaveAsTemplate'))
    return _client_service().call(_reportEditorSaveAsTemplate_id, *args, **kwargs)


_reportEditorSectionSetMasterPage_id = None
def reportEditorSectionSetMasterPage(*args, **kwargs):
    """
    reportEditorSectionSetMasterPage(reN: Number, s1N: Number, s2N: Number) -> bool
    
    Set the master page of a section with an existing one
    
    Args:
        reN (Number): report editor ID
        s1N (Number): section ID (masterpage to copy)
        s2N (Number): section ID (masterpage to set)
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSectionSetMasterPage_id
    if _reportEditorSectionSetMasterPage_id is None:
        _reportEditorSectionSetMasterPage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSectionSetMasterPage'))
    return _client_service().call(_reportEditorSectionSetMasterPage_id, *args, **kwargs)


_reportEditorSetHorizontalMargin_id = None
def reportEditorSetHorizontalMargin(*args, **kwargs):
    """
    reportEditorSetHorizontalMargin(reN: Number, sN: Number, mhN: Number) -> bool
    
    Set top and bottom margin of a section
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        mhN (Number): margin height in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetHorizontalMargin_id
    if _reportEditorSetHorizontalMargin_id is None:
        _reportEditorSetHorizontalMargin_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetHorizontalMargin'))
    return _client_service().call(_reportEditorSetHorizontalMargin_id, *args, **kwargs)


_reportEditorSetItemGeneric_id = None
def reportEditorSetItemGeneric(*args, **kwargs):
    """
    reportEditorSetItemGeneric(reN: Number, itN: Number) -> bool
    
    Transform an item to a generic one
    
    Args:
        reN (Number): report editor ID
        itN (Number): item ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetItemGeneric_id
    if _reportEditorSetItemGeneric_id is None:
        _reportEditorSetItemGeneric_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetItemGeneric'))
    return _client_service().call(_reportEditorSetItemGeneric_id, *args, **kwargs)


_reportEditorSetPaperFormat_id = None
def reportEditorSetPaperFormat(*args, **kwargs):
    """
    reportEditorSetPaperFormat(reN: Number, fNE: int) -> bool
    
    Set the paper format of the report
    
    Args:
        reN (Number): report editor ID
        fNE (int): paper format = { 0 - A4, 1 - B5, 2 - Letter, 3 - Legal, 4 - Executive, 5 - A0,
                                                    6 - A1, 7 - A2, 8 - A3, 9 - A5, 10 - A6,
                                                    11 - A7, 12 - A8, 13 - A9, 14 - B0, 15 - B1,
                                                    16 - B10, 17 - B2, 18 - B3, 19 - B4, 20 - B6,
                                                    21 - B7, 22 - B8, 23 - B9, 24 - C5E, 25 - Comm10E,
                                                    26 - DLE, 27 - Folio, 28 - Ledger, 29 - Tabloid, 30 - Custom
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetPaperFormat_id
    if _reportEditorSetPaperFormat_id is None:
        _reportEditorSetPaperFormat_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetPaperFormat'))
    return _client_service().call(_reportEditorSetPaperFormat_id, *args, **kwargs)


_reportEditorSetRelativeItem_id = None
def reportEditorSetRelativeItem(*args, **kwargs):
    """
    reportEditorSetRelativeItem(reN: Number, iN: Number, piN: Number) -> bool
    
    Set an item relative to another one
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        piN (Number): parent item ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetRelativeItem_id
    if _reportEditorSetRelativeItem_id is None:
        _reportEditorSetRelativeItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetRelativeItem'))
    return _client_service().call(_reportEditorSetRelativeItem_id, *args, **kwargs)


_reportEditorSetVerticalMargin_id = None
def reportEditorSetVerticalMargin(*args, **kwargs):
    """
    reportEditorSetVerticalMargin(reN: Number, sN: Number, mwN: Number) -> bool
    
    Set left and right margin of a section
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        mwN (Number): margin width in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetVerticalMargin_id
    if _reportEditorSetVerticalMargin_id is None:
        _reportEditorSetVerticalMargin_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetVerticalMargin'))
    return _client_service().call(_reportEditorSetVerticalMargin_id, *args, **kwargs)


_reportEditorSetVisibleItem_id = None
def reportEditorSetVisibleItem(*args, **kwargs):
    """
    reportEditorSetVisibleItem(reN: Number, iN: Number, vB: bool) -> bool
    
    Set visibility of an item in the given editor
    
    Args:
        reN (Number): report editor ID
        iN (Number): item ID
        vB (bool): visible
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetVisibleItem_id
    if _reportEditorSetVisibleItem_id is None:
        _reportEditorSetVisibleItem_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetVisibleItem'))
    return _client_service().call(_reportEditorSetVisibleItem_id, *args, **kwargs)


_reportEditorSetVisiblePage_id = None
def reportEditorSetVisiblePage(*args, **kwargs):
    """
    reportEditorSetVisiblePage(reN: Number, pN: Number, vB: bool) -> bool
    
    Set visibility of a page
    
    Args:
        reN (Number): report editor ID
        pN (Number): page ID
        vB (bool): visible
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetVisiblePage_id
    if _reportEditorSetVisiblePage_id is None:
        _reportEditorSetVisiblePage_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetVisiblePage'))
    return _client_service().call(_reportEditorSetVisiblePage_id, *args, **kwargs)


_reportEditorSetVisibleSection_id = None
def reportEditorSetVisibleSection(*args, **kwargs):
    """
    reportEditorSetVisibleSection(reN: Number, sN: Number, vB: bool) -> bool
    
    Set visibility of a section
    
    Args:
        reN (Number): report editor ID
        sN (Number): section ID
        vB (bool): visible
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorSetVisibleSection_id
    if _reportEditorSetVisibleSection_id is None:
        _reportEditorSetVisibleSection_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorSetVisibleSection'))
    return _client_service().call(_reportEditorSetVisibleSection_id, *args, **kwargs)


_reportEditorShowMargin_id = None
def reportEditorShowMargin(*args, **kwargs):
    """
    reportEditorShowMargin(reN: Number, mvB: bool) -> bool
    
    Set margin visibility of the report
    
    Args:
        reN (Number): report editor ID
        mvB (bool): visible
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorShowMargin_id
    if _reportEditorShowMargin_id is None:
        _reportEditorShowMargin_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorShowMargin'))
    return _client_service().call(_reportEditorShowMargin_id, *args, **kwargs)


_reportEditorTableAddColumn_id = None
def reportEditorTableAddColumn(*args, **kwargs):
    """
    reportEditorTableAddColumn(reN: Number, tN: Number) -> bool
    
    Add a column to the table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableAddColumn_id
    if _reportEditorTableAddColumn_id is None:
        _reportEditorTableAddColumn_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableAddColumn'))
    return _client_service().call(_reportEditorTableAddColumn_id, *args, **kwargs)


_reportEditorTableAddRow_id = None
def reportEditorTableAddRow(*args, **kwargs):
    """
    reportEditorTableAddRow(reN: Number, tN: Number) -> bool
    
    Add a row to a table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableAddRow_id
    if _reportEditorTableAddRow_id is None:
        _reportEditorTableAddRow_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableAddRow'))
    return _client_service().call(_reportEditorTableAddRow_id, *args, **kwargs)


_reportEditorTableCellMerge_id = None
def reportEditorTableCellMerge(*args, **kwargs):
    """
    reportEditorTableCellMerge(reN: Number, tN: Number, firN: Number, ficN: Number, lirN: Number, licN: Number) -> bool
    
    Merge multiple cells with indexes
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        firN (Number): first row index
        ficN (Number): first column index
        lirN (Number): last row index
        licN (Number): last column index
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellMerge_id
    if _reportEditorTableCellMerge_id is None:
        _reportEditorTableCellMerge_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellMerge'))
    return _client_service().call(_reportEditorTableCellMerge_id, *args, **kwargs)


_reportEditorTableCellSetAlignment_id = None
def reportEditorTableCellSetAlignment(*args, **kwargs):
    """
    reportEditorTableCellSetAlignment(reN: Number, iN: Number, riN: Number, ciN: Number, aNE: int) -> bool
    
    Set table cell's alignment
    
    Args:
        reN (Number): report editor ID
        iN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        aNE (int): alignment = {0 - Left, 1 - Center, 2 - Right, 3 - Justify}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetAlignment_id
    if _reportEditorTableCellSetAlignment_id is None:
        _reportEditorTableCellSetAlignment_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetAlignment'))
    return _client_service().call(_reportEditorTableCellSetAlignment_id, *args, **kwargs)


_reportEditorTableCellSetBackgroundColor_id = None
def reportEditorTableCellSetBackgroundColor(*args, **kwargs):
    """
    reportEditorTableCellSetBackgroundColor(reN: Number, tN: Number, riN: Number, ciN: Number, bcS: str) -> bool
    
    Set table cell's background color
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        bcS (str): background color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetBackgroundColor_id
    if _reportEditorTableCellSetBackgroundColor_id is None:
        _reportEditorTableCellSetBackgroundColor_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetBackgroundColor'))
    return _client_service().call(_reportEditorTableCellSetBackgroundColor_id, *args, **kwargs)


_reportEditorTableCellSetFontColor_id = None
def reportEditorTableCellSetFontColor(*args, **kwargs):
    """
    reportEditorTableCellSetFontColor(reN: Number, tN: Number, riN: Number, ciN: Number, fcS: str) -> bool
    
    Set table cell's font color
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        fcS (str): font color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetFontColor_id
    if _reportEditorTableCellSetFontColor_id is None:
        _reportEditorTableCellSetFontColor_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetFontColor'))
    return _client_service().call(_reportEditorTableCellSetFontColor_id, *args, **kwargs)


_reportEditorTableCellSetFontFamily_id = None
def reportEditorTableCellSetFontFamily(*args, **kwargs):
    """
    reportEditorTableCellSetFontFamily(reN: Number, tN: Number, riN: Number, ciN: Number, fcS: str) -> bool
    
    Set table cell's font family
    Check available families in the report editor toolbar
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        fcS (str): font family
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetFontFamily_id
    if _reportEditorTableCellSetFontFamily_id is None:
        _reportEditorTableCellSetFontFamily_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetFontFamily'))
    return _client_service().call(_reportEditorTableCellSetFontFamily_id, *args, **kwargs)


_reportEditorTableCellSetFontSize_id = None
def reportEditorTableCellSetFontSize(*args, **kwargs):
    """
    reportEditorTableCellSetFontSize(reN: Number, tN: Number, riN: Number, ciN: Number, fsN: Number) -> bool
    
    Set table cell's font size
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        fsN (Number): font size
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetFontSize_id
    if _reportEditorTableCellSetFontSize_id is None:
        _reportEditorTableCellSetFontSize_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetFontSize'))
    return _client_service().call(_reportEditorTableCellSetFontSize_id, *args, **kwargs)


_reportEditorTableCellSetFontStyle_id = None
def reportEditorTableCellSetFontStyle(*args, **kwargs):
    """
    reportEditorTableCellSetFontStyle(reN: Number, tN: Number, riN: Number, ciN: Number, fsNE: int, aB: bool) -> bool
    
    Set table cell's font style
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        fsNE (int): font style = {0 - Bold, 1 - Italic, 2 - Underline}
        aB (bool): apply or remove chosen style
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetFontStyle_id
    if _reportEditorTableCellSetFontStyle_id is None:
        _reportEditorTableCellSetFontStyle_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetFontStyle'))
    return _client_service().call(_reportEditorTableCellSetFontStyle_id, *args, **kwargs)


_reportEditorTableCellSetHighlightColor_id = None
def reportEditorTableCellSetHighlightColor(*args, **kwargs):
    """
    reportEditorTableCellSetHighlightColor(reN: Number, tN: Number, riN: Number, ciN: Number, hcS: str) -> bool
    
    Set table cell's highlight color
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        hcS (str): highlight color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetHighlightColor_id
    if _reportEditorTableCellSetHighlightColor_id is None:
        _reportEditorTableCellSetHighlightColor_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetHighlightColor'))
    return _client_service().call(_reportEditorTableCellSetHighlightColor_id, *args, **kwargs)


_reportEditorTableCellSetOrientation_id = None
def reportEditorTableCellSetOrientation(*args, **kwargs):
    """
    reportEditorTableCellSetOrientation(reN: Number, tN: Number, riN: Number, ciN: Number, oNE: int) -> bool
    
    Set table cell's text orientation
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        oNE (int): orientation = {0 - 0deg, 1 - 90deg, 2 - 180deg, 3 - 270deg}
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetOrientation_id
    if _reportEditorTableCellSetOrientation_id is None:
        _reportEditorTableCellSetOrientation_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetOrientation'))
    return _client_service().call(_reportEditorTableCellSetOrientation_id, *args, **kwargs)


_reportEditorTableCellSetText_id = None
def reportEditorTableCellSetText(*args, **kwargs):
    """
    reportEditorTableCellSetText(reN: Number, tN: Number, riN: Number, ciN: Number, tcS: str) -> bool
    
    Set table cell's content
    Can contain HTML content if compliant with Qt's rich text engine
    Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index
        ciN (Number): column index
        tcS (str): text content
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableCellSetText_id
    if _reportEditorTableCellSetText_id is None:
        _reportEditorTableCellSetText_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableCellSetText'))
    return _client_service().call(_reportEditorTableCellSetText_id, *args, **kwargs)


_reportEditorTableDeleteColumn_id = None
def reportEditorTableDeleteColumn(*args, **kwargs):
    """
    reportEditorTableDeleteColumn(reN: Number, tN: Number, ciN: Number) -> bool
    
    Delete a column in a table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        ciN (Number): column index (0 to n - 1)
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableDeleteColumn_id
    if _reportEditorTableDeleteColumn_id is None:
        _reportEditorTableDeleteColumn_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableDeleteColumn'))
    return _client_service().call(_reportEditorTableDeleteColumn_id, *args, **kwargs)


_reportEditorTableDeleteRow_id = None
def reportEditorTableDeleteRow(*args, **kwargs):
    """
    reportEditorTableDeleteRow(reN: Number, tN: Number, riN: Number) -> bool
    
    Delete a row in a table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index (0 to n - 1)
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableDeleteRow_id
    if _reportEditorTableDeleteRow_id is None:
        _reportEditorTableDeleteRow_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableDeleteRow'))
    return _client_service().call(_reportEditorTableDeleteRow_id, *args, **kwargs)


_reportEditorTableInsertColumn_id = None
def reportEditorTableInsertColumn(*args, **kwargs):
    """
    reportEditorTableInsertColumn(reN: Number, tN: Number, ciN: Number) -> bool
    
    Insert a column in a table
    
    Args:
        reN (Number): report editor window ID
        tN (Number): report object ID of the table
        ciN (Number): column index (0 to n - 1)
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableInsertColumn_id
    if _reportEditorTableInsertColumn_id is None:
        _reportEditorTableInsertColumn_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableInsertColumn'))
    return _client_service().call(_reportEditorTableInsertColumn_id, *args, **kwargs)


_reportEditorTableInsertRow_id = None
def reportEditorTableInsertRow(*args, **kwargs):
    """
    reportEditorTableInsertRow(reN: Number, tN: Number, riN: Number) -> bool
    
    Insert a row in a table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index (0 to n - 1)
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableInsertRow_id
    if _reportEditorTableInsertRow_id is None:
        _reportEditorTableInsertRow_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableInsertRow'))
    return _client_service().call(_reportEditorTableInsertRow_id, *args, **kwargs)


_reportEditorTableResizeColumn_id = None
def reportEditorTableResizeColumn(*args, **kwargs):
    """
    reportEditorTableResizeColumn(reN: Number, tN: Number, ciN: Number, chN: Number) -> bool
    
    Resize a column of a table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        ciN (Number): column index index (0 to n - 1)
        chN (Number): column width in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableResizeColumn_id
    if _reportEditorTableResizeColumn_id is None:
        _reportEditorTableResizeColumn_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableResizeColumn'))
    return _client_service().call(_reportEditorTableResizeColumn_id, *args, **kwargs)


_reportEditorTableResizeRow_id = None
def reportEditorTableResizeRow(*args, **kwargs):
    """
    reportEditorTableResizeRow(reN: Number, tN: Number, riN: Number, rhN: Number) -> bool
    
    Resize a row of a table
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        riN (Number): row index index (0 to n - 1)
        rhN (Number): row height in current unit
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableResizeRow_id
    if _reportEditorTableResizeRow_id is None:
        _reportEditorTableResizeRow_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableResizeRow'))
    return _client_service().call(_reportEditorTableResizeRow_id, *args, **kwargs)


_reportEditorTableSetBorder_id = None
def reportEditorTableSetBorder(*args, **kwargs):
    """
    reportEditorTableSetBorder(reN: Number, tN: Number, bsN: Number, bcS: str) -> bool
    
    Set the border of a table
    Support Qt's color system
    Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit)
    Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)
    
    Args:
        reN (Number): report editor ID
        tN (Number): table ID
        bsN (Number): border size
        bcS (str): border color
    
    Returns:
        bool: Success : True, else Exception
    """
    global _reportEditorTableSetBorder_id
    if _reportEditorTableSetBorder_id is None:
        _reportEditorTableSetBorder_id = _client_service().register_static_object(('TechlogPlot', 'reportEditorTableSetBorder'))
    return _client_service().call(_reportEditorTableSetBorder_id, *args, **kwargs)


_resizeWidget_id = None
def resizeWidget(*args, **kwargs):
    """
    resizeWidget(plotID: Number, width: Number=1024, height: Number=768) -> bool
    
    Resize a widget
    
    Args:
        plotID (Number): window ID
        width (Number): Optional; window new Width
        height (Number): Optional; window new Height
    
    Returns:
        bool: operation exit status
    """
    global _resizeWidget_id
    if _resizeWidget_id is None:
        _resizeWidget_id = _client_service().register_static_object(('TechlogPlot', 'resizeWidget'))
    return _client_service().call(_resizeWidget_id, *args, **kwargs)


_saveAsImage_id = None
def saveAsImage(*args, **kwargs):
    """
    saveAsImage(plotID: Number, n: str, f: str, ff: str='', mustCut: bool=False) -> bool
    
    Save a cross-plot, an histogram or a logview as image
    
    Args:
        plotID (Number): plot window ID
        n (str): name
        f (str): format
        ff (str): Optional; folder
        mustCut (bool): Optional; mustCut
    
    Returns:
        bool: operation exit status
    """
    global _saveAsImage_id
    if _saveAsImage_id is None:
        _saveAsImage_id = _client_service().register_static_object(('TechlogPlot', 'saveAsImage'))
    return _client_service().call(_saveAsImage_id, *args, **kwargs)


_setBenchmarkContext_id = None
def setBenchmarkContext(*args, **kwargs):
    """
    setBenchmarkContext(context: str)
    
    set benchmark context value
    
    Args:
        context (str): name
    
    Returns:
    """
    global _setBenchmarkContext_id
    if _setBenchmarkContext_id is None:
        _setBenchmarkContext_id = _client_service().register_static_object(('TechlogPlot', 'setBenchmarkContext'))
    return _client_service().call(_setBenchmarkContext_id, *args, **kwargs)


_setBenchmarkIteration_id = None
def setBenchmarkIteration(*args, **kwargs):
    """
    setBenchmarkIteration(iteration: Number)
    
    set benchmark context value
    
    Args:
        iteration (Number): number
    
    Returns:
    """
    global _setBenchmarkIteration_id
    if _setBenchmarkIteration_id is None:
        _setBenchmarkIteration_id = _client_service().register_static_object(('TechlogPlot', 'setBenchmarkIteration'))
    return _client_service().call(_setBenchmarkIteration_id, *args, **kwargs)


_setLegendVisible_id = None
def setLegendVisible(*args, **kwargs):
    """
    setLegendVisible(ID: Number, isLegendVisible: bool)
    
    Display or hide the legend of the plot.
    
    Args:
        ID (Number): plot widget ID
        isLegendVisible (bool): True to display the legend of the plot, else False.
    """
    global _setLegendVisible_id
    if _setLegendVisible_id is None:
        _setLegendVisible_id = _client_service().register_static_object(('TechlogPlot', 'setLegendVisible'))
    return _client_service().call(_setLegendVisible_id, *args, **kwargs)


_setPaletteToWidget_id = None
def setPaletteToWidget(*args, **kwargs):
    """
    setPaletteToWidget(plotID: Number, palName: str) -> bool
    
    Change a palette of an existing widget
    
    Args:
        plotID (Number): plot window ID
        palName (str): palette name
    
    Returns:
        bool: operation exit status
    """
    global _setPaletteToWidget_id
    if _setPaletteToWidget_id is None:
        _setPaletteToWidget_id = _client_service().register_static_object(('TechlogPlot', 'setPaletteToWidget'))
    return _client_service().call(_setPaletteToWidget_id, *args, **kwargs)


_spectrumAddZone_id = None
def spectrumAddZone(*args, **kwargs):
    """
    spectrumAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumAddZone_id
    if _spectrumAddZone_id is None:
        _spectrumAddZone_id = _client_service().register_static_object(('TechlogPlot', 'spectrumAddZone'))
    return _client_service().call(_spectrumAddZone_id, *args, **kwargs)


_spectrumApplyTo_id = None
def spectrumApplyTo(*args, **kwargs):
    """
    spectrumApplyTo(plotID: Number, ds: list) -> list
    
    Apply the spectrum to a data set list
    
    Args:
        plotID (Number): spectrum window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _spectrumApplyTo_id
    if _spectrumApplyTo_id is None:
        _spectrumApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'spectrumApplyTo'))
    return _client_service().call(_spectrumApplyTo_id, *args, **kwargs)


_spectrumCleanZonation_id = None
def spectrumCleanZonation(*args, **kwargs):
    """
    spectrumCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the spectrum - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): spectrum window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumCleanZonation_id
    if _spectrumCleanZonation_id is None:
        _spectrumCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'spectrumCleanZonation'))
    return _client_service().call(_spectrumCleanZonation_id, *args, **kwargs)


_spectrumCleanZone_id = None
def spectrumCleanZone(*args, **kwargs):
    """
    spectrumCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumCleanZone_id
    if _spectrumCleanZone_id is None:
        _spectrumCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'spectrumCleanZone'))
    return _client_service().call(_spectrumCleanZone_id, *args, **kwargs)


_spectrumCreate_id = None
def spectrumCreate(*args, **kwargs):
    """
    spectrumCreate(n: str, vl: list=None, f: str='') -> Number
    
    Create a new spectrum
    
    Args:
        n (str): spectrum window name
        vl (list): Optional; variable list
        f (str): Optional; filter variable ID
    
    Returns:
        Number: spectrum window ID
    """
    global _spectrumCreate_id
    if _spectrumCreate_id is None:
        _spectrumCreate_id = _client_service().register_static_object(('TechlogPlot', 'spectrumCreate'))
    return _client_service().call(_spectrumCreate_id, *args, **kwargs)


_spectrumDeleteColor_id = None
def spectrumDeleteColor(*args, **kwargs):
    """
    spectrumDeleteColor(plotID: Number) -> bool
    
    Delete the color variable of a spectrum
    
    Args:
        plotID (Number): spectrum window ID
    
    Returns:
        bool: operation exit status
    """
    global _spectrumDeleteColor_id
    if _spectrumDeleteColor_id is None:
        _spectrumDeleteColor_id = _client_service().register_static_object(('TechlogPlot', 'spectrumDeleteColor'))
    return _client_service().call(_spectrumDeleteColor_id, *args, **kwargs)


_spectrumDeleteVariables_id = None
def spectrumDeleteVariables(*args, **kwargs):
    """
    spectrumDeleteVariables(plotID: Number) -> bool
    
    Delete the variable of the spectrum
    
    Args:
        plotID (Number): spectrum window ID
    
    Returns:
        bool: operation exit status
    """
    global _spectrumDeleteVariables_id
    if _spectrumDeleteVariables_id is None:
        _spectrumDeleteVariables_id = _client_service().register_static_object(('TechlogPlot', 'spectrumDeleteVariables'))
    return _client_service().call(_spectrumDeleteVariables_id, *args, **kwargs)


_spectrumDuplicate_id = None
def spectrumDuplicate(*args, **kwargs):
    """
    spectrumDuplicate(plotID: Number) -> Number
    
    Duplicate the spectrum
    
    Args:
        plotID (Number): spectrum window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _spectrumDuplicate_id
    if _spectrumDuplicate_id is None:
        _spectrumDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'spectrumDuplicate'))
    return _client_service().call(_spectrumDuplicate_id, *args, **kwargs)


_spectrumGetIdByName_id = None
def spectrumGetIdByName(*args, **kwargs):
    """
    spectrumGetIdByName(n: str) -> Number
    
    Find the ID of a name-known spectrum
    
    Args:
        n (str): spectrum name
    
    Returns:
        Number: spectrum window ID
    """
    global _spectrumGetIdByName_id
    if _spectrumGetIdByName_id is None:
        _spectrumGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'spectrumGetIdByName'))
    return _client_service().call(_spectrumGetIdByName_id, *args, **kwargs)


_spectrumLockPalette_id = None
def spectrumLockPalette(*args, **kwargs):
    """
    spectrumLockPalette(plotID: Number, locked: bool) -> bool
    
    Lock palette of the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _spectrumLockPalette_id
    if _spectrumLockPalette_id is None:
        _spectrumLockPalette_id = _client_service().register_static_object(('TechlogPlot', 'spectrumLockPalette'))
    return _client_service().call(_spectrumLockPalette_id, *args, **kwargs)


_spectrumLockTitle_id = None
def spectrumLockTitle(*args, **kwargs):
    """
    spectrumLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _spectrumLockTitle_id
    if _spectrumLockTitle_id is None:
        _spectrumLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'spectrumLockTitle'))
    return _client_service().call(_spectrumLockTitle_id, *args, **kwargs)


_spectrumMultiWellAddData_id = None
def spectrumMultiWellAddData(*args, **kwargs):
    """
    spectrumMultiWellAddData(plotID: Number, ds: list) -> bool
    
    Add a dataset to a multi well spectrum
    
    Args:
        plotID (Number): spectrum window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellAddData_id
    if _spectrumMultiWellAddData_id is None:
        _spectrumMultiWellAddData_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellAddData'))
    return _client_service().call(_spectrumMultiWellAddData_id, *args, **kwargs)


_spectrumMultiWellAddZone_id = None
def spectrumMultiWellAddZone(*args, **kwargs):
    """
    spectrumMultiWellAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellAddZone_id
    if _spectrumMultiWellAddZone_id is None:
        _spectrumMultiWellAddZone_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellAddZone'))
    return _client_service().call(_spectrumMultiWellAddZone_id, *args, **kwargs)


_spectrumMultiWellCleanZonation_id = None
def spectrumMultiWellCleanZonation(*args, **kwargs):
    """
    spectrumMultiWellCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the spectrum - any display of zone must previously have been cancelled
    
    Args:
        plotID (Number): spectrum window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellCleanZonation_id
    if _spectrumMultiWellCleanZonation_id is None:
        _spectrumMultiWellCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellCleanZonation'))
    return _client_service().call(_spectrumMultiWellCleanZonation_id, *args, **kwargs)


_spectrumMultiWellCleanZone_id = None
def spectrumMultiWellCleanZone(*args, **kwargs):
    """
    spectrumMultiWellCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellCleanZone_id
    if _spectrumMultiWellCleanZone_id is None:
        _spectrumMultiWellCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellCleanZone'))
    return _client_service().call(_spectrumMultiWellCleanZone_id, *args, **kwargs)


_spectrumMultiWellCreate_id = None
def spectrumMultiWellCreate(*args, **kwargs):
    """
    spectrumMultiWellCreate(vl: list, c: str='', f: str='') -> Number
    
    Create a new multi-well spectrum
    
    Args:
        vl (list): variable list
        c (str): Optional; color variable ID
        f (str): Optional; filter variable ID
    
    Returns:
        Number: spectrum window ID
    """
    global _spectrumMultiWellCreate_id
    if _spectrumMultiWellCreate_id is None:
        _spectrumMultiWellCreate_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellCreate'))
    return _client_service().call(_spectrumMultiWellCreate_id, *args, **kwargs)


_spectrumMultiWellDuplicate_id = None
def spectrumMultiWellDuplicate(*args, **kwargs):
    """
    spectrumMultiWellDuplicate(plotID: Number) -> Number
    
    Duplicate the spectrum
    
    Args:
        plotID (Number): spectrum window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _spectrumMultiWellDuplicate_id
    if _spectrumMultiWellDuplicate_id is None:
        _spectrumMultiWellDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellDuplicate'))
    return _client_service().call(_spectrumMultiWellDuplicate_id, *args, **kwargs)


_spectrumMultiWellGetIdByName_id = None
def spectrumMultiWellGetIdByName(*args, **kwargs):
    """
    spectrumMultiWellGetIdByName(n: str) -> Number
    
    Find the ID of a name-known spectrum
    
    Args:
        n (str): spectrum name
    
    Returns:
        Number: spectrum window ID
    """
    global _spectrumMultiWellGetIdByName_id
    if _spectrumMultiWellGetIdByName_id is None:
        _spectrumMultiWellGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellGetIdByName'))
    return _client_service().call(_spectrumMultiWellGetIdByName_id, *args, **kwargs)


_spectrumMultiWellOpen_id = None
def spectrumMultiWellOpen(*args, **kwargs):
    """
    spectrumMultiWellOpen(n: str, f: str='') -> bool
    
    Open an existing spectrum
    
    Args:
        n (str): spectrum name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellOpen_id
    if _spectrumMultiWellOpen_id is None:
        _spectrumMultiWellOpen_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellOpen'))
    return _client_service().call(_spectrumMultiWellOpen_id, *args, **kwargs)


_spectrumMultiWellRemoveDataset_id = None
def spectrumMultiWellRemoveDataset(*args, **kwargs):
    """
    spectrumMultiWellRemoveDataset(plotID: Number, ds: str) -> bool
    
    Remove a dataset from a multi well spectrum
    
    Args:
        plotID (Number): spectrum window ID
        ds (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellRemoveDataset_id
    if _spectrumMultiWellRemoveDataset_id is None:
        _spectrumMultiWellRemoveDataset_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellRemoveDataset'))
    return _client_service().call(_spectrumMultiWellRemoveDataset_id, *args, **kwargs)


_spectrumMultiWellRemoveWell_id = None
def spectrumMultiWellRemoveWell(*args, **kwargs):
    """
    spectrumMultiWellRemoveWell(plotID: Number, we: str) -> bool
    
    Remove a well from a multi well spectrum
    
    Args:
        plotID (Number): spectrum window ID
        we (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellRemoveWell_id
    if _spectrumMultiWellRemoveWell_id is None:
        _spectrumMultiWellRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellRemoveWell'))
    return _client_service().call(_spectrumMultiWellRemoveWell_id, *args, **kwargs)


_spectrumMultiWellSave_id = None
def spectrumMultiWellSave(*args, **kwargs):
    """
    spectrumMultiWellSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        n (str): spectrum window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSave_id
    if _spectrumMultiWellSave_id is None:
        _spectrumMultiWellSave_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSave'))
    return _client_service().call(_spectrumMultiWellSave_id, *args, **kwargs)


_spectrumMultiWellSelectVar_id = None
def spectrumMultiWellSelectVar(*args, **kwargs):
    """
    spectrumMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    [DEPRECATED] (use spectrumMultiWellSelectVariable instead) Change the variable selected among one family's variables in a multi well spectrum
    
    Args:
        plotID (Number): spectrum window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSelectVar_id
    if _spectrumMultiWellSelectVar_id is None:
        _spectrumMultiWellSelectVar_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSelectVar'))
    return _client_service().call(_spectrumMultiWellSelectVar_id, *args, **kwargs)


_spectrumMultiWellSelectVariable_id = None
def spectrumMultiWellSelectVariable(*args, **kwargs):
    """
    spectrumMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str) -> bool
    
    Change the variable selected among one family's variables in a multi well spectrum
    
    Args:
        plotID (Number): spectrum window ID
        we (str): well name
        ds (str): dataset name
        famId (Number): ID of the family in which you wish to change variable
        vr (str): new variable name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSelectVariable_id
    if _spectrumMultiWellSelectVariable_id is None:
        _spectrumMultiWellSelectVariable_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSelectVariable'))
    return _client_service().call(_spectrumMultiWellSelectVariable_id, *args, **kwargs)


_spectrumMultiWellSetAxisInverse_id = None
def spectrumMultiWellSetAxisInverse(*args, **kwargs):
    """
    spectrumMultiWellSetAxisInverse(plotID: Number, v: str, inv: bool) -> bool
    
    Inverse a spectrum variable scale
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        inv (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetAxisInverse_id
    if _spectrumMultiWellSetAxisInverse_id is None:
        _spectrumMultiWellSetAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetAxisInverse'))
    return _client_service().call(_spectrumMultiWellSetAxisInverse_id, *args, **kwargs)


_spectrumMultiWellSetAxisScale_id = None
def spectrumMultiWellSetAxisScale(*args, **kwargs):
    """
    spectrumMultiWellSetAxisScale(plotID: Number, v: str, sc: int) -> bool
    
    Change a spectrum variable Y axis scale
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        sc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetAxisScale_id
    if _spectrumMultiWellSetAxisScale_id is None:
        _spectrumMultiWellSetAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetAxisScale'))
    return _client_service().call(_spectrumMultiWellSetAxisScale_id, *args, **kwargs)


_spectrumMultiWellSetAxisType_id = None
def spectrumMultiWellSetAxisType(*args, **kwargs):
    """
    spectrumMultiWellSetAxisType(plotID: Number, v: str, t: int) -> bool
    
    Change the type of a spectrum variable Y axis
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        t (int): X axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetAxisType_id
    if _spectrumMultiWellSetAxisType_id is None:
        _spectrumMultiWellSetAxisType_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetAxisType'))
    return _client_service().call(_spectrumMultiWellSetAxisType_id, *args, **kwargs)


_spectrumMultiWellSetAxisUnit_id = None
def spectrumMultiWellSetAxisUnit(*args, **kwargs):
    """
    spectrumMultiWellSetAxisUnit(plotID: Number, v: str, u: str) -> bool
    
    Change the unit of a spectrum variable Y axis
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        u (str): X axis unit
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetAxisUnit_id
    if _spectrumMultiWellSetAxisUnit_id is None:
        _spectrumMultiWellSetAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetAxisUnit'))
    return _client_service().call(_spectrumMultiWellSetAxisUnit_id, *args, **kwargs)


_spectrumMultiWellSetAxisUserLimits_id = None
def spectrumMultiWellSetAxisUserLimits(*args, **kwargs):
    """
    spectrumMultiWellSetAxisUserLimits(plotID: Number, v: str, min: Number, max: Number) -> bool
    
    Set min & max values of a spectrum variable Y axis
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        min (Number): X axis minimum
        max (Number): X axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetAxisUserLimits_id
    if _spectrumMultiWellSetAxisUserLimits_id is None:
        _spectrumMultiWellSetAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetAxisUserLimits'))
    return _client_service().call(_spectrumMultiWellSetAxisUserLimits_id, *args, **kwargs)


_spectrumMultiWellSetName_id = None
def spectrumMultiWellSetName(*args, **kwargs):
    """
    spectrumMultiWellSetName(plotID: Number, n: str) -> bool
    
    Change the name of the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        n (str): new spectrum window name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetName_id
    if _spectrumMultiWellSetName_id is None:
        _spectrumMultiWellSetName_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetName'))
    return _client_service().call(_spectrumMultiWellSetName_id, *args, **kwargs)


_spectrumMultiWellSetPaletteBoundaries_id = None
def spectrumMultiWellSetPaletteBoundaries(*args, **kwargs):
    """
    spectrumMultiWellSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a multi-well spectrum plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetPaletteBoundaries_id
    if _spectrumMultiWellSetPaletteBoundaries_id is None:
        _spectrumMultiWellSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetPaletteBoundaries'))
    return _client_service().call(_spectrumMultiWellSetPaletteBoundaries_id, *args, **kwargs)


_spectrumMultiWellSetZonation_id = None
def spectrumMultiWellSetZonation(*args, **kwargs):
    """
    spectrumMultiWellSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumMultiWellSetZonation_id
    if _spectrumMultiWellSetZonation_id is None:
        _spectrumMultiWellSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'spectrumMultiWellSetZonation'))
    return _client_service().call(_spectrumMultiWellSetZonation_id, *args, **kwargs)


_spectrumOpen_id = None
def spectrumOpen(*args, **kwargs):
    """
    spectrumOpen(n: str, f: str='') -> bool
    
    Open an existing spectrum
    
    Args:
        n (str): spectrum name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _spectrumOpen_id
    if _spectrumOpen_id is None:
        _spectrumOpen_id = _client_service().register_static_object(('TechlogPlot', 'spectrumOpen'))
    return _client_service().call(_spectrumOpen_id, *args, **kwargs)


_spectrumSave_id = None
def spectrumSave(*args, **kwargs):
    """
    spectrumSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        n (str): spectrum window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSave_id
    if _spectrumSave_id is None:
        _spectrumSave_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSave'))
    return _client_service().call(_spectrumSave_id, *args, **kwargs)


_spectrumSelectFilter_id = None
def spectrumSelectFilter(*args, **kwargs):
    """
    spectrumSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): spectrum window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSelectFilter_id
    if _spectrumSelectFilter_id is None:
        _spectrumSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSelectFilter'))
    return _client_service().call(_spectrumSelectFilter_id, *args, **kwargs)


_spectrumSetAxisInverse_id = None
def spectrumSetAxisInverse(*args, **kwargs):
    """
    spectrumSetAxisInverse(plotID: Number, v: str, inv: bool) -> bool
    
    Inverse a spectrum variable scale
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        inv (bool): True if inversed, False else
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetAxisInverse_id
    if _spectrumSetAxisInverse_id is None:
        _spectrumSetAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetAxisInverse'))
    return _client_service().call(_spectrumSetAxisInverse_id, *args, **kwargs)


_spectrumSetAxisScale_id = None
def spectrumSetAxisScale(*args, **kwargs):
    """
    spectrumSetAxisScale(plotID: Number, v: str, sc: int) -> bool
    
    Change a spectrum variable axis scale
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        sc (int): scale type {0 = 'LINEAR', 1 = 'LOGARITHMIC'}
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetAxisScale_id
    if _spectrumSetAxisScale_id is None:
        _spectrumSetAxisScale_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetAxisScale'))
    return _client_service().call(_spectrumSetAxisScale_id, *args, **kwargs)


_spectrumSetAxisType_id = None
def spectrumSetAxisType(*args, **kwargs):
    """
    spectrumSetAxisType(plotID: Number, v: str, t: int) -> bool
    
    Change the type of a spectrum variable axis
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        t (int): axis type {0 = 'VAR', 1 = 'USER', 2 = 'FAMILY'}
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetAxisType_id
    if _spectrumSetAxisType_id is None:
        _spectrumSetAxisType_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetAxisType'))
    return _client_service().call(_spectrumSetAxisType_id, *args, **kwargs)


_spectrumSetAxisUnit_id = None
def spectrumSetAxisUnit(*args, **kwargs):
    """
    spectrumSetAxisUnit(plotID: Number, v: str, u: str) -> bool
    
    Change the unit of a spectrum variable axis
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        u (str): axis unit
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetAxisUnit_id
    if _spectrumSetAxisUnit_id is None:
        _spectrumSetAxisUnit_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetAxisUnit'))
    return _client_service().call(_spectrumSetAxisUnit_id, *args, **kwargs)


_spectrumSetAxisUserLimits_id = None
def spectrumSetAxisUserLimits(*args, **kwargs):
    """
    spectrumSetAxisUserLimits(plotID: Number, v: str, min: Number, max: Number) -> bool
    
    Set min & max values of a spectrum variable axis
    
    Args:
        plotID (Number): spectrum window ID
        v (str): variable name
        min (Number): axis minimum
        max (Number): axis maximum
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetAxisUserLimits_id
    if _spectrumSetAxisUserLimits_id is None:
        _spectrumSetAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetAxisUserLimits'))
    return _client_service().call(_spectrumSetAxisUserLimits_id, *args, **kwargs)


_spectrumSetColor_id = None
def spectrumSetColor(*args, **kwargs):
    """
    spectrumSetColor(plotID: Number, color: str) -> bool
    
    Set the color variable of the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        color (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetColor_id
    if _spectrumSetColor_id is None:
        _spectrumSetColor_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetColor'))
    return _client_service().call(_spectrumSetColor_id, *args, **kwargs)


_spectrumSetDatum_id = None
def spectrumSetDatum(*args, **kwargs):
    """
    spectrumSetDatum(plotID: Number, lim: bool, min: Number=0, max: Number=0) -> bool
    
    Change the reference limitation on spectrum
    
    Args:
        plotID (Number): spectrum window ID
        lim (bool): True for user's limitation, False else
        min (Number): Optional; top limit
        max (Number): Optional; bottom limit
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetDatum_id
    if _spectrumSetDatum_id is None:
        _spectrumSetDatum_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetDatum'))
    return _client_service().call(_spectrumSetDatum_id, *args, **kwargs)


_spectrumSetFilter_id = None
def spectrumSetFilter(*args, **kwargs):
    """
    spectrumSetFilter(plotID: Number, f: str) -> bool
    
    Set the variable as a filter
    
    Args:
        plotID (Number): spectrum window ID
        f (str): variable filter
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetFilter_id
    if _spectrumSetFilter_id is None:
        _spectrumSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetFilter'))
    return _client_service().call(_spectrumSetFilter_id, *args, **kwargs)


_spectrumSetName_id = None
def spectrumSetName(*args, **kwargs):
    """
    spectrumSetName(plotID: Number, n: str) -> bool
    
    Change the name of the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        n (str): new spectrum window name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetName_id
    if _spectrumSetName_id is None:
        _spectrumSetName_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetName'))
    return _client_service().call(_spectrumSetName_id, *args, **kwargs)


_spectrumSetPaletteBoundaries_id = None
def spectrumSetPaletteBoundaries(*args, **kwargs):
    """
    spectrumSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a spectrum plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetPaletteBoundaries_id
    if _spectrumSetPaletteBoundaries_id is None:
        _spectrumSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetPaletteBoundaries'))
    return _client_service().call(_spectrumSetPaletteBoundaries_id, *args, **kwargs)


_spectrumSetVariablesList_id = None
def spectrumSetVariablesList(*args, **kwargs):
    """
    spectrumSetVariablesList(plotID: Number, vn: list) -> bool
    
    Set the variable list to the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        vn (list): variable list
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetVariablesList_id
    if _spectrumSetVariablesList_id is None:
        _spectrumSetVariablesList_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetVariablesList'))
    return _client_service().call(_spectrumSetVariablesList_id, *args, **kwargs)


_spectrumSetZonation_id = None
def spectrumSetZonation(*args, **kwargs):
    """
    spectrumSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the spectrum
    
    Args:
        plotID (Number): spectrum window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _spectrumSetZonation_id
    if _spectrumSetZonation_id is None:
        _spectrumSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'spectrumSetZonation'))
    return _client_service().call(_spectrumSetZonation_id, *args, **kwargs)


_starPlotOpen_id = None
def starPlotOpen(*args, **kwargs):
    """
    starPlotOpen(n: str, f: str='') -> bool
    
    Open an existing star plot
    
    Args:
        n (str): star plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _starPlotOpen_id
    if _starPlotOpen_id is None:
        _starPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'starPlotOpen'))
    return _client_service().call(_starPlotOpen_id, *args, **kwargs)


_stereonetAddZone_id = None
def stereonetAddZone(*args, **kwargs):
    """
    stereonetAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the stereonet
    
    Args:
        plotID (Number): stereonet window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetAddZone_id
    if _stereonetAddZone_id is None:
        _stereonetAddZone_id = _client_service().register_static_object(('TechlogPlot', 'stereonetAddZone'))
    return _client_service().call(_stereonetAddZone_id, *args, **kwargs)


_stereonetApplyTo_id = None
def stereonetApplyTo(*args, **kwargs):
    """
    stereonetApplyTo(plotID: Number, ds: list) -> list
    
    Apply the stereonet to a data set list
    
    Args:
        plotID (Number): stereonet window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _stereonetApplyTo_id
    if _stereonetApplyTo_id is None:
        _stereonetApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'stereonetApplyTo'))
    return _client_service().call(_stereonetApplyTo_id, *args, **kwargs)


_stereonetCleanZonation_id = None
def stereonetCleanZonation(*args, **kwargs):
    """
    stereonetCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the stereonet - any display of zone must previously be cancelled
    
    Args:
        plotID (Number): stereonet window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetCleanZonation_id
    if _stereonetCleanZonation_id is None:
        _stereonetCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'stereonetCleanZonation'))
    return _client_service().call(_stereonetCleanZonation_id, *args, **kwargs)


_stereonetCleanZone_id = None
def stereonetCleanZone(*args, **kwargs):
    """
    stereonetCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the stereonet
    
    Args:
        plotID (Number): stereonet window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetCleanZone_id
    if _stereonetCleanZone_id is None:
        _stereonetCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'stereonetCleanZone'))
    return _client_service().call(_stereonetCleanZone_id, *args, **kwargs)


_stereonetColorMode_id = None
def stereonetColorMode(*args, **kwargs):
    """
    stereonetColorMode(plotID: Number, dm: int) -> bool
    
    Display of the color mode on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dm (int): color mode{0 = 'TYPE_PALET', 1 = 'TYPE_WELL', 2 = 'TYPE_ZONATION'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetColorMode_id
    if _stereonetColorMode_id is None:
        _stereonetColorMode_id = _client_service().register_static_object(('TechlogPlot', 'stereonetColorMode'))
    return _client_service().call(_stereonetColorMode_id, *args, **kwargs)


_stereonetCreate_id = None
def stereonetCreate(*args, **kwargs):
    """
    stereonetCreate(n: str, dip: str='', azimuth: str='', color: str='', filter: str='') -> Number
    
    Create a new stereonet
    
    Args:
        n (str): stereonet window name
        dip (str): Optional; variable name
        azimuth (str): Optional; variable name
        color (str): Optional; variable name
        filter (str): Optional; variable name
    
    Returns:
        Number: stereonet window ID
    """
    global _stereonetCreate_id
    if _stereonetCreate_id is None:
        _stereonetCreate_id = _client_service().register_static_object(('TechlogPlot', 'stereonetCreate'))
    return _client_service().call(_stereonetCreate_id, *args, **kwargs)


_stereonetDeleteAzimuth_id = None
def stereonetDeleteAzimuth(*args, **kwargs):
    """
    stereonetDeleteAzimuth(plotID: Number) -> bool
    
    Delete the azimuth variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDeleteAzimuth_id
    if _stereonetDeleteAzimuth_id is None:
        _stereonetDeleteAzimuth_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDeleteAzimuth'))
    return _client_service().call(_stereonetDeleteAzimuth_id, *args, **kwargs)


_stereonetDeleteColor_id = None
def stereonetDeleteColor(*args, **kwargs):
    """
    stereonetDeleteColor(plotID: Number) -> bool
    
    Delete the color variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDeleteColor_id
    if _stereonetDeleteColor_id is None:
        _stereonetDeleteColor_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDeleteColor'))
    return _client_service().call(_stereonetDeleteColor_id, *args, **kwargs)


_stereonetDeleteDip_id = None
def stereonetDeleteDip(*args, **kwargs):
    """
    stereonetDeleteDip(plotID: Number) -> bool
    
    Delete the dip variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDeleteDip_id
    if _stereonetDeleteDip_id is None:
        _stereonetDeleteDip_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDeleteDip'))
    return _client_service().call(_stereonetDeleteDip_id, *args, **kwargs)


_stereonetDeleteFilter_id = None
def stereonetDeleteFilter(*args, **kwargs):
    """
    stereonetDeleteFilter(plotID: Number) -> bool
    
    Delete the filter variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDeleteFilter_id
    if _stereonetDeleteFilter_id is None:
        _stereonetDeleteFilter_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDeleteFilter'))
    return _client_service().call(_stereonetDeleteFilter_id, *args, **kwargs)


_stereonetDensityGridX_id = None
def stereonetDensityGridX(*args, **kwargs):
    """
    stereonetDensityGridX(plotID: Number, dgx: Number) -> bool
    
    Set the density grid X size on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dgx (Number): size value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityGridX_id
    if _stereonetDensityGridX_id is None:
        _stereonetDensityGridX_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityGridX'))
    return _client_service().call(_stereonetDensityGridX_id, *args, **kwargs)


_stereonetDensityGridY_id = None
def stereonetDensityGridY(*args, **kwargs):
    """
    stereonetDensityGridY(plotID: Number, dgy: Number) -> bool
    
    Set the density grid Y size on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dgy (Number): size value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityGridY_id
    if _stereonetDensityGridY_id is None:
        _stereonetDensityGridY_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityGridY'))
    return _client_service().call(_stereonetDensityGridY_id, *args, **kwargs)


_stereonetDensityMethod_id = None
def stereonetDensityMethod(*args, **kwargs):
    """
    stereonetDensityMethod(plotID: Number, dm: int) -> bool
    
    Display of the density method on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dm (int): density method {0 = 'DENSITY_CONTOUR_KAMB', 1 = 'DENSITY_CONTOUR_1_PERCENT_AREA'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityMethod_id
    if _stereonetDensityMethod_id is None:
        _stereonetDensityMethod_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityMethod'))
    return _client_service().call(_stereonetDensityMethod_id, *args, **kwargs)


_stereonetDensityOpacityActivate_id = None
def stereonetDensityOpacityActivate(*args, **kwargs):
    """
    stereonetDensityOpacityActivate(plotID: Number, doa: bool) -> bool
    
    Set if the density opacity is activate or not on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        doa (bool): 1 = activate, else 0
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityOpacityActivate_id
    if _stereonetDensityOpacityActivate_id is None:
        _stereonetDensityOpacityActivate_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityOpacityActivate'))
    return _client_service().call(_stereonetDensityOpacityActivate_id, *args, **kwargs)


_stereonetDensityOpacityValue_id = None
def stereonetDensityOpacityValue(*args, **kwargs):
    """
    stereonetDensityOpacityValue(plotID: Number, dov: Number) -> bool
    
    Set the density opacity value on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dov (Number): opacity value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityOpacityValue_id
    if _stereonetDensityOpacityValue_id is None:
        _stereonetDensityOpacityValue_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityOpacityValue'))
    return _client_service().call(_stereonetDensityOpacityValue_id, *args, **kwargs)


_stereonetDensitySigma_id = None
def stereonetDensitySigma(*args, **kwargs):
    """
    stereonetDensitySigma(plotID: Number, sig: Number) -> bool
    
    Set the density sigma on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        sig (Number): sigma value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensitySigma_id
    if _stereonetDensitySigma_id is None:
        _stereonetDensitySigma_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensitySigma'))
    return _client_service().call(_stereonetDensitySigma_id, *args, **kwargs)


_stereonetDensitySmoothMode_id = None
def stereonetDensitySmoothMode(*args, **kwargs):
    """
    stereonetDensitySmoothMode(plotID: Number, dsm: int) -> bool
    
    Set the density smooth mode on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dsm (int): density smooth mode {0 = 'DENSITY_SMOOTH_NONE', 1 = 'DENSITY_SMOOTH_AREA', 2 = 'DENSITY_SMOOTH_AREA_SQUARE'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensitySmoothMode_id
    if _stereonetDensitySmoothMode_id is None:
        _stereonetDensitySmoothMode_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensitySmoothMode'))
    return _client_service().call(_stereonetDensitySmoothMode_id, *args, **kwargs)


_stereonetDensityType_id = None
def stereonetDensityType(*args, **kwargs):
    """
    stereonetDensityType(plotID: Number, dst: bool=False) -> bool
    
    Display of the stereonet in normal or density type
    
    Args:
        plotID (Number): stereonet window ID
        dst (bool): Optional; 1 = density display, else 0
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityType_id
    if _stereonetDensityType_id is None:
        _stereonetDensityType_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityType'))
    return _client_service().call(_stereonetDensityType_id, *args, **kwargs)


_stereonetDensityValue_id = None
def stereonetDensityValue(*args, **kwargs):
    """
    stereonetDensityValue(plotID: Number, value: bool, percent: bool=False) -> bool
    
    Display of data density values
    
    Args:
        plotID (Number): stereonet window ID
        value (bool): 1 = display of density value else 0
        percent (bool): Optional; 1 = display in percent else 0
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDensityValue_id
    if _stereonetDensityValue_id is None:
        _stereonetDensityValue_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDensityValue'))
    return _client_service().call(_stereonetDensityValue_id, *args, **kwargs)


_stereonetDisplayType_id = None
def stereonetDisplayType(*args, **kwargs):
    """
    stereonetDisplayType(plotID: Number, dt: int) -> bool
    
    Change the display type on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dt (int): display type {0 = 'TYPE_POLAR', 1 = 'TYPE_ROSE', 2 = 'TYPE_SCHMIDT', 3 = 'TYPE_WULFF'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetDisplayType_id
    if _stereonetDisplayType_id is None:
        _stereonetDisplayType_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDisplayType'))
    return _client_service().call(_stereonetDisplayType_id, *args, **kwargs)


_stereonetDuplicate_id = None
def stereonetDuplicate(*args, **kwargs):
    """
    stereonetDuplicate(plotID: Number) -> Number
    
    Duplicate the stereonet
    
    Args:
        plotID (Number): stereonet window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _stereonetDuplicate_id
    if _stereonetDuplicate_id is None:
        _stereonetDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'stereonetDuplicate'))
    return _client_service().call(_stereonetDuplicate_id, *args, **kwargs)


_stereonetGetIdByName_id = None
def stereonetGetIdByName(*args, **kwargs):
    """
    stereonetGetIdByName(n: str) -> Number
    
    Find the ID of a name-known stereonet
    
    Args:
        n (str): stereonet name
    
    Returns:
        Number: stereonet window ID
    """
    global _stereonetGetIdByName_id
    if _stereonetGetIdByName_id is None:
        _stereonetGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'stereonetGetIdByName'))
    return _client_service().call(_stereonetGetIdByName_id, *args, **kwargs)


_stereonetGetInteractionGreatCircles_id = None
def stereonetGetInteractionGreatCircles(*args, **kwargs):
    """
    stereonetGetInteractionGreatCircles(plotID: Number) -> list
    
    Get the list of poles for great circles by interaction on a stereonet
    
    Args:
        plotID (Number): stereonet window ID
    
    Returns:
        list: list of azimuth,dip tuples
    """
    global _stereonetGetInteractionGreatCircles_id
    if _stereonetGetInteractionGreatCircles_id is None:
        _stereonetGetInteractionGreatCircles_id = _client_service().register_static_object(('TechlogPlot', 'stereonetGetInteractionGreatCircles'))
    return _client_service().call(_stereonetGetInteractionGreatCircles_id, *args, **kwargs)


_stereonetGridStep_id = None
def stereonetGridStep(*args, **kwargs):
    """
    stereonetGridStep(plotID: Number, gs: Number) -> bool
    
    Change the grid step on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        gs (Number): grid step in [6, 10, 12, 20, 30, 36]
    
    Returns:
        bool: operation exit status
    """
    global _stereonetGridStep_id
    if _stereonetGridStep_id is None:
        _stereonetGridStep_id = _client_service().register_static_object(('TechlogPlot', 'stereonetGridStep'))
    return _client_service().call(_stereonetGridStep_id, *args, **kwargs)


_stereonetGridType_id = None
def stereonetGridType(*args, **kwargs):
    """
    stereonetGridType(plotID: Number, gt: int) -> bool
    
    Change the grid type on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        gt (int): grid type {0 = 'NONE', 1 = 'SIMPLE', 2 = 'FULL'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetGridType_id
    if _stereonetGridType_id is None:
        _stereonetGridType_id = _client_service().register_static_object(('TechlogPlot', 'stereonetGridType'))
    return _client_service().call(_stereonetGridType_id, *args, **kwargs)


_stereonetHistogramAlpha_id = None
def stereonetHistogramAlpha(*args, **kwargs):
    """
    stereonetHistogramAlpha(plotID: Number, a: Number) -> bool
    
    Set the histogram opacity on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        a (Number): alpha
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramAlpha_id
    if _stereonetHistogramAlpha_id is None:
        _stereonetHistogramAlpha_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramAlpha'))
    return _client_service().call(_stereonetHistogramAlpha_id, *args, **kwargs)


_stereonetHistogramColor_id = None
def stereonetHistogramColor(*args, **kwargs):
    """
    stereonetHistogramColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the histogram color on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramColor_id
    if _stereonetHistogramColor_id is None:
        _stereonetHistogramColor_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramColor'))
    return _client_service().call(_stereonetHistogramColor_id, *args, **kwargs)


_stereonetHistogramColour_id = None
def stereonetHistogramColour(*args, **kwargs):
    """
    stereonetHistogramColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use stereonetHistogramColor instead) Set the histogram color on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramColour_id
    if _stereonetHistogramColour_id is None:
        _stereonetHistogramColour_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramColour'))
    return _client_service().call(_stereonetHistogramColour_id, *args, **kwargs)


_stereonetHistogramCumulated_id = None
def stereonetHistogramCumulated(*args, **kwargs):
    """
    stereonetHistogramCumulated(plotID: Number, c: bool=True) -> bool
    
    Set if the histogram is cumulated or not on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        c (bool): Optional; 1 = cumulated, else 0
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramCumulated_id
    if _stereonetHistogramCumulated_id is None:
        _stereonetHistogramCumulated_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramCumulated'))
    return _client_service().call(_stereonetHistogramCumulated_id, *args, **kwargs)


_stereonetHistogramGraduation_id = None
def stereonetHistogramGraduation(*args, **kwargs):
    """
    stereonetHistogramGraduation(plotID: Number, grad: Number) -> bool
    
    Set the histogram graduation on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        grad (Number): graduation value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramGraduation_id
    if _stereonetHistogramGraduation_id is None:
        _stereonetHistogramGraduation_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramGraduation'))
    return _client_service().call(_stereonetHistogramGraduation_id, *args, **kwargs)


_stereonetHistogramLimitType_id = None
def stereonetHistogramLimitType(*args, **kwargs):
    """
    stereonetHistogramLimitType(plotID: Number, lt: int) -> bool
    
    Set the histogram limit type on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        lt (int): limit type {0 = 'VAR', 1 = 'USER'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramLimitType_id
    if _stereonetHistogramLimitType_id is None:
        _stereonetHistogramLimitType_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramLimitType'))
    return _client_service().call(_stereonetHistogramLimitType_id, *args, **kwargs)


_stereonetHistogramMode_id = None
def stereonetHistogramMode(*args, **kwargs):
    """
    stereonetHistogramMode(plotID: Number, hm: int) -> bool
    
    Set the histogram mode on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        hm (int): histogram mode {0 = 'HISTO_BY_VARIABLE', 1 = 'HISTO_BY_FILTER', 2 = 'HISTO_BY_ZONE'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramMode_id
    if _stereonetHistogramMode_id is None:
        _stereonetHistogramMode_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramMode'))
    return _client_service().call(_stereonetHistogramMode_id, *args, **kwargs)


_stereonetHistogramNormalized_id = None
def stereonetHistogramNormalized(*args, **kwargs):
    """
    stereonetHistogramNormalized(plotID: Number, n: bool=True) -> bool
    
    Set if the histogram is normalized or not on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        n (bool): Optional; 1 = normalized, else 0
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramNormalized_id
    if _stereonetHistogramNormalized_id is None:
        _stereonetHistogramNormalized_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramNormalized'))
    return _client_service().call(_stereonetHistogramNormalized_id, *args, **kwargs)


_stereonetHistogramUserMax_id = None
def stereonetHistogramUserMax(*args, **kwargs):
    """
    stereonetHistogramUserMax(plotID: Number, uvm: Number) -> bool
    
    Set the histogram user maximum value on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        uvm (Number): maximum value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramUserMax_id
    if _stereonetHistogramUserMax_id is None:
        _stereonetHistogramUserMax_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramUserMax'))
    return _client_service().call(_stereonetHistogramUserMax_id, *args, **kwargs)


_stereonetHistogramUserMin_id = None
def stereonetHistogramUserMin(*args, **kwargs):
    """
    stereonetHistogramUserMin(plotID: Number, uvm: Number) -> bool
    
    Set the histogram user minimum value on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        uvm (Number): minimum value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramUserMin_id
    if _stereonetHistogramUserMin_id is None:
        _stereonetHistogramUserMin_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramUserMin'))
    return _client_service().call(_stereonetHistogramUserMin_id, *args, **kwargs)


_stereonetHistogramUserMinMax_id = None
def stereonetHistogramUserMinMax(*args, **kwargs):
    """
    stereonetHistogramUserMinMax(plotID: Number, uvmin: Number, uvmax: Number) -> bool
    
    Set the histogram user minimum and maximum value on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        uvmin (Number): minimum value
        uvmax (Number): maximum value
    
    Returns:
        bool: operation exit status
    """
    global _stereonetHistogramUserMinMax_id
    if _stereonetHistogramUserMinMax_id is None:
        _stereonetHistogramUserMinMax_id = _client_service().register_static_object(('TechlogPlot', 'stereonetHistogramUserMinMax'))
    return _client_service().call(_stereonetHistogramUserMinMax_id, *args, **kwargs)


_stereonetLockTitle_id = None
def stereonetLockTitle(*args, **kwargs):
    """
    stereonetLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the stereonet
    
    Args:
        plotID (Number): stereonet window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _stereonetLockTitle_id
    if _stereonetLockTitle_id is None:
        _stereonetLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'stereonetLockTitle'))
    return _client_service().call(_stereonetLockTitle_id, *args, **kwargs)


_stereonetMarkersAlpha_id = None
def stereonetMarkersAlpha(*args, **kwargs):
    """
    stereonetMarkersAlpha(plotID: Number, a: Number) -> bool
    
    Set the makers opacity on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        a (Number): alpha
    
    Returns:
        bool: operation exit status
    """
    global _stereonetMarkersAlpha_id
    if _stereonetMarkersAlpha_id is None:
        _stereonetMarkersAlpha_id = _client_service().register_static_object(('TechlogPlot', 'stereonetMarkersAlpha'))
    return _client_service().call(_stereonetMarkersAlpha_id, *args, **kwargs)


_stereonetMarkersColor_id = None
def stereonetMarkersColor(*args, **kwargs):
    """
    stereonetMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the makers color on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _stereonetMarkersColor_id
    if _stereonetMarkersColor_id is None:
        _stereonetMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'stereonetMarkersColor'))
    return _client_service().call(_stereonetMarkersColor_id, *args, **kwargs)


_stereonetMarkersColour_id = None
def stereonetMarkersColour(*args, **kwargs):
    """
    stereonetMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use stereonetMarkersColor instead) Set the makers color on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _stereonetMarkersColour_id
    if _stereonetMarkersColour_id is None:
        _stereonetMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'stereonetMarkersColour'))
    return _client_service().call(_stereonetMarkersColour_id, *args, **kwargs)


_stereonetMarkersSize_id = None
def stereonetMarkersSize(*args, **kwargs):
    """
    stereonetMarkersSize(plotID: Number, s: Number) -> bool
    
    Set the makers size on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        s (Number): size
    
    Returns:
        bool: operation exit status
    """
    global _stereonetMarkersSize_id
    if _stereonetMarkersSize_id is None:
        _stereonetMarkersSize_id = _client_service().register_static_object(('TechlogPlot', 'stereonetMarkersSize'))
    return _client_service().call(_stereonetMarkersSize_id, *args, **kwargs)


_stereonetOpen_id = None
def stereonetOpen(*args, **kwargs):
    """
    stereonetOpen(n: str, f: str='') -> bool
    
    Open an existing stereonet
    
    Args:
        n (str): stereonet name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _stereonetOpen_id
    if _stereonetOpen_id is None:
        _stereonetOpen_id = _client_service().register_static_object(('TechlogPlot', 'stereonetOpen'))
    return _client_service().call(_stereonetOpen_id, *args, **kwargs)


_stereonetProjectionHemisphere_id = None
def stereonetProjectionHemisphere(*args, **kwargs):
    """
    stereonetProjectionHemisphere(plotID: Number, ph: int) -> bool
    
    Change the projection hemisphere on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        ph (int): projection hemisphere {0 = 'LOWER_HEMISPHERE', 1 = 'UPPER_HEMISPHERE'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetProjectionHemisphere_id
    if _stereonetProjectionHemisphere_id is None:
        _stereonetProjectionHemisphere_id = _client_service().register_static_object(('TechlogPlot', 'stereonetProjectionHemisphere'))
    return _client_service().call(_stereonetProjectionHemisphere_id, *args, **kwargs)


_stereonetProjectionType_id = None
def stereonetProjectionType(*args, **kwargs):
    """
    stereonetProjectionType(plotID: Number, pt: int) -> bool
    
    Change the projection type on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        pt (int): projection type {0 = 'TYPE_LINE', 1 = 'TYPE_PLANE', 2 = 'TYPE_POLE', 3 = 'TYPE_PLANE_AND_POLE'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetProjectionType_id
    if _stereonetProjectionType_id is None:
        _stereonetProjectionType_id = _client_service().register_static_object(('TechlogPlot', 'stereonetProjectionType'))
    return _client_service().call(_stereonetProjectionType_id, *args, **kwargs)


_stereonetRoseType_id = None
def stereonetRoseType(*args, **kwargs):
    """
    stereonetRoseType(plotID: Number, rt: int) -> bool
    
    Change the rose type on stereonet
    
    Args:
        plotID (Number): stereonet window ID
        rt (int): rose type {0 = 'ROSE_AZIMUTH', 1 = 'ROSE_AZIMUTH_MIRROR', 2 = 'ROSE_STRIKE', 3 = 'ROSE_NONE'}
    
    Returns:
        bool: operation exit status
    """
    global _stereonetRoseType_id
    if _stereonetRoseType_id is None:
        _stereonetRoseType_id = _client_service().register_static_object(('TechlogPlot', 'stereonetRoseType'))
    return _client_service().call(_stereonetRoseType_id, *args, **kwargs)


_stereonetSave_id = None
def stereonetSave(*args, **kwargs):
    """
    stereonetSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the stereonet
    
    Args:
        plotID (Number): stereonet window ID
        n (str): stereonet window name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSave_id
    if _stereonetSave_id is None:
        _stereonetSave_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSave'))
    return _client_service().call(_stereonetSave_id, *args, **kwargs)


_stereonetSelectFilter_id = None
def stereonetSelectFilter(*args, **kwargs):
    """
    stereonetSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): stereonet window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSelectFilter_id
    if _stereonetSelectFilter_id is None:
        _stereonetSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSelectFilter'))
    return _client_service().call(_stereonetSelectFilter_id, *args, **kwargs)


_stereonetSetAzimuth_id = None
def stereonetSetAzimuth(*args, **kwargs):
    """
    stereonetSetAzimuth(plotID: Number, azimuth: str) -> bool
    
    Set the azimuth variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
        azimuth (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetAzimuth_id
    if _stereonetSetAzimuth_id is None:
        _stereonetSetAzimuth_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetAzimuth'))
    return _client_service().call(_stereonetSetAzimuth_id, *args, **kwargs)


_stereonetSetColor_id = None
def stereonetSetColor(*args, **kwargs):
    """
    stereonetSetColor(plotID: Number, color: str) -> bool
    
    Set the color variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
        color (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetColor_id
    if _stereonetSetColor_id is None:
        _stereonetSetColor_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetColor'))
    return _client_service().call(_stereonetSetColor_id, *args, **kwargs)


_stereonetSetDip_id = None
def stereonetSetDip(*args, **kwargs):
    """
    stereonetSetDip(plotID: Number, dip: str) -> bool
    
    Set the dip variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
        dip (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetDip_id
    if _stereonetSetDip_id is None:
        _stereonetSetDip_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetDip'))
    return _client_service().call(_stereonetSetDip_id, *args, **kwargs)


_stereonetSetFilter_id = None
def stereonetSetFilter(*args, **kwargs):
    """
    stereonetSetFilter(plotID: Number, filter: str) -> bool
    
    Set the filter variable of a stereonet
    
    Args:
        plotID (Number): stereonet window ID
        filter (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetFilter_id
    if _stereonetSetFilter_id is None:
        _stereonetSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetFilter'))
    return _client_service().call(_stereonetSetFilter_id, *args, **kwargs)


_stereonetSetInteractionGreatCircles_id = None
def stereonetSetInteractionGreatCircles(*args, **kwargs):
    """
    stereonetSetInteractionGreatCircles(plotID: Number, displayGreatCircles: bool)
    
    display or not great circles by interaction on a stereonet
    
    Args:
        plotID (Number): stereonet window ID
        displayGreatCircles (bool): display great circles by iteration
    """
    global _stereonetSetInteractionGreatCircles_id
    if _stereonetSetInteractionGreatCircles_id is None:
        _stereonetSetInteractionGreatCircles_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetInteractionGreatCircles'))
    return _client_service().call(_stereonetSetInteractionGreatCircles_id, *args, **kwargs)


_stereonetSetName_id = None
def stereonetSetName(*args, **kwargs):
    """
    stereonetSetName(plotID: Number, n: str) -> bool
    
    Change the name of the stereonet
    
    Args:
        plotID (Number): stereonet window ID
        n (str): new stereonet plot windows name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetName_id
    if _stereonetSetName_id is None:
        _stereonetSetName_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetName'))
    return _client_service().call(_stereonetSetName_id, *args, **kwargs)


_stereonetSetPaletteBoundaries_id = None
def stereonetSetPaletteBoundaries(*args, **kwargs):
    """
    stereonetSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a stereonet plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetPaletteBoundaries_id
    if _stereonetSetPaletteBoundaries_id is None:
        _stereonetSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetPaletteBoundaries'))
    return _client_service().call(_stereonetSetPaletteBoundaries_id, *args, **kwargs)


_stereonetSetZonation_id = None
def stereonetSetZonation(*args, **kwargs):
    """
    stereonetSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the stereonet
    
    Args:
        plotID (Number): stereonet window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _stereonetSetZonation_id
    if _stereonetSetZonation_id is None:
        _stereonetSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'stereonetSetZonation'))
    return _client_service().call(_stereonetSetZonation_id, *args, **kwargs)


_ternaryPlotCreate_id = None
def ternaryPlotCreate(*args, **kwargs):
    """
    ternaryPlotCreate(n: str, xn: str='', yn: str='', zn: str='', c: str='', f: str='') -> Number
    
    Create a new ternary plot
    
    Args:
        n (str): ternary plot window name
        xn (str): Optional; bottom axis variable name
        yn (str): Optional; left axis variable name
        zn (str): Optional; right axis variable name
        c (str): Optional; color variable name
        f (str): Optional; filter variable name
    
    Returns:
        Number: ternary plot window ID
    """
    global _ternaryPlotCreate_id
    if _ternaryPlotCreate_id is None:
        _ternaryPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotCreate'))
    return _client_service().call(_ternaryPlotCreate_id, *args, **kwargs)


_ternaryPlotDeleteBottomAxe_id = None
def ternaryPlotDeleteBottomAxe(*args, **kwargs):
    """
    ternaryPlotDeleteBottomAxe(plotID: Number) -> bool
    
    Delete the bottom axis variable of an existing ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotDeleteBottomAxe_id
    if _ternaryPlotDeleteBottomAxe_id is None:
        _ternaryPlotDeleteBottomAxe_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotDeleteBottomAxe'))
    return _client_service().call(_ternaryPlotDeleteBottomAxe_id, *args, **kwargs)


_ternaryPlotDeleteColor_id = None
def ternaryPlotDeleteColor(*args, **kwargs):
    """
    ternaryPlotDeleteColor(plotID: Number) -> bool
    
    Delete the color variable of an existing ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotDeleteColor_id
    if _ternaryPlotDeleteColor_id is None:
        _ternaryPlotDeleteColor_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotDeleteColor'))
    return _client_service().call(_ternaryPlotDeleteColor_id, *args, **kwargs)


_ternaryPlotDeleteFilter_id = None
def ternaryPlotDeleteFilter(*args, **kwargs):
    """
    ternaryPlotDeleteFilter(plotID: Number) -> bool
    
    Delete the filter of an existing ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotDeleteFilter_id
    if _ternaryPlotDeleteFilter_id is None:
        _ternaryPlotDeleteFilter_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotDeleteFilter'))
    return _client_service().call(_ternaryPlotDeleteFilter_id, *args, **kwargs)


_ternaryPlotDeleteLeftAxe_id = None
def ternaryPlotDeleteLeftAxe(*args, **kwargs):
    """
    ternaryPlotDeleteLeftAxe(plotID: Number) -> bool
    
    Delete the left axis variable of an existing ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotDeleteLeftAxe_id
    if _ternaryPlotDeleteLeftAxe_id is None:
        _ternaryPlotDeleteLeftAxe_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotDeleteLeftAxe'))
    return _client_service().call(_ternaryPlotDeleteLeftAxe_id, *args, **kwargs)


_ternaryPlotDeleteRightAxe_id = None
def ternaryPlotDeleteRightAxe(*args, **kwargs):
    """
    ternaryPlotDeleteRightAxe(plotID: Number) -> bool
    
    Delete the right axis variable of an existing ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotDeleteRightAxe_id
    if _ternaryPlotDeleteRightAxe_id is None:
        _ternaryPlotDeleteRightAxe_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotDeleteRightAxe'))
    return _client_service().call(_ternaryPlotDeleteRightAxe_id, *args, **kwargs)


_ternaryPlotDuplicate_id = None
def ternaryPlotDuplicate(*args, **kwargs):
    """
    ternaryPlotDuplicate(plotID: Number) -> Number
    
    Duplicate an existing ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _ternaryPlotDuplicate_id
    if _ternaryPlotDuplicate_id is None:
        _ternaryPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotDuplicate'))
    return _client_service().call(_ternaryPlotDuplicate_id, *args, **kwargs)


_ternaryPlotIDFindByName_id = None
def ternaryPlotIDFindByName(*args, **kwargs):
    """
    ternaryPlotIDFindByName(n: str) -> Number
    
    Find the ID of a name-known ternary plot
    
    Args:
        n (str): ternary plot window name
    
    Returns:
        Number: ternary plot window ID
    """
    global _ternaryPlotIDFindByName_id
    if _ternaryPlotIDFindByName_id is None:
        _ternaryPlotIDFindByName_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotIDFindByName'))
    return _client_service().call(_ternaryPlotIDFindByName_id, *args, **kwargs)


_ternaryPlotOpen_id = None
def ternaryPlotOpen(*args, **kwargs):
    """
    ternaryPlotOpen(n: str, f: str='') -> Number
    
    Open an existing ternary plot
    
    Args:
        n (str): ternary plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _ternaryPlotOpen_id
    if _ternaryPlotOpen_id is None:
        _ternaryPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotOpen'))
    return _client_service().call(_ternaryPlotOpen_id, *args, **kwargs)


_ternaryPlotSave_id = None
def ternaryPlotSave(*args, **kwargs):
    """
    ternaryPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
        n (str): ternary plot name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSave_id
    if _ternaryPlotSave_id is None:
        _ternaryPlotSave_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSave'))
    return _client_service().call(_ternaryPlotSave_id, *args, **kwargs)


_ternaryPlotSelectFilter_id = None
def ternaryPlotSelectFilter(*args, **kwargs):
    """
    ternaryPlotSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): ternary plot window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSelectFilter_id
    if _ternaryPlotSelectFilter_id is None:
        _ternaryPlotSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSelectFilter'))
    return _client_service().call(_ternaryPlotSelectFilter_id, *args, **kwargs)


_ternaryPlotSetBottomAxe_id = None
def ternaryPlotSetBottomAxe(*args, **kwargs):
    """
    ternaryPlotSetBottomAxe(plotID: Number, var: str) -> bool
    
    Set the variable for the bottom axis in a ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
        var (str): bottom axis variable name
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSetBottomAxe_id
    if _ternaryPlotSetBottomAxe_id is None:
        _ternaryPlotSetBottomAxe_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSetBottomAxe'))
    return _client_service().call(_ternaryPlotSetBottomAxe_id, *args, **kwargs)


_ternaryPlotSetColor_id = None
def ternaryPlotSetColor(*args, **kwargs):
    """
    ternaryPlotSetColor(plotID: Number, var: str) -> bool
    
    Set the variable for the color axis in a ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
        var (str): color variable name
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSetColor_id
    if _ternaryPlotSetColor_id is None:
        _ternaryPlotSetColor_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSetColor'))
    return _client_service().call(_ternaryPlotSetColor_id, *args, **kwargs)


_ternaryPlotSetFilter_id = None
def ternaryPlotSetFilter(*args, **kwargs):
    """
    ternaryPlotSetFilter(plotID: Number, var: str) -> bool
    
    Set the variable for the filter in a ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
        var (str): filter variable name
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSetFilter_id
    if _ternaryPlotSetFilter_id is None:
        _ternaryPlotSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSetFilter'))
    return _client_service().call(_ternaryPlotSetFilter_id, *args, **kwargs)


_ternaryPlotSetLeftAxe_id = None
def ternaryPlotSetLeftAxe(*args, **kwargs):
    """
    ternaryPlotSetLeftAxe(plotID: Number, var: str) -> bool
    
    Set the variable for the left axis in a ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
        var (str): left axis variable name
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSetLeftAxe_id
    if _ternaryPlotSetLeftAxe_id is None:
        _ternaryPlotSetLeftAxe_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSetLeftAxe'))
    return _client_service().call(_ternaryPlotSetLeftAxe_id, *args, **kwargs)


_ternaryPlotSetPaletteBoundaries_id = None
def ternaryPlotSetPaletteBoundaries(*args, **kwargs):
    """
    ternaryPlotSetPaletteBoundaries(plotID: Number, min: Number, max: Number) -> bool
    
    Set the boundaries of the palette for a ternary plot.
    
    Args:
        plotID (Number): plot window ID
        min (Number): minimum of the palette
        max (Number): maximum of the palette
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSetPaletteBoundaries_id
    if _ternaryPlotSetPaletteBoundaries_id is None:
        _ternaryPlotSetPaletteBoundaries_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSetPaletteBoundaries'))
    return _client_service().call(_ternaryPlotSetPaletteBoundaries_id, *args, **kwargs)


_ternaryPlotSetRightAxe_id = None
def ternaryPlotSetRightAxe(*args, **kwargs):
    """
    ternaryPlotSetRightAxe(plotID: Number, var: str) -> bool
    
    Set the variable for the right axis in a ternary plot
    
    Args:
        plotID (Number): ternary plot window ID
        var (str): right axis variable name
    
    Returns:
        bool: operation exit status
    """
    global _ternaryPlotSetRightAxe_id
    if _ternaryPlotSetRightAxe_id is None:
        _ternaryPlotSetRightAxe_id = _client_service().register_static_object(('TechlogPlot', 'ternaryPlotSetRightAxe'))
    return _client_service().call(_ternaryPlotSetRightAxe_id, *args, **kwargs)


_vue3DCreate_id = None
def vue3DCreate(*args, **kwargs):
    """
    vue3DCreate() -> Number
    
    Create an 3D vue instance
    
    Returns:
        Number: plot ID
    """
    global _vue3DCreate_id
    if _vue3DCreate_id is None:
        _vue3DCreate_id = _client_service().register_static_object(('TechlogPlot', 'vue3DCreate'))
    return _client_service().call(_vue3DCreate_id, *args, **kwargs)


_vue3DCreateReservoir_id = None
def vue3DCreateReservoir(*args, **kwargs):
    """
    vue3DCreateReservoir(plotID: Number, point_list: float, color: int, LineThickness: int) -> bool
    
    Create 3D box to represent reservoir
    
    Args:
        plotID (Number): plot window ID
        point_list (float): list of points in format XYZ
        color (int): color
        LineThickness (int): thickness of line
    
    Returns:
        bool: operation exit status
    """
    global _vue3DCreateReservoir_id
    if _vue3DCreateReservoir_id is None:
        _vue3DCreateReservoir_id = _client_service().register_static_object(('TechlogPlot', 'vue3DCreateReservoir'))
    return _client_service().call(_vue3DCreateReservoir_id, *args, **kwargs)


_vue3DCreateWBCG_id = None
def vue3DCreateWBCG(*args, **kwargs):
    """
    vue3DCreateWBCG(plotID: Number, wellname: str, dataset: str, variables: list, orientation: Number)
    
    Create a new WBCG inside 3DVue
    
    Args:
        plotID (Number): plot window ID
        wellname (str): name of well
        dataset (str): name of dataset
        variables (list): name of variable you want to use
        orientation (Number): 0 - Top of hole, 1 - To the North, 2 - Undefined
    """
    global _vue3DCreateWBCG_id
    if _vue3DCreateWBCG_id is None:
        _vue3DCreateWBCG_id = _client_service().register_static_object(('TechlogPlot', 'vue3DCreateWBCG'))
    return _client_service().call(_vue3DCreateWBCG_id, *args, **kwargs)


_vue3DOpen_id = None
def vue3DOpen(*args, **kwargs):
    """
    vue3DOpen(n: str, f: str=None) -> Number
    
    Open an existing 3D vue
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _vue3DOpen_id
    if _vue3DOpen_id is None:
        _vue3DOpen_id = _client_service().register_static_object(('TechlogPlot', 'vue3DOpen'))
    return _client_service().call(_vue3DOpen_id, *args, **kwargs)


_vue3DRemoveReservoir_id = None
def vue3DRemoveReservoir(*args, **kwargs):
    """
    vue3DRemoveReservoir(plotID: Number) -> bool
    
    Remove reservoir representation
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _vue3DRemoveReservoir_id
    if _vue3DRemoveReservoir_id is None:
        _vue3DRemoveReservoir_id = _client_service().register_static_object(('TechlogPlot', 'vue3DRemoveReservoir'))
    return _client_service().call(_vue3DRemoveReservoir_id, *args, **kwargs)


_vue3DSave_id = None
def vue3DSave(*args, **kwargs):
    """
    vue3DSave(plotID: Number, filename: str)
    
    Save 3DVue
    
    Args:
        plotID (Number): plot window ID
        filename (str): filename (warning override automatic)
    """
    global _vue3DSave_id
    if _vue3DSave_id is None:
        _vue3DSave_id = _client_service().register_static_object(('TechlogPlot', 'vue3DSave'))
    return _client_service().call(_vue3DSave_id, *args, **kwargs)


_walkoutPlotAddZone_id = None
def walkoutPlotAddZone(*args, **kwargs):
    """
    walkoutPlotAddZone(plotID: Number, z: str) -> bool
    
    Add a zone in the selection to the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotAddZone_id
    if _walkoutPlotAddZone_id is None:
        _walkoutPlotAddZone_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotAddZone'))
    return _client_service().call(_walkoutPlotAddZone_id, *args, **kwargs)


_walkoutPlotApplyTo_id = None
def walkoutPlotApplyTo(*args, **kwargs):
    """
    walkoutPlotApplyTo(plotID: Number, ds: list) -> list
    
    Apply the walkout-plot to a data set list
    
    Args:
        plotID (Number): plot window ID
        ds (list): dataset ID (wellName.datasetName)
    
    Returns:
        list: list of plotID
    """
    global _walkoutPlotApplyTo_id
    if _walkoutPlotApplyTo_id is None:
        _walkoutPlotApplyTo_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotApplyTo'))
    return _client_service().call(_walkoutPlotApplyTo_id, *args, **kwargs)


_walkoutPlotCleanZonation_id = None
def walkoutPlotCleanZonation(*args, **kwargs):
    """
    walkoutPlotCleanZonation(plotID: Number, d: str) -> bool
    
    Remove the zonation dataset from the walkout-plot - any display of zone must previously be cancelled
    
    Args:
        plotID (Number): plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotCleanZonation_id
    if _walkoutPlotCleanZonation_id is None:
        _walkoutPlotCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotCleanZonation'))
    return _client_service().call(_walkoutPlotCleanZonation_id, *args, **kwargs)


_walkoutPlotCleanZone_id = None
def walkoutPlotCleanZone(*args, **kwargs):
    """
    walkoutPlotCleanZone(plotID: Number, z: str) -> bool
    
    Remove a zone in the selection from the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        z (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotCleanZone_id
    if _walkoutPlotCleanZone_id is None:
        _walkoutPlotCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotCleanZone'))
    return _client_service().call(_walkoutPlotCleanZone_id, *args, **kwargs)


_walkoutPlotCreate_id = None
def walkoutPlotCreate(*args, **kwargs):
    """
    walkoutPlotCreate(n: str, dip: str='', azimuth: str='', color: str='', filter: str='') -> Number
    
    Create a new walkout-plot
    
    Args:
        n (str): plot window name
        dip (str): Optional; variable name
        azimuth (str): Optional; variable name
        color (str): Optional; variable name
        filter (str): Optional; variable name
    
    Returns:
        Number: plot window ID
    """
    global _walkoutPlotCreate_id
    if _walkoutPlotCreate_id is None:
        _walkoutPlotCreate_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotCreate'))
    return _client_service().call(_walkoutPlotCreate_id, *args, **kwargs)


_walkoutPlotDeleteAzimuth_id = None
def walkoutPlotDeleteAzimuth(*args, **kwargs):
    """
    walkoutPlotDeleteAzimuth(plotID: Number) -> bool
    
    Delete the azimuth variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotDeleteAzimuth_id
    if _walkoutPlotDeleteAzimuth_id is None:
        _walkoutPlotDeleteAzimuth_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotDeleteAzimuth'))
    return _client_service().call(_walkoutPlotDeleteAzimuth_id, *args, **kwargs)


_walkoutPlotDeleteColor_id = None
def walkoutPlotDeleteColor(*args, **kwargs):
    """
    walkoutPlotDeleteColor(plotID: Number) -> bool
    
    Delete the color variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotDeleteColor_id
    if _walkoutPlotDeleteColor_id is None:
        _walkoutPlotDeleteColor_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotDeleteColor'))
    return _client_service().call(_walkoutPlotDeleteColor_id, *args, **kwargs)


_walkoutPlotDeleteDip_id = None
def walkoutPlotDeleteDip(*args, **kwargs):
    """
    walkoutPlotDeleteDip(plotID: Number) -> bool
    
    Delete the dip variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotDeleteDip_id
    if _walkoutPlotDeleteDip_id is None:
        _walkoutPlotDeleteDip_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotDeleteDip'))
    return _client_service().call(_walkoutPlotDeleteDip_id, *args, **kwargs)


_walkoutPlotDeleteFilter_id = None
def walkoutPlotDeleteFilter(*args, **kwargs):
    """
    walkoutPlotDeleteFilter(plotID: Number) -> bool
    
    Delete the filter variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotDeleteFilter_id
    if _walkoutPlotDeleteFilter_id is None:
        _walkoutPlotDeleteFilter_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotDeleteFilter'))
    return _client_service().call(_walkoutPlotDeleteFilter_id, *args, **kwargs)


_walkoutPlotDuplicate_id = None
def walkoutPlotDuplicate(*args, **kwargs):
    """
    walkoutPlotDuplicate(plotID: Number) -> Number
    
    Duplicate the walkout-plot
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        Number: new plot id or -1
    """
    global _walkoutPlotDuplicate_id
    if _walkoutPlotDuplicate_id is None:
        _walkoutPlotDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotDuplicate'))
    return _client_service().call(_walkoutPlotDuplicate_id, *args, **kwargs)


_walkoutPlotGetIdByName_id = None
def walkoutPlotGetIdByName(*args, **kwargs):
    """
    walkoutPlotGetIdByName(n: str) -> Number
    
    Find the ID of a name-known walkout-plot
    
    Args:
        n (str): plot name
    
    Returns:
        Number: plot window ID
    """
    global _walkoutPlotGetIdByName_id
    if _walkoutPlotGetIdByName_id is None:
        _walkoutPlotGetIdByName_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotGetIdByName'))
    return _client_service().call(_walkoutPlotGetIdByName_id, *args, **kwargs)


_walkoutPlotLockTitle_id = None
def walkoutPlotLockTitle(*args, **kwargs):
    """
    walkoutPlotLockTitle(plotID: Number, locked: bool) -> bool
    
    Lock title of the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        locked (bool): True if locked, False else
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotLockTitle_id
    if _walkoutPlotLockTitle_id is None:
        _walkoutPlotLockTitle_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotLockTitle'))
    return _client_service().call(_walkoutPlotLockTitle_id, *args, **kwargs)


_walkoutPlotOpen_id = None
def walkoutPlotOpen(*args, **kwargs):
    """
    walkoutPlotOpen(n: str, f: str=None) -> Number
    
    Open an existing walkout-plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _walkoutPlotOpen_id
    if _walkoutPlotOpen_id is None:
        _walkoutPlotOpen_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotOpen'))
    return _client_service().call(_walkoutPlotOpen_id, *args, **kwargs)


_walkoutPlotOpenCumulativeDipPlot_id = None
def walkoutPlotOpenCumulativeDipPlot(*args, **kwargs):
    """
    walkoutPlotOpenCumulativeDipPlot(plotID: Number) -> Number
    
    Open a cumulative dip plot
    
    Args:
        plotID (Number): walkout-plot window ID
    
    Returns:
        Number: cumulative dip-plot window ID
    """
    global _walkoutPlotOpenCumulativeDipPlot_id
    if _walkoutPlotOpenCumulativeDipPlot_id is None:
        _walkoutPlotOpenCumulativeDipPlot_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotOpenCumulativeDipPlot'))
    return _client_service().call(_walkoutPlotOpenCumulativeDipPlot_id, *args, **kwargs)


_walkoutPlotSave_id = None
def walkoutPlotSave(*args, **kwargs):
    """
    walkoutPlotSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        n (str): file name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSave_id
    if _walkoutPlotSave_id is None:
        _walkoutPlotSave_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSave'))
    return _client_service().call(_walkoutPlotSave_id, *args, **kwargs)


_walkoutPlotSelectFilter_id = None
def walkoutPlotSelectFilter(*args, **kwargs):
    """
    walkoutPlotSelectFilter(plotID: Number, FilterValues: list) -> bool
    
    Select the filter values
    
    Args:
        plotID (Number): plot window ID
        FilterValues (list): filter values
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSelectFilter_id
    if _walkoutPlotSelectFilter_id is None:
        _walkoutPlotSelectFilter_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSelectFilter'))
    return _client_service().call(_walkoutPlotSelectFilter_id, *args, **kwargs)


_walkoutPlotSetAutomaticAdjustment_id = None
def walkoutPlotSetAutomaticAdjustment(*args, **kwargs):
    """
    walkoutPlotSetAutomaticAdjustment(plotID: Number, b: bool) -> bool
    
    Set the automatic adjustment on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): True for automatic adjustment, False else
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetAutomaticAdjustment_id
    if _walkoutPlotSetAutomaticAdjustment_id is None:
        _walkoutPlotSetAutomaticAdjustment_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetAutomaticAdjustment'))
    return _client_service().call(_walkoutPlotSetAutomaticAdjustment_id, *args, **kwargs)


_walkoutPlotSetAzimuth_id = None
def walkoutPlotSetAzimuth(*args, **kwargs):
    """
    walkoutPlotSetAzimuth(plotID: Number, azimuth: str) -> bool
    
    Set the azimuth variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
        azimuth (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetAzimuth_id
    if _walkoutPlotSetAzimuth_id is None:
        _walkoutPlotSetAzimuth_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetAzimuth'))
    return _client_service().call(_walkoutPlotSetAzimuth_id, *args, **kwargs)


_walkoutPlotSetColor_id = None
def walkoutPlotSetColor(*args, **kwargs):
    """
    walkoutPlotSetColor(plotID: Number, color: str) -> bool
    
    Set the color variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
        color (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetColor_id
    if _walkoutPlotSetColor_id is None:
        _walkoutPlotSetColor_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetColor'))
    return _client_service().call(_walkoutPlotSetColor_id, *args, **kwargs)


_walkoutPlotSetColorMode_id = None
def walkoutPlotSetColorMode(*args, **kwargs):
    """
    walkoutPlotSetColorMode(plotID: Number, mode: str='BY PALETTE') -> bool
    
    Set the color mode on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; color mode {'BY PALETTE', 'BY SOURCE', 'BY ZONE'}
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetColorMode_id
    if _walkoutPlotSetColorMode_id is None:
        _walkoutPlotSetColorMode_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetColorMode'))
    return _client_service().call(_walkoutPlotSetColorMode_id, *args, **kwargs)


_walkoutPlotSetColourMode_id = None
def walkoutPlotSetColourMode(*args, **kwargs):
    """
    walkoutPlotSetColourMode(plotID: Number, mode: str='BY PALETTE') -> bool
    
    [DEPRECATED] (use walkoutPlotSetColorMode instead) Set the color mode on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; color mode {'BY PALETTE', 'BY SOURCE', 'BY ZONE'}
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetColourMode_id
    if _walkoutPlotSetColourMode_id is None:
        _walkoutPlotSetColourMode_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetColourMode'))
    return _client_service().call(_walkoutPlotSetColourMode_id, *args, **kwargs)


_walkoutPlotSetContoursMargin_id = None
def walkoutPlotSetContoursMargin(*args, **kwargs):
    """
    walkoutPlotSetContoursMargin(plotID: Number, i: Number) -> bool
    
    Set the contours margin on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        i (Number): margin in pixels
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetContoursMargin_id
    if _walkoutPlotSetContoursMargin_id is None:
        _walkoutPlotSetContoursMargin_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetContoursMargin'))
    return _client_service().call(_walkoutPlotSetContoursMargin_id, *args, **kwargs)


_walkoutPlotSetDatum_id = None
def walkoutPlotSetDatum(*args, **kwargs):
    """
    walkoutPlotSetDatum(plotID: Number, lim: bool, ymin: Number=0, ymax: Number) -> bool
    
    Change the reference limitation on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        lim (bool): 0 for 'whole datum' / 1 for 'user values'
        ymin (Number): Optional; top limitation
        ymax (Number): bottom limitation
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDatum_id
    if _walkoutPlotSetDatum_id is None:
        _walkoutPlotSetDatum_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDatum'))
    return _client_service().call(_walkoutPlotSetDatum_id, *args, **kwargs)


_walkoutPlotSetDepthGapColor_id = None
def walkoutPlotSetDepthGapColor(*args, **kwargs):
    """
    walkoutPlotSetDepthGapColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the depth gap on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDepthGapColor_id
    if _walkoutPlotSetDepthGapColor_id is None:
        _walkoutPlotSetDepthGapColor_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDepthGapColor'))
    return _client_service().call(_walkoutPlotSetDepthGapColor_id, *args, **kwargs)


_walkoutPlotSetDepthGapLength_id = None
def walkoutPlotSetDepthGapLength(*args, **kwargs):
    """
    walkoutPlotSetDepthGapLength(plotID: Number, i: Number) -> bool
    
    Set the length of the depth gap on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        i (Number): length
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDepthGapLength_id
    if _walkoutPlotSetDepthGapLength_id is None:
        _walkoutPlotSetDepthGapLength_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDepthGapLength'))
    return _client_service().call(_walkoutPlotSetDepthGapLength_id, *args, **kwargs)


_walkoutPlotSetDepthGapThickness_id = None
def walkoutPlotSetDepthGapThickness(*args, **kwargs):
    """
    walkoutPlotSetDepthGapThickness(plotID: Number, f: Number) -> bool
    
    Set the thickness of the depth gap on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        f (Number): thickness
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDepthGapThickness_id
    if _walkoutPlotSetDepthGapThickness_id is None:
        _walkoutPlotSetDepthGapThickness_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDepthGapThickness'))
    return _client_service().call(_walkoutPlotSetDepthGapThickness_id, *args, **kwargs)


_walkoutPlotSetDepthGapThreshold_id = None
def walkoutPlotSetDepthGapThreshold(*args, **kwargs):
    """
    walkoutPlotSetDepthGapThreshold(plotID: Number, f: Number) -> bool
    
    Set the threshold of the depth gap on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        f (Number): threshold value
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDepthGapThreshold_id
    if _walkoutPlotSetDepthGapThreshold_id is None:
        _walkoutPlotSetDepthGapThreshold_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDepthGapThreshold'))
    return _client_service().call(_walkoutPlotSetDepthGapThreshold_id, *args, **kwargs)


_walkoutPlotSetDepthGapVisible_id = None
def walkoutPlotSetDepthGapVisible(*args, **kwargs):
    """
    walkoutPlotSetDepthGapVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the depth gap on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): value
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDepthGapVisible_id
    if _walkoutPlotSetDepthGapVisible_id is None:
        _walkoutPlotSetDepthGapVisible_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDepthGapVisible'))
    return _client_service().call(_walkoutPlotSetDepthGapVisible_id, *args, **kwargs)


_walkoutPlotSetDip_id = None
def walkoutPlotSetDip(*args, **kwargs):
    """
    walkoutPlotSetDip(plotID: Number, dip: str) -> bool
    
    Set the dip variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
        dip (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetDip_id
    if _walkoutPlotSetDip_id is None:
        _walkoutPlotSetDip_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetDip'))
    return _client_service().call(_walkoutPlotSetDip_id, *args, **kwargs)


_walkoutPlotSetFilter_id = None
def walkoutPlotSetFilter(*args, **kwargs):
    """
    walkoutPlotSetFilter(plotID: Number, filter: str) -> bool
    
    Set the filter variable of a walkout-plot
    
    Args:
        plotID (Number): plot window ID
        filter (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetFilter_id
    if _walkoutPlotSetFilter_id is None:
        _walkoutPlotSetFilter_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetFilter'))
    return _client_service().call(_walkoutPlotSetFilter_id, *args, **kwargs)


_walkoutPlotSetMarkersColor_id = None
def walkoutPlotSetMarkersColor(*args, **kwargs):
    """
    walkoutPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the makers color on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetMarkersColor_id
    if _walkoutPlotSetMarkersColor_id is None:
        _walkoutPlotSetMarkersColor_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetMarkersColor'))
    return _client_service().call(_walkoutPlotSetMarkersColor_id, *args, **kwargs)


_walkoutPlotSetMarkersColour_id = None
def walkoutPlotSetMarkersColour(*args, **kwargs):
    """
    walkoutPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use walkoutPlotSetMarkersColor instead) Set the makers color on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetMarkersColour_id
    if _walkoutPlotSetMarkersColour_id is None:
        _walkoutPlotSetMarkersColour_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetMarkersColour'))
    return _client_service().call(_walkoutPlotSetMarkersColour_id, *args, **kwargs)


_walkoutPlotSetMarkersSize_id = None
def walkoutPlotSetMarkersSize(*args, **kwargs):
    """
    walkoutPlotSetMarkersSize(plotID: Number, s: Number) -> bool
    
    Set the makers size on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        s (Number): size
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetMarkersSize_id
    if _walkoutPlotSetMarkersSize_id is None:
        _walkoutPlotSetMarkersSize_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetMarkersSize'))
    return _client_service().call(_walkoutPlotSetMarkersSize_id, *args, **kwargs)


_walkoutPlotSetName_id = None
def walkoutPlotSetName(*args, **kwargs):
    """
    walkoutPlotSetName(plotID: Number, n: str) -> bool
    
    Change the name of the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        n (str): new plot windows name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetName_id
    if _walkoutPlotSetName_id is None:
        _walkoutPlotSetName_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetName'))
    return _client_service().call(_walkoutPlotSetName_id, *args, **kwargs)


_walkoutPlotSetReferentialBorderColor_id = None
def walkoutPlotSetReferentialBorderColor(*args, **kwargs):
    """
    walkoutPlotSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the border color of the referential on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetReferentialBorderColor_id
    if _walkoutPlotSetReferentialBorderColor_id is None:
        _walkoutPlotSetReferentialBorderColor_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetReferentialBorderColor'))
    return _client_service().call(_walkoutPlotSetReferentialBorderColor_id, *args, **kwargs)


_walkoutPlotSetReferentialColor_id = None
def walkoutPlotSetReferentialColor(*args, **kwargs):
    """
    walkoutPlotSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of the referential on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetReferentialColor_id
    if _walkoutPlotSetReferentialColor_id is None:
        _walkoutPlotSetReferentialColor_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetReferentialColor'))
    return _client_service().call(_walkoutPlotSetReferentialColor_id, *args, **kwargs)


_walkoutPlotSetReferentialFont_id = None
def walkoutPlotSetReferentialFont(*args, **kwargs):
    """
    walkoutPlotSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool=False, fontItalic: bool=False, fontUnderline: bool=False, fontStrikeOut: bool=False) -> bool
    
    Set the font of the referential on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        fontName (str): name of the family font
        fontSize (Number): size of the font
        fontBold (bool): Optional; font in bold or not
        fontItalic (bool): Optional; font in italic or not
        fontUnderline (bool): Optional; underline font or not
        fontStrikeOut (bool): Optional; strike out font or not
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetReferentialFont_id
    if _walkoutPlotSetReferentialFont_id is None:
        _walkoutPlotSetReferentialFont_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetReferentialFont'))
    return _client_service().call(_walkoutPlotSetReferentialFont_id, *args, **kwargs)


_walkoutPlotSetReferentialPosition_id = None
def walkoutPlotSetReferentialPosition(*args, **kwargs):
    """
    walkoutPlotSetReferentialPosition(plotID: Number, x: Number, y: Number) -> bool
    
    Set the position of the referential on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        x (Number): x position
        y (Number): y position
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetReferentialPosition_id
    if _walkoutPlotSetReferentialPosition_id is None:
        _walkoutPlotSetReferentialPosition_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetReferentialPosition'))
    return _client_service().call(_walkoutPlotSetReferentialPosition_id, *args, **kwargs)


_walkoutPlotSetReferentialSize_id = None
def walkoutPlotSetReferentialSize(*args, **kwargs):
    """
    walkoutPlotSetReferentialSize(plotID: Number, f: Number) -> bool
    
    Set the size of the referential on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        f (Number): size
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetReferentialSize_id
    if _walkoutPlotSetReferentialSize_id is None:
        _walkoutPlotSetReferentialSize_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetReferentialSize'))
    return _client_service().call(_walkoutPlotSetReferentialSize_id, *args, **kwargs)


_walkoutPlotSetReferentialVisible_id = None
def walkoutPlotSetReferentialVisible(*args, **kwargs):
    """
    walkoutPlotSetReferentialVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the referential on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): value
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetReferentialVisible_id
    if _walkoutPlotSetReferentialVisible_id is None:
        _walkoutPlotSetReferentialVisible_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetReferentialVisible'))
    return _client_service().call(_walkoutPlotSetReferentialVisible_id, *args, **kwargs)


_walkoutPlotSetVectorMeanByInteractionVisible_id = None
def walkoutPlotSetVectorMeanByInteractionVisible(*args, **kwargs):
    """
    walkoutPlotSetVectorMeanByInteractionVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the 'by interaction' mean vector on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): value
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetVectorMeanByInteractionVisible_id
    if _walkoutPlotSetVectorMeanByInteractionVisible_id is None:
        _walkoutPlotSetVectorMeanByInteractionVisible_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetVectorMeanByInteractionVisible'))
    return _client_service().call(_walkoutPlotSetVectorMeanByInteractionVisible_id, *args, **kwargs)


_walkoutPlotSetVectorMeanGlobalVisible_id = None
def walkoutPlotSetVectorMeanGlobalVisible(*args, **kwargs):
    """
    walkoutPlotSetVectorMeanGlobalVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the global mean vector on walkout-plot
    
    Args:
        plotID (Number): plot window ID
        b (bool): value
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetVectorMeanGlobalVisible_id
    if _walkoutPlotSetVectorMeanGlobalVisible_id is None:
        _walkoutPlotSetVectorMeanGlobalVisible_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetVectorMeanGlobalVisible'))
    return _client_service().call(_walkoutPlotSetVectorMeanGlobalVisible_id, *args, **kwargs)


_walkoutPlotSetWalkoutType_id = None
def walkoutPlotSetWalkoutType(*args, **kwargs):
    """
    walkoutPlotSetWalkoutType(plotID: Number, type: str='AZIMUTH') -> bool
    
    Set the walkout type of the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; walkout type {'AZIMUTH', 'EAST STRIKE', 'WEST STRIKE'}
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetWalkoutType_id
    if _walkoutPlotSetWalkoutType_id is None:
        _walkoutPlotSetWalkoutType_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetWalkoutType'))
    return _client_service().call(_walkoutPlotSetWalkoutType_id, *args, **kwargs)


_walkoutPlotSetZonation_id = None
def walkoutPlotSetZonation(*args, **kwargs):
    """
    walkoutPlotSetZonation(plotID: Number, d: str) -> bool
    
    Set the zonation dataset to the walkout-plot
    
    Args:
        plotID (Number): plot window ID
        d (str): zonation dataset name
    
    Returns:
        bool: operation exit status
    """
    global _walkoutPlotSetZonation_id
    if _walkoutPlotSetZonation_id is None:
        _walkoutPlotSetZonation_id = _client_service().register_static_object(('TechlogPlot', 'walkoutPlotSetZonation'))
    return _client_service().call(_walkoutPlotSetZonation_id, *args, **kwargs)


_waveformDuplicate_id = None
def waveformDuplicate(*args, **kwargs):
    """
    waveformDuplicate(plotId: Number) -> Number
    
    Duplicate an existing waveform
    
    Args:
        plotId (Number): plot ID
    
    Returns:
        Number: plot ID
    """
    global _waveformDuplicate_id
    if _waveformDuplicate_id is None:
        _waveformDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'waveformDuplicate'))
    return _client_service().call(_waveformDuplicate_id, *args, **kwargs)


_waveformOpen_id = None
def waveformOpen(*args, **kwargs):
    """
    waveformOpen(n: str, f: str=None) -> Number
    
    Open an existing waveform
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _waveformOpen_id
    if _waveformOpen_id is None:
        _waveformOpen_id = _client_service().register_static_object(('TechlogPlot', 'waveformOpen'))
    return _client_service().call(_waveformOpen_id, *args, **kwargs)


_waveformSpectrumOpen_id = None
def waveformSpectrumOpen(*args, **kwargs):
    """
    waveformSpectrumOpen(plotID: Number) -> Number
    
    Open a spectrum plot from a waveform
    
    Args:
        plotID (Number): waveform plot window ID
    
    Returns:
        Number: plot ID
    """
    global _waveformSpectrumOpen_id
    if _waveformSpectrumOpen_id is None:
        _waveformSpectrumOpen_id = _client_service().register_static_object(('TechlogPlot', 'waveformSpectrumOpen'))
    return _client_service().call(_waveformSpectrumOpen_id, *args, **kwargs)


_wellTrajectory2DAddSet_id = None
def wellTrajectory2DAddSet(*args, **kwargs):
    """
    wellTrajectory2DAddSet(plotID: Number, wName: str, setName: str) -> bool
    
    Add a dataset to an existing 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
        setName (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DAddSet_id
    if _wellTrajectory2DAddSet_id is None:
        _wellTrajectory2DAddSet_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DAddSet'))
    return _client_service().call(_wellTrajectory2DAddSet_id, *args, **kwargs)


_wellTrajectory2DAddVariable_id = None
def wellTrajectory2DAddVariable(*args, **kwargs):
    """
    wellTrajectory2DAddVariable(plotID: Number, wName: str, setName: str, vName: str) -> bool
    
    Add a variable to an existing 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
        setName (str): dataset name
        vName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DAddVariable_id
    if _wellTrajectory2DAddVariable_id is None:
        _wellTrajectory2DAddVariable_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DAddVariable'))
    return _client_service().call(_wellTrajectory2DAddVariable_id, *args, **kwargs)


_wellTrajectory2DAddWell_id = None
def wellTrajectory2DAddWell(*args, **kwargs):
    """
    wellTrajectory2DAddWell(plotID: Number, wName: str) -> bool
    
    Add a well to an existing 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DAddWell_id
    if _wellTrajectory2DAddWell_id is None:
        _wellTrajectory2DAddWell_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DAddWell'))
    return _client_service().call(_wellTrajectory2DAddWell_id, *args, **kwargs)


_wellTrajectory2DAddZone_id = None
def wellTrajectory2DAddZone(*args, **kwargs):
    """
    wellTrajectory2DAddZone(plotID: Number, zone: str) -> bool
    
    Add Zone in a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        zone (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DAddZone_id
    if _wellTrajectory2DAddZone_id is None:
        _wellTrajectory2DAddZone_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DAddZone'))
    return _client_service().call(_wellTrajectory2DAddZone_id, *args, **kwargs)


_wellTrajectory2DChangeZonation_id = None
def wellTrajectory2DChangeZonation(*args, **kwargs):
    """
    wellTrajectory2DChangeZonation(plotID: Number, setZonation: str) -> bool
    
    Set the zonation dataset of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        setZonation (str): dataset zonation name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DChangeZonation_id
    if _wellTrajectory2DChangeZonation_id is None:
        _wellTrajectory2DChangeZonation_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DChangeZonation'))
    return _client_service().call(_wellTrajectory2DChangeZonation_id, *args, **kwargs)


_wellTrajectory2DCleanZonation_id = None
def wellTrajectory2DCleanZonation(*args, **kwargs):
    """
    wellTrajectory2DCleanZonation(plotID: Number, setZonation: str) -> bool
    
    Clean the zonation dataset of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        setZonation (str): dataset zonation name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DCleanZonation_id
    if _wellTrajectory2DCleanZonation_id is None:
        _wellTrajectory2DCleanZonation_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DCleanZonation'))
    return _client_service().call(_wellTrajectory2DCleanZonation_id, *args, **kwargs)


_wellTrajectory2DCleanZone_id = None
def wellTrajectory2DCleanZone(*args, **kwargs):
    """
    wellTrajectory2DCleanZone(plotID: Number, zone: str) -> bool
    
    Clean Zone in a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        zone (str): zone name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DCleanZone_id
    if _wellTrajectory2DCleanZone_id is None:
        _wellTrajectory2DCleanZone_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DCleanZone'))
    return _client_service().call(_wellTrajectory2DCleanZone_id, *args, **kwargs)


_wellTrajectory2DCreate_id = None
def wellTrajectory2DCreate(*args, **kwargs):
    """
    wellTrajectory2DCreate(n: str, var1: str=None, var2: str=None, var3: str=None) -> Number
    
    Create a new 2D well trajectory
    
    Args:
        n (str): plot name
        var1 (str): Optional; variable 1 name
        var2 (str): Optional; variable 2 name
        var3 (str): Optional; variable 3 name
    
    Returns:
        Number: plot ID
    """
    global _wellTrajectory2DCreate_id
    if _wellTrajectory2DCreate_id is None:
        _wellTrajectory2DCreate_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DCreate'))
    return _client_service().call(_wellTrajectory2DCreate_id, *args, **kwargs)


_wellTrajectory2DDuplicate_id = None
def wellTrajectory2DDuplicate(*args, **kwargs):
    """
    wellTrajectory2DDuplicate(plotID: Number) -> bool
    
    Duplicate the 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DDuplicate_id
    if _wellTrajectory2DDuplicate_id is None:
        _wellTrajectory2DDuplicate_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DDuplicate'))
    return _client_service().call(_wellTrajectory2DDuplicate_id, *args, **kwargs)


_wellTrajectory2DOpen_id = None
def wellTrajectory2DOpen(*args, **kwargs):
    """
    wellTrajectory2DOpen(n: str, f: str=None) -> Number
    
    Open an existing 2D well trajectory
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _wellTrajectory2DOpen_id
    if _wellTrajectory2DOpen_id is None:
        _wellTrajectory2DOpen_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DOpen'))
    return _client_service().call(_wellTrajectory2DOpen_id, *args, **kwargs)


_wellTrajectory2DRemoveSet_id = None
def wellTrajectory2DRemoveSet(*args, **kwargs):
    """
    wellTrajectory2DRemoveSet(plotID: Number, setName: str) -> bool
    
    Remove a dataset from an existing 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        setName (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DRemoveSet_id
    if _wellTrajectory2DRemoveSet_id is None:
        _wellTrajectory2DRemoveSet_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DRemoveSet'))
    return _client_service().call(_wellTrajectory2DRemoveSet_id, *args, **kwargs)


_wellTrajectory2DRemoveVariable_id = None
def wellTrajectory2DRemoveVariable(*args, **kwargs):
    """
    wellTrajectory2DRemoveVariable(plotID: Number, vName: str) -> bool
    
    Remove a variable from an existing 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        vName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DRemoveVariable_id
    if _wellTrajectory2DRemoveVariable_id is None:
        _wellTrajectory2DRemoveVariable_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DRemoveVariable'))
    return _client_service().call(_wellTrajectory2DRemoveVariable_id, *args, **kwargs)


_wellTrajectory2DRemoveWell_id = None
def wellTrajectory2DRemoveWell(*args, **kwargs):
    """
    wellTrajectory2DRemoveWell(plotID: Number, wName: str) -> bool
    
    Remove a well from an existing 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DRemoveWell_id
    if _wellTrajectory2DRemoveWell_id is None:
        _wellTrajectory2DRemoveWell_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DRemoveWell'))
    return _client_service().call(_wellTrajectory2DRemoveWell_id, *args, **kwargs)


_wellTrajectory2DSave_id = None
def wellTrajectory2DSave(*args, **kwargs):
    """
    wellTrajectory2DSave(plotID: Number, n: str, f: str='') -> bool
    
    Save the 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        n (str): file name
        f (str): Optional; folder
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSave_id
    if _wellTrajectory2DSave_id is None:
        _wellTrajectory2DSave_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSave'))
    return _client_service().call(_wellTrajectory2DSave_id, *args, **kwargs)


_wellTrajectory2DSetAutoAdjust_id = None
def wellTrajectory2DSetAutoAdjust(*args, **kwargs):
    """
    wellTrajectory2DSetAutoAdjust(plotID: Number, b: bool) -> bool
    
    Set the automatic adjustment of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): automatic adjustment if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetAutoAdjust_id
    if _wellTrajectory2DSetAutoAdjust_id is None:
        _wellTrajectory2DSetAutoAdjust_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetAutoAdjust'))
    return _client_service().call(_wellTrajectory2DSetAutoAdjust_id, *args, **kwargs)


_wellTrajectory2DSetBoreholeCaliper_id = None
def wellTrajectory2DSetBoreholeCaliper(*args, **kwargs):
    """
    wellTrajectory2DSetBoreholeCaliper(plotID: Number, wellName: str, setName: str, variableName: str) -> bool
    
    set the caliper variable
    
    Args:
        plotID (Number): plot window ID
        wellName (str): well name
        setName (str): dataset name
        variableName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetBoreholeCaliper_id
    if _wellTrajectory2DSetBoreholeCaliper_id is None:
        _wellTrajectory2DSetBoreholeCaliper_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetBoreholeCaliper'))
    return _client_service().call(_wellTrajectory2DSetBoreholeCaliper_id, *args, **kwargs)


_wellTrajectory2DSetBoreholeDisplayType_id = None
def wellTrajectory2DSetBoreholeDisplayType(*args, **kwargs):
    """
    wellTrajectory2DSetBoreholeDisplayType(plotID: Number, n: str) -> bool
    
    Set the display mode for borehole radius
    
    Args:
        plotID (Number): plot window ID
        n (str): display mode for the borehole can be {"None", "Constant radius", "Caliper"}
                    "Constant radius" displays a borehole around trajectory with a constant radius
                    "Caliper" displays a borehole around the trajectoy from a caliper variableradius
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetBoreholeDisplayType_id
    if _wellTrajectory2DSetBoreholeDisplayType_id is None:
        _wellTrajectory2DSetBoreholeDisplayType_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetBoreholeDisplayType'))
    return _client_service().call(_wellTrajectory2DSetBoreholeDisplayType_id, *args, **kwargs)


_wellTrajectory2DSetBoreholeGlobalRadius_id = None
def wellTrajectory2DSetBoreholeGlobalRadius(*args, **kwargs):
    """
    wellTrajectory2DSetBoreholeGlobalRadius(plotID: Number, radius: Number) -> bool
    
    Set the global radius in Inches
    
    Args:
        plotID (Number): plot window ID
        radius (Number): global radius in Inches
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetBoreholeGlobalRadius_id
    if _wellTrajectory2DSetBoreholeGlobalRadius_id is None:
        _wellTrajectory2DSetBoreholeGlobalRadius_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetBoreholeGlobalRadius'))
    return _client_service().call(_wellTrajectory2DSetBoreholeGlobalRadius_id, *args, **kwargs)


_wellTrajectory2DSetClassificationObjectColor_id = None
def wellTrajectory2DSetClassificationObjectColor(*args, **kwargs):
    """
    wellTrajectory2DSetClassificationObjectColor(plotID: Number, numObject: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the color of one object of the classification of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        numObject (Number): index of the object in the classification
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetClassificationObjectColor_id
    if _wellTrajectory2DSetClassificationObjectColor_id is None:
        _wellTrajectory2DSetClassificationObjectColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetClassificationObjectColor'))
    return _client_service().call(_wellTrajectory2DSetClassificationObjectColor_id, *args, **kwargs)


_wellTrajectory2DSetClassificationObjectLength_id = None
def wellTrajectory2DSetClassificationObjectLength(*args, **kwargs):
    """
    wellTrajectory2DSetClassificationObjectLength(plotID: Number, numObject: Number, length: Number) -> bool
    
    Set the length of one object of the classification of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        numObject (Number): index of the object in the classification
        length (Number): length value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetClassificationObjectLength_id
    if _wellTrajectory2DSetClassificationObjectLength_id is None:
        _wellTrajectory2DSetClassificationObjectLength_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetClassificationObjectLength'))
    return _client_service().call(_wellTrajectory2DSetClassificationObjectLength_id, *args, **kwargs)


_wellTrajectory2DSetClassificationObjectVisibility_id = None
def wellTrajectory2DSetClassificationObjectVisibility(*args, **kwargs):
    """
    wellTrajectory2DSetClassificationObjectVisibility(plotID: Number, numObject: Number, b: bool) -> bool
    
    Set the visiblity of one object of the classification of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        numObject (Number): index of the object in the classification
        b (bool): object visible if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetClassificationObjectVisibility_id
    if _wellTrajectory2DSetClassificationObjectVisibility_id is None:
        _wellTrajectory2DSetClassificationObjectVisibility_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetClassificationObjectVisibility'))
    return _client_service().call(_wellTrajectory2DSetClassificationObjectVisibility_id, *args, **kwargs)


_wellTrajectory2DSetGlobalClassificationVisibility_id = None
def wellTrajectory2DSetGlobalClassificationVisibility(*args, **kwargs):
    """
    wellTrajectory2DSetGlobalClassificationVisibility(plotID: Number, b: bool) -> bool
    
    Set the global visiblity of the classification of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): all object of the classification visible if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetGlobalClassificationVisibility_id
    if _wellTrajectory2DSetGlobalClassificationVisibility_id is None:
        _wellTrajectory2DSetGlobalClassificationVisibility_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetGlobalClassificationVisibility'))
    return _client_service().call(_wellTrajectory2DSetGlobalClassificationVisibility_id, *args, **kwargs)


_wellTrajectory2DSetKeepProportion_id = None
def wellTrajectory2DSetKeepProportion(*args, **kwargs):
    """
    wellTrajectory2DSetKeepProportion(plotID: Number, b: bool) -> bool
    
    Set the space proportion of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): keep proportion if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetKeepProportion_id
    if _wellTrajectory2DSetKeepProportion_id is None:
        _wellTrajectory2DSetKeepProportion_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetKeepProportion'))
    return _client_service().call(_wellTrajectory2DSetKeepProportion_id, *args, **kwargs)


_wellTrajectory2DSetReferenceTrackFont_id = None
def wellTrajectory2DSetReferenceTrackFont(*args, **kwargs):
    """
    wellTrajectory2DSetReferenceTrackFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool=False, fontItalic: bool=False, fontUnderline: bool=False, fontStrikeOut: bool=False) -> bool
    
    Set the font of the reference track of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        fontName (str): name of the family font
        fontSize (Number): size of the font
        fontBold (bool): Optional; font in bold or not
        fontItalic (bool): Optional; font in italic or not
        fontUnderline (bool): Optional; underline font or not
        fontStrikeOut (bool): Optional; strike out font or not
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetReferenceTrackFont_id
    if _wellTrajectory2DSetReferenceTrackFont_id is None:
        _wellTrajectory2DSetReferenceTrackFont_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetReferenceTrackFont'))
    return _client_service().call(_wellTrajectory2DSetReferenceTrackFont_id, *args, **kwargs)


_wellTrajectory2DSetReferenceTrackShift_id = None
def wellTrajectory2DSetReferenceTrackShift(*args, **kwargs):
    """
    wellTrajectory2DSetReferenceTrackShift(plotID: Number, gap: Number) -> bool
    
    Set the gap of the reference track of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        gap (Number): shift value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetReferenceTrackShift_id
    if _wellTrajectory2DSetReferenceTrackShift_id is None:
        _wellTrajectory2DSetReferenceTrackShift_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetReferenceTrackShift'))
    return _client_service().call(_wellTrajectory2DSetReferenceTrackShift_id, *args, **kwargs)


_wellTrajectory2DSetReferenceTrackSize_id = None
def wellTrajectory2DSetReferenceTrackSize(*args, **kwargs):
    """
    wellTrajectory2DSetReferenceTrackSize(plotID: Number, size: Number) -> bool
    
    Set the size of the reference track of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        size (Number): size value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetReferenceTrackSize_id
    if _wellTrajectory2DSetReferenceTrackSize_id is None:
        _wellTrajectory2DSetReferenceTrackSize_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetReferenceTrackSize'))
    return _client_service().call(_wellTrajectory2DSetReferenceTrackSize_id, *args, **kwargs)


_wellTrajectory2DSetReferenceTrackSpacing_id = None
def wellTrajectory2DSetReferenceTrackSpacing(*args, **kwargs):
    """
    wellTrajectory2DSetReferenceTrackSpacing(plotID: Number, step: Number) -> bool
    
    Set the spacing of the reference track of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        step (Number): spacing value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetReferenceTrackSpacing_id
    if _wellTrajectory2DSetReferenceTrackSpacing_id is None:
        _wellTrajectory2DSetReferenceTrackSpacing_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetReferenceTrackSpacing'))
    return _client_service().call(_wellTrajectory2DSetReferenceTrackSpacing_id, *args, **kwargs)


_wellTrajectory2DSetReferenceTrackUnit_id = None
def wellTrajectory2DSetReferenceTrackUnit(*args, **kwargs):
    """
    wellTrajectory2DSetReferenceTrackUnit(plotID: Number, unit: str) -> bool
    
    Set the unit of the reference track of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        unit (str): reference track unit
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetReferenceTrackUnit_id
    if _wellTrajectory2DSetReferenceTrackUnit_id is None:
        _wellTrajectory2DSetReferenceTrackUnit_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetReferenceTrackUnit'))
    return _client_service().call(_wellTrajectory2DSetReferenceTrackUnit_id, *args, **kwargs)


_wellTrajectory2DSetReferenceTrackVisible_id = None
def wellTrajectory2DSetReferenceTrackVisible(*args, **kwargs):
    """
    wellTrajectory2DSetReferenceTrackVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the reference track of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): reference track visible if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetReferenceTrackVisible_id
    if _wellTrajectory2DSetReferenceTrackVisible_id is None:
        _wellTrajectory2DSetReferenceTrackVisible_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetReferenceTrackVisible'))
    return _client_service().call(_wellTrajectory2DSetReferenceTrackVisible_id, *args, **kwargs)


_wellTrajectory2DSetTrajectoryLineOfSection_id = None
def wellTrajectory2DSetTrajectoryLineOfSection(*args, **kwargs):
    """
    wellTrajectory2DSetTrajectoryLineOfSection(plotID: Number, f: Number) -> bool
    
    Set the line of section value of the trajectory of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        f (Number): strike angle value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetTrajectoryLineOfSection_id
    if _wellTrajectory2DSetTrajectoryLineOfSection_id is None:
        _wellTrajectory2DSetTrajectoryLineOfSection_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetTrajectoryLineOfSection'))
    return _client_service().call(_wellTrajectory2DSetTrajectoryLineOfSection_id, *args, **kwargs)


_wellTrajectory2DSetTrajectoryThickness_id = None
def wellTrajectory2DSetTrajectoryThickness(*args, **kwargs):
    """
    wellTrajectory2DSetTrajectoryThickness(plotID: Number, thickness: Number) -> bool
    
    Set the thickness of the trajectory of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        thickness (Number): thickness value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetTrajectoryThickness_id
    if _wellTrajectory2DSetTrajectoryThickness_id is None:
        _wellTrajectory2DSetTrajectoryThickness_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetTrajectoryThickness'))
    return _client_service().call(_wellTrajectory2DSetTrajectoryThickness_id, *args, **kwargs)


_wellTrajectory2DSetTrajectoryType_id = None
def wellTrajectory2DSetTrajectoryType(*args, **kwargs):
    """
    wellTrajectory2DSetTrajectoryType(plotID: Number, type: str='PROJECTED') -> bool
    
    Set the type of the trajectory of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {"TOP_VIEW", "PROJECTED", "CURTAIN_SECTION"}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetTrajectoryType_id
    if _wellTrajectory2DSetTrajectoryType_id is None:
        _wellTrajectory2DSetTrajectoryType_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetTrajectoryType'))
    return _client_service().call(_wellTrajectory2DSetTrajectoryType_id, *args, **kwargs)


_wellTrajectory2DSetTrajectoryVisible_id = None
def wellTrajectory2DSetTrajectoryVisible(*args, **kwargs):
    """
    wellTrajectory2DSetTrajectoryVisible(plotID: Number, b: bool) -> bool
    
    Set the visibility of the trajectory of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): trajectory visible if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetTrajectoryVisible_id
    if _wellTrajectory2DSetTrajectoryVisible_id is None:
        _wellTrajectory2DSetTrajectoryVisible_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetTrajectoryVisible'))
    return _client_service().call(_wellTrajectory2DSetTrajectoryVisible_id, *args, **kwargs)


_wellTrajectory2DSetVar1_id = None
def wellTrajectory2DSetVar1(*args, **kwargs):
    """
    wellTrajectory2DSetVar1(plotID: Number, wName: str, setName: str, vName: str) -> bool
    
    Set the first variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
        setName (str): dataset name
        vName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1_id
    if _wellTrajectory2DSetVar1_id is None:
        _wellTrajectory2DSetVar1_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1'))
    return _client_service().call(_wellTrajectory2DSetVar1_id, *args, **kwargs)


_wellTrajectory2DSetVar1Amplitude_id = None
def wellTrajectory2DSetVar1Amplitude(*args, **kwargs):
    """
    wellTrajectory2DSetVar1Amplitude(plotID: Number, amplitude: Number) -> bool
    
    Set the amplitude of the first variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        amplitude (Number): amplitude value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1Amplitude_id
    if _wellTrajectory2DSetVar1Amplitude_id is None:
        _wellTrajectory2DSetVar1Amplitude_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1Amplitude'))
    return _client_service().call(_wellTrajectory2DSetVar1Amplitude_id, *args, **kwargs)


_wellTrajectory2DSetVar1AreaFillColor_id = None
def wellTrajectory2DSetVar1AreaFillColor(*args, **kwargs):
    """
    wellTrajectory2DSetVar1AreaFillColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the area fill color of the first variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1AreaFillColor_id
    if _wellTrajectory2DSetVar1AreaFillColor_id is None:
        _wellTrajectory2DSetVar1AreaFillColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1AreaFillColor'))
    return _client_service().call(_wellTrajectory2DSetVar1AreaFillColor_id, *args, **kwargs)


_wellTrajectory2DSetVar1AreaFillMode_id = None
def wellTrajectory2DSetVar1AreaFillMode(*args, **kwargs):
    """
    wellTrajectory2DSetVar1AreaFillMode(plotID: Number, mode: str='COLOR') -> bool
    
    Set the area fill mode of the first variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; {'NONE', 'PALETTE', 'COLOR'}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1AreaFillMode_id
    if _wellTrajectory2DSetVar1AreaFillMode_id is None:
        _wellTrajectory2DSetVar1AreaFillMode_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1AreaFillMode'))
    return _client_service().call(_wellTrajectory2DSetVar1AreaFillMode_id, *args, **kwargs)


_wellTrajectory2DSetVar1OnTheRight_id = None
def wellTrajectory2DSetVar1OnTheRight(*args, **kwargs):
    """
    wellTrajectory2DSetVar1OnTheRight(plotID: Number, onTheRight: bool) -> bool
    
    Put the first variable of a 2D well trajectory on the right of the trajectory or not
    
    Args:
        plotID (Number): plot window ID
        onTheRight (bool): on the right if True, else on the left
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1OnTheRight_id
    if _wellTrajectory2DSetVar1OnTheRight_id is None:
        _wellTrajectory2DSetVar1OnTheRight_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1OnTheRight'))
    return _client_service().call(_wellTrajectory2DSetVar1OnTheRight_id, *args, **kwargs)


_wellTrajectory2DSetVar1Set_id = None
def wellTrajectory2DSetVar1Set(*args, **kwargs):
    """
    wellTrajectory2DSetVar1Set(plotID: Number, setName: str) -> bool
    
    Set the dataset of the first variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        setName (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1Set_id
    if _wellTrajectory2DSetVar1Set_id is None:
        _wellTrajectory2DSetVar1Set_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1Set'))
    return _client_service().call(_wellTrajectory2DSetVar1Set_id, *args, **kwargs)


_wellTrajectory2DSetVar1Shift_id = None
def wellTrajectory2DSetVar1Shift(*args, **kwargs):
    """
    wellTrajectory2DSetVar1Shift(plotID: Number, gap: Number) -> bool
    
    Set the shift of the first variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        gap (Number): shift value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar1Shift_id
    if _wellTrajectory2DSetVar1Shift_id is None:
        _wellTrajectory2DSetVar1Shift_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar1Shift'))
    return _client_service().call(_wellTrajectory2DSetVar1Shift_id, *args, **kwargs)


_wellTrajectory2DSetVar2_id = None
def wellTrajectory2DSetVar2(*args, **kwargs):
    """
    wellTrajectory2DSetVar2(plotID: Number, wName: str, setName: str, vName: str) -> bool
    
    Set the second variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
        setName (str): dataset name
        vName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2_id
    if _wellTrajectory2DSetVar2_id is None:
        _wellTrajectory2DSetVar2_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2'))
    return _client_service().call(_wellTrajectory2DSetVar2_id, *args, **kwargs)


_wellTrajectory2DSetVar2Amplitude_id = None
def wellTrajectory2DSetVar2Amplitude(*args, **kwargs):
    """
    wellTrajectory2DSetVar2Amplitude(plotID: Number, amplitude: Number) -> bool
    
    Set the amplitude of the second variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        amplitude (Number): amplitude value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2Amplitude_id
    if _wellTrajectory2DSetVar2Amplitude_id is None:
        _wellTrajectory2DSetVar2Amplitude_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2Amplitude'))
    return _client_service().call(_wellTrajectory2DSetVar2Amplitude_id, *args, **kwargs)


_wellTrajectory2DSetVar2AreaFillColor_id = None
def wellTrajectory2DSetVar2AreaFillColor(*args, **kwargs):
    """
    wellTrajectory2DSetVar2AreaFillColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the area fill color of the second variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2AreaFillColor_id
    if _wellTrajectory2DSetVar2AreaFillColor_id is None:
        _wellTrajectory2DSetVar2AreaFillColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2AreaFillColor'))
    return _client_service().call(_wellTrajectory2DSetVar2AreaFillColor_id, *args, **kwargs)


_wellTrajectory2DSetVar2AreaFillMode_id = None
def wellTrajectory2DSetVar2AreaFillMode(*args, **kwargs):
    """
    wellTrajectory2DSetVar2AreaFillMode(plotID: Number, mode: str='COLOR') -> bool
    
    Set the area fill mode of the second variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        mode (str): Optional; {'NONE', 'PALETTE', 'COLOR'}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2AreaFillMode_id
    if _wellTrajectory2DSetVar2AreaFillMode_id is None:
        _wellTrajectory2DSetVar2AreaFillMode_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2AreaFillMode'))
    return _client_service().call(_wellTrajectory2DSetVar2AreaFillMode_id, *args, **kwargs)


_wellTrajectory2DSetVar2OnTheRight_id = None
def wellTrajectory2DSetVar2OnTheRight(*args, **kwargs):
    """
    wellTrajectory2DSetVar2OnTheRight(plotID: Number, onTheRight: bool) -> bool
    
    Put the second variable of a 2D well trajectory on the right of the trajectory or not
    
    Args:
        plotID (Number): plot window ID
        onTheRight (bool): on the right if True, else on the left
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2OnTheRight_id
    if _wellTrajectory2DSetVar2OnTheRight_id is None:
        _wellTrajectory2DSetVar2OnTheRight_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2OnTheRight'))
    return _client_service().call(_wellTrajectory2DSetVar2OnTheRight_id, *args, **kwargs)


_wellTrajectory2DSetVar2Set_id = None
def wellTrajectory2DSetVar2Set(*args, **kwargs):
    """
    wellTrajectory2DSetVar2Set(plotID: Number, setName: str) -> bool
    
    Set the dataset of the second variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        setName (str): dataset name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2Set_id
    if _wellTrajectory2DSetVar2Set_id is None:
        _wellTrajectory2DSetVar2Set_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2Set'))
    return _client_service().call(_wellTrajectory2DSetVar2Set_id, *args, **kwargs)


_wellTrajectory2DSetVar2Shift_id = None
def wellTrajectory2DSetVar2Shift(*args, **kwargs):
    """
    wellTrajectory2DSetVar2Shift(plotID: Number, gap: Number) -> bool
    
    Set the shift of the second variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        gap (Number): shift value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVar2Shift_id
    if _wellTrajectory2DSetVar2Shift_id is None:
        _wellTrajectory2DSetVar2Shift_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVar2Shift'))
    return _client_service().call(_wellTrajectory2DSetVar2Shift_id, *args, **kwargs)


_wellTrajectory2DSetVarDip_id = None
def wellTrajectory2DSetVarDip(*args, **kwargs):
    """
    wellTrajectory2DSetVarDip(plotID: Number, wName: str, setName: str, vName: str) -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDip instead) Set the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
        setName (str): dataset name
        vName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDip_id
    if _wellTrajectory2DSetVarDip_id is None:
        _wellTrajectory2DSetVarDip_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDip'))
    return _client_service().call(_wellTrajectory2DSetVarDip_id, *args, **kwargs)


_wellTrajectory2DSetVarDipGlobalColor_id = None
def wellTrajectory2DSetVarDipGlobalColor(*args, **kwargs):
    """
    wellTrajectory2DSetVarDipGlobalColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDipGlobalColor instead) Set the global color of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDipGlobalColor_id
    if _wellTrajectory2DSetVarDipGlobalColor_id is None:
        _wellTrajectory2DSetVarDipGlobalColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDipGlobalColor'))
    return _client_service().call(_wellTrajectory2DSetVarDipGlobalColor_id, *args, **kwargs)


_wellTrajectory2DSetVarDipGlobalLength_id = None
def wellTrajectory2DSetVarDipGlobalLength(*args, **kwargs):
    """
    wellTrajectory2DSetVarDipGlobalLength(plotID: Number, length: Number) -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDipGlobalLength instead) Set the global length of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        length (Number): global length value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDipGlobalLength_id
    if _wellTrajectory2DSetVarDipGlobalLength_id is None:
        _wellTrajectory2DSetVarDipGlobalLength_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDipGlobalLength'))
    return _client_service().call(_wellTrajectory2DSetVarDipGlobalLength_id, *args, **kwargs)


_wellTrajectory2DSetVarDipMarker_id = None
def wellTrajectory2DSetVarDipMarker(*args, **kwargs):
    """
    wellTrajectory2DSetVarDipMarker(plotID: Number, marker: str='NONE') -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDipMarker instead) Set the marker of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        marker (str): Optional; {'NONE', 'POINTS'}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDipMarker_id
    if _wellTrajectory2DSetVarDipMarker_id is None:
        _wellTrajectory2DSetVarDipMarker_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDipMarker'))
    return _client_service().call(_wellTrajectory2DSetVarDipMarker_id, *args, **kwargs)


_wellTrajectory2DSetVarDipThickness_id = None
def wellTrajectory2DSetVarDipThickness(*args, **kwargs):
    """
    wellTrajectory2DSetVarDipThickness(plotID: Number, thickness: Number) -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDipThickness instead) Set the thickness of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        thickness (Number): thickness value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDipThickness_id
    if _wellTrajectory2DSetVarDipThickness_id is None:
        _wellTrajectory2DSetVarDipThickness_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDipThickness'))
    return _client_service().call(_wellTrajectory2DSetVarDipThickness_id, *args, **kwargs)


_wellTrajectory2DSetVarDipUseDipColor_id = None
def wellTrajectory2DSetVarDipUseDipColor(*args, **kwargs):
    """
    wellTrajectory2DSetVarDipUseDipColor(plotID: Number, b: bool) -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDipUseDipColor instead) Set the use dip color of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): use dip color if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDipUseDipColor_id
    if _wellTrajectory2DSetVarDipUseDipColor_id is None:
        _wellTrajectory2DSetVarDipUseDipColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDipUseDipColor'))
    return _client_service().call(_wellTrajectory2DSetVarDipUseDipColor_id, *args, **kwargs)


_wellTrajectory2DSetVarDipUseDipLength_id = None
def wellTrajectory2DSetVarDipUseDipLength(*args, **kwargs):
    """
    wellTrajectory2DSetVarDipUseDipLength(plotID: Number, b: bool) -> bool
    
    [DEPRECATED] (use wellTrajectory2DSetVariableDipUseDipLength instead) Set the use dip length of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): use dip length if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVarDipUseDipLength_id
    if _wellTrajectory2DSetVarDipUseDipLength_id is None:
        _wellTrajectory2DSetVarDipUseDipLength_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVarDipUseDipLength'))
    return _client_service().call(_wellTrajectory2DSetVarDipUseDipLength_id, *args, **kwargs)


_wellTrajectory2DSetVariableDip_id = None
def wellTrajectory2DSetVariableDip(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDip(plotID: Number, wName: str, setName: str, vName: str) -> bool
    
    Set the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        wName (str): well name
        setName (str): dataset name
        vName (str): variable name
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDip_id
    if _wellTrajectory2DSetVariableDip_id is None:
        _wellTrajectory2DSetVariableDip_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDip'))
    return _client_service().call(_wellTrajectory2DSetVariableDip_id, *args, **kwargs)


_wellTrajectory2DSetVariableDipGlobalColor_id = None
def wellTrajectory2DSetVariableDipGlobalColor(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDipGlobalColor(plotID: Number, r: Number, g: Number, b: Number) -> bool
    
    Set the global color of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        r (Number): red
        g (Number): green
        b (Number): blue
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDipGlobalColor_id
    if _wellTrajectory2DSetVariableDipGlobalColor_id is None:
        _wellTrajectory2DSetVariableDipGlobalColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDipGlobalColor'))
    return _client_service().call(_wellTrajectory2DSetVariableDipGlobalColor_id, *args, **kwargs)


_wellTrajectory2DSetVariableDipGlobalLength_id = None
def wellTrajectory2DSetVariableDipGlobalLength(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDipGlobalLength(plotID: Number, length: Number) -> bool
    
    Set the global length of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        length (Number): global length value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDipGlobalLength_id
    if _wellTrajectory2DSetVariableDipGlobalLength_id is None:
        _wellTrajectory2DSetVariableDipGlobalLength_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDipGlobalLength'))
    return _client_service().call(_wellTrajectory2DSetVariableDipGlobalLength_id, *args, **kwargs)


_wellTrajectory2DSetVariableDipMarker_id = None
def wellTrajectory2DSetVariableDipMarker(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDipMarker(plotID: Number, marker: str='NONE') -> bool
    
    Set the marker of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        marker (str): Optional; {'NONE', 'POINTS'}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDipMarker_id
    if _wellTrajectory2DSetVariableDipMarker_id is None:
        _wellTrajectory2DSetVariableDipMarker_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDipMarker'))
    return _client_service().call(_wellTrajectory2DSetVariableDipMarker_id, *args, **kwargs)


_wellTrajectory2DSetVariableDipThickness_id = None
def wellTrajectory2DSetVariableDipThickness(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDipThickness(plotID: Number, thickness: Number) -> bool
    
    Set the thickness of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        thickness (Number): thickness value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDipThickness_id
    if _wellTrajectory2DSetVariableDipThickness_id is None:
        _wellTrajectory2DSetVariableDipThickness_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDipThickness'))
    return _client_service().call(_wellTrajectory2DSetVariableDipThickness_id, *args, **kwargs)


_wellTrajectory2DSetVariableDipUseDipColor_id = None
def wellTrajectory2DSetVariableDipUseDipColor(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDipUseDipColor(plotID: Number, b: bool) -> bool
    
    Set the use dip color of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): use dip color if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDipUseDipColor_id
    if _wellTrajectory2DSetVariableDipUseDipColor_id is None:
        _wellTrajectory2DSetVariableDipUseDipColor_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDipUseDipColor'))
    return _client_service().call(_wellTrajectory2DSetVariableDipUseDipColor_id, *args, **kwargs)


_wellTrajectory2DSetVariableDipUseDipLength_id = None
def wellTrajectory2DSetVariableDipUseDipLength(*args, **kwargs):
    """
    wellTrajectory2DSetVariableDipUseDipLength(plotID: Number, b: bool) -> bool
    
    Set the use dip length of the dip variable of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): use dip length if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetVariableDipUseDipLength_id
    if _wellTrajectory2DSetVariableDipUseDipLength_id is None:
        _wellTrajectory2DSetVariableDipUseDipLength_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetVariableDipUseDipLength'))
    return _client_service().call(_wellTrajectory2DSetVariableDipUseDipLength_id, *args, **kwargs)


_wellTrajectory2DSetXAxisInverse_id = None
def wellTrajectory2DSetXAxisInverse(*args, **kwargs):
    """
    wellTrajectory2DSetXAxisInverse(plotID: Number, b: bool) -> bool
    
    Set the x axis inverse of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        b (bool): inversed x axis if True
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetXAxisInverse_id
    if _wellTrajectory2DSetXAxisInverse_id is None:
        _wellTrajectory2DSetXAxisInverse_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetXAxisInverse'))
    return _client_service().call(_wellTrajectory2DSetXAxisInverse_id, *args, **kwargs)


_wellTrajectory2DSetXAxisType_id = None
def wellTrajectory2DSetXAxisType(*args, **kwargs):
    """
    wellTrajectory2DSetXAxisType(plotID: Number, type: str='VAR') -> bool
    
    Set the x axis type of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'USER', 'VAR'}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetXAxisType_id
    if _wellTrajectory2DSetXAxisType_id is None:
        _wellTrajectory2DSetXAxisType_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetXAxisType'))
    return _client_service().call(_wellTrajectory2DSetXAxisType_id, *args, **kwargs)


_wellTrajectory2DSetXAxisUserLimits_id = None
def wellTrajectory2DSetXAxisUserLimits(*args, **kwargs):
    """
    wellTrajectory2DSetXAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set the x axis user limits of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        min (Number): min user
        max (Number): max user
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetXAxisUserLimits_id
    if _wellTrajectory2DSetXAxisUserLimits_id is None:
        _wellTrajectory2DSetXAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetXAxisUserLimits'))
    return _client_service().call(_wellTrajectory2DSetXAxisUserLimits_id, *args, **kwargs)


_wellTrajectory2DSetXYUnit_id = None
def wellTrajectory2DSetXYUnit(*args, **kwargs):
    """
    wellTrajectory2DSetXYUnit(plotID: Number, unit: str) -> bool
    
    Set the unit of x axis and y axis of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        unit (str): unit value
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetXYUnit_id
    if _wellTrajectory2DSetXYUnit_id is None:
        _wellTrajectory2DSetXYUnit_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetXYUnit'))
    return _client_service().call(_wellTrajectory2DSetXYUnit_id, *args, **kwargs)


_wellTrajectory2DSetYAxisType_id = None
def wellTrajectory2DSetYAxisType(*args, **kwargs):
    """
    wellTrajectory2DSetYAxisType(plotID: Number, type: str='VAR') -> bool
    
    Set the y axis type of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        type (str): Optional; {'USER', 'VAR'}
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetYAxisType_id
    if _wellTrajectory2DSetYAxisType_id is None:
        _wellTrajectory2DSetYAxisType_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetYAxisType'))
    return _client_service().call(_wellTrajectory2DSetYAxisType_id, *args, **kwargs)


_wellTrajectory2DSetYAxisUserLimits_id = None
def wellTrajectory2DSetYAxisUserLimits(*args, **kwargs):
    """
    wellTrajectory2DSetYAxisUserLimits(plotID: Number, min: Number, max: Number) -> bool
    
    Set the y axis user limits of a 2D well trajectory
    
    Args:
        plotID (Number): plot window ID
        min (Number): min user
        max (Number): max user
    
    Returns:
        bool: operation exit status
    """
    global _wellTrajectory2DSetYAxisUserLimits_id
    if _wellTrajectory2DSetYAxisUserLimits_id is None:
        _wellTrajectory2DSetYAxisUserLimits_id = _client_service().register_static_object(('TechlogPlot', 'wellTrajectory2DSetYAxisUserLimits'))
    return _client_service().call(_wellTrajectory2DSetYAxisUserLimits_id, *args, **kwargs)


_wellboreCentricGridOpen_id = None
def wellboreCentricGridOpen(*args, **kwargs):
    """
    wellboreCentricGridOpen(n: str, f: str=None) -> Number
    
    Open an existing wellbore centric grid plot
    
    Args:
        n (str): plot name
        f (str): Optional; folder
    
    Returns:
        Number: plot ID
    """
    global _wellboreCentricGridOpen_id
    if _wellboreCentricGridOpen_id is None:
        _wellboreCentricGridOpen_id = _client_service().register_static_object(('TechlogPlot', 'wellboreCentricGridOpen'))
    return _client_service().call(_wellboreCentricGridOpen_id, *args, **kwargs)


