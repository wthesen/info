TechlogAcoustic
TechlogAcoustic.checkToolName(well: str, dataset: str, waveform: str)→ bool
Check tool name for variable

Parameters
:
well (str) – well name

dataset (str) – dataset name

waveform (str) – name of the input waveform variable

Returns
:
Tool name (‘other’ if non accepted)

Return type
:
bool

TechlogAcoustic.computeDDBHC(dt: list, size: Number)→ Number
DDBH computation

Parameters
:
dt (list) – slownesses array

size (Number) – total number of slownesses

Returns
:
the average of slownesses

Return type
:
Number

TechlogAcoustic.computeITT(size: Number, md: list, dt: list, isDown: list)→ Number
Integrated Transit Time integration

Parameters
:
size (Number) – the number of depths

md (list) – the measured depths array

dt (list) – the slownesses array

isDown (list) – the integration direction

Returns
:
Integrated Transit Time array

Return type
:
Number

TechlogAcoustic.computePoissonRatio(dtc: Number, dts: Number)→ Number
Poisson’s ratio computation

Parameters
:
dtc (Number) – compressional slowness

dts (Number) – shear slowness

Returns
:
the resultant Poisson’s ratio

Return type
:
Number

TechlogAcoustic.computeVPVS(dtc: Number, dts: Number)→ Number
VPVS computation

Parameters
:
dtc (Number) – compressional slowness

dts (Number) – shear slowness

Returns
:
the resultant vpvs

Return type
:
Number

TechlogAcoustic.removeDCoffset(well: str, dataset: str, varInName: str, varOutName: str, databaseType: str='_this', dcStart: Number, dcStop: Number)→ bool
Remove DC offset If dcStart=dcStop=0 or if the user doesn’t input dcStart and dcStop then the optimized DC offset algorithm is used, otherwise we use the fixed window algorithm.

Parameters
:
well (str) – well name

dataset (str) – dataset name

varInName (str) – name of the input waveform variable

varOutName (str) – name of the output waveform variable

databaseType (str) – Optional; {‘project’ for the project database, ‘import’ for the import buffer area, ‘export’, ‘trash’ for the trash area}

dcStart (Number) – filter start index (< nsamples and >= 0)(optional)

dcStop (Number) – filter end (< nsamples and >= 0)(optional)

Returns
:
True if succeed

Return type
:
bool

TechlogAcoustic.waveformNormalization(well: str, datasetSource: str, variableName: str, gainName: str, normalizationType: str = 'product', variableNameOut: str = '_this', datasetDestination: str = '_this', copyVariable: bool = False, databaseType: str = '_this', inputNoValueFilter: bool = False)→ bool
Multiply two variables

Parameters
:
well (str) – name of the source well

datasetSource (str) – name of the source dataset

variableName (str) – name of the input variable

gainName (str) – name of the variable which contain the gain

normalizationType (str) – Optional; gain multiplication method {product, dB}

variableNameOut (str) – Optional; name of the output variable

datasetDestination (str) – Optional; name of the dataset of destination

copyVariable (bool) – Optional; True if we want to copy variable and gain, else False

databaseType (str) – Optional; {‘project’ for the project database, ‘import’ for the import buffer area, ‘export’, ‘trash’ for the trash area}

inputNoValueFilter (bool) – Optional; true if we want to filtrate NO_VALUE else set to no

Returns
:
True if the gain was successfully created, else False

Return type
:
bool

TechlogAcoustic.waveformPack(well: str, dataset: str, variables: list, outputVariable: str, deleteInputs: bool = False)→ bool
Pack Waveform

Parameters
:
well (str) – well name

dataset (str) – dataset name

variables (list) – variables inputs list

outputVariable (str) – output variable name

deleteInputs (bool) – Optional; delete input variables

Returns
:
True if succeed

Return type
:
bool

TechlogAcoustic.waveformUnpack(well: str, dataset: str, waveform: str, renameFlag: bool = True, suffix: str = '_RCV', group: str = '')→ bool
Unpack Waveform

Parameters
:
well (str) – well name

dataset (str) – dataset name

waveform (str) – waveform name to unpack

renameFlag (bool) – Optional; flag to output the new name

suffix (str) – Optional; suffix of the outputs

group (str) – Optional; group of the outputs

Returns
:
True if succeed

Return type
:
bool

TechlogCasedHole
TechlogCasedHole.TPHL_Computation(x: Number, nbInputs: Number, inputdata: list, nbParams: Number, paramData: list, nbOutputs: Number)→ list
Computes the TPHL outputs

Parameters
:
x (Number) – can be set to 0.0

nbInputs (Number) – number of input curves

inputdata (list) – list of input data

nbParams (Number) – number of parameters

paramData (list) – list of parameter values

nbOutputs (Number) – number of output curves

Returns
:
result: list of output data

Return type
:
list

TechlogCasedHole.TPHL_setAbsentValue(absentValue: Number)→ bool
Call SetAbsentValue() of TPHL DLL

Parameters
:
absentValue (Number) – the absent value

Returns
:
True

Return type
:
bool
TechlogCPI
TechlogCPI.concatenation(toolName: str, well: str, dataset: str, padAAzimuthList: list, relativeBearingList: list, caliperList: list, padsList: list, flapslist: list, tabsInterlaced: bool, reversedArrays: bool, flapFirst: bool, reverseOddPads: bool, inversePadArraysOrder: bool, inverseFlapArraysOrder: bool, offsetOddPads: Number, offsetOddButtons: Number, reverseImage: bool, bitSize: Number, holeCoverage: Number, resolution: Number, angularMode: bool, orientationMode: int, varOutName: Number, swingArmCorrection: bool = False, angularOffset: int = 0)→ bool
Concatenate and orientate several pads/flaps arrays into one single image array

Parameters
:
toolName (str) – name of the tool (currently supported: FMI_16, FMI_8, OBMI, DUALOBMI, FMI_SLIM_8, FMI_SLIM_4, LWD - ROTARY IMAGERS, STAR, STAR_WIDE, EARTH_IMAGER, XRMI, EMI, CBIL, UBI, FMS_4, FMS_8, CMI_16, CMI_8, HMI, OMRI, GEOXPLORER)

well (str) – name of the well

dataset (str) – name of the dataset

padAAzimuthList (list) – list of name of the pad A azimuth variable(s)

relativeBearingList (list) – list of name of the relative bearing variable(s)

caliperList (list) – list of name of the caliper variable(s)

padsList (list) – list of name of the pads variable(s)

flapslist (list) – list of name of the flaps variable(s)

tabsInterlaced (bool) – do the arrays composing pads and flaps need to be interlaced

reversedArrays (bool) – do the arrays need to be reversed before concatenation

flapFirst (bool) – do the flaps need to be placed before pads

reverseOddPads (bool) – do the arrays of odd pads need to be reversed (upside-down pads)

inversePadArraysOrder (bool) – deinterlace traversal order (false means 1-2, true means 2-1)

inverseFlapArraysOrder (bool) – deinterlace traversal order (false means 1-2, true means 2-1)

offsetOddPads (Number) – [in] vertical offset of the odd pads

offsetOddButtons (Number) – [in] vertical offset of the odd buttons

reverseImage (bool) – do the final image need to be reversed

bitSize (Number) – [in] size of the drill bit (will be used instead of calipers if greater than 0)

holeCoverage (Number) – [%] percentage of hole coverage (will be used instead of calipers if greater than 0)

resolution (Number) – [px] desired horizontal resolution of the output (automatic minimal resolution will be computed if value is less or equal than 0)

angularMode (bool) – if true, arrays will be concatenated using the angular mode (unconstant width of the pads)

orientationMode (int) – 0 = North ; 1 = Top of the hole ; 2 = TOH to North ; 3 = North to TOH; 4 = None

varOutName (Number) – name to be given to the output variable

swingArmCorrection (bool) – Optional; set to true will perform swing arm correction

angularOffset (int) – Optional; Constant angular offset for the image

Returns
:
True or False

Return type
:
bool
TechlogDatabase
Utilities
TechlogDatabase.appDb()→ Any
Return the application database

Returns
:
pointer to database

Return type
:
Any

TechlogDatabase.buildNumber()→ str
Return a string corresponding to the Techlog build number

Returns
:
build number

Return type
:
str

TechlogDatabase.currentChange(databaseName: str)→ bool
Change the current database

Parameters
:
databaseName (str) – database name: {‘project’ for the project database, ‘import’ for the import buffer area, ‘export’, ‘trash’ for the trash area}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.currentDb()→ str
Gets the current database type

Returns
:
{‘project’ for the project database, ‘import’ for the import buffer area, ‘export’, ‘trash’ for the trash area}

Return type
:
str

TechlogDatabase.dataEditorOpen(variableList: list)→ int
Open a new empty data editor

Parameters
:
variableList (list) – variable list [(wellName.datasetName.variableName), (…)]

Returns
:
window ID

Return type
:
int

TechlogDatabase.dirCompany()→ str
Return the company folder

Returns
:
company folder

Return type
:
str

TechlogDatabase.dirCompanyChange(companyFolderPath: str)→ bool
Change the company dir

Parameters
:
companyFolderPath (str) – new company folder name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.dirProject()→ str
Return the project folder

Returns
:
project folder

Return type
:
str

TechlogDatabase.dirProjectList()→ list
Return the project folder list

Returns
:
project folder list

Return type
:
list

TechlogDatabase.dirTechlog()→ str
Return the Techlog folder

Returns
:
Techlog folder

Return type
:
str

TechlogDatabase.dirUser()→ str
Return the user folder

Returns
:
user folder

Return type
:
str

TechlogDatabase.dirUserChange(userFolderPath: str)→ bool
Change the user dir

Parameters
:
userFolderPath (str) – new user folder path

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.expandEnvironmentStringsTL(sourceString: str)→ str
Replace %environment key% with its value

Parameters
:
sourceString (str) – environment key

Returns
:
value in the environment

Return type
:
str

TechlogDatabase.forbiddenCharacterList(objectType: int = 0)→ list
Return the list of forbidden characters in Techlog object names.

Parameters
:
objectType (int) – Optional; {0=data(well, dataset, variable or group), 1=project, 2=databaseObject}

Returns
:
list of forbidden characters

Return type
:
list

TechlogDatabase.getProject()→ str
Return the project entry point file (.tlp)

Returns
:
project path

Return type
:
str

TechlogDatabase.isNameValid(name: str, objectType: int = 0)→ bool
Check if a name is valid for a given type of object.

Parameters
:
name (str) – name to check

objectType (int) – Optional; {0=data(well, dataset, variable or group), 1=project, 2=databaseObject}

Returns
:
name validity

Return type
:
bool

TechlogDatabase.logFileName()
Gets the output file name where Techlog stores the current session’s logs

TechlogDatabase.openProject(project: str, silent: bool = False)→ bool
Close the current project and open the new project

Parameters
:
project (str) – project entry point file (.tlp)

silent (bool) – Optional; display pop-up or not

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.projectMode()→ str
Get the project mode

Returns
:
current project mode

Return type
:
str

TechlogDatabase.projectName()
Get the project name

Returns
:
current project’s name.

Return type
:
str

Raises
:
None – if no open project

TechlogDatabase.pythonExePath()→ str
Return the path of the python of Techlog

Returns
:
Python executable path

Return type
:
str

TechlogDatabase.replaceSpecialCharactersInName(name: str, objectType: int = 0, replaceWith: str = '_')→ str
Replace forbidden characters in an object name by specified character.

Parameters
:
name (str) – name to check

objectType (int) – Optional; {0=data(well, dataset, variable or group), 1=project, 2=databaseObject}

replaceWith (str) – Optional; character to replace forbidden characters

Returns
:
valid object name

Return type
:
str

TechlogDatabase.silentModeChange(silent: bool = False)→ bool
Set the silent mode, meaning no pop up

Parameters
:
silent (bool) – Optional; status of the silent mode

Returns
:
return previous mode

Return type
:
bool

TechlogDatabase.version()→ str
Return a string corresponding to the Techlog version

Returns
:
version number

Return type
:
str

TechlogDatabase.versionTest(majorVersion: int, minorVersion: int, tagVersion: str)→ bool
Compare current version to parameters one

Parameters
:
majorVersion (int) – major version

minorVersion (int) – minor version

tagVersion (str) – tag (‘Alpha’, ‘Beta’, ‘RC’)

Returns
:
True if the current version is more recent

Return type
:
bool

TechlogDatabase.workspacesClose()→ bool
Close all workspaces with no widget

Returns
:
operation exit status

Return type
:
bool

Wells
TechlogDatabase.wellColor(wellName: str)→ str
Gets the color of the specified well

Parameters
:
wellName (str) – well name

Returns
:
the color of the well under the format #XXYYZZ

Return type
:
str

TechlogDatabase.wellColorChange(wellName: str, color: str)→ bool
Set the color of the specified well

Parameters
:
wellName (str) – well name

color (str) – the color of the well under the format #XXYYZZ

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellCopy(w: str, databaseSource: str, databaseDestination: str)→ bool
Copy a well from a database to another one. Copy will fail if destination already exists

Parameters
:
w (str) – well name

databaseSource (str) – database source = {‘import’, ‘export’, ‘trash’}

databaseDestination (str) – database destination = {‘import’, ‘export’, ‘trash’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellCreate(wellName: str, refresh: bool = False)→ bool
Creates a well

Parameters
:
wellName (str) – well name

refresh (bool) – Optional; refresh the project browser

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellDelete(wellName: str, refresh: bool = False)→ bool
Delete a well from the project

Parameters
:
wellName (str) – well name

refresh (bool) – Optional; refresh the project browser

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellDuplicate(wellName: str, newWellName: str)→ bool
Duplicate the well

Parameters
:
wellName (str) – well name

newWellName (str) – new well name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellExists(wellName: str)→ bool
Check if the well exists in the project (case insensitive)

Parameters
:
wellName (str) – well name

Returns
:
well exists in the project

Return type
:
bool

TechlogDatabase.wellGroup(wellName: str)→ list
Get the specified well group.

Parameters
:
wellName (str) – well name

Returns
:
group list

Return type
:
list

TechlogDatabase.wellGroupChange(wellName: str, groupName: list)→ bool
Create/change the specified well group.

Parameters
:
wellName (str) – well name

groupName (list) – group list

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellHistory(wellName: str)→ list
Return a list of HistoryItem (the well history)

Parameters
:
wellName (str) – well name

Returns
:
HistoryItem

Return type
:
list

TechlogDatabase.wellHistoryAdd(wellName: str, description: str, date: str)→ bool
Add a new history item to the well history

Parameters
:
wellName (str) – well name

description (str) – description

date (str) – date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellHistoryClear(wellName: str)→ bool
Clear the history of the well

Parameters
:
wellName (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellHistoryDelete(wellName: str, startDate: str, endDate: str, content: str, include: bool)→ bool
Delete history items between start and end date from the well history

Parameters
:
wellName (str) – well name

startDate (str) – start date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

endDate (str) – end date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

content (str) – content to filter on

include (bool) – [=True] include [False] or exclude the item based on the content, within the date range

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellIsInFilter(wellName: str)→ bool
Check whether a well is in filter

Parameters
:
wellName (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellList()→ list
Return the well list

Returns
:
The list of the wells present in the ‘filtered’ project

Return type
:
list

TechlogDatabase.wellMove(w: str, databaseSource: str, databaseDestination: str)→ bool
Move a well from a database to another one

Parameters
:
w (str) – well name

databaseSource (str) – database source = {‘import’, ‘export’, ‘trash’}

databaseDestination (str) – database destination = {‘import’, ‘export’, ‘trash’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellPropertyChange(wellName: str, propertyName: str, propertyValue: str, propertyUnit: str = '', propertyDescription: str = '')→ bool
Create/change the specified well property

Parameters
:
wellName (str) – well name

propertyName (str) – property name

propertyValue (str) – property value

propertyUnit (str) – Optional; property unit

propertyDescription (str) – Optional; property description

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellPropertyDelete(wellName: str, propertyName: str)→ bool
Delete a well property

Parameters
:
wellName (str) – well name

propertyName (str) – property name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellPropertyDescription(wellName: str, propertyName: str)→ str
Return the well property description

Parameters
:
wellName (str) – well name

propertyName (str) – property name

Returns
:
property description

Return type
:
str

TechlogDatabase.wellPropertyList(wellName: str)→ list
Return the list of well property names

Parameters
:
wellName (str) – well name

Returns
:
property names list

Return type
:
list

TechlogDatabase.wellPropertyListChange(wellName: str, propertyNameList: list, propertyValueList: list, propertyUnitList: list, propertyDescriptionList: list)→ bool
Create/change the specified well property list

Parameters
:
wellName (str) – well name

propertyNameList (list) – property name list

propertyValueList (list) – property value list

propertyUnitList (list) – property unit list

propertyDescriptionList (list) – property description list

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.wellPropertyUnit(wellName: str, propertyName: str)→ str
Return the well property unit

Parameters
:
wellName (str) – well name

propertyName (str) – property name

Returns
:
property unit

Return type
:
str

TechlogDatabase.wellPropertyValue(wellName: str, propertyName: str)→ str
Return the well property value

Parameters
:
wellName (str) – well name

propertyName (str) – property name

Returns
:
property value

Return type
:
str

TechlogDatabase.wellRename(wellName: str, newWellName: str)→ bool
Rename the well

Parameters
:
wellName (str) – well name

newWellName (str) – new well name

Returns
:
operation exit status

Return type
:
bool

Datasets
TechlogDatabase.datasetCompare(wellName1: str, datasetName1: str, wellName2: str, datasetName2: str)→ bool
Compare two datasets

Parameters
:
wellName1 (str) – first well name

datasetName1 (str) – first dataset name

wellName2 (str) – second well name

datasetName2 (str) – second dataset name

Returns
:
True if the two datasets are identical, otherwise False

Return type
:
bool

TechlogDatabase.datasetCopy(w: str, d: str, databaseSource: str, databaseDestination: str)→ bool
Copy a dataset from a database to another one

Parameters
:
w (str) – well name

d (str) – dataset name

databaseSource (str) – database source = {‘project’, ‘import’, ‘export’, ‘trash’}

databaseDestination (str) – database destination = {‘project’, ‘import’, ‘export’, ‘trash’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetCreate(wellName: str, datasetName: str, variableName: str = '', familyName: str = '', unit: str = '', values: list = '', type: str = 'double')→ bool
Create a new dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – Optional; reference name

familyName (str) – Optional; family name of reference. Set it to None to use family assignment rules

unit (str) – Optional; unit name of reference

values (list) – Optional; values table for reference

type (str) – Optional; reference format: {‘float’, ‘double’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetDelete(wellName: str, datasetName: str, refresh: bool = False)→ bool
Delete a dataset from the project

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

refresh (bool) – Optional; refresh the project browser

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetDirectLoad(dbOrig: str, wellOrig: str, dsOrig: str, dbImport: str, wellImport: str, dsImport: str, mergeMode: str, createNewDataset: bool = True, mergeVarSuffix: str = None)→ bool
Merge two datasets together

Parameters
:
dbOrig (str) – database original (‘project’, ‘import’, ‘export’, ‘trash’)

wellOrig (str) – well original

dsOrig (str) – ds original

dbImport (str) – database imported (‘project’, ‘import’, ‘export’, ‘trash’)

wellImport (str) – well imported

dsImport (str) – ds imported

mergeMode (str) – ‘AUTO’, ‘LINEAR’, ‘ORIGINAL’, ‘NEW’, ‘NEW_VERSIONNED’, ‘NEW_SUFFIXED’

createNewDataset (bool) – Optional;

newDatasetName (str) – Optional;

mergeVarSuffix (str) – Optional;

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetDuplicate(wellName: str, datasetName: str, newWellName: str, newDatasetName: str)
Duplicate a dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

newWellName (str) – new well name

newDatasetName (str) – new dataset name

Returns
:
False if error str: new dataset name if renamed

Return type
:
bool

TechlogDatabase.datasetExists(wellName: str, datasetName: str)→ bool
Check if the dataset exists in the project (case insensitive)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
dataset exists in the project

Return type
:
bool

TechlogDatabase.datasetExpand(wellName: str, datasetName: str, rowCount: int, rowIndex: int)→ bool
Expand a dataset and insert some rows at one reference index

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

rowCount (int) – / referenceValues [list]: number of rows to insert or the list of reference values

rowIndex (int) – index where the rows are going to be inserted

Returns
:
the result

Return type
:
bool

TechlogDatabase.datasetGroup(wellName: str, datasetName: str)→ list
Get the specified dataset group.

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
group list

Return type
:
list

TechlogDatabase.datasetGroupChange(wellName: str, datasetName: str, groupName: list)→ bool
Create/change the specified dataset group.

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

groupName (list) – group list

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetHistory(wellName: str, datasetName: str)→ list
Return a list of HistoryItem (the dataset history)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
HistoryItem

Return type
:
list

TechlogDatabase.datasetHistoryAdd(wellName: str, datasetName: str, description: str, date: str)→ bool
Add a new history item to the dataset history

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

description (str) – description

date (str) – date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetHistoryClear(wellName: str, datasetName: str)→ bool
Clear the history of the dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetHistoryDelete(wellName: str, datasetName: str, startDate: str, endDate: str, content: str, include: bool)→ bool
Delete history items between start and end date from the dataset history

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

startDate (str) – start date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

endDate (str) – end date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

content (str) – content to filter on

include (bool) – [=True] include [False] or exclude the item based on the content, within the date range

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetInformation(wellName: str, datasetName: str, dateType: str)
Return dataset creation / modification date

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

dateType (str) – date type: {‘creation’, ‘modification’}

Returns
:
False if error str: the date

Return type
:
bool

TechlogDatabase.datasetIsInFilter(fileName: str)→ bool
Check a dataset is in filter

Parameters
:
fileName (str) – name (= wellname_datasetname)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetList(wellName: str)→ list
Return the list of datasets

Parameters
:
wellName (str) – well name

Returns
:
the list of the datasets present in the ‘filtered’ project

Return type
:
list

TechlogDatabase.datasetMerge(wellName: str, dataForm: list, newDatasetName: str, referenceSamplingRate: float, referenceUnitName: str, referenceFamilyName: str)→ bool
Merge dataset from list to one single dataset

Parameters
:
wellName (str) – well name

dataForm (list) – data : data form - [‘datasetName.variableName.outputVariableName’, …] the output variable name is optional

newDatasetName (str) – new dataset name

referenceSamplingRate (float) – reference sampling rate

referenceUnitName (str) – reference unit name

referenceFamilyName (str) – reference family name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetMove(w: str, d: str, databaseSource: str, databaseDestination: str)→ bool
Move a dataset from a database to another one

Parameters
:
w (str) – well name

d (str) – dataset name

databaseSource (str) – database source = {‘project’, ‘import’, ‘export’, ‘trash’}

databaseDestination (str) – database destination = {‘project’, ‘import’, ‘export’, ‘trash’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetNewName(wellName: str, datasetName: str)→ str
Give a new and unused name for a dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
new dataset name

Return type
:
str

TechlogDatabase.datasetPropertyChange(wellName: str, datasetName: str, propertyName: str, propertyValue: str, propertyUnit: str = '', propertyDescription: str = '')→ bool
Create/change the specified dataset property

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

propertyName (str) – property name

propertyValue (str) – property value

propertyUnit (str) – Optional; property unit

propertyDescription (str) – Optional; property description

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetPropertyDelete(wellName: str, datasetName: str, propertyName: str)→ bool
Delete a dataset property

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

propertyName (str) – property name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetPropertyDescription(wellName: str, datasetName: str, propertyName: str)→ str
Return the dataset property description

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

propertyName (str) – property name

Returns
:
property description

Return type
:
str

TechlogDatabase.datasetPropertyList(wellName: str, datasetName: str)→ list
Return the list of dataset property names

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
property names list

Return type
:
list

TechlogDatabase.datasetPropertyUnit(wellName: str, datasetName: str, propertyName: str)→ str
Return the dataset property unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

propertyName (str) – property name

Returns
:
property unit

Return type
:
str

TechlogDatabase.datasetPropertyValue(wellName: str, datasetName: str, propertyName: str)→ str
Return the dataset property value

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

propertyName (str) – property name

Returns
:
property value

Return type
:
str

TechlogDatabase.datasetReduce(wellName: str, datasetName: str, rowCount: int, rowIndex: int)→ bool
Reduce a dataset and delete some rows at one reference index

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

rowCount (int) – number of rows to delete

rowIndex (int) – index where the rows are going to be deleted

Returns
:
the result

Return type
:
bool

TechlogDatabase.datasetReferenceChange(wellName: str, datasetName: str, variableName: str, createNewDataset: bool = True, showTheWarning: bool = True)→ bool
Change the dataset reference

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

createNewDataset (bool) – Optional; create a new dataset

showTheWarning (bool) – Optional; show the warnings

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetRename(wellName: str, datasetName: str, newDatasetName: str)→ bool
Rename an existing dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

newDatasetName (str) – new dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetSamplingRate(wellName: str, datasetName: str, readInFile: bool = False, unit: str = None)→ float
Return the sampling rate of a dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

readInFile (bool) – Optional; read in the file

unit (str) – Optional; unit

Returns
:
dataset sampling rate

Return type
:
float

TechlogDatabase.datasetSize(wellName: str, datasetName: str)→ int
Return the dataset size

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
dataset size

Return type
:
int

TechlogDatabase.datasetSort(wellName: str, datasetName: str, epsilon: bool = True, askUser: bool = False)→ bool
Sort the dataset by its reference

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

epsilon (bool) – Optional; Add an epsilon for duplicated depths

askUser (bool) – Optional; Ask the user for confirmation

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetType(wellName: str, datasetName: str)→ str
Return the dataset type

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
dataset type{‘continuous’, ‘interval’, ‘point data’,
’checkshots’, ‘time-depth’, ‘trajectory’, ‘PQC’, ‘Quanti’, ‘images’, ‘borehole images’, ‘shift’, ‘multi-well’, ‘contact’, ‘variable group properties’, ‘wavelet’, ‘annotation’, ‘well schematics’, ‘tool string’, ‘symbols’, ‘markers’}

Return type
:
str

TechlogDatabase.datasetTypeChange(wellName: str, datasetName: str, datasetType: str)→ bool
Change the dataset type ID

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

datasetType (str) – dataset type : {‘continuous’, ‘interval’, ‘point data’, ‘checkshots’, ‘time-depth’, ‘trajectory’, ‘PQC’, ‘Quanti’, ‘images’, ‘borehole images’, ‘shift’, ‘multi-well’, ‘contact’, ‘variable group properties’, ‘wavelet’, ‘annotation’, ‘well schematics’, ‘tool string’, ‘symbols’, ‘markers’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetTypeID(wellName: str, datasetName: str)→ int
Return the dataset type ID

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
dataset type ID{0=’continuous’, 1=’interval’, 2=’point data’,
3=’checkshots’, 4=’time-depth’, 5=’trajectory’, 6=’PQC’, 7=’Quanti’, 8=’images’, 9=’borehole images’, 10=’shift’, 11=’multi-well’, 12=’contact’, 13=’variable group properties’, 14=’wavelet’, 15=’annotation’, 16=’well schematics’, 17=’tool string’, 18=’symbols’, 19=’markers’}

Return type
:
int

TechlogDatabase.datasetTypeIDChange(wellName: str, datasetName: str, typeID: int)→ bool
Change the dataset type ID

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

typeID (int) – dataset type ID : {0=’continuous’, 1=’interval’, 2=’point data’, 3=’checkshots’, 4=’time-depth’, 5=’trajectory’, 6=’PQC’, 7=’Quanti’, 8=’images’, 9=’borehole images’, 10=’shift’, 11=’multi-well’, 12=’contact’, 13=’variable group properties’, 14=’wavelet’, 15=’annotation’, 16=’well schematics’, 17=’tool string’, 18=’symbols’, 19=’markers’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.datasetZoneDetail(wellName: str, datasetZonation: str, zoneName: str, zoneFamily: str = 'Zone Name')→ list
Return values of limits of the zonation

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

zoneName (str) – zone name

zoneFamily (str) – Optional; zonation family

Returns
:
element list

Return type
:
list

TechlogDatabase.datasetZoneIndice(wellName: str, datasetName: str, datasetZonation: str, zoneName: str, zonationFamily: str = 'Zone Name', indexesInFloat: bool = False)→ list
Return limits of the zonation

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

datasetZonation (str) – dataset zonation

zoneName (str) – zone name

zonationFamily (str) – Optional; zonation family

indexesInFloat (bool) – Optional; Computes the indexes as if the dataset reference is in floating precision

Returns
:
element list : {beginIndex, endIndex [, beginIndex, endIndex]*} in the dataset

Return type
:
list

TechlogDatabase.mergeDatasets(well: str, datasetList: list, outputDatasetName: str, outputRefName: str, outputRefUnit: str, outputRefFamily: str, step: float, top: float, bottom: float)→ bool
Combine and resize datasets

Parameters
:
well (str) – well name

datasetList (list) – input dataset list

outputDatasetName (str) – output dataset name

outputRefName (str) – output reference name

outputRefUnit (str) – output reference unit

outputRefFamily (str) – output reference family

step (float) – step increment value

top (float) – top depth value

bottom (float) – bottom depth value

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.mergeDateTimeDatasets(well: str, datasetList: list, outputDatasetName: str, outputRefName: str, step: float, stepUnit: str, top: str, bottom: str)→ bool
Combine and resize date time datasets

Parameters
:
well (str) – well name

datasetList (list) – input dataset list

outputDatasetName (str) – output dataset name

outputRefName (str) – output reference name

step (float) – step increment value

stepUnit (str) – step unit

top (str) – start value

bottom (str) – end value

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.referenceName(wellName: str, datasetName: str)→ str
Return the reference name

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
reference name

Return type
:
str

TechlogDatabase.referenceValue(wellName: str, datasetName: str, referenceLine: int)→ float
Return the reference value for one reference line

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

referenceLine (int) – reference line

Returns
:
reference value at the requested line

Return type
:
float

Variables
TechlogDatabase.variableAliasChange(variableName: str, aliasName: str, familyName: str, categoryName: str)→ bool
Set the alias family for a variable

Parameters
:
variableName (str) – variable short name

aliasName (str) – alias name

familyName (str) – family name

categoryName (str) – category: {‘user’, ‘project’, ‘company’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableCompare(wellName1: str, datasetName1: str, variableName1: str, wellName2: str, datasetName2: str, variableName2: str, checkUnit: bool = False, checkFamily: bool = False, precision: float = '-9999', absolutePrecision: float = '0')→ bool
Compare the two variables If precision is set, returns True if the abs(difference) is less than std::abs(precision) * (std::abs(x) + std::abs(y)) By default, precision 10e-14 is used If absolutePrecision is set, returns True if the abs(difference) is less than absolutePrecision

Parameters
:
wellName1 (str) – first well name

datasetName1 (str) – first dataset name

variableName1 (str) – first variable name

wellName2 (str) – second well name

datasetName2 (str) – second dataset name

variableName2 (str) – second variable name

checkUnit (bool) – Optional; compare variables units

checkFamily (bool) – Optional; compare variables families

precision (float) – Optional; comparison precision

absolutePrecision (float) – Optional; absolute comparison precision

Returns
:
True if variables are identical

Return type
:
bool

TechlogDatabase.variableCopy(wellName: str, datasetSourceName: str, variableName: str, datasetDestinationName: str, newVariableName: str = 'variableName', interpolationMethod: str = 'automatic', databaseSource: str = 'project', databaseDestination: str = 'project', winSize: float = -1, extrapolate: bool = False, overwrite: bool = False)→ bool
Return the variable data interpolated

Parameters
:
wellName (str) – well name

datasetSourceName (str) – dataset source name

variableName (str) – variable name

datasetDestinationName (str) – dataset destination name

newVariableName (str) – Optional; new variable name

interpolationMethod (str) – Optional; interpolation method: {‘automatic’, ‘zonation’, ‘shift’, ‘linear’, ‘anti-aliasing’, ‘angle’}

databaseSource (str) – Optional; database source: {‘project’, ‘import’, ‘export’, ‘trash’}

databaseDestination (str) – Optional; database destination: {‘project’, ‘import’, ‘export’, ‘trash’}

winSize (float) – Optional; windows size for some interpolation methods

extrapolate (bool) – Optional; enable extrapolation

overwrite (bool) – Optional; overwrite wellName.datasetDestinationName.newVariableName if it already exists

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableCreate(wellName: str, datasetName: str, variableName: str, dim: int)→ bool
Create an empty variable or array (not reference)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

dim (int) – dimension

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableDelete(wellName: str, datasetName: str, variableName: str, refresh: bool = True)→ bool
Delete a variable

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

refresh (bool) – Optional; refresh the project browser

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableDescription(wellName: str, datasetName: str, variableName: str)→ str
Return the variable description

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable description

Return type
:
str

TechlogDatabase.variableDescriptionChange(wellName: str, datasetName: str, variableName: str, description: str)→ bool
Change the variable description

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

description (str) – description

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableDisplayUnit(wellName: str, datasetName: str, variableName: str)→ str
Return the variable display unit in the current unit system

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable unit

Return type
:
str

TechlogDatabase.variableDuplicate(wellName: str, datasetName: str, variableName: str, variableNameDest: str)→ bool
Duplicate an existing variable

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

variableNameDest (str) – duplicated variable name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableExists(wellName: str, datasetName: str, variableName: str)→ bool
Check if the variable exists in the project (case sensitive)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable exists in the project

Return type
:
bool

TechlogDatabase.variableFamily(wellName: str, datasetName: str, variableName: str)→ str
Return the variable family

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable family

Return type
:
str

TechlogDatabase.variableFamilyChange(wellName: str, datasetName: str, variableName: str, familyName: str)→ bool
Change the variable family

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

familyName (str) – family

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableFloatToDoubleConvert(wellName: str, datasetName: str, variableName: str, precision: int = 8)→ bool
Change the variable data format to be in double precision. Can be only applied on numerical variable (float)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

precision (int) – Optional; [Deprecated] precision of the double values

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableGroup(wellName: str, datasetName: str, variableName: str)→ list
Get the specified variable group.

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
group list

Return type
:
list

TechlogDatabase.variableGroupChange(wellName: str, datasetName: str, variableName: str, groupName: list)→ bool
Create/change the specified variable group.

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

groupName (list) – group list

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableHistory(wellName: str, datasetName: str, variableName: str)→ list
Return a list of HistoryItem (the variable history)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
HistoryItem

Return type
:
list

TechlogDatabase.variableHistoryAdd(wellName: str, datasetName: str, variableName: str, description: str, date: str)→ bool
Add a new history item to the variable history

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

description (str) – description

date (str) – date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableHistoryClear(wellName: str, datasetName: str, variableName: str)→ bool
Clear the history of the variable

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableHistoryDelete(wellName: str, datasetName: str, variableName: str, startDate: str, endDate: str, content: str, include: bool)→ bool
Delete history items between start and end date from the variable history

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

startDate (str) – start date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

endDate (str) – end date (yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss.zzz)

content (str) – content to filter on

include (bool) – [=True] include [False] or exclude the item based on the content, within the date range

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableInformation(wellName: str, datasetName: str, variableName: str, informationType: str)→ str
Return a variable information

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

informationType (str) – information type : {‘DataFormat’, ‘SourceFilename’, ‘NumberOfSamples’, ‘LastUpdate’, ‘NumberOfMissingValues’, ‘MinValue’, ‘MaxValue’, ‘Mean’, ‘StandardDeviation’, ‘TopIndex’, ‘BottomIndex’, ‘Quantil5’, ‘Quantil10’, ‘Quantil25’, ‘Quantil50’, ‘Quantil75’, ‘Quantil90’, ‘Quantil95’}

Returns
:
variable information

Return type
:
str

TechlogDatabase.variableIsInFilter(fileName: str, variableName: str)→ bool
Check a variable is in filter

Parameters
:
fileName (str) – file name (= wellname_datasetname)

variableName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableIsIncreasing(wellName: str, datasetName: str, variableName: str)→ bool
Check if the variable is increasing

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableList(wellName: str, datasetName: str, useFilter: bool = True)→ list
The list of the variables present in the ‘filtered’ project

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

useFilter (bool) – Optional; use the current project browser filter

Returns
:
variable list

Return type
:
list

TechlogDatabase.variableListByAlias(wellName: str, datasetName: str, aliasName: str = None)→ list
The list of the variables filtered by alias name present in the ‘filtered’ project

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

aliasName (str) – Optional; alias name

Returns
:
variable list

Return type
:
list

TechlogDatabase.variableListByFamily(wellName: str, datasetName: str, familyName: str = None)→ list
The list of the variables filtered by family name present in the ‘filtered’ project

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

familyName (str) – Optional; family name

Returns
:
variable list

Return type
:
list

TechlogDatabase.variableListCopy(wellName: str, datasetSourceName: str, variableList: list, datasetDestinationName: str, interpolationMethod: str = 'automatic', databaseSource: str = 'project', databaseDestination: str = 'project', winSize: float = -1, extrapolate: bool = False)→ bool
Return the variable data interpolated

Parameters
:
wellName (str) – well name

datasetSourceName (str) – dataset source name

variableList (list) – variable name list

datasetDestinationName (str) – dataset destination name

interpolationMethod (str) – Optional; interpolation method: {‘automatic’, ‘zonation’, ‘shift’, ‘linear’, ‘anti-aliasing’, ‘angle’}

databaseSource (str) – Optional; database source: {‘project’, ‘import’, ‘export’, ‘trash’}

databaseDestination (str) – Optional; database destination: {‘project’, ‘import’, ‘export’, ‘trash’}

winSize (float) – Optional; windows size for some interpolation methods

extrapolate (bool) – Optional; enable extrapolation

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableListDelete(wellName: str, datasetName: str, variableList: list)→ list
Delete list of variable

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableList (list) – variable list

Returns
:
variables deleted

Return type
:
list

TechlogDatabase.variableLoad(wellName: str, datasetName: str, variableName: str, type: str = 'auto')→ list
Return the variable data

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

type (str) – Optional; [Deprecated] ‘auto’ or ‘float’ (get float data, even for double)

Returns
:
variable data

Return type
:
list

TechlogDatabase.variableLoadColumn(well: str, dataset: str, variable: str, index: int)→ list
Return a column of variable data

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

index (int) – column index

Returns
:
column data

Return type
:
list

TechlogDatabase.variableLoadFrom(wellName: str, datasetName: str, variableName: str, datasetDestinationName: str, interpolationMethod: str = 'auto', windowSize: float = -1)→ list
Return the variable data interpolated

Parameters
:
wellName (str) – well name

datasetName (str) – dataset source name

variableName (str) – variable name

datasetDestinationName (str) – dataset destination name

interpolationMethod (str) – Optional; interpolation method: {‘auto’, ‘zonation’, ‘shift’, ‘linear’, ‘anti-aliasing’, ‘angle’, ‘extrapolation’}

windowSize (float) – Optional; the window size that is used for the interpolation}

Returns
:
variable data

Return type
:
list

TechlogDatabase.variableMeasurement(wellName: str, datasetName: str, variableName: str)→ str
Return the variable measurement

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable measurement

Return type
:
str

TechlogDatabase.variableMerge(wellName: str, datasetName: str, listVariableToMerge: list, newNameMergedVariable: str)→ bool
Merge variables from list to one single variable

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

listVariableToMerge (list) – list of the variable to merge

newNameMergedVariable (str) – new name of the merged variable

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableNameWithoutVersion(variableName: str)→ str
Return the unversionned name of the variable

Parameters
:
variableName (str) – variable name

Returns
:
unversionned name of the variable

Return type
:
str

TechlogDatabase.variablePalette(wellName: str, datasetName: str, variableName: str)→ str
Return the variable palette

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable palette

Return type
:
str

TechlogDatabase.variablePaletteChange(wellName: str, datasetName: str, variableName: str, palette: str)→ bool
Change the variable palette

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

palette (str) – palette

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variablePropertyChange(wellName: str, datasetName: str, variableName: str, propertyName: str, propertyValue: str, propertyUnit: str = '', propertyDescription: str = '')→ bool
Create/change the specified variable property. If property name is Palette, then the variable palette is going to be changed

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

propertyName (str) – property name

propertyValue (str) – property value

propertyUnit (str) – Optional; property unit

propertyDescription (str) – Optional; property description

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variablePropertyDelete(wellName: str, datasetName: str, variableName: str, propertyName: str)→ bool
Delete a variable property

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

propertyName (str) – property name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variablePropertyDescription(wellName: str, datasetName: str, variableName: str, propertyName: str)→ str
Return the variable property description

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

propertyName (str) – property name

Returns
:
property description

Return type
:
str

TechlogDatabase.variablePropertyList(wellName: str, datasetName: str, variableName: str)→ list
Return the list of variable property names

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
property names list

Return type
:
list

TechlogDatabase.variablePropertyUnit(wellName: str, datasetName: str, variableName: str, propertyName: str)→ str
Return the variable property unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

propertyName (str) – property name

Returns
:
property unit

Return type
:
str

TechlogDatabase.variablePropertyValue(wellName: str, datasetName: str, variableName: str, propertyName: str)→ str
Return the variable property value If the property name is Palette, the variable palette is returned

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

propertyName (str) – property name

Returns
:
property value

Return type
:
str

TechlogDatabase.variableRename(wellName: str, datsetName: str, variableName: str, newVariableName: str)→ bool
Modify the variable name

Parameters
:
wellName (str) – well name

datsetName (str) – dataset name

variableName (str) – variable name

newVariableName (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableResampling(wellName: str, datasetSourceName: str, variableName: str, datasetDestinationName: str, newVariableName: str='variableName', resamplingMethod: str='automatic', winsize: float)→ bool
Resampling of the variable

Parameters
:
wellName (str) – well name

datasetSourceName (str) – dataset source name

variableName (str) – variable name

datasetDestinationName (str) – dataset destination name

newVariableName (str) – Optional; new variable name

resamplingMethod (str) – Optional; resampling method : {‘automatic’, ‘zonation’, ‘shift’, ‘linear’, ‘anti-aliasing’, ‘linear arithmetic’, ‘linear geometric’, ‘linear harmonic’, ‘triangular arithmetic’, ‘triangular geometric’, ‘triangular harmonic’, ‘gaussian arithmetic’, ‘gaussian geometric’, ‘gaussian harmonic’, ‘fft’, ‘gaussian convolution’, ‘linear angle’}

winsize (float) – size of the window

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableSave(wellName: str, datasetName: str, variableName: str, familyName: str, unit: str, values: list, showthewarning: bool = False, type: str = 'auto')→ bool
Save the variable into the database Data is saved as float, or string if it contains non float, or in double if type is specified as double

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

familyName (str) – family name. Set it to None to use family assignment rules

unit (str) – unit name

values (list) – values list

showthewarning (bool) – Optional; DEPRECATED: must be False

type (str) – Optional; ‘auto’, ‘float’, ‘string’ or ‘double’

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableSaveColumn(well: str, dataset: str, variable: str, index: int, list: list)→ bool
Save a column of existing variable data

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

index (int) – column index

list (list) – column data

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableSecondaryUnit(wellName: str, datasetName: str, variableName: str)→ str
Return the variable secondary unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable secondary unit

Return type
:
str

TechlogDatabase.variableSecondaryUnitChange(wellName: str, datasetName: str, variableName: str, unit: str)→ bool
Change the variable secondary unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

unit (str) – unit

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableSourceFilenameChange(wellName: str, datasetName: str, variableName: str, fileName: str)→ bool
Modify the variable source file name

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

fileName (str) – file name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableStorageType(wellName: str, datasetName: str, variableName: str)→ str
Return the variable storage type

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable type

Return type
:
str

TechlogDatabase.variableTempSave(wellName: str, datasetName: str, variableName: str, familyName: str, unit: str, values: list)→ bool
Save as a temporary variable (for internal use only)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

familyName (str) – family name. Set it to None to use family assignment rules

unit (str) – unit name

values (list) – values list

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableType(wellName: str, datasetName: str, variableName: str)→ str
Return the variable type

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable type{‘Continu’, ‘Annotation’, ‘CoreImage’, ‘BlockedCurve’, ‘Plug’, ‘BoreholeImage’,
’UnknownArray’, ‘HistogramArray’, ‘CrossPlotArray’, ‘Seismic’, ‘CumulArray’, ‘ArrayMatrix’, ‘RichText’, ‘TopBottomCurve’, ‘Dip’, ‘CasingShoe’, ‘DateTime’, ‘AcousticWaveformArray’, ‘AcousticMatrixArray’, ‘ColorVariable’, ‘SquareVariable’, ‘FractureVariable’, ‘TraceArray’}

Return type
:
str

TechlogDatabase.variableTypeChange(wellName: str, datasetName: str, variableName: str, variabletype: str)→ bool
Change the variable type

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

variabletype (str) – variable type : {‘Continu’, ‘Annotation’, ‘CoreImage’, ‘BlockedCurve’, ‘Plug’, ‘BoreholeImage’, ‘UnknownArray’, ‘HistogramArray’, ‘CrossPlotArray’, ‘Seismic’, ‘CumulArray’, ‘ArrayMatrix’, ‘RichText’, ‘TopBottomCurve’, ‘Dip’, ‘CasingShoe’, ‘DateTime’, ‘AcousticWaveformArray’, ‘AcousticMatrixArray’, ‘ColorVariable’, ‘SquareVariable’, ‘FractureVariable’, ‘TraceArray’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableTypeID(wellName: str, datasetName: str, variableName: str)→ int
Return the variable type ID

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable type ID{0=’continuous’, 1=’text’, 2=’image’,
3=’blocked and centred’, 4=’point data’, 5=’borehole image’, 6=’unknown array’, 7=’histogram array’, 8=’cross-plot array’, 9=’seismic array’, 10=’cumulated array’, 11=’matrix array’, 12=’rich text’, 13=’blocked curve’, 14=’dip’, 15=’casing shoe’, 16=’date time’, 17=’acoustic array’, 18=’colour variable’}

Return type
:
int

TechlogDatabase.variableTypeIDChange(wellName: str, datasetName: str, variableName: str, typeID: int)→ bool
Change the variable type ID

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

typeID (int) – variable type ID : {0=’continuous’, 1=’text’, 2=’image’, 3=’blocked and centered’, 4=’point data’, 5=’borehole image’, 6=’unknown array’, 7=’histogram array’, 8=’cross-plot array’, 9=’seismic array’, 10=’cumulated array’, 11=’matrix array’, 12=’rich text’, 13=’blocked curve’, 14=’dip’, 15=’casing shoe’, 16=’date time’, 17=’acoustic waveform array’, 18=’acoustic matrix array’, 19=’colour variable’, 20=’square variable’, 21=’fracture variable’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableUnit(wellName: str, datasetName: str, variableName: str)→ str
Return the variable unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

Returns
:
variable unit

Return type
:
str

TechlogDatabase.variableUnitChange(wellName: str, datasetName: str, variableName: str, unit: str)→ bool
Change the variable unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

unit (str) – unit

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableUnitConvert(wellName: str, datasetName: str, variableName: str, unit: str)→ bool
Convert the variable to the specified unit

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – variable name

unit (str) – unit

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableValuesChange(w: str, d: str, v: str, d: dict)→ bool
Modify the variable values

Parameters
:
w (str) – well name

d (dict) – dataset name

v (str) – variable name

d – values dictionary

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.variableVersion(variableName: str)→ int
Return the version of the variable

Parameters
:
variableName (str) – variable name

Returns
:
version of the variable

Return type
:
int

Arrays
TechlogDatabase.arrayColumnNameList(wellName: str, datasetName: str, arrayName: str)→ list
Return the name list of the array columns

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

arrayName (str) – array name

Returns
:
column name list

Return type
:
list

TechlogDatabase.arrayColumnNameListChange(wellName: str, datasetName: str, arrayName: str, columnNameList: list)→ bool
Modify the column name of the array

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

arrayName (str) – array name

columnNameList (list) – column name list

Returns
:
result

Return type
:
bool

TechlogDatabase.arrayColumnSize(wellName: str, datasetName: str, arrayName: str)→ int
Return the column count of the array

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

arrayName (str) – array name

Returns
:
column count

Return type
:
int

TechlogDatabase.arrayInterpolate(w: str, d: str, a: str)→ bool
Fill the gaps of an array using linear interpolation

Parameters
:
w (str) – well name

d (str) – dataset name

a (str) – array name

Returns
:
result

Return type
:
bool

TechlogDatabase.arrayInterpolateHorizontally(w: str, d: str, a: str, suffix: str = '_R')→ bool
Fill the gaps of an array using linear interpolation horizontally

Parameters
:
w (str) – well name

d (str) – dataset name

a (str) – array name

suffix (str) – Optional; suffix to add to the output

Returns
:
Operation exit status

Return type
:
bool

TechlogDatabase.arraySave(wellName: str, datasetName: str, variableName: str, values: list, columnsize: int = 0, showthewarning: bool = False, family: str = '', unit: str = '', type: str = 'auto')→ bool
Save the array into the database

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

variableName (str) – array name

values (list) – values list column oriented

columnsize (int) – Optional; unused

showthewarning (bool) – Optional; DEPRECATED: must be False

family (str) – Optional; family name. Set it to None to use family assignment rules

unit (str) – Optional; unit name

type (str) – Optional; ‘auto’, ‘float’

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.arraySplit(wellName: str, datasetName: str, arrayName: str, synchronous: bool = True)→ bool
Split the array accordingly to the size of the last dimension

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

arrayName (str) – array name

synchronous (bool) – Optional; synchronous

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.arraySplitFinished()→ bool
Split the array accordingly to the size of the last dimension

Returns
:
return True is all arraySplit tasks are finished

Return type
:
bool

TechlogDatabase.arrayTempSave(wellName: str, datasetName: str, arrayName: str, values: list, size: int, nbcolumn: int)→ bool
Save as a temporary array (for internal use only)

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

arrayName (str) – array name

values (list) – values list

size (int) – array size

nbcolumn (int) – column count

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.shiftArrayByConst(w: str, d: str, a: str, suffix: str, gap_in: float = 0)→ bool
Apply speed correction to list of arrays

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

a (str) – name of the array

suffix (str) – extension for the new array name

gap_in (float) – Optional; constant shift in inches

Returns
:
True or False

Return type
:
bool

Resampling
TechlogDatabase.resampling(sourceReference: list, destinationReference: list, sourceValues: list, resamplingMethod: str, sourceReferenceUnit: str = '', destinationReferenceUnit: str = '', sourceValueUnit: str = '', winsize: float = -1)→ list
Resampling done on lists, the method must be given

Parameters
:
sourceReference (list) – reference list of the source

destinationReference (list) – reference list of the destination

sourceValues (list) – values list (source)

resamplingMethod (str) – resampling method : {‘zonation’, ‘shift’, ‘linear’, ‘lanti-aliasing’, ‘angle’, ‘linear arithmetic’, ‘linear geometric’, ‘linear harmonic’, ‘triangular arithmetic’, ‘triangular geometric’, ‘triangular harmonic’, ‘gaussian arithmetic’, ‘gaussian geometric’, ‘gaussian harmonic’, ‘fft’, ‘gaussian convolution’, ‘linear angle’}

sourceReferenceUnit (str) – Optional; unit of the reference of the source

destinationReferenceUnit (str) – Optional; unit of the reference at destination

sourceValueUnit (str) – Optional; to give when the chosen interpolation method is ‘linear angle’

winsize (float) – Optional; size of the window

Returns
:
list of destination values

Return type
:
list

TechlogDatabase.resamplingMethodDefault()→ int
Get the default resampling method

Returns
:
method position in the method list (see resamplingMethodList function)

Return type
:
int

TechlogDatabase.resamplingMethodDefaultChange(method: int)→ bool
Set the default resampling method

Parameters
:
method (int) – resampling method position in the method list (see resamplingMethodList function)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.resamplingMethodList()→ list
Get the resampling method list

Returns
:
resampling method list

Return type
:
list

Aliases
TechlogDatabase.aliasChangeFamily(level: str, alias: str, family: str)→ bool
Change the family of an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’}

alias (str) – alias name

family (str) – New family name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasChangeName(level: str, alias: str, name: str)→ bool
Rename an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’}

alias (str) – Old alias name

name (str) – New alias name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasChangeVariables(level: str, alias: str, variables: list)→ bool
Change the variables list of an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’}

alias (str) – alias name

variables (list) – New list of variables

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasCreate(level: str, alias: str, familyName: str = '', variables: list = [])→ bool
Create an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’}

alias (str) – alias name

familyName (str) – Optional; family name

variables (list) – Optional; list of variables

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasDelete(level: str, alias: str)→ bool
Delete an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’}

alias (str) – alias name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasExists(level: str, alias: str)→ bool
Check if an alias exists

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

alias (str) – alias name

Returns
:
True if alias exists

Return type
:
bool

TechlogDatabase.aliasExport(level: str, file: str)→ bool
Export aliases to a CSV file

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

file (str) – csv destination file

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasFamily(level: str, alias: str)→ str
Return the family of an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

alias (str) – alias name

Returns
:
family name

Return type
:
str

TechlogDatabase.aliasImport(level: str, file: str)→ bool
Import aliases from a CSV file

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’}

file (str) – csv source file

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasIsActivated(level: str)→ bool
Is an alias level is activated or not

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

Returns
:
status of level

Return type
:
bool

TechlogDatabase.aliasList(level: str)→ list
Return the list of aliases

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

Returns
:
the list of aliases

Return type
:
list

TechlogDatabase.aliasSetActivated(level: str, activated: bool)→ bool
Activated or deactivated an alias level

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

activated (bool) – True for activate level

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.aliasVariables(level: str, alias: str)→ list
Return the list of variables of an alias

Parameters
:
level (str) – level = {‘user’, ‘project’, ‘company’, ‘techlog’}

alias (str) – alias name

Returns
:
the list of variables

Return type
:
list

Export
TechlogDatabase.exportBufferClose()
Close the export buffer

TechlogDatabase.exportBufferOpen()
Open the export buffer

TechlogDatabase.exportDatabaseObjects(dirpath: str, Object, Object)→ bool
Export database objects from the project

Parameters
:
dirpath (str) – directory path where the output files are going to be created

Object (None) – list[list]: object name list

Object – type[str]: object type

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.exportFile(filepath: str, wellOrDatasetList: list, format: str, useOwn: bool = False, useFilter: bool = False, topBottomList: list = [])→ bool
Export file from the project

Parameters
:
filepath (str) – complete path of the output file (except for XML format where it is the directory where the output files will be created)

wellOrDatasetList (list) – well name list, or well.dataset to export

format (str) – export format: {‘DLIS’, ‘LAS 3.0’, ‘LAS 2.0’, ‘TECHCSV’, ‘DAT’, ‘XML’}

useOwn (bool) – Optional; use the original well name from well property

useFilter (bool) – Optional; Take the filter on the project project browser into consideration

topBottomList (list) – Optional; list of couple [top, bottom]

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.exportMissingValue()→ str
Return the null value export

Returns
:
current export null value

Return type
:
str

TechlogDatabase.exportMissingValueChange(value: str)→ bool
Set the export project null value

Parameters
:
value (str) – new value to set

Returns
:
operation exit status

Return type
:
bool

Import
TechlogDatabase.importAsciiArrayPolicy()→ str
Return the current ASCII array creation policy

Returns
:
current ASCII array creation policy

Return type
:
str

TechlogDatabase.importAsciiArrayPolicyChange(value: str)→ bool
Set the import ASCII array creation policy

Parameters
:
value (str) – mode: {‘create’, ‘add_epsilon’, ‘skip_line’, ‘duplicate_ref’, ‘ask’, ‘average’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.importBufferClose()
Close the import buffer

TechlogDatabase.importBufferOpen()
Open the import buffer

TechlogDatabase.importFile(filePath: str, loadToTheBuffer: bool = False, codecName: str = '', fileFormat: Any = '', overwrite: bool = False, level: str = 'project', preserveGroup: bool = False)→ bool
Import file into the project

Parameters
:
filePath (str) – file path

loadToTheBuffer (bool) – Optional; load into the import buffer

codecName (str) – Optional; codec name: {‘CP-866’, …}

fileFormat (Any) – Optional; not used

overwrite (bool) – Optional; accept overwriting of files

level (str) – Optional; destination level if not imported to import buffer {‘user’, ‘project’, ‘company’}

preserveGroup (bool) – Optional; preserve group position if anyOutput:

bool – operation exit status

TechlogDatabase.importProject(projectPath: str)→ bool
Import a project into the import buffer

Parameters
:
projectPath (str) – path of the project

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.importSegyMode()→ str
Return the current import SEGY mode

Returns
:
current import SEGY mode

Return type
:
str

TechlogDatabase.importSegyModeChange(value: str)→ bool
Set the import SEGY mode

Parameters
:
value (str) – mode: {‘auto’, ‘block’, ‘crossline’, ‘inline’, ‘wizard’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.launchImportWizard(fileName: str)→ bool
Launch the import wizard

Parameters
:
fileName (str) – file name

Returns
:
operation exit status

Return type
:
bool

Families
TechlogDatabase.associatedFamily(variableName: str)→ str
Return the default family for a given variable name

Parameters
:
variableName (str) – variable name

Returns
:
The default family for the given variable name

Return type
:
str

TechlogDatabase.compareFamily(FamilyToGet: str, Family: str)→ bool
Compare a family and a string

Parameters
:
FamilyToGet (str) – the family you want to get

Family (str) – expected family

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.familyAdd(level: str, mainFamily: str, familyName: str, unit: str='', min: float, max: float, limitInf: float, limitSup: float)→ bool
Add a family

Parameters
:
level (str) – level: {‘user’, ‘project’, ‘company’}

mainFamily (str) – main family name

familyName (str) – family name

unit (str) – Optional; unit name

min (float) – min

max (float) – max

limitInf (float) – limit inf

limitSup (float) – limit sup

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.familyAutoAssignment(level: str, catalog: str, allVariables: bool)→ bool
Reassign families to variables in the project based on family assignment rules stored in a catalog at a given storage level

Parameters
:
level (str) – level = { ‘user’, ‘project’, ‘company’, ‘techlog’, ‘all’ }. Default value is set to ‘techlog’

catalog (str) – catalog name = { ‘Techlog’, ‘Schlumberger-OSDD’ }. Default value is set to ‘Techlog’

allVariables (bool) – True = reassign families to all variables in the project(default value), False = reassign families only to unassigned variables

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.familyList(mainFamily: str)→ list
Return the list of known families for a given main family

Parameters
:
mainFamily (str) – main family

Returns
:
The list of known families for the given main family

Return type
:
list

TechlogDatabase.familyMax(familyName: str)→ str
Family max value

Parameters
:
familyName (str) – family name

Returns
:
family max value

Return type
:
str

TechlogDatabase.familyMin(familyName: str)→ str
Family min value

Parameters
:
familyName (str) – family name

Returns
:
family min value

Return type
:
str

TechlogDatabase.familyNameAssignment(variableName: str, unitName: str)→ str
Family name assignment

Parameters
:
variableName (str) – variable name

unitName (str) – unit name

Returns
:
family name

Return type
:
str

TechlogDatabase.familyProperty(family: str, property: str, level: str = 'all')→ str
Return the value of a family property

Parameters
:
family (str) – family name

property (str) – property name

level (str) – Optional; level: {‘all’, ‘user’, ‘project’, ‘company’, ‘techlog’}

Returns
:
the value of the property

Return type
:
str

TechlogDatabase.familyPropertyList()→ list
Return the list of family properties

Returns
:
the list of family properties

Return type
:
list

TechlogDatabase.familyScale(familyName: str)→ str
Family scale

Parameters
:
familyName (str) – family name

Returns
:
family scale

Return type
:
str

TechlogDatabase.familyUnit(familyName: str)→ str
Family unit name

Parameters
:
familyName (str) – family name

Returns
:
unit name

Return type
:
str

TechlogDatabase.mainFamilyList()→ list
Return the list of known main families

Returns
:
The list of known main families

Return type
:
list

Measurement / Units
TechlogDatabase.availableUnitSystems()→ list
Get the available unit systems

Returns
:
list of available unit systems (ProjectMyUS1, CompanyMyUS2, …)

Return type
:
list

TechlogDatabase.correspondingUnit(sourceUnit: str, targetUnitSystem: str)→ str
Get the corresponding unit from a different unit system

Parameters
:
sourceUnit (str) – a unit name

targetUnitSystem (str) – the unit system name with the associated project level (CompanyMyUnitSystem)

Returns
:
corresponding unit found in the target unit system

Return type
:
str

TechlogDatabase.currentSystemUnitList()→ list
Return the unit list of current unit system

Returns
:
The list of units of current unit system

Return type
:
list

TechlogDatabase.measurementList()→ list
Return the list of known measurements

Returns
:
The list of known measurements

Return type
:
list

TechlogDatabase.measurementUnit(measurementName: str)→ str
Default unit name for a given measurement in the current unit system

Parameters
:
measurementName (str) – measurement name

Returns
:
unit name

Return type
:
str

TechlogDatabase.unitIsCompatible(unit1: str, unit2: str)→ bool
Check if units are compatible

Parameters
:
unit1 (str) – unit1

unit2 (str) – unit2

Returns
:
True if units are compatible

Return type
:
bool

TechlogDatabase.unitIsEquivalent(unit1: str, unit2: str)→ bool
Check if units are equivalent

Parameters
:
unit1 (str) – unit1

unit2 (str) – unit2

Returns
:
True if units are equivalent

Return type
:
bool

TechlogDatabase.unitList()→ list
Return the list of known units

Returns
:
The list of known units

Return type
:
list

TechlogDatabase.unitNames()→ list
Get the available units

Returns
:
list of available units

Return type
:
list

TechlogDatabase.unitSystem()→ str
Get the current unit system

Returns
:
current unit system name with the associated project level (CompanyMyUnitSystem)

Return type
:
str

TechlogDatabase.unitSystemChange(UnitSystem: str)→ bool
Set the current unit system

Parameters
:
UnitSystem (str) – the unit system name with the associated project level (UserMyUnitSystem) or ‘None’

Returns
:
operation exit status

Return type
:
bool

Zonations
TechlogDatabase.zonationAdd(wellName: str, datasetZonation: str, family: str, unit: str)→ bool
Add a zonation in a well

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

family (str) – family

unit (str) – unit

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zonationDelete(wellName: str, datasetZonation: str, withProperties: bool = False)→ bool
Delete a zonation in a well

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

withProperties (bool) – Optional; DEPRECATED

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zonationExists(wellName: str, datasetZonation: str)→ bool
Return True if zonation exists

Parameters
:
wellName (str) – well name

datasetZonation (str) – zonation dataset name

Returns
:
zonation dataset existence

Return type
:
bool

TechlogDatabase.zonationSave(wellName: str, datasetZonation: str)→ bool
Save a volatile zonation

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zonationToMarker(wellName: str, datasetZonation: str, datasetMarkerName: str, mode: int)→ bool
Create a marker dataset from a zonation

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation source

datasetMarkerName (str) – new dataset marker name

mode (int) – 0=from top, 1=from bottom, 2=top and bottom

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zoneAdd(wellName: str, datasetZonation: str, zoneType: str, zone: str, top: float, bottom: float, color: str)→ bool
Add a zone in a zonation

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

zoneType (str) – zone type

zone (str) – zone

top (float) – top

bottom (float) – bottom

color (str) – color (optional)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zoneChangeColor(zonation: str, zone: str, color: str)→ bool
Change zone color
zonation (str): zonation name zone (str): zone name color (str): zone color

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zoneChangeDescription(zonation: str, zone: str, description: str)→ bool
Change zone description
zonation (str): zonation name zone (str): zone name description (str): description

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zoneChangePattern(zonationName: str, zoneName: str, project: str, pattern: str)→ bool
Change zone pattern
zonationName (str): zonation name zoneName (str): zone name project (str): project type. It can be {‘techlog’, ‘project’, ‘user’, ‘company’}. pattern (str): pattern name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zoneColor(zonation: str, zone: str)→ str
Get zone color
zonation (str): zonation name zone (str): zone name

Returns
:
color

Return type
:
str

TechlogDatabase.zoneDelete(wellName: str, datasetZonation: str, indice: int)→ bool
Delete a zone in a zonation

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

indice (int) – indice

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zoneDescription(zonation: str, zone: str)→ str
Get zone description
zonation (str): zonation name zone (str): zone name

Returns
:
description

Return type
:
str

TechlogDatabase.zoneList(wellName: str, datasetZonation: str, zoneFamily: str, family: str = '', unit: str = '', withInterzone: bool = False, contactDataset: str = '', contactList: list = [])→ bool
Get top and bottom of a zone

Parameters
:
wellName (str) – well name

datasetZonation (str) – dataset zonation

zoneFamily (str) – zone family

family (str) – Optional; family name

unit (str) – Optional; unit name

withInterzone (bool) – Optional; with interzone

contactDataset (str) – Optional; contact dataset

contactList (list) – Optional; contact list

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.zonePattern(zonation: str, zone: str)→ list
Get zone pattern
zonation (str): zonation name zone (str): zone name

Returns
:
project name, pattern name

Return type
:
list

Markers
TechlogDatabase.markerAdd(well: str, ds: str, depth: float, name: str)→ bool
Add a marker

Parameters
:
well (str) – well

ds (str) – dataset

depth (float) – depth

name (str) – marker name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.markerDelete(well: str, dataset: str, markerName: str)→ bool
Delete a marker

Parameters
:
well (str) – well

dataset (str) – dataset

markerName (str) – marker name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.markerGet(well: str, dataset: str, markerName: str)→ list
Get a marker

Parameters
:
well (str) – well

dataset (str) – dataset

markerName (str) – marker name

Returns
:
list of parameter dictionaries of the marker

Return type
:
list

TechlogDatabase.markerList(well: str, dataset: str, family: str = '', unit: str = '')→ list
Return the list of markers of a well

Parameters
:
well (str) – well

dataset (str) – dataset

family (str) – Optional; family name

unit (str) – Optional; unit name

Returns
:
list of markers

Return type
:
list

TechlogDatabase.markerSave(well: str, dataset: str)→ bool
Save the markers

Parameters
:
well (str) – well

dataset (str) – dataset

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.markerToZonation(wellName: str, datasetMarker: str, datasetZonationName: str, isUp: bool)→ bool
Create a zonation dataset from a marker dataset

Parameters
:
wellName (str) – well name

datasetMarker (str) – dataset marker source

datasetZonationName (str) – new dataset zonation name

isUp (bool) – way : True=up, False=down

Returns
:
operation exit status

Return type
:
bool

Contacts
TechlogDatabase.contactAdd(ds: str, min: float, max: float, td: float, ty: str, unit: str, c: str = '', d: str = '', descr: str = '', hz: str = '', qual: str = '', src: str = '')→ int
Add a contact

Parameters
:
ds (str) – dataset

min (float) – minimum

max (float) – maximum

td (float) – tvdss

ty (str) – contact type

unit (str) – unit

c (str) – Optional; creator

d (str) – Optional; date

descr (str) – Optional; description

hz (str) – Optional; hydraulic zone

qual (str) – Optional; qualifier

src (str) – Optional; source

Returns
:
contact id

Return type
:
int

TechlogDatabase.contactDelete(dataset: str, contactId: int)→ bool
Delete a contact

Parameters
:
dataset (str) – dataset

contactId (int) – contact id

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.contactGet(dataset: str, contactId: int)→ dict
Get a contact

Parameters
:
dataset (str) – dataset

contactId (int) – contact id

Returns
:
dictionary of parameters of the contact

Return type
:
dict

TechlogDatabase.contactList(dataset: str)→ list
Return the list of contacts

Parameters
:
dataset (str) – dataset

Returns
:
list of contact ids

Return type
:
list

TechlogDatabase.contactSave(dataset: str)→ bool
Save the contacts

Parameters
:
dataset (str) – dataset

Returns
:
operation exit status

Return type
:
bool

CRS
TechlogDatabase.convertCRSMagicNameToTextualRepresentation(oldTextualRepresentation: str)→ str
Convert a CRS magic name to its textual representation

Parameters
:
oldTextualRepresentation (str) – the CRS magic text

Returns
:
the CRS textual representation

Return type
:
str

TechlogDatabase.convertCRSToLL(X: float, Y: float, datum: str, unit: str)→ float, float, str, str, str
Convert projected coordinates (X and Y) to latitude and longitude

Parameters
:
X (float) – X

Y (float) – Y

datum (str) – projected datum name

unit (str) – unit of X and Y

Returns
:
longitude, latitude, ProjCS’s Well-Known Text, GeogCS’s Well-Known Text, GeogCS name

Return type
:
float, float, str, str, str

TechlogDatabase.convertCRStoLL(X: float, Y: float, datum: str, unit: str)→ float, float, str, str, str
[Deprecated] Use convertCRSToLL instead. Convert projected coordinates (X and Y) to latitude and longitude

Parameters
:
X (float) – X

Y (float) – Y

datum (str) – projected datum name

unit (str) – unit of X and Y

Returns
:
longitude, latitude, ProjCS’s Well-Known Text, GeogCS’s Well-Known Text, GeogCS name

Return type
:
float, float, str, str, str

TechlogDatabase.convertCoord(longitude: float, latitude: float, datum_from: str, datum_to: str)→ float, float
Convert a coordinate in one datum to an other

Parameters
:
longitude (float) – longitude in decimal degrees or X in meters

latitude (float) – latitude in decimal degrees or Y in meters

datum_from (str) – input datum name

datum_to (str) – output datum name

Returns
:
X and Y or longitude and latitude

Return type
:
float, float

TechlogDatabase.convertCoordDatum(longitude: float, latitude: float, datum_from: str, datum_to: str, unit: str)→ float, float, float, float, str, str, str, str
Convert longitude and latitude in one datum to an other projected datum

Parameters
:
longitude (float) – longitude in decimal degrees

latitude (float) – latitude in decimal degrees

datum_from (str) – input datum name

datum_to (str) – output projected datum name

unit (str) – unit of X and Y after conversion

Returns
:
X, Y, longitude after datum transformation, latitude after datum transformation, Unit, ProjCS’s Well-Known Text, GeogCS’s Well-Known Text, GeogCS name

Return type
:
float, float, float, float, str, str, str, str

TechlogDatabase.convertLLToCRS(longitude: float, latitude: float, datum: str, unit: str)→ float, float, str, str, str, str
Convert latitude and longitude to projected coordinates (X and Y)

Parameters
:
longitude (float) – longitude in decimal degrees

latitude (float) – latitude in decimal degrees

datum (str) – projected datum name

unit (str) – unit of X and Y after conversion

Returns
:
X, Y, Unit, ProjCS’s Well-Known Text, GeogCS’s Well-Known Text, GeogCS name

Return type
:
float, float, str, str, str, str

TechlogDatabase.convertLLtoCRS(longitude: float, latitude: float, datum: str, unit: str)→ float, float, str, str, str, str
[Deprecated] Use convertLLToCRS instead.
Convert latitude and longitude to projected coordinates (X and Y)

Parameters
:
longitude (float) – longitude in decimal degrees

latitude (float) – latitude in decimal degrees

datum (str) – projected datum name

unit (str) – unit of X and Y after conversion

Returns
:
X, Y, Unit, ProjCS’s Well-Known Text, GeogCS’s Well-Known Text, GeogCS name

Return type
:
float, float, str, str, str, str

TechlogDatabase.getCRSGeo2DList()→ list
Get the list of the geographic2D datum names

Returns
:
list of the geographic2D datum names

Return type
:
list

TechlogDatabase.getCRSGeo2DToList(datum: str)→ list
Get the list of the geographic2D datum names which can be transformed from an other geographic2D datum

Parameters
:
datum (str) – name of the input geographic2D datum

Returns
:
list of the geographic2D datum names

Return type
:
list

TechlogDatabase.getCRSProjList()→ list
[Deprecated] Use getCRSProjectList instead
Get the list of the projected datum names

Returns
:
list of the projected datum names

Return type
:
list

TechlogDatabase.getCRSProjToList(datum)→ list
[Deprecated] Use getCRSProjectToList instead
Get the list of the projected datum names which can be transformed from a geographic2D datum

Parameters
:
datum (None) – name [str]: name of the input geographic2D datum

Returns
:
list of the projected datum names

Return type
:
list

TechlogDatabase.getCRSProjectList()→ list
Get the list of the projected datum names

Returns
:
list of the projected datum names

Return type
:
list

TechlogDatabase.getCRSProjectToList(datum: str)→ list
Get the list of the projected datum names which can be transformed from a geographic2D datum

Parameters
:
datum (str) – name of the input geographic2D datum

Returns
:
list of the projected datum names

Return type
:
list

TechlogDatabase.getMagneticData(latitude: float, longitude: float, depth: float, day: float, month: float, year: float)→ float, float, float, float, float, float, float, float, float, float, float, float, float, float
Get magnetic declination and inclination at a defined location and time

Parameters
:
latitude (float) – latitude in decimal degrees

longitude (float) – longitude in decimal degrees

depth (float) – depth in meters

day (float) – day of the month

month (float) – month of the year

year (float) – year

Returns
:
7 elements (D, I, H, X, Y, Z, F) describing the main field, 7 elements (D, I, H, X, Y, Z, F) describing the rate of field change

Return type
:
float, float, float, float, float, float, float, float, float, float, float, float, float, float

TechlogDatabase.getMagneticDeclinationInclination(latitude: float, longitude: float, depth: float, day: float, month: float, year: float)→ float, float
Get magnetic declination and inclination at a defined location and time

Parameters
:
latitude (float) – latitude in decimal degrees

longitude (float) – longitude in decimal degrees

depth (float) – depth in meters

day (float) – day of the month

month (float) – month of the year

year (float) – year

Returns
:
magnetic declination, inclination

Return type
:
float, float

Objects
TechlogDatabase.objectAddZonation(winId: int, zonation: str, listzone: list = None)→ bool
Change AWI zonation

Parameters
:
winId (int) – identifier of the widget.

zonation (str) – zonation name

listzone (list) – Optional; list of zone names

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectApply(wid: int, waitForEnd: bool = False)
Call <i>apply</i> on the opened object

Parameters
:
wid (int) – window ID

waitForEnd (bool) – Optional; wait until end apply

Returns
:
None if wrong argument, bool: False if window not found, list: List of ids of created widgets if successful

Return type
:
NoneType

TechlogDatabase.objectApplyMode(wid: int)→ int
Return the apply mode of the method

Parameters
:
wid (int) – id of the workflow widget

Returns
:
Apply mode of the method

Return type
:
int

TechlogDatabase.objectApplyModeChange(arg: int, arg: int)→ bool
Change the apply mode

Parameters
:
arg_1 (int) – window object id

arg_2 (int) – apply mode {0=’Display’, 1=’Save’, 2=’Save & display’}

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectClose(winid: int, save: bool = True)→ bool
Close the object

Parameters
:
winid (int) – window object id

save (bool) – Optional; specify if you wanted to save or not

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectCopy(object, object, source, destination, delete, overwrite: bool=False)→ bool
Copy the object from a project to another project

Parameters
:
object (None) – name[str]: object name

object – type[str]: object type

source (None) – project[str]: source project

destination (None) – project[str]: dest project

delete (None) – after copy[bool][=False]: Remove source after copy

overwrite (bool) – Optional; overwrite the destination if it already exists

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectCreate(type: str, name: str, level: str = 'project', displayAssignment: bool = False)→ int
Add a Python script as a method to the current workflow (create a new workflow if necessary). Remark: The type is either the string or its index in the objectTypeList().

Parameters
:
type (str) – type of the object to open (must be ‘PythonScript’)

name (str) – name of the object

level (str) – Optional; object level: {‘techlog’, ‘company’, ‘project’, ‘user’}

displayAssignment (bool) – Optional; display the data type assignment window

Returns
:
identifier of the widget

Return type
:
int

TechlogDatabase.objectDelAllZone(winId: int)→ bool
Remove AWI zonation

Parameters
:
winId (int) – identifier of the widget

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectDelete(object, object, project: str='Project')→ bool
Delete the object from the project

Parameters
:
object (None) – name[str]: object name

object – type[str]: object type

project (str) – Optional; project

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectExistes(name: str, type: int, level: str)→ bool
[Deprecated] Use objectExists instead.

Parameters
:
name (str) – object name

type (int) – object type

level (str) – object level: {‘techlog’, ‘company’, ‘project’, ‘user’}

Returns
:
object exists

Return type
:
bool

TechlogDatabase.objectExists(name: str, type: int, level: str)→ bool
Object exists

Parameters
:
name (str) – object name

type (int) – object type

level (str) – object level: {‘techlog’, ‘company’, ‘project’, ‘user’}

Returns
:
object exists

Return type
:
bool

TechlogDatabase.objectIsOpened(wid: int)→ bool
Test if object is opened

Parameters
:
wid (int) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectList(object, project: str = 'Project')→ list
Return the object list with a given type

Parameters
:
object (None) – type[str]: object type

project (str) – Optional; project

Returns
:
The object list

Return type
:
list

TechlogDatabase.objectManagerSetWorkflow(winid: int, workflow: str)→ bool
Set the focus on the workflow for the manager

Parameters
:
winid (int) – window ID

workflow (str) – workflow name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectOpen(name: str, newWorkspace: str, level: str='project', newWorkspace: bool=False, wellName: str='', datasetName: str='')→ int
Open the object. See also: objectCreate() Remark: The type is either the string or its index in the objectTypeList().

Parameters
:
name (str) – type of the object to open (available types are listed in objectTypeList())

newWorkspace (bool) – name of the object

level (str) – Optional; object level: {‘techlog’, ‘company’, ‘project’, ‘user’}

newWorkspace – Optional; open in a new workspace

wellName (str) – Optional; well to use if the object is a Python script

datasetName (str) – Optional; dataset to use if the object is a Python script

Returns
:
identifier of the widget

Return type
:
int

TechlogDatabase.objectPrefixAndSuffix(winId: int, prefix: str, suffix: str)→ bool
Change AWI outputs prefix and suffix

Parameters
:
winId (int) – identifier of the widget

prefix (str) – name prefix

suffix (str) – name suffix

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectPythonAWIPropertyChange(winId: int, propertyName: str, value: str)
Set a python property.

Parameters
:
winId (int) – window ID

propertyName (str) – name of the property

value (str) – the value to set

Returns
:
None

Return type
:
None

TechlogDatabase.objectSave(objectId: int, objectName: str)→ bool
Save the object

Parameters
:
objectId (int) – object id

objectName (str) – object name

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectSaveResultSummaries(arg: int)→ bool
Save summaries result in zonation dataset

Parameters
:
arg_1 (int) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectSetRealTime(workflowId: int, mode: bool)→ bool
Set the real time mode for a workflow

Parameters
:
workflowId (int) – id of the workflow

mode (bool) – True for activate the realtime, False else

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectSetWorkflowCurrentMethod(wid: int, type: int)→ bool
Define the current method in a workflow

Parameters
:
wid (int) – window ID

type (int) – method position

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectTypeList()→ list
Return the object type list

Returns
:
The list of the object types

Return type
:
list

TechlogDatabase.objectWorkflowIncludeMissingValue(wid: int, include: bool)→ bool
Include MissingValues when running scripts in the workflow

Parameters
:
wid (int) – window ID

include (bool) – include the MissingValues

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectWorkflowLayoutTemplateChange(template: str, force: bool = False)→ bool
Change workflow layout template properties for selected method

Parameters
:
template (str) – {‘None’, ‘Current’, ‘Default’} or named template ‘levelname’

force (bool) – Optional; force template mode

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.objectWorkflowMethodsNames(wid: int)→ list
Get the list of methods names from a workflow

Parameters
:
wid (int) – window ID

Returns
:
list of methods names

Return type
:
list

TechlogDatabase.objectWorkflowSaveEmptyOutputs(wid: int, save: bool)→ bool
Save empty outputs when running scripts in the workflow

Parameters
:
wid (int) – window ID

save (bool) – save the empty outputs

Returns
:
operation exit status

Return type
:
bool

AWI
TechlogDatabase.addDataSetForAWI(winID: int, wellName: str, datasetName: str, defaultParam: bool = False)→ bool
Add dataset in AWI

Parameters
:
winID (int) – identifier of the widget.

wellName (str) – well name

datasetName (str) – dataset name

defaultParam (bool) – Optional; use default parameters values

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.getAWILogViewID()→ int
Return the id of the Logview generated by selected workflow method

Returns
:
id of the Logview, -1 if it is not yet created

Return type
:
int

TechlogDatabase.getMethodList()→ dict
Return the Methods registered in TechlogOutput:
dict: {MethodID : Method title}

TechlogDatabase.listZonationFromWorkflowFile(name: str, level: str = 'project')→ dict
Return the AWI zonation dictionary

Parameters
:
name (str) – name of the workflowEntity

level (str) – Optional; object level: {‘techlog’, ‘company’, ‘project’, ‘user’}

Returns
:
dictionary containing the zonation names as keys and the zones informations as value

Return type
:
dict

TechlogDatabase.loadZonationFromWorkflowFile(name: str, level: str='project', overwrite: bool, zonationNames: dict)→ bool
Return the AWI zonation dictionary

Parameters
:
name (str) – name of the workflowEntity

level (str) – Optional; object level: {‘techlog’, ‘company’, ‘project’, ‘user’}

overwrite (bool) – overwrite existing zonation

zonationNames (dict) – mapping for the zonation names

Returns
:
true if succeed

Return type
:
bool

TechlogDatabase.openMethod(methodId: str, openWithMnemonics: bool, forceMnemoPreinitialisation: bool)→ int
Open AWI Method from it Id.
Use getMethodList method to get All method Id

Parameters
:
methodId (str) – Method identifier

openWithMnemonics (bool) – True by default if the family selection widow need to be shown

forceMnemoPreinitialisation (bool) – False by default. Can lead to crash if the family selection is hidden and not initialized.

Returns
:
winId (identifier of the widget), -1 if the method is not opened

Return type
:
int

TechlogDatabase.showAWILogView()→ int
Show the Logview generated by selected workflow method. Create the Logview if it does not exist yet

Returns
:
id of the Logview

Return type
:
int

Parameters
TechlogDatabase.parameterCreate(name: str, well: str = '*', dataSet: str = '*', zonation: str = '*', zone: str = '*', group: str = '-9999', value: str = '-9999', min: float = -9999, max: float = -9999, unit: str = '')→ int
Add parameter to database

Parameters
:
name (str) – name of the parameter

well (str) – Optional; well name

dataSet (str) – Optional; dataset name

zonation (str) – Optional; zonation name

zone (str) – Optional; zone name

group (str) – Optional; group name

value (str) – Optional; value of the parameter

min (float) – Optional; minimum value authorized

max (float) – Optional; maximum value authorized

unit (str) – Optional; unit of the parameter

Returns
:
id of the inserted parameter, -1 if it was not inserted

Return type
:
int

TechlogDatabase.parameterDictAWIChange(winID: int, paramDict: dict)→ bool
Change AWI parameter dictionary

Parameters
:
winID (int) – identifier of the widget

paramDict (dict) – parameter dictionary

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.parameterDictFromAWI(winID: int)→ dict
Return the parameter dictionary from AWI

Parameters
:
winID (int) – identifier of the widget

Returns
:
parameter dictionary

Return type
:
dict

TechlogDatabase.parameterDictFromFile(path: str)→ dict
Read the parameter dictionary from file

Parameters
:
path (str) – filePath and fileName

Returns
:
parameter Dictionary

Return type
:
dict

TechlogDatabase.parameterDictFromFileChange(paraDict: dict, path: str)→ bool
Save parameter dictionary to file

Parameters
:
paraDict (dict) – parameter dictionary

path (str) – filePath and fileName

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.parameterDictFromPythonEditor(winID: int)→ dict
Return the parameter dictionary from the Python Editor

Parameters
:
winID (int) – identifier of the widget.

Returns
:
parameters dictionary

Return type
:
dict

TechlogDatabase.parameterDictPythonEditorChange(winID: int, paramDict: dict)→ bool
Change Python Editor parameter dictionary

Parameters
:
winID (int) – identifier of the widget

paramDict (dict) – parameter dictionary

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.parameterId(name: str, well: str = None, dataset: str = None, zonation: str = None, zone: str = None)→ int
Returns the parameter’s id having the specified criteria

Parameters
:
name (str) – parameter name

well (str) – Optional; well name

dataset (str) – Optional; dataset name

zonation (str) – Optional; zonation name

zone (str) – Optional; zone name

Returns
:
id of parameter. Returns None if no parameter found

Return type
:
int

TechlogDatabase.parameterInputAWIChange(winId: int, wellName: str, datasetName: str, dict: dict)→ bool
Change AWI inputs parameters

Parameters
:
winId (int) – identifier of the widget

wellName (str) – well name

datasetName (str) – dataset name

dict (dict) – dictionary of all inputs variables

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.parameterListId(name: str, well: str = '', dataset: str = '', zonation: str = '', zone: str = '', group: str = '')→ list
Returns the list of IDs of parameters corresponding to the search criteria

Parameters
:
name (str) – parameter name

well (str) – Optional; well name

dataset (str) – Optional; dataset name

zonation (str) – Optional; zonation name

zone (str) – Optional; zone name

group (str) – Optional; group name

Returns
:
list of id. Returns None if the list is empty

Return type
:
list

TechlogDatabase.parameterValue(paramId: int, ok: str = '')→ float
Get the value of parameter with parameter id

Parameters
:
paramId (int) – parameter id

ok (str) – Optional; convert the parameter value into this unit

Returns
:
parameter value. Returns None if no value found or the parameter id does not exist

Return type
:
float

TechlogDatabase.parameterValueChange(paramId: int, value: float, unit: str = '')→ bool
Set parameter’s value in database

Parameters
:
paramId (int) – parameter id

value (float) – parameter value

unit (str) – Optional; the unit to which value will be converted

Returns
:
operation status

Return type
:
bool

TechlogDatabase.parameterValueFromAWI(winId: int, wellName: str, datasetName: str, zoneName: str)→ dict
Return the AWI parameter (true AWI value) dictionary

Parameters
:
winId (int) – identifier of the widget

wellName (str) – well name

datasetName (str) – dataset name

zoneName (str) – zonation name

Returns
:
parameter (true AWI value) dictionary

Return type
:
dict

TechlogDatabase.parameterVariableFromAWI(winId: int, wellName: str, datasetName: str)→ dict
Return the AWI inputs variable dictionary

Parameters
:
winId (int) – identifier of the widget

wellName (str) – well name

datasetName (str) – dataset name

Returns
:
inputs dictionary

Return type
:
dict

TechlogDatabase.parameterZonationFromAWI(winId: int, wellName: str, datasetName: str, zoneName: str)→ dict
Return the AWI zonation dictionary

Parameters
:
winId (int) – identifier of the widget

wellName (str) – well name

datasetName (str) – dataset name

zoneName (str) – zonation name

Returns
:
zonation dictionary

Return type
:
dict

TechlogDatabase.parametersLoad(pathname: str, fileName: str, listZones: str = '', listParams: str = '')→ bool
Loads parameters from xml file

Parameters
:
pathname (str) – path of the file you want to load

fileName (str) – fileName

listZones (str) – Optional; the zones to filter on

listParams (str) – Optional; the names of parameters to filter on

Returns
:
True if the loading process has been successfully performed. False otherwise

Return type
:
bool

TechlogDatabase.parametersSave(dict: dict)→ bool
Save a parameter dictionary

Parameters
:
dict (dict) – dictionary of parameters

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.parametersSaveXML(oldFileName: str, newParamFile: str, pathName: str, xmlkey: str, level: int, paramLevel: int, listWells: list = None, datasetList: list = None, zonation: str = None, paramNames: list = None, listZones: list = None)→ bool
Save data in xml file

Parameters
:
oldFileName (str) – oldFileName

newParamFile (str) – newParamFile

pathName (str) – pathName

xmlkey (str) – xmlKey

level (int) – level

paramLevel (int) – paramLevel

listWells (list) – Optional; listWells

datasetList (list) – Optional; datasetList

zonation (str) – Optional; zonation

paramNames (list) – Optional; paramNames

listZones (list) – Optional; listZones

Returns
:
operation exit status

Return type
:
bool

Project browser
TechlogDatabase.projectBrowserApplyFilter(filterName: str, projectLevel: str = 'Project')→ bool
Apply filter on project browser

Parameters
:
filterName (str) – name of the filter to open

projectLevel (str) – Optional; project type. It can be {‘Project’, ‘User’, ‘Company’, ‘Techlog’}.

Returns
:
operation status

Return type
:
bool

TechlogDatabase.projectBrowserFilter(filterDict: dict)→ bool
Project browser filter

Parameters
:
filterDict (dict) – a dictionary with filter keys well, dataset, variable like:

{‘well’:’A’, ‘dataset’:’AA’, ‘variable’:’AAA’} Give an empty dictionary to clean all filters like: {}

Returns
:
operation status

Return type
:
bool

TechlogDatabase.projectBrowserImportRefresh()
Refresh import project browser

TechlogDatabase.projectBrowserQuickSearch(text: str)→ bool
Project browser set quick search text

Parameters
:
text (str) – string for quick search

Returns
:
operation status

Return type
:
bool

TechlogDatabase.projectBrowserRefresh()
Refresh project browser

TechlogDatabase.projectBrowserSaveFilter(filterName: str, projectLevel: str = 'Project')→ bool
Save current project browser filter

Parameters
:
filterName (str) – name to save the filter

projectLevel (str) – Optional; project type. It can be {‘Project’, ‘User’, ‘Company’}.

Returns
:
operation status

Return type
:
bool

TechlogDatabase.selectedDatasetList(wellName: str)→ list
Return the list of selected datasets

Parameters
:
wellName (str) – well name

Returns
:
the list of selected datasets present in the current database

Return type
:
list

TechlogDatabase.selectedVariableList(wellName: str, datasetName: str)→ list
The list of selected variables present in the project browser of the current database

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
variable list

Return type
:
list

TechlogDatabase.selectedWellList()→ list
Return the selected well list

Returns
:
The list of selected wells present in the current database

Return type
:
list

Interactive selection
TechlogDatabase.interactiveSelection(wellName: str, datasetName: str)→ list
Get the selection

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

Returns
:
selection list

Return type
:
list

TechlogDatabase.interactiveSelectionChange(wellName: str, datasetName: str, selectionList: list)→ bool
Update the selection

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

selectionList (list) – selection list

Returns
:
operation exit status

Return type
:
bool

Progress bar
TechlogDatabase.progressBarHide()
Hide the progress bar

TechlogDatabase.progressBarSetAutoProgress(auto: bool)→ bool
Enable or disable automatic-update of progress bar in LOOP inside workflow engine Do nothing outside workflow engine

Parameters
:
auto (bool) – enable or disable automatic progress

Returns
:
operation exit status (False outside workflow engine)

Return type
:
bool

TechlogDatabase.progressBarSetValue(value: float, autoShow: bool = False, information: str = '')→ bool
Change progress bar value

Parameters
:
value (float) – percent of progressBar

autoShow (bool) – Optional; auto hide and show

information (str) – Optional; set progress bar title

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.progressBarSetVisible(visible: bool)→ bool
Change progress bar visible status

Parameters
:
visible (bool) – progress bar visibility status

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.progressBarShow()
Show progress bar in the status bar

Exceptions
TechlogDatabase.DataError
alias of ValueError

Other TechlogDatabase functions
TechlogDatabase.computeTVD(well: str, dataset: str, datasetOutputName: str, method: str = 'minimum curvature', elevation: float = 0, elevationUnit: str = 'm', waterDepth: float = 0, waterDepthUnit: str = 'm', totalDepth: float = 0, totalDepthUnit: str = 'm', tiePointMethod: str = 'survey', tiePointTVD: float = 0, tiePointMD: float = 0, tiePointDepthUnit: str = 'm', tiePointX: float = 0, tiePointY: float = 0, offsetUnit: str = 'm', tiePointAZI: float = 0, tiepointDEV: float = 0, angleUnit: str = 'dega', startDepthMethod: str = 'first dip', startDepthValue: float = 0, startDepthUnit: str = 'm', extendDipMethod: str = 'interpolate to 0', finalUnit: str = 'm', outputSamplingRateValue: float = 0.1524, outputSamplingRateUnit: str = 'm', listOutputLogDescription: list = [], bSaveMode: bool = True, bOverwrite: bool = False, typeAzimuth: str = '', extrapolationMethod: str = 'stop computation', projection: float = 0, projectionUnit: str = 'm')→ str
Computation of the TVD

Parameters
:
well (str) – well name

dataset (str) – dataset name

datasetOutputName (str) – output dataset name

method (str) – Optional; method: {‘minimum curvature’, ‘radius of curvature’, ‘high tangential’, ‘low tangential’, ‘average tangential’, ‘balanced tangential’}

elevation (float) – Optional; elevation value

elevationUnit (str) – Optional; elevation unit

waterDepth (float) – Optional; water depth value

waterDepthUnit (str) – Optional; water depth unit

totalDepth (float) – Optional; total depth value

totalDepthUnit (str) – Optional; total depth unit

tiePointMethod (str) – Optional; tie point method: {‘survey’, ‘custom’}

tiePointTVD (float) – Optional; tie point TVD value

tiePointMD (float) – Optional; tie point MD value

tiePointDepthUnit (str) – Optional; tie point depth unit

tiePointX (float) – Optional; tie point XOffset value

tiePointY (float) – Optional; tie point YOffset value

offsetUnit (str) – Optional; tie point offset unit

tiePointAZI (float) – Optional; tie point azimuth value

tiepointDEV (float) – Optional; tie point deviation value

angleUnit (str) – Optional; tie point angle unit

startDepthMethod (str) – Optional; method used to find the TVT/TST start depth: {‘first dip’, ‘depth (MD)’, ‘depth (TVD)’}

startDepthValue (float) – Optional; TVT/TST start depth value of TVD or MD

startDepthUnit (str) – Optional; unit used for the TVT/TST start depth TVD or MD

extendDipMethod (str) – Optional; method used to extend the dips to the start depth: {‘interpolate to 0’, ‘extrapolate’}

finalUnit (str) – Optional; dataset final unit

outputSamplingRateValue (float) – Optional; sampling rate value for the output dataset

outputSamplingRateUnit (str) – Optional; sampling rate unit for the output dataset

listOutputLogDescription (list) – Optional; description of output logs. Indices in the list: 0-TVD, 1-TVDSS, 2-XOFFSET, 3-YOFFSET, 4-TVDBML, 5-DL, 6-TVT, 7-TST, 8-THL, 9-BOREHOLE_DEVIATION, 10-BOREHOLE_AZIMUTH, 11-TVT_DELTA, 12-TST_DELTA

bSaveMode (bool) – Optional; save output variables

bOverwrite (bool) – Optional; overwrite output variables

typeAzimuth (str) – Optional; type of the reference azimuth (grid North or true North)

extrapolationMethod (str) – Optional; extrapolation method {‘stop computation’, ‘continue the trend’, ‘hold angle’}

projection (float) – Optional; projection value for the extrapolation

projectionUnit (str) – Optional; projection unit

Returns
:
the output dataset name

Return type
:
str

TechlogDatabase.depthInteractionChange(wellName: str, unit: str, depth: float, mindepth: float, maxdepth: float)→ bool
Send the depth interaction

Parameters
:
wellName (str) – well name

unit (str) – unit name

depth (float) – depth value (Measured Depth)

mindepth (float) – , optional: min depth value for ‘window mode’ depth interaction (Measured Depth)

maxdepth (float) – , optional: max depth value for ‘window mode’ depth interaction (Measured Depth)

Returns
:
operation exit status

Return type
:
bool

TechlogDatabase.doFirstReadTreatment(fileName: str, logName: str, threshold: int)→ float
Do the treatment of the first last reading module

Parameters
:
fileName (str) – the file containing the datas

logName (str) – the log on which we want to apply the first last reading

threshold (int) – the threshold we want to apply on the logOutput:

float – result of the treatment

TechlogDatabase.doTheComposition(wellName: str, setName: str, wellSource: str, setSource: str, isDoubleRef: bool, borneMin: float, borneMax: float, VarsSelected: list, isOrFilter: bool, VarsFiltered: list)
Do the composition in the Dataset Builder

Parameters
:
wellName (str) – Destination Well Name

setName (str) – Destination Dataset Name

wellSource (str) – Source Well Name

setSource (str) – Source Datasets Names

isDoubleRef (bool) – True the datasetSource has a double precision reference, False if not)

borneMin (float) – TOP where the user wants to begin the composition

borneMax (float) – BOTTOM where the user wants to finish the composition

VarsSelected (list) – selected variables to be composed

isOrFilter (bool) – Type of the filter (True=OR / False=AND)

VarsFiltered (list) – selected variables for filtering

TechlogDatabase.getAbsoluteBHIPath()
Return the absolute BHI path

Parameters
:
str – relative BHI path

Returns
:
absolute BHI path

Return type
:
str

TechlogDatabase.multiWellCreate(wellName: str, datasetName: str, wellSourceName: str, datasetSourceName: str, variableList: list, referenceVaribaleNameList: str, referenceVariableNameUnit: str = '', mode: int = 1)→ bool
Create a multi well dataset

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

wellSourceName (str) – well source name

datasetSourceName (str) – dataset source name

variableList (list) – variable list

referenceVaribaleNameList (str) – reference variable name list

referenceVariableNameUnit (str) – Optional; reference variable unit

mode (int) – Optional; mode: {0=create, 1=create and fill, 2=update}

Returns
:
operation exit status

Return type
:
bool
TechlogDatamodel
TechlogDatamodel.datamodelCreate(wellName: Number)→ list
Gets the values

Parameters
:
wellName (Number) – i (line)

Returns
:
the list of list of float (list of dimensions and then list of values per dimension)

Return type
:
list
echlogDialog
TechlogDialog.critical(caption: str, text: str)→ int
Show a critical message box

Parameters
:
caption (str) – caption

text (str) – text

Returns
:
operation exit status

Return type
:
int

TechlogDialog.information(caption: str, text: str)→ int
Show an information message box

Parameters
:
caption (str) – caption

text (str) – text

Returns
:
operation exit status

Return type
:
int

TechlogDialog.log(severity: str, message: str)→ bool
Log a message

Parameters
:
severity (str) – warning, error, information

message (str) – log message

Returns
:
operation exit status

Return type
:
bool

TechlogDialog.question(caption: str, text: str, button1: str, button2: str = '', button3: str = '', default: int = 0, esc: int = -1)→ int
Show a question message box

Parameters
:
caption (str) – caption

text (str) – text

button1 (str) – first button text

button2 (str) – Optional; second button text

button3 (str) – Optional; third button text

default (int) – Optional; Index of the button selected by default

esc (int) – Optional; Value to return when canceled

Returns
:
Index of the clicked button

Return type
:
int

TechlogDialog.warning(caption: str, text: str)→ int
Show a warning message box

Parameters
:
caption (str) – caption

text (str) – text

Returns
:
operation exit status

Return type
:
int
TechlogDialogAdvanced
classTechlogDialogAdvanced.dialogAdvanced(caption)
This class provides simple dialogs with caption, text and some input controls and buttons.

The dialog is created as follows :
myDialog = dialog.dialogAdvanced(title)

The class provides methods that create input controls and methods that retrieve what the user have entered.

Example

myDialog.addTextInput(‘name’, ‘Your name’) myDialog.execDialog() name = myDialog.getTextInput(‘name’)

addButtonsGroup(tagName: str, lbl: str, value: list, excl: bool, orient: str = 'Horizontal', def_: list = [], hlp: str = '')→ bool
Add a group of buttons

Parameters
:
tagName (str) – box name

lbl (str) – label

value (list) – list of text values

excl (bool) – exclusive toggle

orient (str) – Optional; orientation

def (list) – Optional; default list of values

hlp (str) – Optional; help message

Returns
:
operation exit status

Return type
:
bool

addDoubleInput(tagName: str, lbl: str, value: float = 0, from_: float = -2147483647, to: float = +2147483647, dec: int = 1, step: float = 1, hlp: str = '')→ bool
Add a floating-point number property

Parameters
:
tagName (str) – box name

lbl (str) – label

value (float) – Optional; value

from (float) – Optional; inferior limit

to (float) – Optional; superior limit

dec (int) – Optional; number of decimals

step (float) – Optional; step

hlp (str) – Optional; help message

Returns
:
operation exit status

Return type
:
bool

addHelp(hlp: str)→ bool
Add help button

Parameters
:
hlp (str) – help message

Returns
:
operation exit status

Return type
:
bool

addIntegerInput(tagName: str, lbl: str, value: int = 0, from_: int = -2147483647, to: int = +2147483647, step: int = 1, hlp: str = '')→ bool
Add an integer property

Parameters
:
tagName (str) – box name

lbl (str) – label

value (int) – Optional; value

from (int) – Optional; inferior limit

to (int) – Optional; superior limit

step (int) – Optional; step

hlp (str) – Optional; help message

Returns
:
operation exit status

Return type
:
bool

addLabel(tagName: str, lbl: str)→ bool
Add a label (arguments: name, label)

Parameters
:
tagName (str) – box name

lbl (str) – label

Returns
:
operation exit status

Return type
:
bool

addListBox(tagName: str, lbl: str, value: str, hlp: str = '')→ bool
Add a list box

Parameters
:
tagName (str) – box name

lbl (str) – label

value (str) – list of text values

hlp (str) – Optional; help message

Returns
:
operation exit status

Return type
:
bool

addListInput(tagName: str, lbl: str, pyList: list, current: int = 0, editable: bool = False, hlp: str = '', pyLstPxmp: list = [])→ bool
Add a list property

Parameters
:
tagName (str) – box name

lbl (str) – label

pyList (list) – list of text values

current (int) – Optional; default current position in the list of values

editable (bool) – Optional; 1 = possibility to edit user values in the list, else 0

hlp (str) – Optional; help message

pyLstPxmp (list) – Optional; list of pixmaps

Returns
:
operation exit status

Return type
:
bool

addTextInput(tagName: str, lbl: str, txt: str = '', mode: int = 0, hlp: str = '')→ bool
Add text property

Parameters
:
tagName (str) – box name

lbl (str) – label

txt (str) – Optional; text

mode (int) – Optional; echo mode { 0=’Normal’, 1=’NoEcho’, 2=’Password’, 3=’PasswordEchoOnEdit’ }

hlp (str) – Optional; help message

Returns
:
operation exit status

Return type
:
bool

emptyDialog()→ bool
Return True if dialog is empty (arguments: nothing)

Returns
:
operation exit status

Return type
:
bool

execDialog(modal: bool = False)→ bool
Show the message box.

Warning

modal flag must be True to run under AWI.

Warning

modal dialog box must be handled with care: it prevents

user action on other parts of the application

other Python tasks from running

Parameters
:
modal (bool) – Optional; dialog window is modal

Returns
:
user choice

Return type
:
bool

getButtonsGroup(tagName: str)→ str
Return the value of a group of buttons

Parameters
:
tagName (str) – box name

Returns
:
group of button value

Return type
:
str

getDoubleInput(tagName: str)→ float
Return a floating-point number property value

Parameters
:
tagName (str) – box name

Returns
:
property value. If no value, return None

Return type
:
float

getIntegerInput(tagName: str)→ int
Return an integer property value

Parameters
:
tagName (str) – box name

Returns
:
property value. If no value, return None

Return type
:
int

getListBox(tagName: str)→ str
Return the value of a list box

Parameters
:
tagName (str) – box name

Returns
:
list box value

Return type
:
str

getListInput(tagName: str)→ str
Return a list property value

Parameters
:
tagName (str) – box name

Returns
:
property value list

Return type
:
str

getTextInput(tagName: str)→ str
Return text property value

Parameters
:
tagName (str) – box name

Returns
:
text property value

Return type
:
str

getType(tagName: str)→ str
Return type of property

Parameters
:
tagName (str) – property name

Returns
:
property type

Return type
:
str

hideCancelButton()
Hide cancel button

isApplyForAllChecked()→ bool
Return True if the check box ‘Apply for all’ is checked, False otherwise (arguments: nothing)

Returns
:
operation exit status

Return type
:
bool

setComments(comment: str)→ bool
Add a comment

Parameters
:
comment (str) – comment

Returns
:
operation exit status

Return type
:
bool

showApplyForAllCheck(display: bool)→ bool
Display a check box ‘Apply for all’

Parameters
:
display (bool) – check box display

Returns
:
operation exit status

Return type
:
bool
TechlogDTS
TechlogDTS.variableDepthIndexUnit(well: str, dataset: str, variable: str)→ str
Return unit of depth reference data of a DTS variable

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

Returns
:
unit

Return type
:
str

TechlogDTS.variableDepthIndexUnitChange(well: str, dataset: str, variable: str, uint: str)→ bool
Modify unit of the depth reference data of a DTS variable

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

uint (str) – unit

Returns
:
operation exit status

Return type
:
bool

TechlogDTS.variableIndex(well: str, dataset: str, variable: str, ref: str)→ list
Return depth reference data of a DTS variable

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

ref (str) – reference name {‘depth’, ‘time’}

Returns
:
list of values

Return type
:
list

TechlogDTS.variableIndexChange(well: str, dataset: str, variable: str, ref: str, values: list)→ bool
Modify the depth reference data of a DTS variable

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

ref (str) – reference name {‘depth’, ‘time’}

values (list) – values list

Returns
:
operation exit status

Return type
:
bool

TechlogDTS.variableIndexedData(well: str, dataset: str, variable: str, ref: str)→ list
Return the DTS variable data, indexed by depth

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

ref (str) – reference name {‘depth’, ‘time’}

Returns
:
list of values

Return type
:
list

TechlogDTS.variableIndexedDataChange(well: str, dataset: str, variable: str, ref: str, values: list)→ bool
Modify the DTS variable data, indexed by depth

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

ref (str) – reference name {‘depth’, ‘time’}

values (list) – values list

Returns
:
operation exit status

Return type
:
bool

TechlogDTS.variableIndexedTraceData(well: str, dataset: str, variable: str, ref: str, index: int)→ list
Return row of DTS variable data

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

ref (str) – reference name {‘depth’, ‘time’}

index (int) – index

Returns
:
list of values

Return type
:
list

TechlogDTS.variableIndexedTraceDataChange(well: str, dataset: str, variable: str, ref: str, index: int, values: list)→ bool
Modify row of DTS variable data

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

ref (str) – reference name {‘depth’, ‘time’}

index (int) – index

values (list) – values list

Returns
:
operation exit status

Return type
:
bool

TechlogDTS.variableReferenceType(well: str, dataset: str, variable: str)→ str
Return reference type of a DTS variable

Parameters
:
well (str) – well name

dataset (str) – dataset name

variable (str) – variable name

Returns
:
‘depth’ or ‘time’

Return type
:
str
TechlogFilter
TechlogFilter.bessel(well: str, dataset: str, variable: str, lowFrequency: Number, highFrequency: Number, samplingRate: Number, order: Number= 4, phase: Number, filterSize: Number, angle: Number=0) -> (Number, Number, Number)
Apply the Bessel filter (FidLib) on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowFrequency (Number) – low frequency of the filter (Hz)

highFrequency (Number) – high frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

order (Number) – Optional; order of the filter (up to 10)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.butterworth(well: str, dataset: str, variable: str, lowStopFrequency: Number, lowPassFrequency: Number, highPassFrequency: Number, highStopFrequency: Number, samplingRate: Number, filterType: Number, phase: Number, filterSize: Number, angle: Number = 0)
Apply the Butterworth filter by 4 frequencies on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowStopFrequency (Number) – low stop frequency of the filter (Hz)

lowPassFrequency (Number) – low pass frequency of the filter (Hz)

highPassFrequency (Number) – high pass frequency of the filter (Hz)

highStopFrequency (Number) – high stop frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

filterType (Number) – 1 = lowpass, 2 = highpass, 3 = bandpass, 4 = bandstop

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.butterworth3db(well: str, dataset: str, variable: str, lowPassFrequency: Number, highPassFrequency: Number, samplingRate: Number, filterType: Number, order: Number= 4, phase: Number, filterSize: Number, angle: Number=0) -> (Number, Number, Number)
Apply the Butterworth filter on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowPassFrequency (Number) – low frequency of the filter (Hz)

highPassFrequency (Number) – high frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

filterType (Number) – 1 = lowpass, 2 = highpass, 3 = bandpass, 4 = bandstop

order (Number) – Optional; order of the filter (up to 40)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.butterworthComputation(well: str, dataset: str, variable: str, lowFrequency: Number, highFrequency: Number, samplingRate: Number, filterType: Number, order: Number= 4, phase: Number, filterSize: Number, angle: Number=0)→ bool
Apply the Butterworth filter on the variable and save the new filtered variable Warning : This is a legacy filter and will not be supported from version 2013.1

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowFrequency (Number) – low frequency of the filter (Hz)

highFrequency (Number) – high frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

filterType (Number) – 1 = lowpass, 2 = highpass, 3 = bandpass, 4 = bandstop

order (Number) – Optional; order of the filter (Hz)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
true if the variable has successfully created, else false

Return type
:
bool

TechlogFilter.butterworthFidLibComputation(well: str, dataset: str, variable: str, lowFrequency: Number, highFrequency: Number, samplingRate: Number, order: Number= 4, phase: Number, filterSize: Number, angle: Number=0) -> (Number, Number, Number)
Apply the Butterworth filter (FidLib) on the variable and save the new filtered variable Warning : This is a legacy filter and will not be supported from version 2013.1

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowFrequency (Number) – low frequency of the filter (Hz)

highFrequency (Number) – high frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

order (Number) – Optional; order of the filter (up to 10)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.chebyshev(well: str, dataset: str, variable: str, lowFrequency: Number, highFrequency: Number, samplingRate: Number, order: Number= 4, phase: Number, filterSize: Number, angle: Number=0) -> (Number, Number, Number)
Apply the Chebyshev filter (FidLib) on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowFrequency (Number) – low frequency of the filter (Hz)

highFrequency (Number) – high frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

order (Number) – Optional; order of the filter (up to 10)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.fromTxt(well: str, dataset: str, variable: str, response: str, samplingRate: Number)
Apply your own filter on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

response (str) – the full path to file with wavelet coefficients

samplingRate (Number) – the sampling rate of the variable (Hz)

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.klauder(well: str, dataset: str, variable: str, lowFrequency: Number, highFrequency: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)
Apply the Klauder filter on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowFrequency (Number) – low frequency of the filter (Hz)

highFrequency (Number) – high frequency of the filter (Hz)

samplingRate (Number) – sampling rate of the data to be filtered

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.klauderComputation(well: str, dataset: str, variable: str, lowFrequency: Number, highFrequency: Number, sweep: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)→ bool
Apply the Klauder filter on the variable and save the new filtered variable Warning : This is a legacy filter and will not be supported from version 2013.1

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowFrequency (Number) – low frequency of the filter (Hz)

highFrequency (Number) – high frequency of the filter (Hz)

sweep (Number) – sweep duration (s)

samplingRate (Number) – sampling rate of the data to be filtered

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
true if the variable has successfully created, else false

Return type
:
bool

TechlogFilter.ormsby(well: str, dataset: str, variable: str, lowCutFrequency: Number, lowPassFrequency: Number, highPassFrequency: Number, highCutFrequency: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)
Apply the Ormsby filter on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowCutFrequency (Number) – low pass frequency of the filter (Hz)

lowPassFrequency (Number) – low cut frequency of the filter (Hz)

highPassFrequency (Number) – high pass frequency of the filter (Hz)

highCutFrequency (Number) – high cut frequency of the filter (Hz)

samplingRate (Number) – sampling rate of the data to be filtered (Hz)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.ormsbyComputation(well: str, dataset: str, variable: str, lowCutFrequency: Number, lowPassFrequency: Number, highPassFrequency: Number, highCutFrequency: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)→ bool
Apply the Ormsby filter on the variable and save the new filtered variable Warning : This is a legacy filter and will not be supported from version 2013.1

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

lowCutFrequency (Number) – low pass frequency of the filter (Hz)

lowPassFrequency (Number) – low cut frequency of the filter (Hz)

highPassFrequency (Number) – high pass frequency of the filter (Hz)

highCutFrequency (Number) – high cut frequency of the filter (Hz)

samplingRate (Number) – sampling rate of the data to be filtered (Hz)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
true if the variable has successfully created, else false

Return type
:
bool

TechlogFilter.ownFilterComputation(well: str, dataset: str, variable: str, response: list)
Apply your own filter on the variable and save the new filtered variable Warning : This is a legacy filter and will not be supported from version 2013.1

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

response (list) – the time response of your own filter

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.ricker(well: str, dataset: str, variable: str, centralFrequency: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)
Apply the Ricker filter on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

centralFrequency (Number) – central frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogFilter.rickerComputation(well: str, dataset: str, variable: str, centralFrequency: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)→ bool
Apply the Ricker filter on the variable and save the new filtered variable Warning : This is a legacy filter and will not be supported from version 2013.1

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

centralFrequency (Number) – central frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
true if the variable has successfully created, else false

Return type
:
bool

TechlogFilter.sincFilter(well: str, dataset: str, variable: str, centralFrequency: Number, samplingRate: Number, phase: Number, filterSize: Number, angle: Number = 0)
Apply the Sinc filter on the variable and save the new filtered variable

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

variable (str) – name of the variable

centralFrequency (Number) – central frequency of the filter (Hz)

samplingRate (Number) – the sampling rate of the variable (Hz)

phase (Number) – 0 = zero phase, 1 = minimum, 2 = maximum, 3 = rotated

filterSize (Number) – size of the filter signal

angle (Number) – Optional; angle for the phase to be rotated by

Returns
:
returns three list of values in case of successful computation: impulse response, amplitude spectrum and phase spectrum values

Return type
:
(Number, Number, Number)

TechlogGeomecha
TechlogGeomecha.Amoco(Rhob: list, TVDBML: list)→ dict
Compute Amoco equation coefficients

Parameters
:
Rhob (list) – vertical stress values (in ppg)

TVDBML (list) – TVD-Airgap-waterDepth in feet

Returns
:
return the error, the A and alpha constant

Return type
:
dict

TechlogGeomecha.bowers(verticalStress: list, shaleFlag: list, channel: list, ppNorm: list, depth: list, v0: Number, a: Number, b: Number)→ list
Apply Bowers equation

Parameters
:
verticalStress (list) – vertical stress values (in ppg)

shaleFlag (list) – shale flag values

channel (list) – compressional slowness (us/ft)

ppNorm (list) – normal pore pressure (in ppg)

depth (list) – list of depths in TVD (in ft)

v0 (Number) – velocity min

a (Number) – A parameters

b (Number) – B parameters

Returns
:
list of value with Bowers equation (in ppg)

Return type
:
list

TechlogGeomecha.eatonResistivity(verticalStress: list, shaleFlag: list, resistivity: list, trendLine: list, ppNorm: list, factor: Number, exponent: Number)→ list
Apply Eaton Resistivity equation

Parameters
:
verticalStress (list) – vertical stress values (in ppg)

shaleFlag (list) – shale flag values

resistivity (list) – compressional slowness

trendLine (list) – trend line

ppNorm (list) – normal pore pressure (in ppg)

factor (Number) – factor for the Eaton equation

exponent (Number) – exponent for the Eaton equation

Returns
:
list of value with Eaton Resistivity equation (in ppg)

Return type
:
list

TechlogGeomecha.eatonSonic(verticalStress: list, shaleFlag: list, slowness: list, trendLine: list, ppNorm: list, factor: Number, exponent: Number)→ list
Apply Eaton Sonic equation

Parameters
:
verticalStress (list) – vertical stress values (in ppg)

shaleFlag (list) – shale flag values

slowness (list) – compressional slowness

trendLine (list) – trend line

ppNorm (list) – normal pore pressure (in ppg)

factor (Number) – factor for the Eaton equation

exponent (Number) – exponent for the Eaton equation

Returns
:
list of value with Eaton Sonic equation (in ppg)

Return type
:
list

TechlogGeomecha.fractureGradient_K0(verticalStressGradient: list, pressureGradient: list, k: Number, alpha: Number = 1)→ list
Apply Fracture Gradient with K0 method

Parameters
:
verticalStressGradient (list) – vertical stress values (in ppg)

pressureGradient (list) – pressure gradient values

k (Number) – coefficient

alpha (Number) – Optional; alpha coefficientOutput:

list – list of value with Fracture Gradient K0 equation (in ppg)
TechlogGeophi
TechlogGeophi.FFT(signal: list, sampleNumber: Number, isign: Number, img: list)
Fast Fourier Transform

Parameters
:
signal (list) – signal

sampleNumber (Number) – sampleNumber

isign (Number) – isign

img (list) – img

Returns
:
output list bool: operation exit status

Return type
:
list

TechlogGeophi.RFCComputation(well: str, dataset: str, rhob: str, dt: str)
RFC computation

Parameters
:
well (str) – well name

dataset (str) – dataset name

rhob (str) – rhob variable name

dt (str) – dt variable name

Returns
:
rfc output list list: runsum output list bool: operation exit status

Return type
:
list

TechlogGeophi.TZComputation(well: str, dataset: str, sonic: str, owt: Number, owtDepth: Number, waterDepth: Number, waterVeloc: Number, logDatum: Number, freq: Number)
Time to depth computation

Parameters
:
well (str) – well name

dataset (str) – dataset name

sonic (str) – sonic variable name

owt (Number) – One way time

owtDepth (Number) – one way time depth

waterDepth (Number) – water depth

waterVeloc (Number) – water velocity

logDatum (Number) – log datum

freq (Number) – output frequency

Returns
:
time values list list: depth values list bool: operation exit status

Return type
:
list

TechlogGeophi.convolution(signal1: list, size1: Number, signal2: list, size2: Number)
Convolution analysis

Parameters
:
signal1 (list) – signal1

size1 (Number) – size1

signal2 (list) – signal2

size2 (Number) – size2

Returns
:
output list bool: operation exit status

Return type
:
list

TechlogGeophi.gassmann(computePhi: bool, poissonExists: bool, computeModulusGrain: bool, dt: Number, dtShear: Number, dtSub: Number, dtShearSub: Number, rhoBulk: Number, rhoGrain: Number, rhoBrine: Number, rhoOil: Number, rhoGas: Number, velocityGrain: Number, velocityBrine: Number, velocityOil: Number, velocityGas: Number, satInitBrine: Number, satInitOil: Number, satInitGas: Number, satFinalBrine: Number, vsatFinalOil: Number, satFinalGas: Number, phi: Number, poissonRatioGrain: Number, poissonRatioMatrix: Number)→ list
Fluid subtitution using Gassmann equation

Parameters
:
computePhi (bool) – computePhi

poissonExists (bool) – poissonExists

computeModulusGrain (bool) – computeModulusGrain

dt (Number) – dt

dtShear (Number) – dtShear

dtSub (Number) – dtSub

dtShearSub (Number) – dtShearSub

rhoBulk (Number) – [g/cm3] rhoBulk

rhoGrain (Number) – [g/cm3] rhoGrain

rhoBrine (Number) – [g/cm3] rhoBrine

rhoOil (Number) – [g/cm3] rhoOil

rhoGas (Number) – [g/cm3] rhoGas

velocityGrain (Number) – [ft/sec] velocityGrain

velocityBrine (Number) – [ft/sec] velocityBrine

velocityOil (Number) – [ft/sec] velocityOil

velocityGas (Number) – [ft/sec] velocityGas

satInitBrine (Number) – [v/v] satInitBrine

satInitOil (Number) – [v/v] satInitOil

satInitGas (Number) – [v/v] satInitGas

satFinalBrine (Number) – [v/v] satFinalBrine

vsatFinalOil (Number) – [v/v] vsatFinalOil

satFinalGas (Number) – [v/v] satFinalGas

phi (Number) – phi

poissonRatioGrain (Number) – poissonRatioGrain

poissonRatioMatrix (Number) – poissonRatioMatrix

Returns
:
output list

Return type
:
list

TechlogGeophi.getFrequencyAnalysis(signal: list, frequencies: list, reference: list, sampleNumber: Number, sampleRate: float)→ bool
Frequency Analysis

Parameters
:
signal (list) – signal

frequencies (list) – frequencies

reference (list) – reference

sampleNumber (Number) – sampleNumber

sampleRate (float) – sampleRate

Returns
:
operation exit status

Return type
:
bool

TechlogGeophi.normalize(signal: list, sampleNumber: int, min: float, max: float)→ bool
Amplitude normalisation

Parameters
:
signal (list) – signal

sampleNumber (int) – sampleNumber

min (float) – min

max (float) – max

Returns
:
operation exit status

Return type
:
bool

TechlogGeophi.removeDC(data: list, size: Number, dcLength: Number, frequency: Number)→ list
Anti-aliasing filter

Parameters
:
data (list) – data

size (Number) – size

dcLength (Number) – dcLength

frequency (Number) – frequency

Returns
:
processed data

Return type
:
list

TechlogGeophi.timeConvolution(signal1: list, size1: Number, signal2: list, size2: Number)
Time convolution analysis

Parameters
:
signal1 (list) – signal1

size1 (Number) – size1

signal2 (list) – signal2

size2 (Number) – size2

Returns
:
output list bool: operation exit status

Return type
:
list
TechlogIpsom
TechlogIpsom.IpsomApply(mapName: str, listLog: list, datasetSize: Number)
Apply Ipsom

Parameters
:
mapName (str) – Relative map name (eg: ProjectName)

listLog (list) – list log (concatenated variables values inside one list)

datasetSize (Number) – dataset size

Returns
:
output dictionary with the following keys: list: result list: probability

Return type
:
dict
TechlogMath
TechlogMath.almostEqual(value1, value2, max_ulps=-1)
TechlogMath.boxCox(value, min_value, lambda_)
TechlogMath.boxCoxInv(value, min_value, lambda_)
TechlogMath.canConvertUnit(from_unit, to_unit)
TechlogMath.exp10(value)
TechlogMath.findNearestIndex(data: list, value, nb_points=-1)
TechlogMath.findNearestIndexBefore(data: list, value, nb_points=-1)
TechlogMath.findNearestIndexUnsortedUncleanData(data: list, value, nb_points=-1)
TechlogMath.inv(value)
TechlogMath.limitValue(value, min_value=0, max_value=1)
TechlogMath.log(value, base=None)
TechlogMath.log10(value)
TechlogMath.pow10(value)
TechlogMath.random()→ x in the interval [0, 1).
TechlogMath.sqrt(value)
TechlogMath.unitValueConvert(from_unit, to_unit, value)
TechlogMath.unitValueListConvert(from_unit, to_unit, values)
TechlogMEM
TechlogMEM.brieShearModulusDynamicSandstone(ShearModulus: list, float, RefG: list, float)→ list, float
Compute with Brie equation

Parameters
:
ShearModulus (list, float) – input value (can be a single value or a list of value), the unit must be GPa or equivalent

RefG (list, float) – input value (can be a single value or a list of value), the unit must be GPa or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is GPa.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.brieShearModulusDynamicShale(ShearModulus: list, float, RefG: list, float)→ list, float
Compute with Brie equation

Parameters
:
ShearModulus (list, float) – input value (can be a single value or a list of value), the unit must be GPa or equivalent

RefG (list, float) – input value (can be a single value or a list of value), the unit must be GPa or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is GPa.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.fullerYoungModulusStaticSandstone(YoungModulus: list, float)→ list, float
Compute with Fuller equation

Parameters
:
YoungModulus (list, float) – input value (can be a single value or a list of value), the unit must be Mpsi or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.modifiedMoralesYoungModulusStaticSandstone(YoungModulus: list, float, Porosity: list, float)→ list, float
Compute with Modified Morales equation

Parameters
:
YoungModulus (list, float) – input value (can be a single value or a list of value), the unit must be Mpsi or equivalent

Porosity (list, float) – input value (can be a single value or a list of value), the unit must be ft3/ft3 or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is Mpsi.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.plumbClayVolumeAndPorosity(Porosity: list, float, ShaleVolume: list, float)→ list, float
Compute with Plumb equation

Parameters
:
Porosity (list, float) – input value (can be a single value or a list of value), the unit must be ft3/ft3 or equivalent

ShaleVolume (list, float) – input value (can be a single value or a list of value), the unit must be ft3/ft3 or equivalent

Returns
:
return the computed value(friction angle) as float if the input is a single value or as list, the unit is deg.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.plumbPorositySandstone(Porosity: list, float)→ list, float
Compute with Plumb equation

Parameters
:
Porosity (list, float) – input value (can be a single value or a list of value), the unit must be ft3/ft3 or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is MPa.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.plumbPorosityShale(Porosity: list, float)→ list, float
Compute with Plumb equation

Parameters
:
Porosity (list, float) – input value (can be a single value or a list of value), the unit must be ft3/ft3 or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is MPa.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.plumbShearModulusDynamicSandstone(ShearModulus: list, float)→ list, float
Compute with Plumb equation

Parameters
:
ShearModulus (list, float) – input value (can be a single value or a list of value), the unit must be GPa or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is MPa.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float

TechlogMEM.plumbYoungModulusStaticGeneric(YoungModulus: list, float)→ list, float
Compute with Plumb equation

Parameters
:
YoungModulus (list, float) – input value (can be a single value or a list of value), the unit must be GPa or equivalent

Returns
:
return the computed value(Unconfined compressive strength) as float if the input is a single value or as list, the unit is MPa.
if the input value isn’t a valid type, it return None. if the argument are not valid it return False.

Return type
:
list, float
TechlogPlatform
TechlogPlatform.addWorkspace(type: int, name: str = 'Techlog workspace')→ str
Add a workspace - deprecated function - use createWorkpace instead

Parameters
:
type (int) – unused argument.

name (str) – Optional; workspace name.

Returns
:
workspace UNIQUE ID

Return type
:
str

TechlogPlatform.addWorskpaceAndSetDefaultTemplateDashboard(w: str, n: str, level: str = 'User')→ bool
Add workspace and set default dashboard template

Parameters
:
w (str) – worskpace type

n (str) – template name

level (str) – Optional; level: {‘Project’, ‘User’, ‘Company’, ‘Techlog’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.closeWorkspace(id: str)→ bool
Close the workspace. If it is the current workspace, an other one will be set as current

Parameters
:
id (str) – workspace ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.countActualVisibleWidget()→ int
Get the number of visible widgets on screen

Returns
:
number of displayed widgets

Return type
:
int

TechlogPlatform.countAllWorkspaceWidget(mode: str = 'All')→ int
Count the number of widgets in all workspaces
mode (str): Optional; {‘All’, ‘Visible’}

Returns
:
number of visible widgets in all workspaces

Return type
:
int

TechlogPlatform.countWorkspaceWidget(id: str = 'CurrentWorkspaceID', mode: str = 'All')→ int
Count the number of widgets in a given workspace
id (str): Optional; workspace ID, current by default mode (str): Optional; {‘All, ‘Visible’}

Returns
:
number of visible widgets in given workspace

Return type
:
int

TechlogPlatform.createWorkspace(name: str = 'Techlog workspace')→ str
Add a workspace

Parameters
:
name (str) – Optional; workspace name.

Returns
:
workspace UNIQUE ID

Return type
:
str

TechlogPlatform.getCurrentWorkspace()→ str
Get the name of the current workspace

Returns
:
current workspace ID

Return type
:
str

TechlogPlatform.getUptime()→ str
Get the uptime of Techlog

Returns
:
Elapsed time in iso format [DD]T[hh]:[mm]:[ss]

Return type
:
str

TechlogPlatform.getWidgetIDs()→ list
Get the IDs of widgets contained in the current workspace

Returns
:
widget IDs

Return type
:
list

TechlogPlatform.loadTemplateDashboard(n: str, level: str = 'User')→ bool
Load a dashboard template

Parameters
:
n (str) – template name

level (str) – Optional; level: {‘Project’, ‘User’, ‘Company’, ‘Techlog’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.loadWorkspace(filename: str, level: str = 'Project')→ str
Load and set as current the named workspace

Parameters
:
filename (str) – workspace filename

level (str) – Optional; level: {‘Project’, ‘User’, ‘Company’}

Returns
:
new workspace ID, None if operation failed

Return type
:
str

TechlogPlatform.runAutomaticScript(type: str, option: str)→ bool
Launch one of the Techlog scripts set as an automatic script to run upon Import, Export, Startup or Project opening …

Parameters
:
type (str) – ‘import’, ‘export’, ‘startup’ or ‘open’

option (str) – ‘before’ or ‘after’

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.saveTemplateDashboard(n: str, level: str = 'User')→ bool
Save a dashboard template

Parameters
:
n (str) – template name

level (str) – Optional; level: {‘Project’, ‘User’, ‘Company’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.saveWorkspace(id: str, level: str = 'Project', name: str = '')→ bool
Save the named workspace. Current opened widget won’t be saved. Will overwrite existing file.

Parameters
:
id (str) – workspace ID

level (str) – Optional; level: {‘Project’, ‘User’, ‘Company’}

name (str) – Optional; chose a new name (workspace name used by default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.setCurrentWorkspace(id: str)→ bool
Set the current workspace

Parameters
:
id (str) – workspace ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlatform.setViewMode(mode: str)→ None
Set view mode

Parameters
:
mode (str) – View Mode {‘Dashboard’, ‘Floating’}

Returns
:
None

Return type
:
None

TechlogPlatform.setWorkspaceViewMode(id: str, mode: str)→ None
Deprecated, please use setViewMode insteadSet workspace view mode

Parameters
:
id (str) – workspace ID

mode (str) – View Mode {‘Dashboard’, ‘Floating’}

Returns
:
None

Return type
:
None
TechlogPlot
Adjust
TechlogPlot.adjustH(plotID: Number)→ bool
Adjust a cross-plot or a logview horizontally

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.adjustHV(plotID: Number)→ bool
Adjust a cross-plot or a logview horizontally and vertically

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.adjustV(plotID: Number)→ bool
Adjust a cross-plot or a logview vertically

Parameters
:
plotID (Number) – window ID

Returns
:
operation exit status

Return type
:
bool

BaseMap
TechlogPlot.baseMapAddChart(plotID: Number, cn: str)→ bool
Add chart to the basemap

Parameters
:
plotID (Number) – basemap window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAddMap(plotID: Number, name: str)→ bool
Add a map to an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – map name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAddWell(plotID: Number, name: str)→ bool
Add a well to an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapAdjustToMap(plotID: Number)→ bool
Adjust the basemap to the map

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapCreate(n: str, xn: list = None, map: str = None)→ Number
Create a basemap

Parameters
:
n (str) – plot name

xn (list) – Optional; list of well name

map (str) – Optional; map name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.baseMapOpen(n: str, f: str = None)→ Number
Open an existing basemap

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.baseMapRemoveMap(plotID: Number)→ bool
Remove the map from an existing basemap

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapRemoveWell(plotID: Number, name: str)→ bool
Remove a well from an existing basemap

Parameters
:
plotID (Number) – plot window ID

name (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSave(plotID: Number, n: str, f: str = '')→ bool
Save the basemap

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSaveMap(plotID: Number, n: str, f: str = '')→ bool
Save the map of a basemap

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the contour color on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourColorMode(plotID: Number, mode: str = 'UNIFORM')→ bool
Set the contour color mode on basemap

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘UNIFORM’, ‘PALETTE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourComputationStep(plotID: Number, value: Number)→ bool
Set the contour computation step on basemap

Parameters
:
plotID (Number) – plot window ID

value (Number) – step value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourThickness(plotID: Number, value: Number)→ bool
Set the contour thickness on basemap

Parameters
:
plotID (Number) – plot window ID

value (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourValueVisible(plotID: Number, b: bool)→ bool
Set the contour value visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour value visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourVisible(plotID: Number, b: bool)→ bool
Set the contour visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetContourWithData(plotID: Number, b: bool)→ bool
Set the contour with data on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – contour with data if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensitySmooth(plotID: Number, b: bool)→ bool
Set the smooth density visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – smooth density visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensityValuesVisible(plotID: Number, b: bool)→ bool
Set the density values visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – density values visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDensityVisible(plotID: Number, b: bool)→ bool
Set the density visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – density visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDerrickColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the derrick on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetDerrickSize(plotID: Number, size: Number)→ bool
Set the size of the derrick on basemap

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetKeepProportion(plotID: Number, b: bool)→ bool
Set the keep proportion on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – keep proportion if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelBackgroundVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the background of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; background visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelDisplayMode(plotID: Number, type: str = 'WELL')→ bool
Set the display mode of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘WELL’, ‘CUSTOM’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelPositionType(plotID: Number, type: str = 'TOP')→ bool
Set the position type of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘NONE’, ‘TOP’, ‘BOTTOM’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetLabelWellProperties(plotID: Number, s: str)→ bool
Set the well properties of the labels on basemap

Parameters
:
plotID (Number) – plot window ID

s (str) – well properties

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetOpacityActivated(plotID: Number, b: bool)→ bool
Set the opacity activation on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – opacity activated if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetOpacityValue(plotID: Number, f: Number)→ bool
Set the opacity value on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – opacity value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the border color of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialPosition(plotID: Number, x: Number, y: Number)→ bool
Set the position of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

x (Number) – x position

y (Number) – y position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialSize(plotID: Number, f: Number)→ bool
Set the size of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetReferentialVisible(plotID: Number, b: bool)→ bool
Set the visibility of the referential on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetScaleVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the scale on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; scale visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolDisplayMode(plotID: Number, type: str = 'DERRICK')→ bool
Set the symbol display mode on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘DERRICK’, ‘STATUS’, ‘CUSTOM’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolSize(plotID: Number, size: Number)→ bool
Set the symbol size on basemap

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetSymbolWellProperties(plotID: Number, s: str)→ bool
Set the symbol well properties on basemap

Parameters
:
plotID (Number) – plot window ID

s (str) – well properties

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryMappedValue(plotID: Number, visible: bool = False)→ bool
Set the visibility of the mapped value on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; mapped value visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetTrajectoryVisible(plotID: Number, visible: bool = False)→ bool
Set the visibility of the trajectory on basemap

Parameters
:
plotID (Number) – plot window ID

visible (bool) – Optional; trajectory visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetWellColorVisible(plotID: Number, b: bool)→ bool
Set the well color visibility on basemap

Parameters
:
plotID (Number) – plot window ID

b (bool) – well color visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisGraduations(plotID: Number, f: Number)→ bool
Set x axis graduations on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set x axis type on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set x axis user limits on basemap

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user value

max (Number) – max user value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetXYUnit(plotID: Number, unit: str)→ bool
Set x and y unit on basemap

Parameters
:
plotID (Number) – plot window ID

unit (str) – unit value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisGraduations(plotID: Number, f: Number)→ bool
Set y axis graduations on basemap

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set y axis type on basemap

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.baseMapSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set y axis user limits on basemap

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user value

max (Number) – max user value

Returns
:
operation exit status

Return type
:
bool

Box Plot
TechlogPlot.boxPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotApplyTo(plotID: Number, ds: list)→ list
Apply the box-plot to a data set list

Parameters
:
plotID (Number) – box-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.boxPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new box-plot

Parameters
:
n (str) – box-plot window name

vl (list) – Optional; variable list

f (str) – Optional; filter variable ID

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotDeleteVariables(plotID: Number, vn: list)→ bool
Delete the variable list of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotDuplicate(plotID: Number)→ Number
Duplicate the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.boxPlotGetIdByName(n: str)→ Number
Find the ID of a name-known box-plot

Parameters
:
n (str) – box-plot name

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMeanColor instead) Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change mean markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMeanStdDeviation(plotID: Number, show: bool)→ bool
Mean & standard deviation display in box-plot

Parameters
:
plotID (Number) – box-plot window ID

show (bool) – True if show, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellAddData(plotID: Number, ds: str)→ bool
Add a dataset to a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the box-plot - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the box-plot

Parameters
:
plotID (Number) – box-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellCreate(ml: list)→ Number
Create a multi well box-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.boxPlotMultiWellDuplicate(plotID: Number)→ Number
Duplicate the box-plot

Parameters
:
plotID (Number) – box-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.boxPlotMultiWellGetIdByName(n: str)→ Number
Find the ID of a name-known box-plot

Parameters
:
n (str) – box-plot name

Returns
:
box-plot window ID

Return type
:
Number

TechlogPlot.boxPlotMultiWellMeanColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (Use boxPlotMultiWellMeanColor instead) Change mean markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change mean markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellMeanStdDeviation(plotID: Number, show: bool)→ bool
Mean & standard deviation display in box-plot

Parameters
:
plotID (Number) – box-plot window ID

show (bool) – True if show, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellOpen(n: str, f: str = '')→ bool
Open an existing box-plot

Parameters
:
n (str) – box-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – box-plot window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – box-plot window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – box-plot window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – box-plot window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the box-plot quantiles

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – box-plot window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use boxPlotMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well box-plot

Parameters
:
plotID (Number) – box-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetAxisInverse(plotID: Number, inv: bool)→ bool
Inverse a box-plot variable scale

Parameters
:
plotID (Number) – box-plot window ID

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change boxes border color

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMultiWellSetBoxColor instead) Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetBoxDisplay(plotID: Number, type: int, size: Number = 8)→ bool
Change boxes general display

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – new box-plot window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisScale(plotID: Number, sc: int)→ bool
Change a box-plot variable Y axis scale

Parameters
:
plotID (Number) – box-plot window ID

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisType(plotID: Number, t: int)→ bool
Change the type of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

t (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisUnit(plotID: Number, u: str)→ bool
Change the unit of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

u (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set min & max values of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

min (Number) – Y axis minimum

max (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotMultiWellStdDevColor instead) Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStdDevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotMultiWellStddevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
[DEPRECATED] (use boxPlotMultiWellStdDevMarkers instead) Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotOpen(n: str, f: str = '')→ bool
Open an existing box-plot

Parameters
:
n (str) – box-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – box-plot window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – box-plot window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – box-plot window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – box-plot window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the box-plot quantiles

Parameters
:
plotID (Number) – box-plot window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – box-plot window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – box-plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a box-plot variable scale

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxBorder(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change boxes border color

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxColor(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxColour(plotID: Number, v: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotSetBoxColor instead) Change boxes color

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetBoxDisplay(plotID: Number, type: int, size: Number = 8)→ bool
Change boxes general display

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetDatum(plotID: Number, lim: bool, min: Number = 0, max: Number = 0)→ bool
Change the reference limitation on box-plot

Parameters
:
plotID (Number) – box-plot window ID

lim (bool) – True for user’s limitaion, False else

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – box-plot window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetName(plotID: Number, n: str)→ bool
Change the name of the box-plot

Parameters
:
plotID (Number) – box-plot window ID

n (str) – new box-plot window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a box-plot variable Y axis scale

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

t (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

u (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetXAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a box-plot variable Y axis

Parameters
:
plotID (Number) – box-plot window ID

v (str) – variable name

min (Number) – X axis minimum

max (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the box-plot

Parameters
:
plotID (Number) – box-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use boxPlotStdDevColor instead) Change standard deviation markers color in box-plot

Parameters
:
plotID (Number) – box-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStdDevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.boxPlotStddevMarkers(plotID: Number, type: int, size: Number = 8)→ bool
[DEPRECATED] (use boxPlotStdDevMarkers instead) Change standard deviation markers in box-plot

Parameters
:
plotID (Number) – box-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 30)

Returns
:
operation exit status

Return type
:
bool

Composite Printing
TechlogPlot.compositePrintingAddObject(composerID: Number, name: str, type: Number, folder: str = None)→ bool
Add an object to the composer

Parameters
:
composerID (Number) – composer window ID

name (str) – object name

type (Number) – 0 = Header; 1 = Layout; 2 = CrossPlot; 3 = Histogram; 4 = Picture

folder (str) – Optional; object folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingCreate()→ Number
Create a new composer

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingLayoutObjectScale(composerID: Number, objectIndex: Number, scale: Number)→ bool
Change the scale of a layout object of the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

scale (Number) – new scale of the layout

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingMoveObjectDown(composerID: Number, objectIndex: Number)→ bool
Move an object down in the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingMoveObjectUp(composerID: Number, objectIndex: Number)→ bool
Move an object up in the composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingNew(composerID: Number)→ bool
Reset the composer

Parameters
:
composerID (Number) – composer window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingObjectApplyTo(composerID: Number, objectIndex: Number, well: str = None, dataset: str = None)→ Number
Apply the object preview of the composer to a particular well and dataset

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingOpen(n: str, f: str = None)→ Number
Open an existing composer

Parameters
:
n (str) – composer name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreview(composerID: Number)→ bool
Preview the composer

Parameters
:
composerID (Number) – composer window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewApplyTo(composerID: Number, well: str = None, dataset: str = None)→ Number
Apply the composer preview to a particular well and dataset

Parameters
:
composerID (Number) – composer window ID

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreviewGet()→ Number
Get the plot ID of the composer preview

Returns
:
plot ID

Return type
:
Number

TechlogPlot.compositePrintingPreviewPrint(hideDialog: bool)→ bool
Print the composer preview

Parameters
:
hideDialog (bool) – 1 = hide dialog box; 0 = show dialog box

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetHorizontalRulerVisibility(visible: bool)→ bool
Change the horizontal ruler visibility of the composer preview

Parameters
:
visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetUnit(unit: str)→ bool
Set the unit of the composer preview

Parameters
:
unit (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingPreviewSetVerticalRulerVisibility(visible: bool)→ bool
Change the vertical ruler visibility of the composer preview

Parameters
:
visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingRemoveObject(composerID: Number, objectIndex: Number)→ bool
Remove an object from composer

Parameters
:
composerID (Number) – composer window ID

objectIndex (Number) – index (from 0) of the object in the list of objects

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.compositePrintingSave(composerID: Number, n: str, f: str = None)→ bool
Save the composer

Parameters
:
composerID (Number) – composer window ID

n (str) – composer name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

Container
TechlogPlot.containerAddCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
Add the cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

row (Number) – cell row

column (Number) – cell column

rowSpan (Number) – [optional] cell row span

columnSpan (Number) – [optional] cell column span

TechlogPlot.containerCellExist(containerID: Number, cellID: Number)→ bool
Check if the cell exist or not

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

Returns
:
cell exist (true) or not

Return type
:
bool

TechlogPlot.containerCreate(name: str, title: str)→ Number
Create a new container

Parameters
:
name (str) – container name

title (str) – container title

Returns
:
container ID

Return type
:
Number

TechlogPlot.containerFindCell(containerID: Number, cellID: Number)→ bool or Position
Find container cell by column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

Returns
:
if cell exist position (0 -> column, 1 -> row) else False

Return type
:
bool or Position

TechlogPlot.containerGetCell(containerID: Number, row: Number, column: Number)→ Number
Get container cell by row and column

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

Returns
:
cell ID

Return type
:
Number

TechlogPlot.containerGetTitle(containerID: Number)→ str
Get container title

Parameters
:
containerID (Number) – container instance ID

Returns
:
container title

Return type
:
str

TechlogPlot.containerGetTitleAreaHeight(containerID: Number)→ Number
Get container title height

Parameters
:
containerID (Number) – container instance ID

Returns
:
container title height

Return type
:
Number

TechlogPlot.containerGetTitleVisible(containerID: Number)→ bool
Get container visibility

Parameters
:
containerID (Number) – container instance ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.containerMoveCell(containerID: Number, cellID: Number, row: Number, column: Number, rowSpan: Number, columnSpan: Number)
Move the cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

row (Number) – cell row

column (Number) – cell column

rowSpan (Number) – [optional] cell row span

columnSpan (Number) – [optional] cell column span

TechlogPlot.containerRemoveCell(containerID: Number, cellID: Number)
Remove specified cell by ID

Parameters
:
containerID (Number) – container instance ID

cellID (Number) – cell ID

TechlogPlot.containerRemoveCellFromPos(containerID: Number, row: Number, column: Number)
[DEPRECATED] (use containerRemoveCellFromPosition instead) Remove cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

TechlogPlot.containerRemoveCellFromPosition(containerID: Number, row: Number, column: Number)
[DEPRECATED] Remove cell in specified column and row

Parameters
:
containerID (Number) – container instance ID

row (Number) – cell row

column (Number) – cell column

TechlogPlot.containerSetTitle(containerID: Number, title: str)
Set container title

Parameters
:
containerID (Number) – container instance ID

title (str) – container title

TechlogPlot.containerSetTitleVisible(containerID: Number, visible: bool)
Set container visibility

Parameters
:
containerID (Number) – container instance ID

visible (bool) – visibility state

Cross Plot
TechlogPlot.crossPlot2ndScaleMarkers(plotID: Number, type: int, size: Number = 5)→ bool
[DEPRECATED] Set type & size of cross-plot second scale’s markers

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot2ndScaleMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] Choose the cross-plot second scale’s markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot2ndScaleMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlot2ndScaleMarkersColor instead) Choose the cross-plot second scale’s markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlot3DMonoWellDuplicate(plotID: Number)→ Number
Duplicate the 3D cross-plot

Parameters
:
plotID (Number) – 3D cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlot3DMultiWellDuplicate(plotID: Number)→ Number
Duplicate the 3D cross-plot

Parameters
:
plotID (Number) – 3D cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation on cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAA & sets the color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAAddZone(plotID: Number, z: str)→ bool
Display of a zone from cross-plotAA dataset zonation

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plot AA to a data set list

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotAACleanZonation(plotID: Number, ds: str)→ bool
Remove a zonation dataset from cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (str) – zonation dataset

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAACleanZone(plotID: Number, z: str)→ bool
Remove the display of a zone from cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAACreate(n: str, xn: str = '', yn: str = '', f: str = '', xn2: str = '', yn2: str = '', matrixID: Number = None)→ Number
Create a new cross-plot AA

Parameters
:
n (str) – cross-plotAA window name

xn (str) – Optional; array X name

yn (str) – Optional; array Y name

f (str) – Optional; filter variable name

xn2 (str) – Optional; second X array name

yn2 (str) – Optional; second Y array name

matrixID (Number) – Optional; if the cross-plot will be inserted into a matrix, give matrix ID

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAADeleteColor2Values(plotID: Number)→ bool
Delete the variable present on the second color scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteColorValues(plotID: Number)→ bool
Delete the variable present on the color scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteLabelValues(plotID: Number)→ bool
Delete the variable present on the label scale of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteX2Values(plotID: Number)→ bool
Delete the variable present on the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteXValues(plotID: Number)→ bool
Delete the variable present on the X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteY2Values(plotID: Number)→ bool
Delete the variable present on the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADeleteYValues(plotID: Number)→ bool
Delete the variable present on the Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plotAA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADisplaySecondVarOver(plotID: Number, activate: bool)→ bool
[DEPRECATED] (use crossPlotAADisplaySecondVariableOver instead) Display cross-plotAA second axis over the first axis

Parameters
:
plotID (Number) – cross-plotAA window ID

activate (bool) – True if activated, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADisplaySecondVariableOver(plotID: Number, activate: bool)→ bool
Display cross-plotAA second axis over the first axis

Parameters
:
plotID (Number) – cross-plotAA window ID

activate (bool) – True if activated, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAADuplicate(plotID: Number)→ Number
Duplicate the cross-plot AA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotAAGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot AA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotAALinkThickness(plotID: Number, thk: Number = 0)→ Number
Link thickness cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

thk (Number) – Optional; link thikness

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotAALockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAV

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAALockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScale(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAA second scale markers

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScaleColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAA second scale markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkers2ndScaleColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAAMarkers2ndScaleColor instead) Choose the cross-plotAA second scale markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAA markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAAMarkersColor instead) Choose the cross-plotAA markers color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMarkersDisplay(plotID: Number, display: bool = True)→ Number
Display of cross-plotAA markers

Parameters
:
plotID (Number) – cross-plotAA window ID

display (bool) – Optional; markers display

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAA & sets the color

Parameters
:
plotID (Number) – cross-plotAA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegressionByWell(plotID: Number)→ bool
Add a regression by well in a cross-plotAA

Parameters
:
plotID (Number) – cross-plot windowAA ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellCreate(ml: list)→ Number
Create a multi well cross-plotAA

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plotAA in normal or density type

Parameters
:
plotID (Number) – cross-plotAA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellDuplicate(plotID: Number)→ Number
Duplicate the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plotAA

Parameters
:
n (str) – cross-plotAA window name

Returns
:
cross-plotAA window ID

Return type
:
Number

TechlogPlot.crossPlotAAMultiWellLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAV

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellOpen(n: str, f: str = None)→ bool
Open an existing cross-plotAA multi-well

Parameters
:
n (str) – cross-plotAA multi-well name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveDataset(plotID: Number, we: str)→ bool
Remove a dataset from a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAA axes

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – cross-plotAA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of multiwell cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – new cross-plotAA name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAA X axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAA Y axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAOpen(n: str, f: str = '')→ bool
Open an existing cross-plotAA

Parameters
:
n (str) – cross-plotAA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAARemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAARemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAAReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAA axes

Parameters
:
plotID (Number) – cross-plotAA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASave(plotID: Number, n: str, f: str = '')→ bool
Save a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – saving name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plotAA window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetColor(plotID: Number, vn: str)→ bool
Set a color variable to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetColor2(plotID: Number, vn: str)→ bool
Set a color variable to the second axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetDatum(plotID: Number, lim: bool, min: Number=0, max: Number)→ bool
Change the reference limitation on cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

lim (bool) – True for user’s limitaion, False else

min (Number) – Optional; top limit

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetFilter(plotID: Number, vn: str)→ bool
Set filter to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetLabel(plotID: Number, vn: str)→ bool
Set a label variable to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetName(plotID: Number, n: str)→ bool
Change cross-plotAA window name

Parameters
:
plotID (Number) – cross-plotAA window ID

n (str) – new name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetSecondYScale(plotID: Number, vn: str)→ bool
Set array variable to second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX(plotID: Number, vn: str)→ bool
Set array variable to X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX2(plotID: Number, vn: str)→ bool
Set array variable to the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetX2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the second X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAA X axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAA X axis

Parameters
:
plotID (Number) – cross-plotAA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetXValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the X axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY(plotID: Number, vn: str)→ bool
Set array variable to Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY2(plotID: Number, vn: str)→ bool
Set array variable to the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array variable ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetY2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the second Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAA Y axis scale

Parameters
:
plotID (Number) – cross-plotAA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAA Y axis

Parameters
:
plotID (Number) – cross-plotAA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetYValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the Y axis of a cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

vn (str) – array name

vl (list) – list of values

fam (str) – Optional; array family

un (str) – Optional; array unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAASetZonation(plotID: Number, ds: str)→ bool
Apply a zonation dataset to cross-plotAA

Parameters
:
plotID (Number) – cross-plotAA window ID

ds (str) – zonation dataset

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plotAVA & sets the color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plotAVAto a data set list

Parameters
:
plotID (Number) – cross-plotAVA window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotAVACleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVACleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVACreate(n: str, xn: str = '', yn: str = '', f: str = '', matrixID: Number = None)→ Number
Create a new cross-plotAVA

Parameters
:
n (str) – cross-plotAVA window name

xn (str) – Optional; variable X name

yn (str) – Optional; variable Y name

f (str) – Optional; filter variable name

matrixID (Number) – Optional; if the cross-plot will be inserted into a matrix, give matrix ID

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVADeleteColorValues(plotID: Number)→ bool
Delete the variable present on the color scale of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteXValues(plotID: Number)→ bool
Delete the variable present on the X axis of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADeleteYValues(plotID: Number)→ bool
Delete the variable present on the Y axis of a cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plotAVA window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plotAVA in normal or density type

Parameters
:
plotID (Number) – cross-plotAVA window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plotAVA window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVADuplicate(plotID: Number)→ Number
Duplicate the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotAVAGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotAVAGetIdByName(n: str)→ Number
Find the ID of a name-known cross-plotAVA

Parameters
:
n (str) – cross-plotAVA window name

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVAGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot AVA

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotAVALockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVALockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plotAVA markers

Parameters
:
plotID (Number) – cross-plotAVA window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plotAVA markers color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotAVAMarkersColor instead) Choose the cross-plotAVA markers color

Parameters
:
plotID (Number) – cross-plotAVA window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAOpen(n: str, f: str = '')→ Number
Open an existing cross-plotAVA

Parameters
:
n (str) – cross-plotAVA name

f (str) – Optional; folder

Returns
:
cross-plotAVA window ID

Return type
:
Number

TechlogPlot.crossPlotAVARemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVARemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVAReverseAxes(plotID: Number)→ bool
Reverse the cross-plotAVA axes

Parameters
:
plotID (Number) – cross-plotAVA window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

n (str) – cross-plotAVA name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plotAVA window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetColor(plotID: Number, Vname: str)→ bool
Set the color to an existing cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable name for the color

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetFilter(plotID: Number, Vname: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – filter variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetName(plotID: Number, n: str)→ bool
Change the name of mono cross-plotAVA

Parameters
:
plotID (Number) – cross-plotAVA window ID

n (str) – new cross-plotAVAname

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetX(plotID: Number, Vname: str)→ bool
Set the variable to X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable X name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plotAVA X axis scale

Parameters
:
plotID (Number) – cross-plotAVA window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plotAVA X axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetY(plotID: Number, Vname: str)→ bool
Set the variable to Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

Vname (str) – variable Y name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plotAVA Y axis scale

Parameters
:
plotID (Number) – cross-plotAVA window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plotAVA Y axis

Parameters
:
plotID (Number) – cross-plotAVA window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAVASetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plotAVA window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotActivateSecondAxe(plotID: Number, activate: bool = False)→ bool
[DEPRECATED] Activate the second axis in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

activate (bool) – Optional; activate

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddChart(plotID: Number, cn: str)→ bool
Add a chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Y parameter

val1 (Number) – value of Y parameter

min1 (Number) – minimum of Y parameter

max1 (Number) – maximum of Y parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number = 0)→ bool
Add a link between two parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – first parameter point id

ppid2 (str) – second parameter point id

lt (Number) – Optional; link style {0 = ‘AtoB’, 1 = ‘BtoA’, 2 = ‘BOTH’, 3 = ‘NOARROW’

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.crossPlotAddRegressionByFilter(plotID: Number)→ bool
Add a regression by filter in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotApplyTo(plotID: Number, ds: list)→ list
Apply the cross-plot to a data set list

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.crossPlotChartList()
Return the list of available charts

TechlogPlot.crossPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotCreate(n: str, xn: str = '', yn: str = '', f: str = '', xn2: str = '', yn2: str = '', widgetID: Number = None)→ Number
Create a new cross-plot

Parameters
:
n (str) – cross-plot window name

xn (str) – Optional; variable X name

yn (str) – Optional; variable Y name

f (str) – Optional; filter variable name

xn2 (str) – Optional; [DEPRECATED] second X variable name (unused since 2011.2)

yn2 (str) – Optional; [DEPRECATED] second Y variable name (unused since 2011.2)

widgetID (Number) – Optional; if the cross-plot will be inserted into a widget, give widget ID

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotDeleteColor2Values(plotID: Number)→ bool
[DEPRECATED] Delete the variable present on the second color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteColorValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteLabelValues(plotID: Number)→ bool
Delete the label variable of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeletePointSizeValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the point size scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteX2Values(plotID: Number)→ bool
Delete the variable present on the second X axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteXValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the X axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteY2Values(plotID: Number)→ bool
Delete the variable present on the second Y axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDeleteYValues(plotID: Number, ScaleId: str = '')→ bool
Delete the variable present on the Y axis of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plot window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotDuplicate(plotID: Number)→ Number
Duplicate the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotGetChartPolylinesInfo(plotID: Number)
Get the polylines information of all the charts loaded in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Output dict:
str: chart levelchart name str: polyline id if defined str: polyline name if defined list: list of X coordinate of the polyline points in the cross-plot X axis unit list: list of Y coordinate of the polyline points in the cross-plot Y axis unit list: list of the graduation values for each polyline points Number: value of the first constant of the polyline indexed by its name Number: value of the … constant of the polyline indexed by its name Number: value of the first parameter of the polyline indexed by its name Number: value of the … parameter of the polyline indexed by its name

TechlogPlot.crossPlotGetColorVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “color” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the color variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetLabelVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “label” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the label variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.crossPlotGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.crossPlotGetPointSizeVariable(plotID: int, ScaleId: str = '')→ str
Get the name of the variable of the axis “point size” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
name of the point size variable “Well.Dataset.Variable”

Return type
:
str

TechlogPlot.crossPlotGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotGetScaleList(plotID: int)→ List[str]
Get the list of scale names of a single well cross plot

Parameters
:
plotID (int) – cross plot window ID

Returns
:
list of scale names

Return type
:
List[str]

TechlogPlot.crossPlotGetXHistogramBinCount(plotID: Number)→ int
Getter for bin count on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram horizontal bin count (NONE if the given plotID doesn’t exist)}

Return type
:
int

TechlogPlot.crossPlotGetXVariableList(plotID: int, ScaleId: str = '')→ List[str]
Get the name of the variables of the axis “x” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
list of variable names in x [“Well.Dataset.Variable”]

Return type
:
List[str]

TechlogPlot.crossPlotGetYHistogramBinCount(plotID: Number)→ int
Getter for bin count on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram vertical bin count (NONE if the given plotID doesn’t exist)}

Return type
:
int

TechlogPlot.crossPlotGetYVariableList(plotID: int, ScaleId: str = '')→ List[str]
Get the name of the variables of the axis “y” of a single well cross plot scale

Parameters
:
plotID (int) – cross plot window ID

ScaleId (str) – Optional; Scale id - Scale 1 by default

Returns
:
list of variable names in y [“Well.Dataset.Variable”]

Return type
:
List[str]

TechlogPlot.crossPlotIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotIsXHistogramCumulativeFrequencyVisible(plotID: Number)→ bool
Getter for cumulative frequency visibility state on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram horizontal cumulative frequency visibility state (NONE if the given plotID doesn’t exist)}

Return type
:
bool

TechlogPlot.crossPlotIsYHistogramCumulativeFrequencyVisible(plotID: Number)→ bool
Getter for cumulative frequency visibility state on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
histogram vertical cumulative frequency visibility state (NONE if the given plotID doesn’t exist)}

Return type
:
bool

TechlogPlot.crossPlotLink(plotID: Number, link: bool)→ Number
Link cross-plot markers

Parameters
:
plotID (Number) – cross-plot window ID

link (bool) – True if linked, False else

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.crossPlotLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockAxisY(plotID: Number, locked: bool)→ bool
Lock y-axis limits of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkers(plotID: Number, type: int, size: Number = 5)→ bool
Set type & size of cross-plot markers

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Choose the cross-plot markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use crossPlotMarkersColor instead) Choose the cross-plot markers color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddChart(plotID: Number, cn: str)→ bool
Add chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddEquation(plotID: Number, eq: str, n: str = '', c: str = 'black')→ bool
Add an equation to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation formula

n (str) – Optional; equation name

c (str) – Optional; color Qt name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotMultiWellAddParameterLineY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Y parameter

val1 (Number) – value of Y parameter

min1 (Number) – minimum of Y parameter

max1 (Number) – maximum of Y parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.crossPlotMultiWellAddParameterPointLink(plotID: Number, ppid1: str, ppid2: str, lt: Number = 0)→ bool
Add a link between two parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – first parameter point id

ppid2 (str) – second parameter point id

lt (Number) – Optional; link style {0 = ‘AtoB’, 1 = ‘BtoA’, 2 = ‘BOTH’, 3 = ‘NOARROW’

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.crossPlotMultiWellAddRegressionByFilter(plotID: Number)→ bool
Add a regression by filter in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddRegressionByWell(plotID: Number)→ bool
Add a regression by well in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddRegressionByZone(plotID: Number)→ bool
Add a regression by zone in a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellChartList()
Return the list of available charts

TechlogPlot.crossPlotMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellClearAdvancedFilter(plotID: Number)→ bool
Clear the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellCreate(ml: list)→ Number
Create a multi well cross-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityType(plotID: Number, dst: bool)→ bool
Display of the cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – cross-plot window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellDuplicate(plotID: Number)→ Number
Duplicate the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetAdvancedFilter(plotID: Number)→ str
Get the advanced filter of the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
the filter equation

Return type
:
str

TechlogPlot.crossPlotMultiWellGetChartPolylinesInfo(plotID: Number)
Get the polylines information of all the charts loaded in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Output dict:
str: chart levelchart name str: polyline id if defined str: polyline name if defined list: list of X coordinate of the polyline points in the cross-plot X axis unit list: list of Y coordinate of the polyline points in the cross-plot Y axis unit list: list of the graduation values for each polyline points Number: value of the first constant of the polyline indexed by its name Number: value of the … constant of the polyline indexed by its name Number: value of the first parameter of the polyline indexed by its name Number: value of the … parameter of the polyline indexed by its name

TechlogPlot.crossPlotMultiWellGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.crossPlotMultiWellGetRegressions(plotID: Number)→ dict
get a dictionary of regressions in a cross-plot multi well

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
dictionary of regressions

Return type
:
dict

TechlogPlot.crossPlotMultiWellIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellOpen(n: str, f: str = '')→ Number
Open an existing cross-plot

Parameters
:
n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.crossPlotMultiWellRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterLineY(plotID: Number, ppid1: str)→ bool
Remove a parameter line Y in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellReverseAxes(plotID: Number)→ bool
Reverse the cross-plot axes

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use crossPlotMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str = '', yunit: str = '', zunit: str = '')→ bool
Set the density values of a multi-well cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

xpos (list) – list of x positions values

ypos (list) – list of y positions values

zdata (list) – list of data density values (zsize = (xsize-1)*(ysize-1))

xunit (str) – Optional; x unit

yunit (str) – Optional; y unit

zunit (str) – Optional; z unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetHistogramVisible(plotID: Number, cf: bool)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (bool) – {0 = ‘remove the histograms’, 1 = ‘display the histograms’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of multiwell cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisScale(plotID: Number, psasc: int)→ bool
Set the cross-plot point size axis scale

Parameters
:
plotID (Number) – cross-plot window ID

psasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max sizes of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum size

psamax (Number) – point size axis maximum size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisType(plotID: Number, psat: int)→ bool
Change the type of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psat (int) – point size axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max values of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum

psamax (Number) – point size axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotOpen(n: str, f: str = '')→ Number
Open an existing cross-plot

Parameters
:
n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.crossPlotPointSizeChange(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the point size to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable point size name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveAllEquations(plotID: Number)→ bool
Remove all equations from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveChart(plotID: Number, cn: str)→ bool
Remove a chart from the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart levelchart name. Chart level is optional and can be:

Techlog (default)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveEquation(plotID: Number, eq: str)→ bool
Remove an equation from an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

eq (str) – equation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterLineY(plotID: Number, ppid1: str)→ bool
Remove a parameter line Y in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotReverseAxes(plotID: Number)→ bool
Reverse the cross-plot axes

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – cross-plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetAdvancedFilter(plotID: Number, Equation: str)→ bool
Set an advanced filter on the cross plot

Parameters
:
plotID (Number) – cross-plot window ID

Equation (str) – equation defining the filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColor(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the color to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable name for the color

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColor2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the second color to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable second color name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColorValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColour2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetColourValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
[DEPRECATED] (use crossPlotSetColorValues instead) Set a fictive set of user variables to the color scale of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetDensityData(plotID: Number, xpos: list, ypos: list, zdata: list, xunit: str = '', yunit: str = '', zunit: str = '')→ bool
Set the density values of a cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

xpos (list) – list of x positions values

ypos (list) – list of y positions values

zdata (list) – list of data density values (zsize = (xsize-1)*(ysize-1))

xunit (str) – Optional; x unit

yunit (str) – Optional; y unit

zunit (str) – Optional; z unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFilter(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – filter variable name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFilterValues(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – spectrum window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetFirstScaleName(plotID: Number, n: str)→ bool
Change the name of first scale in a mono cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new first scale name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetGridVisible(plotID: Number, grid_X: int = 2, grid_Y: int = 2)→ bool
Hide or Display the Grid in all plots

Parameters
:
plotID (Number) – window ID

grid_X (int) – Optional; X grid visibility state: {0 = ‘HIDDEN’, 1 = ‘ONLY_PRIMARY’, 2 = ‘BOTH’}

grid_Y (int) – Optional; Y grid visibility state: {0 = ‘HIDDEN’, 1 = ‘ONLY_PRIMARY’, 2 = ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetHistogramVisible(plotID: Number, cf: bool)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (bool) – {0 = ‘remove the histograms’, 1 = ‘display the histograms’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetHistogramXYVisible(plotID: Number, cf: str)→ bool
Display histograms on the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cf (str) – {‘NONE’ = ‘remove the histograms’, ‘HISTO_X’ = ‘display the histogram for X axis’,

axis' ('HISTO_Y' = 'display the histogram for Y)

histograms'} ('BOTH' = 'display the)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabel(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the a label to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable label name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabel2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the a second label to an existing cross-plot

Parameters
:
plotID (Number) – cross-plot window windowID

Vname (str) – variable second label name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLabelValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the label axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLegendX(plotID: Number, legendx: str)→ bool
Set the cross-plot legend for X axis

Parameters
:
plotID (Number) – cross-plot window ID

legendx (str) – legendx

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetLegendY(plotID: Number, legendy: str)→ bool
Set the cross-plot legend for Y axis

Parameters
:
plotID (Number) – cross-plot window ID

legendy (str) – legendy

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetName(plotID: Number, n: str)→ bool
Change the name of mono cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPaletteBoundaries(plotID: Number, min: Number, max: Number)→ bool
Set the boundaries of the palette for a single-well cross plot.

Parameters
:
plotID (Number) – plot window ID

min (Number) – minimum of the palette

max (Number) – maximum of the palette

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisScale(plotID: Number, psasc: int)→ bool
Set the cross-plot point size axis scale

Parameters
:
plotID (Number) – cross-plot window ID

psasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisSizeLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max sizes of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum size

psamax (Number) – point size axis maximum size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisType(plotID: Number, psat: int)→ bool
Change the type of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psat (int) – point size axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetPointSizeAxisUserLimits(plotID: Number, psamin: Number, psamax: Number)→ bool
Set min & max values of cross-plot point size axis

Parameters
:
plotID (Number) – cross-plot window ID

psamin (Number) – point size axis minimum

psamax (Number) – point size axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetSubtitle(plotID: Number, subtitle: str)→ bool
Set the cross-plot subtitle

Parameters
:
plotID (Number) – cross-plot window ID

subtitle (str) – subtitle

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetTitle(plotID: Number, title: str)→ bool
Set the cross-plot title

Parameters
:
plotID (Number) – cross-plot window ID

title (str) – title

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable to X axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable X name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the variable to the second X axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable X2 name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetX2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second X axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisType(plotID: Number, xat: int, ScaleId: str = '')→ bool
Change the type of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number, scaleID: str = None)→ bool
Set min & max values of cross-plot X axis for the given scale

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

scaleID (str) – Optional; scale ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetXHistogramBinCount(plotID: Number, binCount: int)→ bool
Change the bin count on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

binCount (int) – the new bin count

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetXHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool)→ bool
Change the cumulative frequency visibility state on histogram Horizontal

Parameters
:
plotID (Number) – cross-plot window ID

binCount (bool) – new visibility state

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetXValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the X axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY(plotID: Number, Vname: str, ScaleId: str = '')→ bool
Set the variable to Y axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable Y name

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY2(plotID: Number, Vname: str)→ bool
[DEPRECATED] Set the variable to the second Y axis

Parameters
:
plotID (Number) – cross-plot window ID

Vname (str) – variable Y2 name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetY2Values(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
[DEPRECATED] Set a fictive set of user variables to the second Y axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisType(plotID: Number, yat: int, ScaleId: str = '')→ bool
Change the type of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number, scaleID: str = None)→ bool
Set min & max values of cross-plot Y axis for the given scale

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

scaleID (str) – Optional; scale ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetYHistogramBinCount(plotID: Number, binCount: int)→ bool
Change the bin count on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

binCount (int) – the new bin count

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetYHistogramCumulativeFrequencyVisible(plotID: Number, binCount: bool)→ bool
Change the cumulative frequency visibility state on histogram Vertical

Parameters
:
plotID (Number) – cross-plot window ID

binCount (bool) – new visibility state

Returns
:
operation exit status(TRUE,FALSE or NONE)

Return type
:
bool

TechlogPlot.crossPlotSetYValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '', ScaleId: str = '')→ bool
Set a fictive set of user variables to the Y axis of a cross-plot The variable name must contain two dots, i.e ‘Well.Dataset.Variable’

Parameters
:
plotID (Number) – cross-plot window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

ScaleId (str) – Optional; Scale id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Cumulative Dip Plot
TechlogPlot.cumulativeDipPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotApplyTo(plotID: Number, ds: list)→ bool
Apply the cumulative dip-plot to a data set list

Parameters
:
plotID (Number) – plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the cumulative dip-plot - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new cumulative dip-plot

Parameters
:
n (str) – plot window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteDip(plotID: Number)→ bool
Delete the dip variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotDuplicate(plotID: Number)→ Number
Duplicate the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.cumulativeDipPlotGetIdByName(n: str)→ Number
Find the ID of a name-known cumulative dip-plot

Parameters
:
n (str) – plot name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotOpen(n: str, f: str = None)→ Number
Open an existing cumulative dip plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotOpenWalkoutPlot(plotID: Number)→ Number
Open a walkout-plot

Parameters
:
plotID (Number) – cumulative dip-plot window ID

Returns
:
walkout-plot window ID

Return type
:
Number

TechlogPlot.cumulativeDipPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetAutomaticAdjustment(plotID: Number, b: bool)→ bool
Set the automatic adjustment on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True for automatic adjustment, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColor(plotID: Number, color: str)→ bool
Set the color variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColorMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
Set the color mode on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetColourMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
[DEPRECATED] (use cumulativeDipPlotSetColorMode instead) Set the color mode on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use cumulativeDipPlotSetMarkersColor instead) Set the makers color on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetName(plotID: Number, n: str)→ bool
Change the name of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – new plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisGraduations(plotID: Number, f: Number)→ bool
Set the x axis graduations of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisInverse(plotID: Number, b: bool)→ bool
Set the x axis inverse of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set the x axis type of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; axis type {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the x axis user limits of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisGraduations(plotID: Number, f: Number)→ bool
Set the y axis graduations of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – graduations

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisInverse(plotID: Number, b: bool)→ bool
Set the y axis inverse of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisType(plotID: Number, type: str = 'VARIABLE')→ bool
Set the y axis type of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; axis type {‘VARIABLE’, ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the y axis user limits of the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.cumulativeDipPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the cumulative dip-plot

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Custom Plot
TechlogPlot.customPlotAddAction(plotID: Number, ActionName: str, Location: int, GlobalPosition: int=4, ActionAfter: str)→ bool
Add an action to toolbar, mouseMode and/or contextMenu with the given position (begin, middle or end)

Parameters
:
plotID (Number) – custom-plot window ID

ActionName (str) – Name of action

Location (int) – Location of action : Tool-bar = 1,Mouse-mode = 2, Context-menu = 4. You can associate it.

GlobalPosition (int) – Optional; Global position of action : Begin = 1, Middle = 2, End = 4.

ActionAfter (str) – [=]: Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToCreatedMenu(plotID: Number, MenuName: str, ActionName: str, ActionAfter: str)→ bool
Add action to existing menu before the given action name.

Parameters
:
plotID (Number) – custom-plot window ID

MenuName (str) – Name of menu.

ActionName (str) – Name of action.

ActionAfter (str) – [=]: Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToDefaultMenu(plotID: Number, Menu: int, ActionName: str, GlobalPosition: int)→ bool
Add action to existing menu.

Parameters
:
plotID (Number) – custom-plot window ID

Menu (int) – Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.

ActionName (str) – Name of action.

GlobalPosition (int) – Global position of action : Begin = 1, Middle = 2, End = 4.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddActionToDefaultMenuDynamic(plotID: Number, Menu: int, ActionName: str, ActionAfter: str)→ bool
Add action to existing menu.

Parameters
:
plotID (Number) – custom-plot window ID

Menu (int) – Menu : DISPLAY = 1, EDIT = 2, INSERT = 4, OPEN = 8, PLOT = 16, SAVE = 32, PROCESSING = 64, PROPERTIES = 128, SELECTION = 256.

ActionName (str) – Name of action.

ActionAfter (str) – Name of action we want to introduce before.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddNewMenu(plotID: Number, MenuName: str, ActionList: list)→ bool
Add a menu.

Parameters
:
plotID (Number) – custom-plot window ID.

MenuName (str) – Name of menu.

ActionList (list) – List of action we want to add to menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddNewTable(plotID: Number, TableName: str)→ bool
Add a new table widget on left part of custom plot. (Here for this exemple, the widget are empty)

Parameters
:
plotID (Number) – custom-plot window ID

TableName (str) – Name of table.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotAddPlotToWorkspace(plotID: Number)→ bool
Add the plot to workspace.

Parameters
:
plotID (Number) – custom-plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotCreate(n: str)→ Number
Create a custom plot, you have to add it to workspace for see it.

Parameters
:
n (str) – custom plot window name

Returns
:
custom-plot window ID

Return type
:
Number

TechlogPlot.customPlotDisplayDefaultActions(plotID: Number, IsDisplay: bool)→ bool
Say if you want to display default action.

Parameters
:
plotID (Number) – custom-plot window ID

IsDisplay (bool) – True if you want to display default menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotDisplayMenu(plotID: Number, IsDisplay: bool)→ bool
Say if you want to hide menu when they are empty.

Parameters
:
plotID (Number) – custom-plot window ID

IsDisplay (bool) – True if you want to display default menu.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotInsertChart(plotID: Number, chartFile: str)→ bool
Insert a chart in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chartFile (str) – Name of chart we want to insert

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotInsertDynamicChart(plotID: Number, chart: str, chartName: str)→ bool
Insert a chart dynamically in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chart (str) – Chart we want to insert

chartName (str) – Title of chart

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotRemoveChart(plotID: Number, chartFile: str)→ bool
Remove a chart in custom plot

Parameters
:
plotID (Number) – custom-plot window ID

chartFile (str) – Name of chart we want to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotResize(plotID: Number, width: Number, height: Number)→ bool
Resize the widget

Parameters
:
plotID (Number) – custom-plot window ID

width (Number) – Width of widget after resize

height (Number) – Height of widget after resize

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetCursorToAction(plotID: Number, ActionName: str, Cursor: int)→ bool
Associate a cursor for a given action when you are in viewer. (Here for this exemple, create an action in Mouse Mode begin)

Parameters
:
plotID (Number) – custom-plot window ID

ActionName (str) – Name of action

Cursor (int) – Qt::CursorShape, see website for number.

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetHorizontalLegendName(plotID: Number, legendY: str)→ bool
Set the name of the horizontal legend

Parameters
:
plotID (Number) – custom-plot window ID

legendY (str) – Name of legend on Y

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetPlotSubTitle(plotID: Number, subtitle: str)→ bool
Set a subtitle to plot

Parameters
:
plotID (Number) – custom-plot window ID

subtitle (str) – Name of subtitle

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetPlotTitle(plotID: Number, title: str)→ bool
Set a title to plot

Parameters
:
plotID (Number) – custom-plot window ID

title (str) – Name of title

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetVerticalLegendName(plotID: Number, legendY: str)→ bool
Set the name of the vertical legend

Parameters
:
plotID (Number) – custom-plot window ID

legendY (str) – Name of legend on Y

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.customPlotSetWindowTitle(plotID: Number, title: str)→ bool
Set a title to window

Parameters
:
plotID (Number) – custom-plot window ID

title (str) – Name of title

Returns
:
operation exit status

Return type
:
bool

Depth Array Plot
TechlogPlot.depthArrayPlotDuplicate(plotID: Number)→ Number
Duplicate an existing depth array plot

Parameters
:
plotID (Number) – plot Id to duplicate

Returns
:
plot ID

Return type
:
Number

TechlogPlot.depthArrayPlotOpen(n: str, f: str = None)→ Number
Open an existing depth array plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

Depth Map Plot
TechlogPlot.depthMapPlotCreate(n: str)→ Number
Create a new depth map plot

Parameters
:
n (str) – plot name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.depthMapPlotSetData(plotID: Number, fileName: str, t: list, nbL: Number, nbC: Number, minX: Number, stepX: Number, unitX: str, minY: Number, stepY: Number, unitY: str, referenceValues: list, referenceName: str, referenceUnit: str, referenceFamily: str)→ bool
Set the data of a depth map plot

Parameters
:
plotID (Number) – plot window ID

fileName (str) – name for the reference

t (list) – list of the map data

nbL (Number) – number of row

nbC (Number) – number of column

minX (Number) – minimum X axis

stepX (Number) – step X axis

unitX (str) – unit X axis

minY (Number) – minimum Y axis

stepY (Number) – step Y axis

unitY (str) – unit Y axis

referenceValues (list) – list of reference values

referenceName (str) – name of the reference variable

referenceUnit (str) – unit of the reference variable

referenceFamily (str) – reference Family

Returns
:
operation exit status

Return type
:
bool

Geometry
TechlogPlot.geometryAddBasePolygon(ID: Number, points: list)→ bool
add a new base polygon in the geometry engine. If new polygon intersect geometry, operation fails

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

points (list) – polygon points [(x1, y1), (x2, y2), …], for polygon ABCDA, user should only provide A, B, C, D points

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryAddBoundary(ID: Number, points: list)→ bool
Split the geometry with a new boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

points (list) – boundary points list [(x1, y1), (x2, y2), …]

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryAddProperty(ID: Number, propertyName: str, measurement: str, unit: str, paletteName: str)→ bool
Add a new property family to the geometry.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to add

measurement (str) – measurement name

unit (str) – unit of the family values

paletteName (str) – name of the palette to use for displaying the family

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeleteBoundary(ID: Number, point: tuple)→ bool
Delete a geometry boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point selection for boundary

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeletePoint(ID: Number, point: tuple)→ bool
Delete a geometry point.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point position

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryDeleteProperty(ID: Number, propertyName: str)→ bool
Delete a property family.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to delete

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryGetPolygons(ID: Number)→ list
Get all geometry polygons.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

Returns
:
list of list of point(x,y)

Return type
:
list

TechlogPlot.geometryMoveBoundary(ID: Number, point: tuple, point: tuple)→ bool
Move a geometry boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – boundary point initial position

point – translation vector

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryMovePoint(ID: Number, point: tuple, point: tuple)→ bool
Move a geometry point.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point initial position

point – point destination position

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryReset(ID: Number)→ bool
delete all geometry features of the geometric engine.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometryRotateBoundary(ID: Number, point: tuple, center: tuple, angle: Number)→ bool
Rotate a geometry Boundary.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – Boundary point selection

center (tuple) – rotation center

angle (Number) – rotation angle in degree

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometrySelectProperty(ID: Number, propertyName: str)→ bool
select the property family to display.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

propertyName (str) – name of the property family to display

Returns
:
True if operation is done else exception

Return type
:
bool

TechlogPlot.geometrySetPolygonProperty(ID: Number, point: tuple, propertyName: str, propertyValue: Number)→ bool
Set polygon property.

Parameters
:
ID (Number) – id of the plot - geometry feature is only available for 3DP and 2DWT

point (tuple) – point selection for polygon

propertyName (str) – name of the property family to delete

propertyValue (Number) – new value for the property family of the selected polygon

Returns
:
True if operation is done else exception

Return type
:
bool

Header Editor
TechlogPlot.headerEditorAddBox(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number)→ Number
Add a box to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x (Number) – left coordinate of the box

y (Number) – top coordinate of the box

w (Number) – width of the box

h (Number) – height of the box

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddHeader(headerEditorID: Number, n: str, f: str = None)→ Number
Add an existing header to the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

n (str) – header name

f (str) – Optional; folder

Returns
:
header ID

Return type
:
Number

TechlogPlot.headerEditorAddImage(headerEditorID: Number, path: str, x: Number = 0, y: Number = 0)→ Number
Add an image to the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

path (str) – image path

x (Number) – Optional; left coordinate of the image

y (Number) – Optional; top coordinate of the image

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddImageFromProperty(headerEditorID: Number, path: str, x: Number = 0, y: Number = 0)→ Number
Add an image to the header editor using properties

Parameters
:
headerEditorID (Number) – header editor window ID

path (str) – image path using properties

x (Number) – Optional; left coordinate of the image

y (Number) – Optional; top coordinate of the image

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddLine(headerEditorID: Number, x1: Number, y1: Number, x2: Number, y2: Number)→ Number
Add a line to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x1 (Number) – x coordinate of the first extremity of the line

y1 (Number) – y coordinate of the first extremity of the line

x2 (Number) – x coordinate of the second extremity of the line

y2 (Number) – y coordinate of the second extremity of the line

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddProperty(headerEditorID: Number, objectID: Number, text: str)→ bool
Add a property to the header object

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

text (str) – text of the property (using ‘%’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorAddTable(headerEditorID: Number, rowCount: Number, columnCount: Number)→ Number
Add a table to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

rowCount (Number) – Number of row of the table

columnCount (Number) – Number of column of the table

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAddText(headerEditorID: Number, x: Number, y: Number, w: Number, h: Number, text: str = None)→ Number
Add a text to a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

x (Number) – left coordinate of the text

y (Number) – top coordinate of the text

w (Number) – width of the text

h (Number) – height of the text

text (str) – Optional; text

Returns
:
header object ID

Return type
:
Number

TechlogPlot.headerEditorAlignObjectsOnTheGrid(headerEditorID: Number, align: bool)→ bool
Enable to align objects on the grid

Parameters
:
headerEditorID (Number) – header editor window ID

align (bool) – 1 = align; 0 = don’t align

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorApplyPropertiesTo(headerEditorID: Number, well: str = None, dataset: str = None)→ bool
Apply the properties (tags) of the header to a particular well and dataset

Parameters
:
headerEditorID (Number) – header editor window ID

well (str) – Optional; well name

dataset (str) – Optional; dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorChangeDisplayMode(headerEditorID: Number, result: bool)→ bool
Change the display mode

Parameters
:
headerEditorID (Number) – header editor window ID

result (bool) – 1 = display result texts; 0 = display tags

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorCreate()→ Number
Create a new header editor

Returns
:
header editor ID

Return type
:
Number

TechlogPlot.headerEditorNew(headerEditorID: Number)→ bool
Reset a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectBringForward(headerEditorID: Number, objectID: Number)→ bool
Bring forward an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectBringToFront(headerEditorID: Number, objectID: Number)→ bool
Bring to front an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectSendBackward(headerEditorID: Number, objectID: Number)→ bool
Send backward an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorObjectSendToBack(headerEditorID: Number, objectID: Number)→ bool
Send to back an object of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorOpen(n: str, f: str = None)→ Number
Open an existing header editor

Parameters
:
n (str) – header name

f (str) – Optional; folder

Returns
:
header editor ID

Return type
:
Number

TechlogPlot.headerEditorRemoveHeader(headerEditorID: Number, headerID: Number)→ bool
Remove an existing header from the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

headerID (Number) – header ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorRemoveObject(headerEditorID: Number, objectID: Number)→ bool
Remove an object from the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSave(headerEditorID: Number, n: str, f: str = None, Copy_pictures: bool = True)→ bool
Save a header editor

Parameters
:
headerEditorID (Number) – header editor window ID

n (str) – header editor name

f (str) – Optional; folder

Copy_pictures (bool) – Optional; True to copy the pictures if needed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBackgroundColor(headerEditorID: Number, r: Number, g: Number, b: Number)→ bool
Change the background color of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBoxAreaFill(headerEditorID: Number, objectID: Number, filled: bool)→ bool
Set if the box is transparent

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the box

filled (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetBoxAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the text field background color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the box

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetCurrentHeader(headerEditorID: Number, headerID: Number)→ bool
Change the header used for modifications by other header editor functions

Parameters
:
headerEditorID (Number) – header editor window ID

headerID (Number) – header ID (first header ID is 0, and so on…)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetGridVisibility(headerEditorID: Number, visible: bool)→ bool
Change the grid visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetHeight(headerEditorID: Number, height: Number)→ bool
Set the height of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

height (Number) – new height in the current header editor unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetHorizontalRulerVisibility(headerEditorID: Number, visible: bool)→ bool
Change the horizontal ruler visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageKeepProportions(headerEditorID: Number, objectID: Number, keep: bool)→ bool
Set if the image has to keep its original proportions

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

keep (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageOpacity(headerEditorID: Number, objectID: Number, opacity: Number)→ bool
Set the opacity of an image

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

opacity (Number) – between 0 (fully transparent) and 1 (fully opaque)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageOriginalSize(headerEditorID: Number, objectID: Number, keep: bool)→ bool
Set if the image has to keep its original size

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

keep (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetImageRotation(headerEditorID: Number, objectID: Number, rotation: Number)→ bool
Set the orientation of an image

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the image

rotation (Number) – rotation in ° (0, 90, 180 or 270)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectAlignment(headerEditorID: Number, objectID: Number, position: Number)→ bool
Change the header object alignment

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

position (Number) – 0 = left; 1 = center; 2 = right

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectBorderColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the header object border color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectBorderWidth(headerEditorID: Number, objectID: Number, width: Number)→ bool
Change the header object border width

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

width (Number) – width of the border

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectPosition(headerEditorID: Number, objectID: Number, x: Number, y: Number)→ bool
Change the header object position

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

x (Number) – horizontal position

y (Number) – vertical position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetObjectSize(headerEditorID: Number, objectID: Number, w: Number, h: Number)→ bool
Change the header object size

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID

w (Number) – horizontal size

h (Number) – vertical size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetText(headerEditorID: Number, objectID: Number, text: str)→ bool
Set the text of a text field

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

text (str) – text to set

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAllWidthAvailable(headerEditorID: Number, objectID: Number, all: bool)→ bool
Set if the text has to use all the width available

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

all (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAreaFill(headerEditorID: Number, objectID: Number, filled: bool)→ bool
Set if the text field is transparent

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

filled (bool) – 1 = yes; 0 = no

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextAreaFillColor(headerEditorID: Number, objectID: Number, r: Number, g: Number, b: Number)→ bool
Change the text field background color

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetTextOrientation(headerEditorID: Number, objectID: Number, orientation: Number)→ bool
Set the orientation of a text field

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the text field

orientation (Number) – orientation in ° (0, 90, 180 or 270)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetUnit(headerEditorID: Number, unit: str)→ bool
Set the unit of the header editor

Parameters
:
headerEditorID (Number) – header editor window ID

unit (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorSetVerticalRulerVisibility(headerEditorID: Number, visible: bool)→ bool
Change the vertical ruler visibility

Parameters
:
headerEditorID (Number) – header editor window ID

visible (bool) – 1 = show; 0 = hide

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableAddColumn(headerEditorID: Number, objectID: Number)→ bool
Add a column to the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableAddRow(headerEditorID: Number, objectID: Number)→ bool
Add a row to the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableDeleteColumn(headerEditorID: Number, objectID: Number, column_index: Number)→ bool
Delete a column of the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

column_index (Number) – index of the column (from 0) to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableDeleteRow(headerEditorID: Number, objectID: Number, row_index: Number)→ bool
Delete a row of the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

row_index (Number) – index of the row (from 0) to remove

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableInsertColumn(headerEditorID: Number, objectID: Number, column_index: Number)→ bool
Insert a column in the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

column_index (Number) – index of the column (from 0) where the new one has to be inserted

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.headerEditorTableInsertRow(headerEditorID: Number, objectID: Number, row_index: Number)→ bool
Insert a row in the table

Parameters
:
headerEditorID (Number) – header editor window ID

objectID (Number) – header object ID of the table

row_index (Number) – index of the row (from 0) where the new one has to be inserted

Returns
:
operation exit status

Return type
:
bool

Histogram
TechlogPlot.histogramAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of X parameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.histogramAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.histogramAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramApplyTo(plotID: Number, ds: list)→ list
Apply the histogram to a data set list

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.histogramCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new histogram

Parameters
:
n (str) – histogram window name

vl (list) – Optional; variable list name

f (str) – Optional; filter variable name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramDeleteFilterValues(plotID: Number)→ bool
Delete the filter variable of a histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramDeleteVariables(plotID: Number, vn: list)→ bool
Delete the variable list of the histogram

Parameters
:
plotID (Number) – histogram window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramDuplicate(plotID: Number)→ Number
Duplicate the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.histogramGetIdByName(n: str)→ Number
Returns the ID of a name-known histogram

Parameters
:
n (str) – histogram name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.histogramGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.histogramLockAxisX(plotID: Number, locked: bool)→ bool
Lock x-axis limits of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockLegendX(plotID: Number, locked: bool)→ bool
Lock x-axis legend of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockLegendY(plotID: Number, locked: bool)→ bool
Lock y-axis legend of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the histogram

Parameters
:
plotID (Number) – histogram window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellAddParameterLineX(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ Number
Add a parameter line to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of Xparameter

val1 (Number) – value of X parameter

min1 (Number) – minimum of X parameter

max1 (Number) – maximum of X parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id

Return type
:
Number

TechlogPlot.histogramMultiWellAddParameterPointXY(plotID: Number, well: str, dataset: str, zonation: str, zone: str, pn1: str, val1: Number, min1: Number, max1: Number, pn2: str, val2: Number, min2: Number, max2: Number, cminx: Number = MissingValue, cmaxx: Number = MissingValue, cminy: Number = MissingValue, cmaxy: Number = MissingValue, update: bool = True)→ str
Add a parameter point to the histogram

Parameters
:
plotID (Number) – histogram window ID

well (str) – well name

dataset (str) – dataset name

zonation (str) – zonation dataset name

zone (str) – zone name

pn1 (str) – name of first parameter

val1 (Number) – value of first parameter

min1 (Number) – minimum of first parameter

max1 (Number) – maximum of first parameter

pn2 (str) – name of second parameter

val2 (Number) – value of second parameter

min2 (Number) – minimum of second parameter

max2 (Number) – maximum of second parameter

cminx (Number) – Optional; x min of constraint

cmaxx (Number) – Optional; x max of constraint

cminy (Number) – Optional; y min of constraint

cmaxy (Number) – Optional; y max of constraint

update (bool) – Optional; True if overwrite, false else

Returns
:
parameter point id’s

Return type
:
str

TechlogPlot.histogramMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the histogram - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellCreate(ml: list)→ Number
Create a multi well histogram

Parameters
:
ml (list) – mnemonic list

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellDuplicate(plotID: Number)→ Number
Duplicate the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.histogramMultiWellGetIdByName(n: str)→ Number
Returns the ID of a name-known histogram

Parameters
:
n (str) – histogram name

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellGetParameterPointXValue(plotID: Number, ppid1: str)→ Number
Return X value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
x value of parameter point

Return type
:
Number

TechlogPlot.histogramMultiWellGetParameterPointYValue(plotID: Number, ppid1: str)→ Number
Return Y value of a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
y value of parameter point

Return type
:
Number

TechlogPlot.histogramMultiWellOpen(n: str, f: str = '')→ Number
Open an existing histogram

Parameters
:
n (str) – histogram wname

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramMultiWellQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – histogram window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – histogram window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – histogram window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – histogram window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantileDisplay(plotID: Number, quant: bool, line: bool = False)→ bool
Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram

Parameters
:
plotID (Number) – histogram window ID

quant (bool) – 1 = quantiles display else 0

line (bool) – Optional; = 1 if display quantiles by lines

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the histogram quantiles

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – histogram window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use histogramMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetCumul(plotID: Number, cf: bool)→ bool
Display of cumulative frequencies on the histogram

Parameters
:
plotID (Number) – histogram window ID

cf (bool) – {0 = ‘remove cumulative frequencies’, 1 = ‘display of cumulative frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetCumulate(plotID: Number, cum: bool = True)→ bool
Cumul of the histogram values

Parameters
:
plotID (Number) – histogram window ID

cum (bool) – Optional; 1 = cumulate histo else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetFill(plotID: Number, fill: bool)→ bool
Filling of histogram crenels

Parameters
:
plotID (Number) – histogram window ID

fill (bool) – {0 = ‘remove filling’, 1 = ‘display filling’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetFillingColor(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Choose the histogram filling color

Parameters
:
plotID (Number) – histogram window ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetFillingColour(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
[DEPRECATED] (use histogramMultiWellSetFillingColor instead) Choose the histogram filling color

Parameters
:
plotID (Number) – histogram window ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – new histogram window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetPrecision(plotID: Number, bins: Number)→ bool
Change number of bins on the histogram

Parameters
:
plotID (Number) – histogram window ID

bins (Number) – number of bins

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetStandardise(plotID: Number, std: bool)→ bool
[DEPRECATED] (use histogramMultiWellSetStandardize instead) Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetStandardize(plotID: Number, std: bool)→ bool
Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetStyle(plotID: Number, st: int)→ bool
Change the style of display of the histogram

Parameters
:
plotID (Number) – histogram window ID

st (int) – display style: {0 = ‘CRENEL_CLOSE’, 1 = ‘CRENEL_OPEN’, 2 = ‘CONTINUOUS_LINE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetType(plotID: Number, ty: int)→ bool
Change histogram type

Parameters
:
plotID (Number) – histogram window ID

ty (int) – histogram type: {0 = ‘VARIABLES’, 1 = ‘FILTER’, 2 = ‘ZONATION’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisScale(plotID: Number, xasc: int)→ bool
Change the histogram X axis scale

Parameters
:
plotID (Number) – histogram window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetYAxisMinMax(plotID: Number, ymin: Number, ymax: Number)→ bool
Set min & max values of histogram Y axis

Parameters
:
plotID (Number) – histogram window ID

ymin (Number) – Y axis minimum

ymax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramOpen(n: str, f: str = '')→ Number
Open an existing histogram

Parameters
:
n (str) – histogram name

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

TechlogPlot.histogramQuantile1Value(plotID: Number, q1: Number)→ bool
Set user value for quantile 1

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile2Value(plotID: Number, q2: Number)→ bool
Set user value for quantile 2

Parameters
:
plotID (Number) – histogram window ID

q2 (Number) – quantile 2 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile3Value(plotID: Number, q3: Number)→ bool
Set user value for quantile 3

Parameters
:
plotID (Number) – histogram window ID

q3 (Number) – quantile 3 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile4Value(plotID: Number, q4: Number)→ bool
Set user value for quantile 4

Parameters
:
plotID (Number) – histogram window ID

q4 (Number) – quantile 4 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantile5Value(plotID: Number, q5: Number)→ bool
Set user value for quantile 5

Parameters
:
plotID (Number) – histogram window ID

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantileDisplay(plotID: Number, quant: bool, line: bool = False)→ bool
Display of the quantiles (10, 25, 50, 75 and 90) on the current histogram

Parameters
:
plotID (Number) – histogram window ID

quant (bool) – 1 = quantiles display else 0

line (bool) – Optional; = 1 if display quantiles by lines

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramQuantileValues(plotID: Number, q1: Number, q2: Number, q3: Number, q4: Number, q5: Number)→ bool
Set user values to the histogram quantiles

Parameters
:
plotID (Number) – histogram window ID

q1 (Number) – quantile 1 percentage

q2 (Number) – quantile 2 percentage

q3 (Number) – quantile 3 percentage

q4 (Number) – quantile 4 percentage

q5 (Number) – quantile 5 percentage

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramRemoveAllParameterPoint(plotID: Number)→ bool
Remove all parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramRemoveParameterLineX(plotID: Number, ppid1: str)→ bool
Remove a parameter line X in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramRemoveParameterPoint(plotID: Number, ppid1: str)→ bool
Remove a parameter point in the histogram

Parameters
:
plotID (Number) – histogram window ID

ppid1 (str) – parameter point id

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSave(plotID: Number, n: str, f: str = '')→ bool
Save the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – histogram window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – histogram window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetCumul(plotID: Number, cf: bool)→ bool
[DEPRECATED] (use histogramSetCumulative instead) Display of cumulative frequencies on the histogram

Parameters
:
plotID (Number) – histogram window ID

cf (bool) – {0 = ‘remove cumulative frequencies’, 1 = ‘display of cumulative frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetCumulate(plotID: Number, cum: bool = True)→ bool
Cumul of the histogram values

Parameters
:
plotID (Number) – histogram window ID

cum (bool) – Optional; True = cumulate histo else False

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetCumulative(plotID: Number, cf: bool)→ bool
Display of cumulative frequencies on the histogram

Parameters
:
plotID (Number) – histogram window ID

cf (bool) – {0 = ‘remove cumulative frequencies’, 1 = ‘display of cumulative frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetDatum(plotID: Number, lim: bool, ymin: Number = 0, ymax: Number = 0)→ bool
Change the reference limitation on histogram

Parameters
:
plotID (Number) – histogram window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – Optional; bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFill(plotID: Number, fill: bool)→ bool
Filling of histogram crenels

Parameters
:
plotID (Number) – histogram window ID

fill (bool) – {0 = ‘remove filling’, 1 = ‘display filling’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFillingColor(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Choose the histogram filling color

Parameters
:
plotID (Number) – plot ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFillingColour(plotID: Number, var: str, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
[DEPRECATED] (use histogramSetFillingColor instead) Choose the histogram filling color

Parameters
:
plotID (Number) – plot ID

var (str) – variable ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – histogram window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetName(plotID: Number, n: str)→ bool
Change the name of the histogram

Parameters
:
plotID (Number) – histogram window ID

n (str) – new histogram window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetPrecision(plotID: Number, bins: Number)→ bool
Change number of bins on the histogram

Parameters
:
plotID (Number) – histogram window ID

bins (Number) – number of bins

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetStandardise(plotID: Number, std: bool)→ bool
[DEPRECATED] (use histogramSetStandardize instead) Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetStandardize(plotID: Number, std: bool)→ bool
Display of number of samples or frequencies on Y axis on the histogram

Parameters
:
plotID (Number) – histogram window ID

std (bool) – {0 = ‘number of samples’, 1 = ‘frequencies’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetStyle(plotID: Number, st: int)→ bool
Change the style of display of the histogram

Parameters
:
plotID (Number) – histogram window ID

st (int) – display style: {0 = ‘CRENEL_CLOSE’, 1 = ‘CRENEL_OPEN’, 2 = ‘CONTINUOUS_LINE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetType(plotID: Number, ty: int)→ bool
Change histogram type

Parameters
:
plotID (Number) – histogram window ID

ty (int) – histogram type: {0 = ‘VARIABLES’, 1 = ‘FILTER’, 2 = ‘ZONATION’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the histogram

Parameters
:
plotID (Number) – histogram window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetVariablesValues(plotID: Number, vn: str, vl: list, fam: str = '', un: str = '')→ bool
Set a fictive set of user variables to the X axis of a histogram

Parameters
:
plotID (Number) – histogram window ID

vn (str) – variable name

vl (list) – list of values

fam (str) – Optional; variable family

un (str) – Optional; variable unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisScale(plotID: Number, xasc: int)→ bool
Change the histogram X axis scale

Parameters
:
plotID (Number) – histogram window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of histogram X axis

Parameters
:
plotID (Number) – histogram window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetYAxisMinMax(plotID: Number, ymin: Number, ymax: Number)→ bool
Set min & max values of histogram Y axis

Parameters
:
plotID (Number) – histogram window ID

ymin (Number) – Y axis minimum

ymax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.histogramVAOpen(n: str, f: str = '')→ Number
Open an existing histogram VA

Parameters
:
n (str) – histogram name

f (str) – Optional; folder

Returns
:
histogram window ID

Return type
:
Number

Logview
TechlogPlot.logViewAddAnnotationsByTrack(plotID: Number, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, listFamilyFont: list = 'Verdana', listSize: list = 12, listBold: list = None, listItalic: list = None, listUnderline: list = None)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

listFamilyFont (list) – Optional; family font list for annotations

listSize (list) – Optional; font size list for annotations

listBold (list) – Optional; bold state list for annotations fonts

listItalic (list) – Optional; italic state list for annotations fonts

listUnderline (list) – Optional; underline state list for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddAnnotationsByTrackWithSameFont(plotID: Number, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, FamilyFont: str, Size: Number, Bold: bool = False, Italic: bool = False, Underline: bool = False)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

FamilyFont (str) – family font for annotations fonts

Size (Number) – font size for annotations fonts

Bold (bool) – Optional; bold state for annotations fonts

Italic (bool) – Optional; italic state for annotations fonts

Underline (bool) – Optional; underline state for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddAnnotationsByWell(plotID: Number, w: str, groupName: str, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, listBackgroundColour: list = None, listBorderColour: list = None, listHorizontalTextAlignment: list = 'CENTER', listVerticalTextAlignment: list = 'TOP', listTextOrientation: list = 'HORIZONTAL', listFamilyFont: list = 'Verdana', listSize: list = 12, listBold: list = None, listItalic: list = None, listUnderline: list = None)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

groupName (str) – name of the annotations group

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

listBackgroundColour (list) – Optional; background color (hexadecimal code) list for annotations

listBorderColour (list) – Optional; border color (hexadecimal code) list for annotations

listHorizontalTextAlignment (list) – Optional; list of string enum for the horizontal alignment of each annotation, {‘LEFT’, ‘CENTER’, ‘RIGHT’}

listVerticalTextAlignment (list) – Optional; list of string enum for the vertical alignment of each annotation, {‘TOP’, ‘CENTER’, ‘BOTTOM’}

listTextOrientation (list) – Optional; list of string enum for the orientation of each annotation, {‘HORIZONTAL’, ‘VERTICAL’}

listFamilyFont (list) – Optional; family font list for annotations fonts

listSize (list) – Optional; font size list for annotations fonts

listBold (list) – Optional; bold state list for annotations fonts

listItalic (list) – Optional; italic state list for annotations fonts

listUnderline (list) – Optional; underline state list for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddAnnotationsByWellWithSameFont(plotID: Number, w: str, pos: Number, size: Number, listText: list, listTop: list, listBottom: list, FamilyFont: str, Size: Number, Bold: bool = False, Italic: bool = False, Underline: bool = False)→ bool
Add annotation to track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

size (Number) – size of list for annotations

listText (list) – text list for annotations

listTop (list) – top list for annotations

listBottom (list) – bottom list for annotation

FamilyFont (str) – family font for annotations fonts

Size (Number) – font size for annotations fonts

Bold (bool) – Optional; bold state for annotations fonts

Italic (bool) – Optional; italic state for annotations fonts

Underline (bool) – Optional; underline state for annotations fonts

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddFooters(plotID: Number, footers: str | list)→ bool
Add footers to the layout

Parameters
:
plotID (Number) – logview window ID

footers (Union[str, list]) – footer(s) name (Folder.FooterName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddHeaders(plotID: Number, headers: str | list)→ bool
Add headers to the layout

Parameters
:
plotID (Number) – logview window ID

headers (Union[str, list]) – header(s) name (Folder.HeaderName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddMultipleTopHeaderNoteByTrack(plotID: Number, listPos: list, text: str, centered: bool = True)→ bool
Add a top header note for multiple tracks in the logview

Parameters
:
plotID (Number) – logview window ID

listPos (list) – track position for starting and finishing top header

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddMultipleTrackTopHeaderNoteByWell(plotID: Number, w: str, listPos: list, text: str, centered: bool = True)→ bool
Add a top header note for multiple tracks in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

listPos (list) – track position for starting and finishing top header

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddTopHeaderNoteByTrack(plotID: Number, pos: Number, text: str, centered: bool = True)→ bool
Add a top header note for a track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddTrackTopHeaderNoteByWell(plotID: Number, w: str, pos: Number, text: str, centered: bool = True)→ bool
Add a top header note for a track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

text (str) – text of the top header note

centered (bool) – Optional; 1 if text is centered, 0 else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewAddZone(plotID: Number, z: str)→ bool
Display of one zone of the zonation set of the logview

Parameters
:
plotID (Number) – logview window ID

z (str) – name of the zone to display

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewApplyTemplate(nameTemplate: str, nameObject: str, set: bool)→ Number
Apply a layout template to a dataset or a well

Parameters
:
nameTemplate (str) – layout template name (level can be set in the name by following the syntax: ‘levelfilename.xml’)

nameObject (str) – well name if the template is applied by well. Well and dataset name (with the syntax ‘wellName_datasetName’) if the template is applied by dataset

set (bool) – True if dataset, False else

Returns
:
layout window ID

Return type
:
Number

TechlogPlot.logViewCreate(n: str, vl: list = None, mw: bool = True)→ Number
Create a new logview

Parameters
:
n (str) – logview window name

vl (list) – Optional; variable list

mw (bool) – Optional; True = multiwell else False

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewCreateBoreholeShape(plotID: Number, wellName: str, datasetName: str, varNameList: list, padAAzimuthName: str = '', relativeBearingName: str = '', useAsCaliper: bool = True)→ bool
Create and insert a borehole shape in an existing logview

Parameters
:
plotID (Number) – logview window ID

wellName (str) – name of the well

datasetName (str) – name of the dataset

varNameList (list) – list of calipers or radius names

padAAzimuthName (str) – Optional; name of the pad A azimuth

relativeBearingName (str) – Optional; name of the relative bearing

useAsCaliper (bool) – Optional; use the variable list as calipers if True, else use the variable list as radius

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewCreateCrossReference(plotID: Number, reference: str, variable: str, track: Number, type: int, color: str='black', type: int='MARKER_CIRCLE', size: Number=5)→ bool
Create a cross reference object.

Parameters
:
plotID (Number) – logview window ID

reference (str) – Custom reference WellName.DatasetName.VariableName

variable (str) – Variable WellName.DatasetName.VariableName

track (Number) – Position of the track in the logview

type (int) – 0: Cloud, 1: Mean

color (str) – Optional; Point color

type – Optional; markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewCreateDipMeters(plotID: Number, wellName: str, datasetName: str, varName: str, toolName: str, varNameList: list, orientationVar: str, doi: float = 0.0, associatedCaliperVar: str = '', associatedHoleAzimuthVar: str = '', associatedHoleDeviationVar: str = '')→ bool
Create and insert a dip meters in an existing logview

Parameters
:
plotID (Number) – logview window ID

wellName (str) – name of the well

datasetName (str) – name of the dataset

varName (str) – name of the variable

toolName (str) – name of the tool (ARMS_4, ARMS_6, SHDT)

varNameList (list) – list of arms names

orientationVar (str) – name of the orientation variable

doi (float) – Optional; depth of investigation

associatedCaliperVar (str) – Optional; name of the associated caliper

associatedHoleAzimuthVar (str) – Optional; name of the associated hole azimuth

associatedHoleDeviationVar (str) – Optional; name of the associated hole deviation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewDelta(plotID: Number, log1: str, log2: str)→ bool
Delta computation between two log lines (same well) or arrays (same well and dataset). Computed log is added to the current layout with name ‘Delta_log1name_log2name’

Parameters
:
plotID (Number) – logview window ID

log1 (str) – first variable name

log2 (str) – second variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewDuplicate(plotID: Number)→ Number
Duplicate the logview

Parameters
:
plotID (Number) – logview window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.logViewFillWithColor(plotID: Number, v: str, left: bool, r: Number, g: Number, b: Number)→ bool
Add a filling to variable with color

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

left (bool) – 1 = fill left, 0 else

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewFillWithPalette(plotID: Number, v: str, left: bool, pal: str)→ bool
Add a filling to variable with palette

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

left (bool) – 1 = fill left, 0 else

pal (str) – palette name (level can be set in the name by following the syntax: ‘levelpalette’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewFillWithPattern(plotID: Number, v: str, left: bool, pal: str)→ bool
Add a filling to variable with pattern

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

left (bool) – 1 = fill left, 0 else

pal (str) – pattern name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewGetApplyTheFamilyPropertiesStatus(plotID: Number)→ bool
Get the Property Apply the family properties status.

Parameters
:
plotID (Number) – logview window ID

Returns
:
True if the property is applied, false otherwise

Return type
:
bool

TechlogPlot.logViewGetAxeUnitByVariable(plotID: Number, v: str)→ str
Get a variable axis unit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

Returns
:
unit of the first log found for the given variable

Return type
:
str

TechlogPlot.logViewGetIdByName(n: str)→ Number
Find the ID of a name-known logview

Parameters
:
n (str) – logview name

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewGetVariableListByTrack(plotID: int)→ dict
Get the list of variables by track in a layout

Parameters
:
plotID (int) – logview window ID

Returns
:
A dictionary with track index as key and a list [Well.Dataset.Variable] as value

Return type
:
dict

TechlogPlot.logViewHorizontalGridDisplay(plotID: Number, w: str, pos: Number, g: int = 0)→ bool
Change horizontal grid display in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

g (int) – Optional; display type {0 = ‘HORIZONTAL_BELOW’, 1 = ‘HORIZONTAL_TOP’, 2 = ‘HORIZONTAL_NONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertBaseline(plotID: Number, v: str, val: Number)→ bool
Display of a baseline on the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

val (Number) – baseline value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertCrossPlot(plotID: Number, var1: str, var2: str, top: Number, bottom: Number, var3: str = None)→ bool
Insert a cross-plot object in the logview

Parameters
:
plotID (Number) – logview window ID

var1 (str) – X variable name

var2 (str) – Y variable name

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var3 (str) – Optional; color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertCrossPlotByDepth(plotID: Number, var1: str, var2: str, step: Number, top: Number, bottom: Number, var3: str = None)→ bool
Insert cross-plot object by depth in the logview

Parameters
:
plotID (Number) – logview window ID

var1 (str) – X variable name

var2 (str) – Y variable name

step (Number) – step for inserting cross-plot

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var3 (str) – Optional; color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertCrossPlotByZone(plotID: Number, var1: str, var2: str, zn: str, var3: str = None)→ bool
Insert cross-plot object by zone in the logview

Parameters
:
plotID (Number) – logview window ID

var1 (str) – X variable name

var2 (str) – Y variable name

zn (str) – zonation name

var3 (str) – Optional; color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertHistogram(plotID: Number, var: str, top: Number, bottom: Number)→ bool
Insert a histogram object in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – variable name

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertHistogramByDepth(plotID: Number, var: str, step: Number, top: Number, bottom: Number)→ bool
Insert histogram object by depth in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – variable name

step (Number) – step for inserting histogram

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertHistogramByZone(plotID: Number, var: str, zn: str)→ bool
Insert histogram object by zone in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – variable name

zn (str) – zonation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertStereonet(plotID: Number, var: str, top: Number, bottom: Number, var2: str = None)→ bool
Insert a stereonet object in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – dip variable name or angular variable name for azimuth

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var2 (str) – Optional; second angular variable name for dip

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertStereonetByDepth(plotID: Number, var: str, step: Number, top: Number, bottom: Number, var2: str = None)→ bool
Insert stereonet object by depth in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – dip variable name or angular variable name for azimuth

step (Number) – step for inserting steronet

top (Number) – top value for insertion

bottom (Number) – bottom value for insertion

var2 (str) – Optional; second angular variable name for dip

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertStereonetByZone(plotID: Number, var: str, zn: str, var2: str = None)→ bool
Insert stereonet object by zone in the logview

Parameters
:
plotID (Number) – logview window ID

var (str) – dip variable name or angular variable name for azimuth

zn (str) – zonation name

var2 (str) – Optional; second angular variable name for dip

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertTrack(plotID: Number, tr: int, pos: Number = 0)→ Number
Insert any type of track in a logview

Parameters
:
plotID (Number) – logview window ID

tr (int) – track type {‘NORMAL’, ‘REFERENCE’, ‘SEPARATOR’,

'PLOT'

'ZONATION'

'ANNOTATION'

'ARRAY'}

pos (Number) – Optional; position of the track in the layout

Returns
:
reference number of the track if success, else -1

Return type
:
Number

TechlogPlot.logViewInsertTrackByWell(plotID: Number, n: str, tr: int, pos: Number = 0, zs: str = '')→ Number
Insert any type of track in a multiwell logview

Parameters
:
plotID (Number) – logview window ID

n (str) – well name

tr (int) – track type {‘NORMAL’, ‘REFERENCE’, ‘SEPARATOR’,

'PLOT'

'ZONATION'

'ANNOTATION'

'ARRAY'}

pos (Number) – Optional; position of the track in the layout

zs (str) – Optional; zonation set (if insertion of a zonation track)

Returns
:
reference number of the track if success, else -1

Return type
:
Number

TechlogPlot.logViewInsertUncertaintyConstant(plotID: Number, v: str, lowerBound: Number, upperBound: Number, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

lowerBound (Number) – lower limit for uncertainty value

upperBound (Number) – upper limit for uncertainty value

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertUncertaintyVariable(plotID: Number, v: str, variableLowerBound: str, variableUpperBound: str, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

variableLowerBound (str) – lower limit for uncertainty values

variableUpperBound (str) – upper limit for uncertainty values

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariable(plotID: Number, vl: list, tr: Number = None)→ bool
Insert a new logs in a layout - it is possible to specify a track by its position to insert logs

Parameters
:
plotID (Number) – logview window ID

vl (list) – variables list to insert

tr (Number) – Optional; position of the track

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariableInTrack(plotID: Number, var: str, newvar: list)→ bool
Insert a new logs in a track already existing & containing log(s) in the layout - takes a variable already in the wanted track to find it

Parameters
:
plotID (Number) – logview window ID

var (str) – name of one variable which log is in the track

newvar (list) – new variable or variables list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariablesInCumulatedTrack(plotID: Number, varlist: list, pos: Number = -1, colorlist: list = None, patternlist: list = None, lock: bool = False)→ bool
Insert variables in a cumulated track - it is possible to specify the track position

Parameters
:
plotID (Number) – logview window ID

varlist (list) – variables list to insert

pos (Number) – Optional; position of the track

colorlist (list) – Optional; colors list

patternlist (list) – Optional; patterns list

lock (bool) – Optional; {False = ‘Cumulate the variables’, True = ‘Lock the track. Does not cumulate the variables’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInsertVariablesInCumulatedTrackByWell(plotID: Number, well: str, varlist: list, pos: Number = -1, colorlist: list = None, patternlist: list = None, noCumulVarList: list = None)→ bool
Insert variables in a cumulated track in a specified well - it is possible to specify the track position according to the well

Parameters
:
plotID (Number) – logview window ID

well (str) – well name

varlist (list) – variables list to insert

pos (Number) – Optional; position of the track

colorlist (list) – Optional; colors list

patternlist (list) – Optional; patterns list

noCumulVarList (list) – Optional; variables list to insert without cumulating

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewInverseArrayBHI(plotID: Number, variableName: str, inverse: bool)→ bool
Inverse arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the arrayBHI [wellName.datasetName.variableName]

inverse (bool) – inversion status

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewLimitsByVariable(plotID: Number, variableName: str)→ list
Get the limits of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
limits [[float] lower limit, [float] upper limit, [bool] inverted]

Return type
:
list

TechlogPlot.logViewLimitsTypeByVariable(plotID: Number, variableName: str)→ str
Get the limits type of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
limits type [‘variable’, ‘user’, ‘family’]

Return type
:
str

TechlogPlot.logViewLoadFooter(plotID: Number, footer: str)→ bool
Load the footer as main footer of the layout

Parameters
:
plotID (Number) – logview window ID

footer (str) – footer name (Folder.FooterName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewLoadHeader(plotID: Number, header: str)→ bool
Load the header as main header of the layout

Parameters
:
plotID (Number) – logview window ID

header (str) – header name (Folder.HeaderName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOpen(n: str, f: str = '', type: int = 0)→ Number
Open an existing Logview

Parameters
:
n (str) – logview window name

f (str) – Optional; folder

type (int) – Optional; layout type {‘LAYOUT’, ‘LAYOUTTEMPLATE’}

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewOptimised(plotID: Number, v: str, optimised: bool)→ bool
[DEPRECATED] (use logViewOptimized instead) Change if a log display is optimised or not

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimisedByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
[DEPRECATED] (use logViewOptimizedByArrayBHI instead) Set if optimised & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimisedX(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
[DEPRECATED] (use logViewOptimizedX instead) Set if optimised horizontally & threshold value for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimisedXByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
[DEPRECATED] (use logViewOptimizedByArrayBHI instead) Set if optimised horizontally & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimized(plotID: Number, v: str, optimised: bool)→ bool
Change if a log display is optimised or not

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimizedByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
Set if optimised & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimizedX(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
Set if optimised horizontally & threshold value for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewOptimizedXByArrayBHI(plotID: Number, v: str, optimised: bool, value: Number = 3)→ bool
Set if optimised horizontally & threshold value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

optimised (bool) – True if optimised, False else

value (Number) – Optional; threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveAll(plotID: Number)→ bool
Remove all tracks from the layout

Parameters
:
plotID (Number) – logview window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveFill(plotID: Number, v: str)→ bool
remove a filling to variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveLog(plotID: Number, v: str, tr: bool = False)→ bool
Remove a log from the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID of the log to remove

tr (bool) – Optional; =1 if remove the empty track after removing log

warning – all empty tracks of the logview will be removed

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveTrackByPosition(plotID: Number, pos: Number, n: str = None, trackType: int = 0)→ bool
Remove a track from the layout - track selected by its position

Parameters
:
plotID (Number) – logview window ID

pos (Number) – position of the track to delete

n (str) – Optional; well name (if multiwell logview)

trackType (int) – Optional; track type {‘NORMAL’, ‘REFERENCE’, ‘SEPARATOR’,

'PLOT' (if multiwell logview)

'ZONATION' (if multiwell logview)

'ANNOTATION'} (if multiwell logview)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveTrackByVar(plotID: Number, var: str)→ bool
[DEPRECATED] (use logViewRemoveTrackByVariable instead) Remove a track from the layout - track selected by variable

Parameters
:
plotID (Number) – logview window ID

var (str) – variable in track to delete

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveTrackByVariable(plotID: Number, var: str)→ bool
Remove a track from the layout - track selected by variable

Parameters
:
plotID (Number) – logview window ID

var (str) – variable in track to delete

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveWell(plotID: Number, w: str)→ bool
Remove all logs from a well from a layout

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveZonation(plotID: Number, sn: str)→ bool
Remove a set of zonation from the logview - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – logview window ID

sn (str) – name of the set of zonation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewRemoveZone(plotID: Number, z: str)→ bool
Remove the display of one zone of the zonation set of the logview

Parameters
:
plotID (Number) – logview window ID

z (str) – name of the zone

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSave(plotID: Number, n: str, f: str = '', type: int = 0)→ bool
Save the logview

Parameters
:
plotID (Number) – logview window ID

n (str) – logview window name

f (str) – Optional; folder

type (int) – Optional; layout type {0=’LAYOUT’, 1=’LAYOUTTEMPLATE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewScaleByVariable(plotID: Number, variableName: str)→ str
Get the scale of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
scale [‘linear’, ‘logarithmic’]

Return type
:
str

TechlogPlot.logViewScaleUnitByVariable(plotID: Number, variableName: str)→ str
Get the scale unit a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

Returns
:
scale unit

Return type
:
str

TechlogPlot.logViewSetApplyTheFamilyPropertiesStatus(plotID: Number, status: bool = True)→ bool
Set the Property Apply the family properties.

Parameters
:
plotID (Number) – logview window ID

status (bool) – Optional; state

Returns
:
True if operation is OK else return False

Return type
:
bool

TechlogPlot.logViewSetArrayBHIOrientation(plotID: Number, v: str, value: Number)→ bool
Set orientation value for arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

value (Number) – orientation value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeLimitTypeByVariable(plotID: Number, v: str, sc: int)→ bool
Change a variable axis type in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

sc (int) – limit type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeScaleByVariable(plotID: Number, v: str, sc: int)→ bool
Change a variable axis scale in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeUnitByVariable(plotID: Number, v: str, u: str)→ bool
Change a variable axis unit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

u (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeIndexTypeToArray(plotID: Number, v: str, xat: int)→ bool
Change the X index axis limits types for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeIndexValMaxUserToArray(plotID: Number, v: str, max: Number)→ bool
Change the X index axis user upper limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeIndexValMinUserToArray(plotID: Number, v: str, min: Number)→ bool
Change the X index axis user lower limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarMaxUserToArray(plotID: Number, v: str, max: Number)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableMaxUserToArray instead) Change the X variable axis user upper limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarMinUserToArray(plotID: Number, v: str, min: Number)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableMinUserToArray instead) Change the X variable axis user lower limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarNameToArray(plotID: Number, v: str, v: str)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableNameToArray instead) Change the X variable axis variable name for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

v – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarScaleTypeToArray(plotID: Number, v: str, xasc: int)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableScaleTypeToArray instead) Change the X variable axis scale for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVarTypeToArray(plotID: Number, v: str, xat: int)→ bool
[DEPRECATED] (use logViewSetAxeXAxeVariableTypeToArray instead) Change the X variable axis limits types for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableMaxUserToArray(plotID: Number, v: str, max: Number)→ bool
Change the X variable axis user upper limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableMinUserToArray(plotID: Number, v: str, min: Number)→ bool
Change the X variable axis user lower limits for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableNameToArray(plotID: Number, v: str, v: str)→ bool
Change the X variable axis variable name for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

v – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableScaleTypeToArray(plotID: Number, v: str, xasc: int)→ bool
Change the X variable axis scale for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXAxeVariableTypeToArray(plotID: Number, v: str, xat: int)→ bool
Change the X variable axis limits types for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXInverseToCumulatedTrack(plotID: Number, variableNames: list, inverted: bool)→ bool
Change the orientation of the X Axis for a cumulated track in a logview

Parameters
:
plotID (Number) – logview window ID

variableNames (list) – list of wellName.datasetName.variableName

inverted (bool) – inversion status

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXInversedToArray(plotID: Number, v: str, inversed: bool)→ bool
Set the Invert X axis’s property for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMaxUserToCumulatedArray(plotID: Number, v: str, min: Number)→ bool
Change a the X axis upper limit for a cumulated array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMaxUserToHistoArray(plotID: Number, v: str, max: Number)→ bool
Change the X axis user upper limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMinMaxUserToCrossReference(plotId: Number, variable: str, min: Number, max: Number)→ bool
Parameters
:
plotId (Number) – plot window ID

variable (str) – Variable WellName.DatasetName.VariableName

min (Number) – Min user value

max (Number) – Max user value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMinUserToCumulatedArray(plotID: Number, v: str, min: Number)→ bool
Change a the X axis lower limit for a cumulated array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXMinUserToHistoArray(plotID: Number, v: str, min: Number)→ bool
Change the X axis user lower limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXScaleTypeToHistoArray(plotID: Number, v: str, xasc: int)→ bool
Change the X axis scale for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXTypeToCumulatedArray(plotID: Number, v: str, xat: int)→ bool
Change the X axis limits types for a cumulated array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXTypeToHistoArray(plotID: Number, v: str, xat: int)→ bool
Change the X axis limits types for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXUnitToCrossReference(plotId: Number, variable: str, unit: str)→ bool
Parameters
:
plotId (Number) – plot window ID

variable (str) – Variable WellName.DatasetName.VariableName

unit (str) – Axis X unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXWithVarToArray(plotID: Number, v: str, variable_axis: bool)→ bool
[DEPRECATED] (use logViewSetAxeXWithVariableToArray instead) Switch X axis from index axis to variable axis for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

variable_axis (bool) – True if variable axis, False if index axis

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetAxeXWithVariableToArray(plotID: Number, v: str, variable_axis: bool)→ bool
Switch X axis from index axis to variable axis for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

variable_axis (bool) – True if variable axis, False if index axis

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetCallTypeByVariable(plotID: Number, v: str, ct: int)→ bool
Change the call type of a variable in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

ct (int) – new call type {0 = ‘VAR_NAME_CT’, 1 = ‘FAMILY_CT’, 2 = ‘ALIAS_CT’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetDisplayOnXOutputValueOnYToArray(plotID: Number, v: str, always: bool)→ bool
Change the always display property for a array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

always (bool) – True if always display, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetHeaderOrientation(plotID: Number, posTrackList: list, vertical: bool)→ bool
Change the orientation of the header in a track

Parameters
:
plotID (Number) – logview window ID

posTrackList (list) – list of position of tracks

vertical (bool) – header vertical if True, else header horizontal

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetHorizontal(plotID: Number, horizontal: bool)→ Number
Set the logview orientation

Parameters
:
plotID (Number) – logview window ID

horizontal (bool) – horizontal if True, else vertical

Returns
:
logview window ID

Return type
:
Number

TechlogPlot.logViewSetLayoutScale(plotID: Number, sc: Number = 200)→ bool
Change the layout global scale

Parameters
:
plotID (Number) – logview window ID

sc (Number) – Optional; wanted scale - scale format is ‘1 : sc’, only enter sc

'1 (default scale is) – 200’, to have it back only enter logview ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetLimitsByVariable(plotID: Number, variableName: str, lowerLimit: float, upperLimit: float, inverted: bool)→ bool
Set the limits of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

lowerLimit (float) – new lower limit of the variable

upperLimit (float) – new upper limit of the variable

inverted (bool) – inverse or not the limit of the variable

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetLimitsTypeByVariable(plotID: Number, variableName: str, limitsType: str)→ bool
Set the limits type of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

limitsType (str) – limits type [‘variable’, ‘user’, ‘family’]

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetLineProperties(plotID: Number, v: str, st: int = 0, ty: Number = 0, thk: Number = 2)→ bool
Set user preferences for line display of logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

st (int) – Optional; line type {‘NoPen’, ‘SolidLine’, ‘DashLine’, ‘DotLine’, ‘DashDotLine’, ‘DashDotDotLine’, ‘DotDashDashLine’, ‘ShortDashLine’, ‘LongDashLine’}

ty (Number) – Optional; line continuity {‘NO_CONNECTION’, ‘POINT_TO_POINT’, ‘STEP_H_V’, ‘STEP_V_H’, ‘STEP_CENTER’}

thk (Number) – Optional; line thickness (between 1 & 8)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMarkers(plotID: Number, v: str, show: bool, ty: int = 0, size: Number = 2)→ bool
Set user preferences for variable markers. It works exclusively on variable, not dataset.

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

show (bool) – 1 = show markers on log

ty (int) – Optional; markers type {‘MARKER_CIRCLE’, ‘MARKER_SQUARE’, ‘MARKER_DIAMOND’, ‘MARKER_TRIANGLE’, ‘MARKER_TRIANGLE_DOWN’, ‘MARKER_TRIANGLE_LEFT’, ‘MARKER_TRIANGLE_RIGHT’, ‘MARKER_EMPTY_CIRCLE’, ‘MARKER_EMPTY_SQUARE’, ‘MARKER_EMPTY_DIAMOND’, ‘MARKER_EMPTY_TRIANGLE’, ‘MARKER_EMPTY_TRIANGLE_DOWN’, ‘MARKER_EMPTY_TRIANGLE_LEFT’, ‘MARKER_EMPTY_TRIANGLE_RIGHT’, ‘MARKER_SHURIKEN’, ‘MARKER_EMPTY_SHURIKEN’, ‘MARKER_PLUS’, ‘MARKER_CROSS’, ‘MARKER_STAR’, ‘MARKER_RIG’, ‘NB_MARKER’}

size (Number) – Optional; markers size (between 2 & 20)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMaxUserByVariable(plotID: Number, v: str, max: Number, inversed: bool)→ bool
Change a variable bottom limit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMaxUserToMatrixArrayBHI(plotID: Number, v: str, min: Number)→ bool
Change a the upper limit for a matrix array BHI in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMinMaxUserByVariable(plotID: Number, v: str, min: Number, max: Number, inversed: bool)→ bool
[DEPRECATED] Change a variable top and bottom limits in the logview Please use logViewSetLimitsByVariable instead.

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

max (Number) – bottom limit

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMinUserByVariable(plotID: Number, v: str, min: Number, inversed: bool)→ bool
Change a variable top limit in the logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

inversed (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetMinUserToMatrixArrayBHI(plotID: Number, v: str, min: Number)→ bool
Change a the lower limit for a matrix array BHI in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetName(plotID: Number, n: str)→ bool
Change the name of the logview

Parameters
:
plotID (Number) – logview window ID

n (str) – new logview windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPalette(plotID: Number, v: str, pal: str)→ bool
Add a palette to variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

pal (str) – palette name (level can be set in the name by following the syntax: ‘levelpalette’)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPaletteLimits(plotID: Number, v: str, limitMin: float, limitMax: float)→ bool
Set palette limits for variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

limitMin (float) – Lower limit

limitMax (float) – Upper limit (> limitMin)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPartialTrackStartStopByVariable(plotID: Number, varName: str, start: Number, stop: Number)→ bool
Set start stop values for partial track to log line

Parameters
:
plotID (Number) – logview window ID

varName (str) – variable name wellName.datasetName.variableName

start (Number) – start value for partial track

stop (Number) – stop value for partial track

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetPartialTrackStartStopToArray(plotID: Number, varName: str, start: Number, stop: Number)→ bool
Set start stop values for partial track to array

Parameters
:
plotID (Number) – logview window ID

varName (str) – variable name wellName.datasetName.variableName

start (Number) – start value for partial track

stop (Number) – stop value for partial track

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceDisplay(plotID: Number, r: str, u: str = None)→ bool
Change the reference space & the reference unit in the logview

Parameters
:
plotID (Number) – logview window ID

r (str) – reference scale

u (str) – Optional; new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceDisplayByTrack(plotID: Number, pos: Number, r: str)→ bool
Change the reference space of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

r (str) – reference scale

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceUnit(plotID: Number, u: str = None)→ bool
Change the reference unit in the logview

Parameters
:
plotID (Number) – logview window ID

u (str) – Optional; new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetReferenceUnitByTrack(plotID: Number, pos: Number, u: str)→ bool
Change the reference unit of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

u (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetScaleByVariable(plotID: Number, variableName: str, scale: str)→ bool
Set the scale of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

scale (str) – scale of the variable [‘linear’, ‘logarithmic’]

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetScaleTypeToMatrixArrayBHI(plotID: Number, v: str, xasc: int)→ bool
Change the scale for a matrix array BHI in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetScaleUnitByVariable(plotID: Number, variableName: str, scaleUnit: str)→ bool
Set the scale unit of a variable in a logview

Parameters
:
plotID (Number) – logview window ID

variableName (str) – name of the variable [“Well.Dataset.Variable”]

scaleUnit (str) – scale unit of the variable

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetThresholdY(plotID: Number, v: str, value: Number)→ bool
Set threshold value for optimised array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

value (Number) – threshold pixel value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetTrackReferenceDisplayByWell(plotID: Number, w: str, pos: Number, r: str)→ bool
Change the reference space of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

r (str) – reference scale

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetTrackReferenceUnitByWell(plotID: Number, w: str, pos: Number, u: str)→ bool
Change the reference unit of a reference track in the logview

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

u (str) – new unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetVariableColor(plotID: Number, var: str, r: Number, g: Number, b: Number)→ bool
Change the default color of a variable log

Parameters
:
plotID (Number) – logview window ID

var (str) – variable ID to modify (WellName.DatasetName.VariableName)

r (Number) – red (0-255)

g (Number) – green (0-255)

b (Number) – blue (0-255)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetVariableColour(plotID: Number, var: str, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use logViewSetVariableColor instead) Change the default color of a variable log

Parameters
:
plotID (Number) – logview window ID

var (str) – variable ID to modify (WellName.DatasetName.VariableName)

r (Number) – red (0-255)

g (Number) – green (0-255)

b (Number) – blue (0-255)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetWellDatum(plotID: Number, w: str, lim: bool, min: Number = 0, max: Number = 0)→ bool
Set a user reference limitation to a well

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

lim (bool) – 1 = user limits else 0

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

user (if inputs 4 & 5 are not given by)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonation(plotID: Number, sn: str)→ bool
Assign a set of zonation to the logview

Parameters
:
plotID (Number) – logview window ID

sn (str) – name of the set of zonation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackColorationMode(plotID: Number, trackID: Number, mode: str = 'COLOUR')→ bool
Change the coloring mode of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

mode (str) – Optional; coloring mode, {‘COLOUR’, ‘PATTERN’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackColourationMode(plotID: Number, trackID: Number, mode: str = 'COLOUR')→ bool
[DEPRECATED] (use logViewSetZonationTrackColorationMode instead) Change the coloring mode of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

mode (str) – Optional; coloring mode, {‘COLOUR’, ‘PATTERN’, ‘BOTH’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackFamily(plotID: Number, trackID: Number, family: str = 'ZONE_NAME')→ bool
Change the family of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

family (str) – Optional; family type, {‘ZONE_NAME’, ‘HYDRAULIC_ZONE’, ‘FAULT_BLOCK’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackSet(plotID: Number, trackID: Number, set: str)→ bool
Change the dataset of a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

set (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSetZonationTrackTextOrientation(plotID: Number, trackID: Number, b: bool = True)→ bool
Change the orientation of the text in a zonation track

Parameters
:
plotID (Number) – logview window ID

trackID (Number) – reference number of the zonation track

b (bool) – Optional; text vertical if True, else text horizontal

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSmooth(plotID: Number, v: str, smooth: bool)→ bool
Smooth for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

smooth (bool) – True if smoothed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewSmoothByArrayBHI(plotID: Number, v: str, smooth: bool)→ bool
Smooth for array or arrayBHI logs

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

smooth (bool) – True if smoothed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewTrackSize(plotID: Number, pos: Number, s: Number)→ bool
Set track size in the logview

Parameters
:
plotID (Number) – logview window ID

pos (Number) – track position

s (Number) – size of track (in pixels)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewTrackSizeByWell(plotID: Number, w: str, pos: Number, s: Number)→ bool
Set track size in the logview for a given well

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – track position

s (Number) – size of track (in pixels)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridDisplay(plotID: Number, w: str, pos: Number, g: int = 0)→ bool
Change vertical grid display in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

g (int) – Optional; display type {0 = ‘VERTICAL_BELOW’, 1 = ‘VERTICAL_TOP’, 2 = ‘VERTICAL_NONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineColor(plotID: Number, w: str, pos: Number, r: Number = 173, g: Number = 173, b: Number = 173)→ bool
Change the color of vertical grid lines in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

grey (default line color is)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineColour(plotID: Number, w: str, pos: Number, r: Number = 173, g: Number = 173, b: Number = 173)→ bool
[DEPRECATED] (use logViewVerticalGridLineColor instead) Change the color of vertical grid lines in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

grey (default line color is)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineCount(plotID: Number, w: str, pos: Number, count: Number = 4)→ bool
Change the number of line of vertical grid in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

count (Number) – Optional; number of lines (default = 4)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGridLineThickness(plotID: Number, w: str, pos: Number, thk: Number = 4)→ bool
Change the thickness of vertical grid lines in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

thk (Number) – Optional; line thickness (default = 1)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewVerticalGrigLineCount(plotID: Number, w: str, pos: Number, count: Number = 4)→ bool
[DEPRECATED] (use logViewVerticalGridLineCount instead) Change the number of line of vertical grid in one specified track

Parameters
:
plotID (Number) – logview window ID

w (str) – well name

pos (Number) – position of the track

count (Number) – Optional; number of lines (default = 4)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewZonationAreaFilling(plotID: Number, fill: bool, transp: Number = 4)→ bool
Set filling proprieties of colored zonation

Parameters
:
plotID (Number) – logview window ID

fill (bool) – 1 = show filled else 0

transp (Number) – Optional; transparency (between 0 & 10)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewZonationBordersProperties(plotID: Number, thk: Number = 2, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Set border proprieties of coloured zonation

Parameters
:
plotID (Number) – logview window ID

thk (Number) – Optional; border line thikness (between 1 & 5)

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logViewZonationDisplay(plotID: Number, ty: int = 0)→ bool
Change the display of zonation on logview

Parameters
:
plotID (Number) – logview window ID

ty (int) – Optional; zonation display type {0 = ‘BELOW_GRID (default)’, 1 = ‘OVER_GRID’, 2 = ‘OVER_LOG’}

Returns
:
operation exit status

Return type
:
bool

Macro
TechlogPlot.macroKeyboardPress()
Simulate the keyboard

TechlogPlot.macroKeyboardRelease()
Simulate the keyboard

TechlogPlot.macroKeyboardType(keyboard_string: str)
Simulate the keyboard

Parameters
:
keyboard_string (str) – Keyboard key

TechlogPlot.macroMouseLeftDown()
Simulate the mouse left button getting down

TechlogPlot.macroMouseLeftUp()
Simulate the mouse left button getting up

TechlogPlot.macroMouseMiddleDown()
Simulate the mouse middle button getting down

TechlogPlot.macroMouseMiddleUp()
Simulate the mouse middle button getting up

TechlogPlot.macroMouseMove()
Simulate the mouse movement

TechlogPlot.macroMouseRightDown()
Simulate the mouse right button getting down

TechlogPlot.macroMouseRightUp()
Simulate the mouse right button getting up

TechlogPlot.macroMouseWheel()
Simulate the mouse wheel

TechlogPlot.macroObjectExists()
Return true if a widget exists and is visible (param: widgetDescriptor)

TechlogPlot.macroObjectHeight()
(param: widgetDescriptor)

TechlogPlot.macroObjectLeft()
(param: widgetDescriptor)

TechlogPlot.macroObjectTop()
(param: widgetDescriptor)

TechlogPlot.macroObjectWidth()
(param: widgetDescriptor)

TechlogPlot.macroWait()
Wait before the next action (in ms)

Matrix Box Plot
TechlogPlot.matrixBoxPlotByZoneOpen(n: str, f: str = None)→ Number
Open an existing matrix box-plot by zone

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixBoxPlotOpen(n: str, f: str = None)→ Number
Open an existing matrix box-plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

Matrix Cross Plot
TechlogPlot.matrixCrossPlotAddChart(plotID: Number, cn: str)→ bool
Add chart to the cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

cn (str) – chart name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotAddData(plotID: Number, ds: list)→ bool
Add a dataset to a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotCreate(ml: list)→ Number
Create a new matrix cross-plot

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.matrixCrossPlotDensityGridHorizontal(plotID: Number, type: int, xmin: Number = 0, xmax: Number = 0, dim: Number = 50)→ bool
Set characteristics of X density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

xmin (Number) – Optional; X axis minimum

xmax (Number) – Optional; X axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDensityGridVertical(plotID: Number, type: int, ymin: Number = 0, ymax: Number = 0, dim: Number = 50)→ bool
Set characteristics of Y density grid

Parameters
:
plotID (Number) – cross-plot window ID

type (int) – type {0 = ‘VARIABLE’, 1 = ‘USER’, 2 = ‘FAMILY’}

ymin (Number) – Optional; Y axis minimum

ymax (Number) – Optional; Y axis maximum

dim (Number) – Optional; box dimension

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDensitySmooth(plotID: Number, smooth: bool)→ bool
Display of smoothed density values

Parameters
:
plotID (Number) – cross-plot window ID

smooth (bool) – 1 = smooth else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDensityType(plotID: Number, dst: bool)→ bool
Display of the matrix cross-plot in normal or density type

Parameters
:
plotID (Number) – cross-plot window ID

dst (bool) – 1 = density display else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotDuplicate(plotID: Number)→ Number
Duplicate the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.matrixCrossPlotIDFindByName(n: str)→ Number
Find the ID of a name-known cross-plot

Parameters
:
n (str) – cross-plot window name

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.matrixCrossPlotOpen(n: str, f: str = None)→ Number
Open an existing matrix cross-plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixCrossPlotRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – cross-plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use matrixCrossPlotSelectVariable instead) Change the variable selected among one family’s variables in a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetName(plotID: Number, n: str)→ bool
Change the name of matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

n (str) – new cross-plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisInverse(plotID: Number, xainv: bool)→ bool
Inverse the matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisScale(plotID: Number, xasc: int)→ bool
Set the matrix cross-plot X axis scale

Parameters
:
plotID (Number) – cross-plot window ID

xasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisType(plotID: Number, xat: int)→ bool
Change the type of matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisUnit(plotID: Number, xau: str)→ bool
Change the unit of matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xau (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetXAxisUserLimits(plotID: Number, xamin: Number, xamax: Number)→ bool
Set min & max values of matrix cross-plot X axis

Parameters
:
plotID (Number) – cross-plot window ID

xamin (Number) – X axis minimum

xamax (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisInverse(plotID: Number, yainv: bool)→ bool
Inverse the matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yainv (bool) – 1 = inverse else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisScale(plotID: Number, yasc: int)→ bool
Set the matrix cross-plot Y axis scale

Parameters
:
plotID (Number) – cross-plot window ID

yasc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisType(plotID: Number, yat: int)→ bool
Change the type of matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yat (int) – Y axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisUnit(plotID: Number, yau: str)→ bool
Change the unit of matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yau (str) – Y axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetYAxisUserLimits(plotID: Number, yamin: Number, yamax: Number)→ bool
Set min & max values of matrix cross-plot Y axis

Parameters
:
plotID (Number) – cross-plot window ID

yamin (Number) – Y axis minimum

yamax (Number) – Y axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCrossPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the matrix cross-plot

Parameters
:
plotID (Number) – cross-plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Matrix Histogram
TechlogPlot.matrixHistogramAddData(plotID: Number, ds: list)→ bool
Add a dataset to a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramCreate(ml: list)→ Number
Create a new matrix histogram

Parameters
:
ml (list) – mnemonic list

Returns
:
cross-plot window ID

Return type
:
Number

TechlogPlot.matrixHistogramDuplicate(plotID: Number)→ Number
Duplicate the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.matrixHistogramIDFindByName(n: str)→ Number
Find the ID of a name-known matrix histogram

Parameters
:
n (str) – matrix histogram window name

Returns
:
matrix histogram window ID

Return type
:
Number

TechlogPlot.matrixHistogramOpen(n: str, f: str = None)→ Number
Open an existing matrix histogram

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixHistogramRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSave(plotID: Number, n: str, f: str = '')→ bool
Save the matrix histogram

Parameters
:
plotID (Number) – matrix histogram window ID

n (str) – matrix histogram name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use matrixHistogramSelectVariable instead) Change the variable selected among one family’s variables in a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a matrix histogram

Parameters
:
plotID (Number) – histogram window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSetFill(plotID: Number, fill: bool)→ bool
Fill or not the inside of the histograms with a color

Parameters
:
plotID (Number) – matrix histogram window ID

fill (bool) – 1 = fill; 0 = don’t fill

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSetName(plotID: Number, n: str)→ bool
Change the name of matrix histogram

Parameters
:
plotID (Number) – matrix histogram window ID

n (str) – new matrix histogram name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixHistogramSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the matrix histogram

Parameters
:
plotID (Number) – histogram window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Print
TechlogPlot.printCompleted(threadid: str)→ bool
Returns True if multithread print is completed

Parameters
:
threadid (str) – the print thread name

Returns
:
print completed

Return type
:
bool

TechlogPlot.printPlot(plotID: Number)→ bool
Print a plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.printToFile(plotID: Number, paperFormat: str, outputFormat: str, outputName: str, paperWidth: Number = 0, paperHeight: Number = 0, adjustWidthType: Number = 0, adjustWidthValue: Number = -1, adjustHeightType: Number = 0, adjustHeightValue: Number = -1, scale: Number = -1, officeCompatible: bool = False, resolution: Number = 600)→ bool
Export the plot into a file

Parameters
:
plotID (Number) – object ID

paperFormat (str) – ‘A4’, ‘Letter’…

outputFormat (str) – ‘.jpg’, ‘.cgm’, ‘.emf’, ‘.pdf’… or ‘printer’

outputName (str) – file name (saved in Various folder) or printer name if output format is set to ‘printer’

paperWidth (Number) – Optional; paper width in cm

paperHeight (Number) – Optional; paper width in cm

adjustWidthType (Number) – Optional; can be ‘adjust to the page’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustWidthValue (Number) – Optional; adjust width value in cm

adjustHeightType (Number) – Optional; can be ‘adjust to n pages’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustHeightValue (Number) – Optional; adjust height value in cm if adjust height is ‘custom’ or number of pages if adjust height is ‘adjust to n pages’

scale (Number) – Optional; scale

officeCompatible (bool) – Optional; useful only with CGM format. must be set to true if the generated file is to be used in Microsoft Office applications such

Word (as)

PowerPoint...

resolution (Number) – Optional; dpi resolution to print or export the file

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.printToFileMultiThread(plotID: Number, paperFormat: str, outputFormat: str, outputName: str, paperWidth: Number = 0, paperHeight: Number = 0, adjustWidthType: Number = 0, adjustWidthValue: Number = -1, adjustHeightType: Number = 0, adjustHeightValue: Number = -1, scale: Number = -1, officeCompatible: bool = False, resolution: Number = 600)→ str
Export the plot into a file, using a separate thread

Parameters
:
plotID (Number) – object ID

paperFormat (str) – ‘A4’, ‘Letter’…

outputFormat (str) – ‘.jpg’, ‘.cgm’, ‘.emf’, ‘.pdf’… or ‘printer’

outputName (str) – file name (saved in Various folder) or printer name if output format is set to ‘printer’

paperWidth (Number) – Optional; paper width in cm

paperHeight (Number) – Optional; paper width in cm

adjustWidthType (Number) – Optional; can be ‘adjust to the page’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustWidthValue (Number) – Optional; adjust width value in cm

adjustHeightType (Number) – Optional; an be ‘adjust to n pages’ (=0), ‘fixed scale’ (=1), ‘keep proportions’ (=2), ‘custom’ (=3)

adjustHeightValue (Number) – Optional; adjust height value in cm if adjust height is ‘custom’, or number of pages if adjust height is ‘adjust to n pages’

scale (Number) – Optional; scale

officeCompatible (bool) – Optional; seful only with CGM format. must be set to true if the generated file is to be used in Microsoft Office applications such

Word (as)

PowerPoint...

resolution (Number) – Optional; resolution in dpi to print or export the file

Returns
:
thread name

Return type
:
str

Report Editor
TechlogPlot.reportEditorAddItem(reN: int, pN: int, inS: str, speS: str, itNE: int)→ int
Add an item into an existing page

Parameters
:
reN (int) – report editor ID

pN (int) – page ID

inS (str) – depends on item type Saved items : item name as in your project browser Others items : desired item name in your report browser

speS (str) – depends on item type Saved items : folder name : Project, User, Company or Techlog Generic items : generic item description (text displayed over your item in report) Text item : text content (can contain HTML content if compliant with Qt’s rich text engine) Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html Table of item : title of the table of in your report page

itNE (int) – item type = { 0 - Image, 1 - Layout, 2 - Layout Template, 3 - Crossplot, 4 - Crossplot MW, 6 - Crossplot AA, 7 - Crossplot Template, 8 - Histogram, 9 - Histogram MW, 10 - Histogram Template, 11 - Stereonet, 12 - Lineplot, 13 - Header, 14 - Text, 15 - Generic Header, 16 - Generic Layout, 17 - Generic Crossplot, 18 - Generic Histogram, 19 - Generic Stereonet, 20 - Generic Lineplot, 21 - Generic Image, 22 - Generic Text, 23 - Ternary, 24 - Walkout, 25 - Cumulative Dip, 26 - Single Depth, 27 - Generic Ternary, 28 - Generic Walkout, 29 - Generic Cumulative Dip, 30 - Generic Single Depth, 31 - Table of Contents, 32 - Table of Figures, 33 - Tables of Tables, 34 - Crossplot AVA, 35 - Waveform, 36 - Generic Waveform, 37 - Wellbore Centrid Grid, 38 - Generic Wellbore Centrid Grid, 39 - Borehole Section, 40 - Generic Borehole Section, 41 - Cross section profile plot, 42 - Cross section profile plot template, 43 - Generic cross section profile plot, 44 - Axial section profile plot, 45 - Axial section profile plot template, 46 - Generic axial section profile plot}

Returns
:
Success : item ID, else Exception

Return type
:
int

TechlogPlot.reportEditorAddItemToMasterPage(reN: Number, sN: Number, inS: str, speS: str, itNE: int)→ Number
Add an item to an existing master page:

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

inS (str) – item name

speS (str) – depends on item type Image item : folder name : Project, User, Company or Techlog Text item : text content (can contain HTML content if compliant with Qt’s rich text engine) Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html

itNE (int) – item type = { 0 - Image, 1 - Text}

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddLineItem(reN: Number, pN: Number, x1N: Number, y1N: Number, x2N: Number, y2N: Number)→ Number
Add a line item in a page

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

x1N (Number) – begin point horizontal position in current unit

y1N (Number) – begin point vertical position in current unit

x2N (Number) – end point horizontal position in current unit

y2N (Number) – end point vertical position in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddLineItemInMasterPage(reN: Number, sN: Number, x1N: Number, y1N: Number, x2N: Number, y2N: Number)→ Number
Add a line item in a master page

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

x1N (Number) – begin point horizontal position in current unit

y1N (Number) – begin point vertical position in current unit

x2N (Number) – end point horizontal position in current unit

y2N (Number) – end point vertical position in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddPage(reN: Number, snN: Number, pnS: str = 'Page X')→ Number
Add a page to an existing section

Parameters
:
reN (Number) – report editor ID

snN (Number) – section ID

pnS (str) – Optional; page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddRectItem(reN: Number, pN: Number, xN: Number, yN: Number, wN: Number, hN: Number)→ Number
Add a rectangle item in a page

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

wN (Number) – width in current unit

hN (Number) – height in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddRectItemInMasterPage(reN: Number, sN: Number, xN: Number, yN: Number, wN: Number, hN: Number)→ Number
Add a rectangle item in a master page

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

wN (Number) – width in current unit

hN (Number) – height in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddSection(reN: Number, snS: str)→ Number
Add a section to your report

Parameters
:
reN (Number) – report editor ID

snS (str) – section name

Returns
:
Success : section ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddSpecialItemToMasterPage(reN: Number, sN: Number, inS: str, hpN: Number, vpN: Number)→ Number
Add special item to the master page Only page number available at the moment

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

inS (str) – item name in report browser

hpN (Number) – horizontal position in current unit

vpN (Number) – vertical position in current unit

Returns
:
Success : item ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAddTable(reN: Number, ptN: Number, rcN: Number, ccN: Number, rhN: Number = 1, cwN: Number = 1, xN: Number = 0, yN: Number = 0)→ Number
Add a table to the report

Parameters
:
reN (Number) – report editor ID

ptN (Number) – page ID

rcN (Number) – row count

ccN (Number) – column count

rhN (Number) – Optional; row height in current unit

cwN (Number) – Optional; column width in current unit

xN (Number) – Optional; horizontal position in current unit

yN (Number) – Optional; vertical position in current unit

Returns
:
Success : table ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorAdjustItemToPage(reN: Number, iN: Number, aB: bool)→ bool
Adjust an item to the page width

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

aB (bool) – adjusted to the page width

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorApplyTo(reN: Number, wS: str, dS: str = '')→ bool
Apply a dataset or well to your report

Parameters
:
reN (Number) – report editor ID

wS (str) – well name

dS (str) – Optional; dataset name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorChangeItemPage(reN: Number, iN: Number, pN: Number)→ bool
Move an item to an other page

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

pN (Number) – page ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorClose(reN: Number)→ bool
Close the report editor

Parameters
:
reN (Number) – report editor ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorCreate()→ Number
Create a report editor

Returns
:
report editor ID

Return type
:
Number

TechlogPlot.reportEditorDeleteItem(reN: Number, iN: Number)→ bool
Delete an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorDeleteItemInMasterPage(reN: Number, iN: Number)→ bool
Delete an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorDeletePage(reN: Number, pN: Number)→ bool
Delete a page of the report

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorDeleteSection(reN: Number, sN: Number)→ bool
Delete a section in the report

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorHeaderLinkToLayout(reN: Number, hN: Number, lN: Number)→ bool
Apply layout properties to a header

Parameters
:
reN (Number) – report editor ID

hN (Number) – header ID

lN (Number) – layout ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorInsertPage(reN: Number, sN: Number, iN: Number, pnS: str = 'Page n')→ Number
Insert a page in an existing section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

iN (Number) – index (0 to n - 1)

pnS (str) – Optional; page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorInsertSection(reN: Number, iN: Number, snS: str = 'Section n')→ Number
Insert a section in the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – index (0 to n - 1)

snS (str) – Optional; section name

Returns
:
Success : section ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorItemApplyTo(reN: Number, iN: Number, dS: str = '')→ bool
Apply a Dataset or Well to a report item

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID 3. wS [string]: well name

dS (str) – Optional; dataset name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemImageKeepProportions(reN: Number, iN: Number, kpB: bool)→ bool
Set the keepProportions property of an image item

Parameters
:
reN (Number) – report editor ID

iN (Number) – image item ID

kpB (bool) – keeps proportions

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetAlignment(reN: Number, iN: Number, aNE: int)→ bool
Set item alignment

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

aNE (int) – alignment = {0 - Left, 1 - Center, 2 - Right, 3 - Justify}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetBackgroundColor(reN: Number, iN: Number, bcS: str, aB: bool = True)→ bool
Set item’s background color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

bcS (str) – background color

aB (bool) – Optional; activate background color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontColor(reN: Number, itN: Number, fcS: str)→ bool
Set item’s text content font color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fcS (str) – font color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontFamily(reN: Number, itN: Number, ffS: str)→ bool
Set item’s font family Check available families in the report editor toolbar

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

ffS (str) – font family

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontSize(reN: Number, itN: Number, fsN: Number)→ bool
Set item’s font size

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fsN (Number) – font size

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetFontStyle(reN: Number, itN: Number, fsNE: int, aB: bool)→ bool
Set item’s font style

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fsNE (int) – font style = {0 - Bold, 1 - Italic, 2 - Underline}

aB (bool) – apply or remove chosen style

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetHeight(reN: Number, iN: Number, hN: Number)→ bool
Set item’s height attribute

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

hN (Number) – height in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetHighlightColor(reN: Number, itN: Number, fcS: str)→ bool
Set item’s text content highlight color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

fcS (str) – highlight color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetLockState(reN: Number, iN: Number, lsNE: int)→ bool
Set item lock state

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

lsNE (int) – lock state = {0 - No lock, 1 - Lock Position, 2 - Lock Position & Content}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetOrientation(reN: Number, iN: Number, oNE: int)→ bool
Set item orientation

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

oNE (int) – orientation = {0 - 0deg, 1 - 90deg, 2 - 180deg, 3 - 270deg}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemSetWidth(reN: Number, iN: Number, wN: Number)→ bool
Set item’s width attribute

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

wN (Number) – width in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemShowInTableOfContents(reN: Number, iN: Number, sB: bool, inS: str = 'default')→ bool
Show item in table of contents

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

sB (bool) – visible

inS (str) – Optional; item name in table of contents

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemShowInTableOfFigures(reN: Number, iN: Number, sB: bool, inS: str = 'default')→ bool
Show item in table of figures

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

sB (bool) – visible

inS (str) – Optional; item name in table of figures

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemShowInTableOfTables(reN: Number, iN: Number, sB: bool, inS: str = 'default')→ bool
Show item in table of tables

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

sB (bool) – visible

inS (str) – Optional; item name in table of tables

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemTextAutoAdjustHeight(reN: Number, iN: Number, aahB: bool)→ bool
Auto adjust item text’s height

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

aahB (bool) – auto adjust height

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorItemTextSetText(reN: Number, itN: Number, tcS: str)→ bool
Set item text’s content Can contain HTML content if compliant with Qt’s rich text engine Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html

Parameters
:
reN (Number) – report editor ID

itN (Number) – item text ID

tcS (str) – text content

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorLayoutApplyReferenceLimitation(reN: Number, lN: Number, top: Number, bottom: Number)→ Number
Applies a depth limitation on a logview

Parameters
:
reN (Number) – report editor ID

lN (Number) – layout ID

top (Number) – top reference limitation

bottom (Number) – bottom reference limitation

Returns
:
Success : True, else Exception

Return type
:
Number

TechlogPlot.reportEditorLayoutSetScale(reN: Number, lN: Number, svN: Number)→ bool
Set the layout’s scale

Parameters
:
reN (Number) – report editor ID

lN (Number) – layout ID

svN (Number) – scale value

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorLayoutShowTrackHeaderAtBottom(reN: Number, lN: Number, thvB: bool)→ bool
Show the layout’s track header at bottom

Parameters
:
reN (Number) – report editor ID

lN (Number) – layout ID

thvB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorListItems(reportEditorId: int, itemType: int)→ int
Return the list of item ids in the given report id(be careful some types are equals, example histogram and Generic histogram)

Parameters
:
reportEditorId (int) – report editor ID

itemType (int) – item type = { 0 - Image, 1 - Layout, 2 - Layout Template, 3 - Crossplot, 4 - Crossplot MW, 6 - Crossplot AA, 7 - Crossplot Template, 8 - Histogram, 9 - Histogram MW, 10 - Histogram Template, 11 - Stereonet, 12 - Lineplot, 13 - Header, 14 - Text, 15 - Generic Header, 16 - Generic Layout, 17 - Generic Crossplot, 18 - Generic Histogram, 19 - Generic Stereonet, 20 - Generic Lineplot, 21 - Generic Image, 22 - Generic Text, 23 - Ternary, 24 - Walkout, 25 - Cumulative Dip, 26 - Single Depth, 27 - Generic Ternary, 28 - Generic Walkout, 29 - Generic Cumulative Dip, 30 - Generic Single Depth, 31 - Table of Contents, 32 - Table of Figures, 33 - Tables of Tables, 34 - Crossplot AVA, 35 - Waveform, 36 - Generic Waveform, 37 - Wellbore Centrid Grid, 38 - Generic Wellbore Centrid Grid, 39 - Borehole Section, 40 - Generic Borehole Section, 41 - Cross section profile plot, 42 - Cross section profile plot template, 43 - Generic cross section profile plot, 44 - Axial section profile plot, 45 - Axial section profile plot template, 46 - Generic axial section profile plot}

Returns
:
Success : list of item ids, else Exception

Return type
:
int

TechlogPlot.reportEditorListPages(reportEditorId: int, sectionId: int)→ int
Return the list of page ids in the given report id for a specific section

Parameters
:
reportEditorId (int) – report editor ID

sectionId (int) – section ID

Returns
:
Success : list of page ids, else Exception

Return type
:
int

TechlogPlot.reportEditorListSections(reportEditorId: int)→ int
Return the list of section ids in the given report id

Parameters
:
reportEditorId (int) – report editor ID

Returns
:
Success : list of section ids, else Exception

Return type
:
int

TechlogPlot.reportEditorMoveItem(reN: Number, iN: Number, xN: Number, yN: Number)→ bool
Move an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorMoveItemInMasterPage(reN: Number, iN: Number, xN: Number, yN: Number)→ bool
Move an item of the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

xN (Number) – horizontal position in current unit

yN (Number) – vertical position in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorNew(reN: Number)→ bool
Create a new report document

Parameters
:
reN (Number) – report editor ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorOpen(file: str, interactive: bool = True)→ Number
Open a report editor If it is a template, popup dialog asks user to choose well and dataset to apply unless interactive parameter is set to False

Parameters
:
file (str) – file name to open

interactive (bool) – Optional; True to have interactive dialog else False

Returns
:
report editor ID

Return type
:
Number

TechlogPlot.reportEditorPageDuplicateWithID(reN: Number, epN: Number, sN: Number, npS: str = 'Page n')→ Number
Duplicate a page of the report with IDs

Parameters
:
reN (Number) – report editor ID

epN (Number) – source page ID

sN (Number) – destination section ID (section to insert duplicated page)

npS (str) – Optional; duplicated page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorPageDuplicateWithName(reN: Number, esN: str, epN: str, sN: str, npS: str = 'Page n')→ Number
Duplicate a page of the report with names

Parameters
:
reN (Number) – report editor ID

esN (str) – source section name

epN (str) – source page name

sN (str) – destination section name (section to insert duplicated page)

npS (str) – Optional; duplicated page name

Returns
:
Success : page ID, else Exception

Return type
:
Number

TechlogPlot.reportEditorPrint(reN: Number)→ bool
Print a report document

Parameters
:
reN (Number) – report editor ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorPrintIntoPDF(reN: Number, fnS: str)→ bool
Print a report document into a PDF

Parameters
:
reN (Number) – report editor ID

fnS (str) – report name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorPrintIntoTiff(reN: Number, fnS: str)→ bool
Print a report document into a Tiff file

Parameters
:
reN (Number) – report editor ID

fnS (str) – report name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorRenameItem(reN: Number, iN: Number, inS: str)→ bool
Rename an item in the report

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

inS (str) – item name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorRenamePage(reN: Number, pN: Number, pnS: str)→ bool
Rename a page in the report

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

pnS (str) – page name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorRenameSection(reN: Number, sN: Number, snS: str)→ bool
Rename a section in the report

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

snS (str) – section name

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSave(reN: Number, rnS: str, fnSE: str)→ bool
Save a report

Parameters
:
reN (Number) – report editor ID

rnS (str) – report name

fnSE (str) – folder name = {‘Project’, ‘User’, ‘Company’, ‘Techlog’}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSaveAsTemplate(reN: Number, rnS: str, fnSE: str)→ bool
Save a report as a template

Parameters
:
reN (Number) – report editor ID

rnS (str) – report name

fnSE (str) – folder name = {‘Project’, ‘User’, ‘Company’, ‘Techlog’}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSectionSetMasterPage(reN: Number, s1N: Number, s2N: Number)→ bool
Set the master page of a section with an existing one

Parameters
:
reN (Number) – report editor ID

s1N (Number) – section ID (masterpage to copy)

s2N (Number) – section ID (masterpage to set)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetHorizontalMargin(reN: Number, sN: Number, mhN: Number)→ bool
Set top and bottom margin of a section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

mhN (Number) – margin height in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetItemGeneric(reN: Number, itN: Number)→ bool
Transform an item to a generic one

Parameters
:
reN (Number) – report editor ID

itN (Number) – item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetPaperFormat(reN: Number, fNE: int)→ bool
Set the paper format of the report

Parameters
:
reN (Number) – report editor ID

fNE (int) – paper format = { 0 - A4, 1 - B5, 2 - Letter, 3 - Legal, 4 - Executive, 5 - A0, 6 - A1, 7 - A2, 8 - A3, 9 - A5, 10 - A6, 11 - A7, 12 - A8, 13 - A9, 14 - B0, 15 - B1, 16 - B10, 17 - B2, 18 - B3, 19 - B4, 20 - B6, 21 - B7, 22 - B8, 23 - B9, 24 - C5E, 25 - Comm10E, 26 - DLE, 27 - Folio, 28 - Ledger, 29 - Tabloid, 30 - Custom

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetRelativeItem(reN: Number, iN: Number, piN: Number)→ bool
Set an item relative to another one

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

piN (Number) – parent item ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVerticalMargin(reN: Number, sN: Number, mwN: Number)→ bool
Set left and right margin of a section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

mwN (Number) – margin width in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVisibleItem(reN: Number, iN: Number, vB: bool)→ bool
Set visibility of an item in the given editor

Parameters
:
reN (Number) – report editor ID

iN (Number) – item ID

vB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVisiblePage(reN: Number, pN: Number, vB: bool)→ bool
Set visibility of a page

Parameters
:
reN (Number) – report editor ID

pN (Number) – page ID

vB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorSetVisibleSection(reN: Number, sN: Number, vB: bool)→ bool
Set visibility of a section

Parameters
:
reN (Number) – report editor ID

sN (Number) – section ID

vB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorShowMargin(reN: Number, mvB: bool)→ bool
Set margin visibility of the report

Parameters
:
reN (Number) – report editor ID

mvB (bool) – visible

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableAddColumn(reN: Number, tN: Number)→ bool
Add a column to the table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableAddRow(reN: Number, tN: Number)→ bool
Add a row to a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellMerge(reN: Number, tN: Number, firN: Number, ficN: Number, lirN: Number, licN: Number)→ bool
Merge multiple cells with indexes

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

firN (Number) – first row index

ficN (Number) – first column index

lirN (Number) – last row index

licN (Number) – last column index

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetAlignment(reN: Number, iN: Number, riN: Number, ciN: Number, aNE: int)→ bool
Set table cell’s alignment

Parameters
:
reN (Number) – report editor ID

iN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

aNE (int) – alignment = {0 - Left, 1 - Center, 2 - Right, 3 - Justify}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetBackgroundColor(reN: Number, tN: Number, riN: Number, ciN: Number, bcS: str)→ bool
Set table cell’s background color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

bcS (str) – background color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontColor(reN: Number, tN: Number, riN: Number, ciN: Number, fcS: str)→ bool
Set table cell’s font color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fcS (str) – font color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontFamily(reN: Number, tN: Number, riN: Number, ciN: Number, fcS: str)→ bool
Set table cell’s font family Check available families in the report editor toolbar

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fcS (str) – font family

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontSize(reN: Number, tN: Number, riN: Number, ciN: Number, fsN: Number)→ bool
Set table cell’s font size

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fsN (Number) – font size

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetFontStyle(reN: Number, tN: Number, riN: Number, ciN: Number, fsNE: int, aB: bool)→ bool
Set table cell’s font style

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

fsNE (int) – font style = {0 - Bold, 1 - Italic, 2 - Underline}

aB (bool) – apply or remove chosen style

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetHighlightColor(reN: Number, tN: Number, riN: Number, ciN: Number, hcS: str)→ bool
Set table cell’s highlight color Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

hcS (str) – highlight color

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetOrientation(reN: Number, tN: Number, riN: Number, ciN: Number, oNE: int)→ bool
Set table cell’s text orientation

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

oNE (int) – orientation = {0 - 0deg, 1 - 90deg, 2 - 180deg, 3 - 270deg}

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableCellSetText(reN: Number, tN: Number, riN: Number, ciN: Number, tcS: str)→ bool
Set table cell’s content Can contain HTML content if compliant with Qt’s rich text engine Documentation : qt-project.org/doc/qt-4.8/richtext-html-subset.html

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index

ciN (Number) – column index

tcS (str) – text content

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableDeleteColumn(reN: Number, tN: Number, ciN: Number)→ bool
Delete a column in a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

ciN (Number) – column index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableDeleteRow(reN: Number, tN: Number, riN: Number)→ bool
Delete a row in a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableInsertColumn(reN: Number, tN: Number, ciN: Number)→ bool
Insert a column in a table

Parameters
:
reN (Number) – report editor window ID

tN (Number) – report object ID of the table

ciN (Number) – column index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableInsertRow(reN: Number, tN: Number, riN: Number)→ bool
Insert a row in a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index (0 to n - 1)

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableResizeColumn(reN: Number, tN: Number, ciN: Number, chN: Number)→ bool
Resize a column of a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

ciN (Number) – column index index (0 to n - 1)

chN (Number) – column width in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableResizeRow(reN: Number, tN: Number, riN: Number, rhN: Number)→ bool
Resize a row of a table

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

riN (Number) – row index index (0 to n - 1)

rhN (Number) – row height in current unit

Returns
:
Success : True, else Exception

Return type
:
bool

TechlogPlot.reportEditorTableSetBorder(reN: Number, tN: Number, bsN: Number, bcS: str)→ bool
Set the border of a table Support Qt’s color system Exemple : #RGB #RRGGBB #RRRGGGBBB #RRRRGGGGBBBB (each of R, G, and B is a single hex digit) Exemple : steelblue gainsboro (www.w3.org/TR/SVG/types.html#ColorKeywords)

Parameters
:
reN (Number) – report editor ID

tN (Number) – table ID

bsN (Number) – border size

bcS (str) – border color

Returns
:
Success : True, else Exception

Return type
:
bool

Spectrum
TechlogPlot.spectrumAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumApplyTo(plotID: Number, ds: list)→ list
Apply the spectrum to a data set list

Parameters
:
plotID (Number) – spectrum window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.spectrumCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the spectrum - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumCreate(n: str, vl: list = None, f: str = '')→ Number
Create a new spectrum

Parameters
:
n (str) – spectrum window name

vl (list) – Optional; variable list

f (str) – Optional; filter variable ID

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumDeleteColor(plotID: Number)→ bool
Delete the color variable of a spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumDeleteVariables(plotID: Number)→ bool
Delete the variable of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumDuplicate(plotID: Number)→ Number
Duplicate the spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.spectrumGetIdByName(n: str)→ Number
Find the ID of a name-known spectrum

Parameters
:
n (str) – spectrum name

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumLockPalette(plotID: Number, locked: bool)→ bool
Lock palette of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellAddData(plotID: Number, ds: list)→ bool
Add a dataset to a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the spectrum - any display of zone must previously have been cancelled

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the spectrum

Parameters
:
plotID (Number) – spectrum window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellCreate(vl: list, c: str = '', f: str = '')→ Number
Create a new multi-well spectrum

Parameters
:
vl (list) – variable list

c (str) – Optional; color variable ID

f (str) – Optional; filter variable ID

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumMultiWellDuplicate(plotID: Number)→ Number
Duplicate the spectrum

Parameters
:
plotID (Number) – spectrum window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.spectrumMultiWellGetIdByName(n: str)→ Number
Find the ID of a name-known spectrum

Parameters
:
n (str) – spectrum name

Returns
:
spectrum window ID

Return type
:
Number

TechlogPlot.spectrumMultiWellOpen(n: str, f: str = '')→ bool
Open an existing spectrum

Parameters
:
n (str) – spectrum name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellRemoveDataset(plotID: Number, ds: str)→ bool
Remove a dataset from a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

ds (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellRemoveWell(plotID: Number, we: str)→ bool
Remove a well from a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

we (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSave(plotID: Number, n: str, f: str = '')→ bool
Save the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – spectrum window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSelectVar(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
[DEPRECATED] (use spectrumMultiWellSelectVariable instead) Change the variable selected among one family’s variables in a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSelectVariable(plotID: Number, we: str, ds: str, famId: Number, vr: str)→ bool
Change the variable selected among one family’s variables in a multi well spectrum

Parameters
:
plotID (Number) – spectrum window ID

we (str) – well name

ds (str) – dataset name

famId (Number) – ID of the family in which you wish to change variable

vr (str) – new variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a spectrum variable scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a spectrum variable Y axis scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a spectrum variable Y axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

t (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a spectrum variable Y axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

u (str) – X axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a spectrum variable Y axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

min (Number) – X axis minimum

max (Number) – X axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetName(plotID: Number, n: str)→ bool
Change the name of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – new spectrum window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumMultiWellSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumOpen(n: str, f: str = '')→ bool
Open an existing spectrum

Parameters
:
n (str) – spectrum name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSave(plotID: Number, n: str, f: str = '')→ bool
Save the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – spectrum window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – spectrum window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisInverse(plotID: Number, v: str, inv: bool)→ bool
Inverse a spectrum variable scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

inv (bool) – True if inversed, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisScale(plotID: Number, v: str, sc: int)→ bool
Change a spectrum variable axis scale

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

sc (int) – scale type {0 = ‘LINEAR’, 1 = ‘LOGARITHMIC’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisType(plotID: Number, v: str, t: int)→ bool
Change the type of a spectrum variable axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

t (int) – axis type {0 = ‘VAR’, 1 = ‘USER’, 2 = ‘FAMILY’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisUnit(plotID: Number, v: str, u: str)→ bool
Change the unit of a spectrum variable axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

u (str) – axis unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetAxisUserLimits(plotID: Number, v: str, min: Number, max: Number)→ bool
Set min & max values of a spectrum variable axis

Parameters
:
plotID (Number) – spectrum window ID

v (str) – variable name

min (Number) – axis minimum

max (Number) – axis maximum

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetColor(plotID: Number, color: str)→ bool
Set the color variable of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetDatum(plotID: Number, lim: bool, min: Number = 0, max: Number = 0)→ bool
Change the reference limitation on spectrum

Parameters
:
plotID (Number) – spectrum window ID

lim (bool) – True for user’s limitation, False else

min (Number) – Optional; top limit

max (Number) – Optional; bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetFilter(plotID: Number, f: str)→ bool
Set the variable as a filter

Parameters
:
plotID (Number) – spectrum window ID

f (str) – variable filter

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetName(plotID: Number, n: str)→ bool
Change the name of the spectrum

Parameters
:
plotID (Number) – spectrum window ID

n (str) – new spectrum window name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetVariablesList(plotID: Number, vn: list)→ bool
Set the variable list to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

vn (list) – variable list

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.spectrumSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the spectrum

Parameters
:
plotID (Number) – spectrum window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Stereonet
TechlogPlot.stereonetAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the stereonet

Parameters
:
plotID (Number) – stereonet window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetApplyTo(plotID: Number, ds: list)→ list
Apply the stereonet to a data set list

Parameters
:
plotID (Number) – stereonet window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.stereonetCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the stereonet - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – stereonet window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the stereonet

Parameters
:
plotID (Number) – stereonet window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetColorMode(plotID: Number, dm: int)→ bool
Display of the color mode on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dm (int) – color mode{0 = ‘TYPE_PALET’, 1 = ‘TYPE_WELL’, 2 = ‘TYPE_ZONATION’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new stereonet

Parameters
:
n (str) – stereonet window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
stereonet window ID

Return type
:
Number

TechlogPlot.stereonetDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDeleteColor(plotID: Number)→ bool
Delete the color variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDeleteDip(plotID: Number)→ bool
Delete the dip variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityGridX(plotID: Number, dgx: Number)→ bool
Set the density grid X size on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dgx (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityGridY(plotID: Number, dgy: Number)→ bool
Set the density grid Y size on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dgy (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityMethod(plotID: Number, dm: int)→ bool
Display of the density method on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dm (int) – density method {0 = ‘DENSITY_CONTOUR_KAMB’, 1 = ‘DENSITY_CONTOUR_1_PERCENT_AREA’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityOpacityActivate(plotID: Number, doa: bool)→ bool
Set if the density opacity is activate or not on stereonet

Parameters
:
plotID (Number) – stereonet window ID

doa (bool) – 1 = activate, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityOpacityValue(plotID: Number, dov: Number)→ bool
Set the density opacity value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dov (Number) – opacity value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensitySigma(plotID: Number, sig: Number)→ bool
Set the density sigma on stereonet

Parameters
:
plotID (Number) – stereonet window ID

sig (Number) – sigma value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensitySmoothMode(plotID: Number, dsm: int)→ bool
Set the density smooth mode on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dsm (int) – density smooth mode {0 = ‘DENSITY_SMOOTH_NONE’, 1 = ‘DENSITY_SMOOTH_AREA’, 2 = ‘DENSITY_SMOOTH_AREA_SQUARE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityType(plotID: Number, dst: bool = False)→ bool
Display of the stereonet in normal or density type

Parameters
:
plotID (Number) – stereonet window ID

dst (bool) – Optional; 1 = density display, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDensityValue(plotID: Number, value: bool, percent: bool = False)→ bool
Display of data density values

Parameters
:
plotID (Number) – stereonet window ID

value (bool) – 1 = display of density value else 0

percent (bool) – Optional; 1 = display in percent else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDisplayType(plotID: Number, dt: int)→ bool
Change the display type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

dt (int) – display type {0 = ‘TYPE_POLAR’, 1 = ‘TYPE_ROSE’, 2 = ‘TYPE_SCHMIDT’, 3 = ‘TYPE_WULFF’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetDuplicate(plotID: Number)→ Number
Duplicate the stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.stereonetGetIdByName(n: str)→ Number
Find the ID of a name-known stereonet

Parameters
:
n (str) – stereonet name

Returns
:
stereonet window ID

Return type
:
Number

TechlogPlot.stereonetGetInteractionGreatCircles(plotID: Number)→ list
Get the list of poles for great circles by interaction on a stereonet

Parameters
:
plotID (Number) – stereonet window ID

Returns
:
list of azimuth,dip tuples

Return type
:
list

TechlogPlot.stereonetGridStep(plotID: Number, gs: Number)→ bool
Change the grid step on stereonet

Parameters
:
plotID (Number) – stereonet window ID

gs (Number) – grid step in [6, 10, 12, 20, 30, 36]

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetGridType(plotID: Number, gt: int)→ bool
Change the grid type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

gt (int) – grid type {0 = ‘NONE’, 1 = ‘SIMPLE’, 2 = ‘FULL’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramAlpha(plotID: Number, a: Number)→ bool
Set the histogram opacity on stereonet

Parameters
:
plotID (Number) – stereonet window ID

a (Number) – alpha

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the histogram color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use stereonetHistogramColor instead) Set the histogram color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramCumulated(plotID: Number, c: bool = True)→ bool
Set if the histogram is cumulated or not on stereonet

Parameters
:
plotID (Number) – stereonet window ID

c (bool) – Optional; 1 = cumulated, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramGraduation(plotID: Number, grad: Number)→ bool
Set the histogram graduation on stereonet

Parameters
:
plotID (Number) – stereonet window ID

grad (Number) – graduation value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramLimitType(plotID: Number, lt: int)→ bool
Set the histogram limit type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

lt (int) – limit type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramMode(plotID: Number, hm: int)→ bool
Set the histogram mode on stereonet

Parameters
:
plotID (Number) – stereonet window ID

hm (int) – histogram mode {0 = ‘HISTO_BY_VARIABLE’, 1 = ‘HISTO_BY_FILTER’, 2 = ‘HISTO_BY_ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramNormalized(plotID: Number, n: bool = True)→ bool
Set if the histogram is normalized or not on stereonet

Parameters
:
plotID (Number) – stereonet window ID

n (bool) – Optional; 1 = normalized, else 0

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramUserMax(plotID: Number, uvm: Number)→ bool
Set the histogram user maximum value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

uvm (Number) – maximum value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramUserMin(plotID: Number, uvm: Number)→ bool
Set the histogram user minimum value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

uvm (Number) – minimum value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetHistogramUserMinMax(plotID: Number, uvmin: Number, uvmax: Number)→ bool
Set the histogram user minimum and maximum value on stereonet

Parameters
:
plotID (Number) – stereonet window ID

uvmin (Number) – minimum value

uvmax (Number) – maximum value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the stereonet

Parameters
:
plotID (Number) – stereonet window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersAlpha(plotID: Number, a: Number)→ bool
Set the makers opacity on stereonet

Parameters
:
plotID (Number) – stereonet window ID

a (Number) – alpha

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use stereonetMarkersColor instead) Set the makers color on stereonet

Parameters
:
plotID (Number) – stereonet window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on stereonet

Parameters
:
plotID (Number) – stereonet window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetOpen(n: str, f: str = '')→ bool
Open an existing stereonet

Parameters
:
n (str) – stereonet name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetProjectionHemisphere(plotID: Number, ph: int)→ bool
Change the projection hemisphere on stereonet

Parameters
:
plotID (Number) – stereonet window ID

ph (int) – projection hemisphere {0 = ‘LOWER_HEMISPHERE’, 1 = ‘UPPER_HEMISPHERE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetProjectionType(plotID: Number, pt: int)→ bool
Change the projection type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

pt (int) – projection type {0 = ‘TYPE_LINE’, 1 = ‘TYPE_PLANE’, 2 = ‘TYPE_POLE’, 3 = ‘TYPE_PLANE_AND_POLE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetRoseType(plotID: Number, rt: int)→ bool
Change the rose type on stereonet

Parameters
:
plotID (Number) – stereonet window ID

rt (int) – rose type {0 = ‘ROSE_AZIMUTH’, 1 = ‘ROSE_AZIMUTH_MIRROR’, 2 = ‘ROSE_STRIKE’, 3 = ‘ROSE_NONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSave(plotID: Number, n: str, f: str = '')→ bool
Save the stereonet

Parameters
:
plotID (Number) – stereonet window ID

n (str) – stereonet window name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – stereonet window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetColor(plotID: Number, color: str)→ bool
Set the color variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a stereonet

Parameters
:
plotID (Number) – stereonet window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetInteractionGreatCircles(plotID: Number, displayGreatCircles: bool)
display or not great circles by interaction on a stereonet

Parameters
:
plotID (Number) – stereonet window ID

displayGreatCircles (bool) – display great circles by iteration

TechlogPlot.stereonetSetName(plotID: Number, n: str)→ bool
Change the name of the stereonet

Parameters
:
plotID (Number) – stereonet window ID

n (str) – new stereonet plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.stereonetSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the stereonet

Parameters
:
plotID (Number) – stereonet window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Ternary Plot
TechlogPlot.ternaryPlotCreate(n: str, xn: str = '', yn: str = '', zn: str = '', c: str = '', f: str = '')→ Number
Create a new ternary plot

Parameters
:
n (str) – ternary plot window name

xn (str) – Optional; bottom axis variable name

yn (str) – Optional; left axis variable name

zn (str) – Optional; right axis variable name

c (str) – Optional; color variable name

f (str) – Optional; filter variable name

Returns
:
ternary plot window ID

Return type
:
Number

TechlogPlot.ternaryPlotDeleteBottomAxe(plotID: Number)→ bool
Delete the bottom axis variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteFilter(plotID: Number)→ bool
Delete the filter of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteLeftAxe(plotID: Number)→ bool
Delete the left axis variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDeleteRightAxe(plotID: Number)→ bool
Delete the right axis variable of an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotDuplicate(plotID: Number)→ Number
Duplicate an existing ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.ternaryPlotIDFindByName(n: str)→ Number
Find the ID of a name-known ternary plot

Parameters
:
n (str) – ternary plot window name

Returns
:
ternary plot window ID

Return type
:
Number

TechlogPlot.ternaryPlotOpen(n: str, f: str = '')→ Number
Open an existing ternary plot

Parameters
:
n (str) – ternary plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.ternaryPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

n (str) – ternary plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – ternary plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetBottomAxe(plotID: Number, var: str)→ bool
Set the variable for the bottom axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – bottom axis variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetColor(plotID: Number, var: str)→ bool
Set the variable for the color axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – color variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetFilter(plotID: Number, var: str)→ bool
Set the variable for the filter in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – filter variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetLeftAxe(plotID: Number, var: str)→ bool
Set the variable for the left axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – left axis variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.ternaryPlotSetRightAxe(plotID: Number, var: str)→ bool
Set the variable for the right axis in a ternary plot

Parameters
:
plotID (Number) – ternary plot window ID

var (str) – right axis variable name

Returns
:
operation exit status

Return type
:
bool

Vue 3D
TechlogPlot.vue3DCreate()→ Number
Create an 3D vue instance

Returns
:
plot ID

Return type
:
Number

TechlogPlot.vue3DCreateReservoir(plotID: Number, point_list: float, color: int, LineThickness: int)→ bool
Create 3D box to represent reservoir

Parameters
:
plotID (Number) – plot window ID

point_list (float) – list of points in format XYZ

color (int) – color

LineThickness (int) – thickness of line

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.vue3DCreateWBCG(plotID: Number, wellname: str, dataset: str, variables: list, orientation: Number)
Create a new WBCG inside 3DVue

Parameters
:
plotID (Number) – plot window ID

wellname (str) – name of well

dataset (str) – name of dataset

variables (list) – name of variable you want to use

orientation (Number) – 0 - Top of hole, 1 - To the North, 2 - Undefined

TechlogPlot.vue3DOpen(n: str, f: str = None)→ Number
Open an existing 3D vue

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.vue3DRemoveReservoir(plotID: Number)→ bool
Remove reservoir representation

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.vue3DSave(plotID: Number, filename: str)
Save 3DVue

Parameters
:
plotID (Number) – plot window ID

filename (str) – filename (warning override automatic)

Walkout Plot
TechlogPlot.walkoutPlotAddZone(plotID: Number, z: str)→ bool
Add a zone in the selection to the walkout-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotApplyTo(plotID: Number, ds: list)→ list
Apply the walkout-plot to a data set list

Parameters
:
plotID (Number) – plot window ID

ds (list) – dataset ID (wellName.datasetName)

Returns
:
list of plotID

Return type
:
list

TechlogPlot.walkoutPlotCleanZonation(plotID: Number, d: str)→ bool
Remove the zonation dataset from the walkout-plot - any display of zone must previously be cancelled

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotCleanZone(plotID: Number, z: str)→ bool
Remove a zone in the selection from the walkout-plot

Parameters
:
plotID (Number) – plot window ID

z (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotCreate(n: str, dip: str = '', azimuth: str = '', color: str = '', filter: str = '')→ Number
Create a new walkout-plot

Parameters
:
n (str) – plot window name

dip (str) – Optional; variable name

azimuth (str) – Optional; variable name

color (str) – Optional; variable name

filter (str) – Optional; variable name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.walkoutPlotDeleteAzimuth(plotID: Number)→ bool
Delete the azimuth variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDeleteColor(plotID: Number)→ bool
Delete the color variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDeleteDip(plotID: Number)→ bool
Delete the dip variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDeleteFilter(plotID: Number)→ bool
Delete the filter variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotDuplicate(plotID: Number)→ Number
Duplicate the walkout-plot

Parameters
:
plotID (Number) – plot window ID

Returns
:
new plot id or -1

Return type
:
Number

TechlogPlot.walkoutPlotGetIdByName(n: str)→ Number
Find the ID of a name-known walkout-plot

Parameters
:
n (str) – plot name

Returns
:
plot window ID

Return type
:
Number

TechlogPlot.walkoutPlotLockTitle(plotID: Number, locked: bool)→ bool
Lock title of the walkout-plot

Parameters
:
plotID (Number) – plot window ID

locked (bool) – True if locked, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotOpen(n: str, f: str = None)→ Number
Open an existing walkout-plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.walkoutPlotOpenCumulativeDipPlot(plotID: Number)→ Number
Open a cumulative dip plot

Parameters
:
plotID (Number) – walkout-plot window ID

Returns
:
cumulative dip-plot window ID

Return type
:
Number

TechlogPlot.walkoutPlotSave(plotID: Number, n: str, f: str = '')→ bool
Save the walkout-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSelectFilter(plotID: Number, FilterValues: list)→ bool
Select the filter values

Parameters
:
plotID (Number) – plot window ID

FilterValues (list) – filter values

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetAutomaticAdjustment(plotID: Number, b: bool)→ bool
Set the automatic adjustment on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – True for automatic adjustment, False else

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetAzimuth(plotID: Number, azimuth: str)→ bool
Set the azimuth variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

azimuth (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetColor(plotID: Number, color: str)→ bool
Set the color variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

color (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetColorMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
Set the color mode on walkout-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetColourMode(plotID: Number, mode: str = 'BY PALETTE')→ bool
[DEPRECATED] (use walkoutPlotSetColorMode instead) Set the color mode on walkout-plot

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; color mode {‘BY PALETTE’, ‘BY SOURCE’, ‘BY ZONE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetContoursMargin(plotID: Number, i: Number)→ bool
Set the contours margin on walkout-plot

Parameters
:
plotID (Number) – plot window ID

i (Number) – margin in pixels

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDatum(plotID: Number, lim: bool, ymin: Number=0, ymax: Number)→ bool
Change the reference limitation on walkout-plot

Parameters
:
plotID (Number) – plot window ID

lim (bool) – 0 for ‘whole datum’ / 1 for ‘user values’

ymin (Number) – Optional; top limitation

ymax (Number) – bottom limitation

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapLength(plotID: Number, i: Number)→ bool
Set the length of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

i (Number) – length

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapThickness(plotID: Number, f: Number)→ bool
Set the thickness of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – thickness

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapThreshold(plotID: Number, f: Number)→ bool
Set the threshold of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – threshold value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDepthGapVisible(plotID: Number, b: bool)→ bool
Set the visibility of the depth gap on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetDip(plotID: Number, dip: str)→ bool
Set the dip variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

dip (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetFilter(plotID: Number, filter: str)→ bool
Set the filter variable of a walkout-plot

Parameters
:
plotID (Number) – plot window ID

filter (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetMarkersColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the makers color on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetMarkersColour(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use walkoutPlotSetMarkersColor instead) Set the makers color on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetMarkersSize(plotID: Number, s: Number)→ bool
Set the makers size on walkout-plot

Parameters
:
plotID (Number) – plot window ID

s (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetName(plotID: Number, n: str)→ bool
Change the name of the walkout-plot

Parameters
:
plotID (Number) – plot window ID

n (str) – new plot windows name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialBorderColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the border color of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the color of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialPosition(plotID: Number, x: Number, y: Number)→ bool
Set the position of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

x (Number) – x position

y (Number) – y position

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialSize(plotID: Number, f: Number)→ bool
Set the size of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

f (Number) – size

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetReferentialVisible(plotID: Number, b: bool)→ bool
Set the visibility of the referential on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetVectorMeanByInteractionVisible(plotID: Number, b: bool)→ bool
Set the visibility of the ‘by interaction’ mean vector on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetVectorMeanGlobalVisible(plotID: Number, b: bool)→ bool
Set the visibility of the global mean vector on walkout-plot

Parameters
:
plotID (Number) – plot window ID

b (bool) – value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetWalkoutType(plotID: Number, type: str = 'AZIMUTH')→ bool
Set the walkout type of the walkout-plot

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; walkout type {‘AZIMUTH’, ‘EAST STRIKE’, ‘WEST STRIKE’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.walkoutPlotSetZonation(plotID: Number, d: str)→ bool
Set the zonation dataset to the walkout-plot

Parameters
:
plotID (Number) – plot window ID

d (str) – zonation dataset name

Returns
:
operation exit status

Return type
:
bool

Well Trajectory 2D
TechlogPlot.wellTrajectory2DAddSet(plotID: Number, wName: str, setName: str)→ bool
Add a dataset to an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DAddVariable(plotID: Number, wName: str, setName: str, vName: str)→ bool
Add a variable to an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DAddWell(plotID: Number, wName: str)→ bool
Add a well to an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DAddZone(plotID: Number, zone: str)→ bool
Add Zone in a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

zone (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DChangeZonation(plotID: Number, setZonation: str)→ bool
Set the zonation dataset of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setZonation (str) – dataset zonation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DCleanZonation(plotID: Number, setZonation: str)→ bool
Clean the zonation dataset of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setZonation (str) – dataset zonation name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DCleanZone(plotID: Number, zone: str)→ bool
Clean Zone in a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

zone (str) – zone name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DCreate(n: str, var1: str = None, var2: str = None, var3: str = None)→ Number
Create a new 2D well trajectory

Parameters
:
n (str) – plot name

var1 (str) – Optional; variable 1 name

var2 (str) – Optional; variable 2 name

var3 (str) – Optional; variable 3 name

Returns
:
plot ID

Return type
:
Number

TechlogPlot.wellTrajectory2DDuplicate(plotID: Number)→ bool
Duplicate the 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DOpen(n: str, f: str = None)→ Number
Open an existing 2D well trajectory

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.wellTrajectory2DRemoveSet(plotID: Number, setName: str)→ bool
Remove a dataset from an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DRemoveVariable(plotID: Number, vName: str)→ bool
Remove a variable from an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DRemoveWell(plotID: Number, wName: str)→ bool
Remove a well from an existing 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSave(plotID: Number, n: str, f: str = '')→ bool
Save the 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

n (str) – file name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetAutoAdjust(plotID: Number, b: bool)→ bool
Set the automatic adjustment of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – automatic adjustment if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetBoreholeCaliper(plotID: Number, wellName: str, setName: str, variableName: str)→ bool
set the caliper variable

Parameters
:
plotID (Number) – plot window ID

wellName (str) – well name

setName (str) – dataset name

variableName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetBoreholeDisplayType(plotID: Number, n: str)→ bool
Set the display mode for borehole radius

Parameters
:
plotID (Number) – plot window ID

n (str) – display mode for the borehole can be {“None”, “Constant radius”, “Caliper”} “Constant radius” displays a borehole around trajectory with a constant radius “Caliper” displays a borehole around the trajectoy from a caliper variableradius

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetBoreholeGlobalRadius(plotID: Number, radius: Number)→ bool
Set the global radius in Inches

Parameters
:
plotID (Number) – plot window ID

radius (Number) – global radius in Inches

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetClassificationObjectColor(plotID: Number, numObject: Number, r: Number, g: Number, b: Number)→ bool
Set the color of one object of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

numObject (Number) – index of the object in the classification

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetClassificationObjectLength(plotID: Number, numObject: Number, length: Number)→ bool
Set the length of one object of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

numObject (Number) – index of the object in the classification

length (Number) – length value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetClassificationObjectVisibility(plotID: Number, numObject: Number, b: bool)→ bool
Set the visiblity of one object of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

numObject (Number) – index of the object in the classification

b (bool) – object visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetGlobalClassificationVisibility(plotID: Number, b: bool)→ bool
Set the global visiblity of the classification of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – all object of the classification visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetKeepProportion(plotID: Number, b: bool)→ bool
Set the space proportion of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – keep proportion if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackFont(plotID: Number, fontName: str, fontSize: Number, fontBold: bool = False, fontItalic: bool = False, fontUnderline: bool = False, fontStrikeOut: bool = False)→ bool
Set the font of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

fontName (str) – name of the family font

fontSize (Number) – size of the font

fontBold (bool) – Optional; font in bold or not

fontItalic (bool) – Optional; font in italic or not

fontUnderline (bool) – Optional; underline font or not

fontStrikeOut (bool) – Optional; strike out font or not

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackShift(plotID: Number, gap: Number)→ bool
Set the gap of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

gap (Number) – shift value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackSize(plotID: Number, size: Number)→ bool
Set the size of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

size (Number) – size value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackSpacing(plotID: Number, step: Number)→ bool
Set the spacing of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

step (Number) – spacing value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackUnit(plotID: Number, unit: str)→ bool
Set the unit of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

unit (str) – reference track unit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetReferenceTrackVisible(plotID: Number, b: bool)→ bool
Set the visibility of the reference track of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – reference track visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryLineOfSection(plotID: Number, f: Number)→ bool
Set the line of section value of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

f (Number) – strike angle value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryType(plotID: Number, type: str = 'PROJECTED')→ bool
Set the type of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {“TOP_VIEW”, “PROJECTED”, “CURTAIN_SECTION”}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetTrajectoryVisible(plotID: Number, b: bool)→ bool
Set the visibility of the trajectory of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – trajectory visible if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1(plotID: Number, wName: str, setName: str, vName: str)→ bool
Set the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1Amplitude(plotID: Number, amplitude: Number)→ bool
Set the amplitude of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

amplitude (Number) – amplitude value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1AreaFillColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the area fill color of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1AreaFillMode(plotID: Number, mode: str = 'COLOR')→ bool
Set the area fill mode of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘NONE’, ‘PALETTE’, ‘COLOR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1OnTheRight(plotID: Number, onTheRight: bool)→ bool
Put the first variable of a 2D well trajectory on the right of the trajectory or not

Parameters
:
plotID (Number) – plot window ID

onTheRight (bool) – on the right if True, else on the left

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1Set(plotID: Number, setName: str)→ bool
Set the dataset of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar1Shift(plotID: Number, gap: Number)→ bool
Set the shift of the first variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

gap (Number) – shift value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2(plotID: Number, wName: str, setName: str, vName: str)→ bool
Set the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2Amplitude(plotID: Number, amplitude: Number)→ bool
Set the amplitude of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

amplitude (Number) – amplitude value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2AreaFillColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the area fill color of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2AreaFillMode(plotID: Number, mode: str = 'COLOR')→ bool
Set the area fill mode of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

mode (str) – Optional; {‘NONE’, ‘PALETTE’, ‘COLOR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2OnTheRight(plotID: Number, onTheRight: bool)→ bool
Put the second variable of a 2D well trajectory on the right of the trajectory or not

Parameters
:
plotID (Number) – plot window ID

onTheRight (bool) – on the right if True, else on the left

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2Set(plotID: Number, setName: str)→ bool
Set the dataset of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

setName (str) – dataset name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVar2Shift(plotID: Number, gap: Number)→ bool
Set the shift of the second variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

gap (Number) – shift value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDip(plotID: Number, wName: str, setName: str, vName: str)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDip instead) Set the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipGlobalColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipGlobalColor instead) Set the global color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipGlobalLength(plotID: Number, length: Number)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipGlobalLength instead) Set the global length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

length (Number) – global length value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipMarker(plotID: Number, marker: str = 'NONE')→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipMarker instead) Set the marker of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

marker (str) – Optional; {‘NONE’, ‘POINTS’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipThickness(plotID: Number, thickness: Number)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipThickness instead) Set the thickness of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipUseDipColor(plotID: Number, b: bool)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipUseDipColor instead) Set the use dip color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip color if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVarDipUseDipLength(plotID: Number, b: bool)→ bool
[DEPRECATED] (use wellTrajectory2DSetVariableDipUseDipLength instead) Set the use dip length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip length if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDip(plotID: Number, wName: str, setName: str, vName: str)→ bool
Set the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

wName (str) – well name

setName (str) – dataset name

vName (str) – variable name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipGlobalColor(plotID: Number, r: Number, g: Number, b: Number)→ bool
Set the global color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

r (Number) – red

g (Number) – green

b (Number) – blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipGlobalLength(plotID: Number, length: Number)→ bool
Set the global length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

length (Number) – global length value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipMarker(plotID: Number, marker: str = 'NONE')→ bool
Set the marker of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

marker (str) – Optional; {‘NONE’, ‘POINTS’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipThickness(plotID: Number, thickness: Number)→ bool
Set the thickness of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

thickness (Number) – thickness value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipUseDipColor(plotID: Number, b: bool)→ bool
Set the use dip color of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip color if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetVariableDipUseDipLength(plotID: Number, b: bool)→ bool
Set the use dip length of the dip variable of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – use dip length if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXAxisInverse(plotID: Number, b: bool)→ bool
Set the x axis inverse of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

b (bool) – inversed x axis if True

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXAxisType(plotID: Number, type: str = 'VAR')→ bool
Set the x axis type of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘USER’, ‘VAR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the x axis user limits of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetXYUnit(plotID: Number, unit: str)→ bool
Set the unit of x axis and y axis of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

unit (str) – unit value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetYAxisType(plotID: Number, type: str = 'VAR')→ bool
Set the y axis type of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

type (str) – Optional; {‘USER’, ‘VAR’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.wellTrajectory2DSetYAxisUserLimits(plotID: Number, min: Number, max: Number)→ bool
Set the y axis user limits of a 2D well trajectory

Parameters
:
plotID (Number) – plot window ID

min (Number) – min user

max (Number) – max user

Returns
:
operation exit status

Return type
:
bool

Other TechPlot functions
TechlogPlot.boreholeSectionPlotOpen(n: str, f: str = None)→ Number
Open an existing borehole section plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.captureToFile(plotID: Number, captureType: str, outputFormat: str, outputName: str, resolution_dpi: Number = 300)→ bool
Capture the plot into a file

Parameters
:
plotID (Number) – object ID

captureType (str) – ‘quick’, ‘export’

outputFormat (str) – ‘jpg’, ‘png’, ‘bmp’, ‘cgm’, ‘cgm_office’, ‘cgm_non_unicode’, ‘emf’, ‘svg’ or ‘tif’

outputName (str) – file name (saved in ‘Various’ folder by default)

resolution_dpi (Number) – Optional; dpi resolution for export 72, 96, 150 or 300

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.close(plotID: Number, vb: bool = True)→ bool
Close a plot

Parameters
:
plotID (Number) – plot window ID

vb (bool) – Optional; ask to save

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossplotAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0)→ bool
Add a regression in a cross-plot & sets the color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.crossplotMultiWellAddRegression(plotID: Number, r: Number = 0, g: Number = 0, b: Number = 0, Regression_Type: int = -1, Explanatory_variable_transformation: int = -1, Explained_variable_transformation: int = -1, Power_Function: bool = False)→ bool
Add a regression in a cross-plot & sets the color

Parameters
:
plotID (Number) – cross-plot window ID

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Regression_Type (int) – Optional; Regression type {0 = ‘XonY’, 1 = ‘YonX’, 2 = ‘MA’, 3 = ‘RMAXonY’, 4 = ‘RMAYonX’, 5 = ‘QUANTILE’, 6 = ‘SWANSON’}

Explanatory_variable_transformation (int) – Optional; Explanatory variable transformation {0 = ‘None’, 1 = ‘LOG10’, 2 = ‘EXP’}

Explained_variable_transformation (int) – Optional; Explained variable transformation {0 = ‘None’, 1 = ‘LOG10’, 2 = ‘EXP’}

Power_Function (bool) – Optional; True if you want to enabled the power function

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.enableBenchmark(enable: bool)
start the benchmarking

Parameters
:
enable (bool) – True start, False stop

Returns:

TechlogPlot.logviewInsertUncertaintyConstant(plotID: Number, v: str, lowerBound: Number, upperBound: Number, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
[DEPRECATED] (use logViewInsertUncertaintyConstant instead) Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

lowerBound (Number) – lower limit for uncertainty value

upperBound (Number) – upper limit for uncertainty value

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewInsertUncertaintyVariable(plotID: Number, v: str, variableLowerBound: str, variableUpperBound: str, r: Number = 255, g: Number = 255, b: Number = 0)→ bool
[DEPRECATED] (use logViewInsertUncertaintyVariable instead) Insert an incertitude range for this variable

Parameters
:
plotID (Number) – logview window ID

v (str) – variable ID

variableLowerBound (str) – lower limit for uncertainty values

variableUpperBound (str) – upper limit for uncertainty values

r (Number) – Optional; red

g (Number) – Optional; green

b (Number) – Optional; blue

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewSetAxeXMaxUserToHistoArray(plotID: Number, v: str, max: Number)→ bool
[DEPRECATED] (use logViewSetAxeXMaxUserToHistoArray instead) Change the X axis user upper limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

max (Number) – bottom limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewSetAxeXMinUserToHistoArray(plotID: Number, v: str, min: Number)→ bool
[DEPRECATED] (use logViewSetAxeXMinUserToHistoArray instead) Change the X axis user lower limits for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

min (Number) – top limit

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.logviewSetAxeXTypeToHistoArray(plotID: Number, v: str, xat: int)→ bool
[DEPRECATED] (use logViewSetAxeXTypeToHistoArray instead) Change the X axis limits types for a histogram array variable in a logview

Parameters
:
plotID (Number) – logview window ID

v (str) – variable name

xat (int) – X axis type {0 = ‘VAR’, 1 = ‘USER’}

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixCreate(n: str, nbl: Number = 1, nbc: Number = 2, t: str = '', f: str = '')→ Number
Open an empty matrix custom window

Parameters
:
n (str) – matrix window name

nbl (Number) – Optional; number of lines of the matrix

nbc (Number) – Optional; number of columns of the matrix

t (str) – Optional; matrix title

f (str) – Optional; folder

Returns
:
matrix window ID

Return type
:
Number

TechlogPlot.matrixDashBoardOpen(n: str, f: str = None)→ Number
Open an existing matrix dashboard

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixIDFindByName(n: str)→ Number
Find the ID of a name-known matrix custom-plot

Parameters
:
n (str) – matrix custom-plot name

Returns
:
matrix custom-plot window ID

Return type
:
Number

TechlogPlot.matrixInsertPlot(matrixID: Number, plotID: Number, posx: Number=0, posy: Number=0, n: str)→ bool
Insert a plot in a matrix custom

Parameters
:
matrixID (Number) – matrix window ID

plotID (Number) – plot window ID

posx (Number) – Optional; horizontal position of the plot in the matrix

posy (Number) – Optional; vertical position of the plot in the matrix

n (str) – plot name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.matrixPCAOpen(n: str, f: str = None)→ Number
Open an existing matrix PCA

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixPlotIDFindByName(matrixID: Number, n: str)→ Number
Find the ID of a name-known plot of a matrix custom-plot

Parameters
:
matrixID (Number) – matrix window ID

n (str) – plot name

Returns
:
matrix custom-plot window ID

Return type
:
Number

TechlogPlot.matrixSPLOMOpen(n: str, f: str = None)→ Number
Open an existing matrix SPLOM

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.matrixSplomOpen(n: str, f: str = None)→ Number
[DEPRECATED] (use matrixSPLOMOpen instead) Open an existing matrix SPLOM

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.objectList(o: str, f: str = '')→ bool
Return the list of the objects

Parameters
:
o (str) – object type (cross-plot,logView)

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.paletteAddOrUpdateDiscreteValue(paletteID: Number, patternID: Number, value: Number, color: str, description: str)→ bool
Add or update a discrete value to the palette.

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

patternID (Number) – pattern ID returned by the plot.patternID function

value (Number) – discrete value

color (str) – hexadecimal color code to be assigned to the discrete value

description (str) – description to be assigned to the discrete value

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.paletteDiscreteCreateOrGet(paletteName: str, storageLevel: str)→ Number
Create a discrete values palette at a given storage level or get the palette if this one already exists by its name at the given storage level.

Parameters
:
paletteName (str) – name of the discrete values palette

storageLevel (str) – Techlog storage level where the palette is created (‘project’, ‘company’, ‘user’)

Returns
:
returns a palette ID if the palette has been created or already exists by its name at the given storage level (returns None if the palette failed to be created)

Return type
:
Number

TechlogPlot.paletteDiscreteID(paletteName: str, storageLevel: str)→ Number
Gets the palette by its name at the given storage level.

Parameters
:
paletteName (str) – name of the discrete values palette

storageLevel (str) – Techlog storage level where the palette is created (‘project’, ‘company’, ‘user’)

Returns
:
returns a palette ID if the palette already exists by its name at the given storage level (returns None if the palette does not exist)

Return type
:
Number

TechlogPlot.paletteDiscreteValueGetColor(paletteID: Number, value: Number)→ str
Gets a color assigned to a palette discrete value

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

value (Number) – discrete value for which you want to get the color

Returns
:
returns an hexadecimal color code (returns None if no color assigned to the discrete value)

Return type
:
str

TechlogPlot.paletteDiscreteValueGetPatternName(paletteID: Number, value: Number)→ str
Gets a pattern name assigned to a palette discrete value

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

value (Number) – discrete value for which you want to get the pattern name

Returns
:
returns the pattern name with the format classification__patternName (returns None if no pattern assigned to the discrete value)

Return type
:
str

TechlogPlot.paletteDiscreteValueGetPatternStorageLevel(paletteID: Number, value: Number)→ str
Gets a pattern name assigned to a palette discrete value

Parameters
:
paletteID (Number) – palette ID returned by the plot.paletteDiscreteCreateOrGet function

value (Number) – discrete value for which you want to get the pattern storage level

Returns
:
returns the pattern storage level (returns None if no pattern assigned to the discrete value)

Return type
:
str

TechlogPlot.patternID(patternClassification: str, patternName: str, patternStorageLevel: str)→ Number
Gets the patternID from a pattern name at a given storage level.

Parameters
:
patternClassification (str) – classification of the pattern to be assigned to the discrete value

patternName (str) – name of the pattern to be assigned to the discrete value

patternStorageLevel (str) – Techlog storage level of the pattern (‘techlog’, ‘project’, ‘company’, ‘user’)

Returns
:
returns a pattern ID if the pattern exists by its name at the given storage level (returns None if the pattern doesn’t exist)

Return type
:
Number

TechlogPlot.piePlotOpen(n: str, f: str = '')→ Number
Open an existing pie plot

Parameters
:
n (str) – pie plot name

f (str) – Optional; folder

Returns
:
pie plot window ID

Return type
:
Number

TechlogPlot.resizeWidget(plotID: Number, width: Number = 1024, height: Number = 768)→ bool
Resize a widget

Parameters
:
plotID (Number) – window ID

width (Number) – Optional; window new Width

height (Number) – Optional; window new Height

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.saveAsImage(plotID: Number, n: str, f: str, ff: str = '', mustCut: bool = False)→ bool
Save a cross-plot, an histogram or a logview as image

Parameters
:
plotID (Number) – plot window ID

n (str) – name

f (str) – format

ff (str) – Optional; folder

mustCut (bool) – Optional; mustCut

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.setBenchmarkContext(context: str)
set benchmark context value

Parameters
:
context (str) – name

Returns:

TechlogPlot.setBenchmarkIteration(iteration: Number)
set benchmark context value

Parameters
:
iteration (Number) – number

Returns:

TechlogPlot.setLegendVisible(ID: Number, isLegendVisible: bool)
Display or hide the legend of the plot.

Parameters
:
ID (Number) – plot widget ID

isLegendVisible (bool) – True to display the legend of the plot, else False.

TechlogPlot.setPaletteToWidget(plotID: Number, palName: str)→ bool
Change a palette of an existing widget

Parameters
:
plotID (Number) – plot window ID

palName (str) – palette name

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.starPlotOpen(n: str, f: str = '')→ bool
Open an existing star plot

Parameters
:
n (str) – star plot name

f (str) – Optional; folder

Returns
:
operation exit status

Return type
:
bool

TechlogPlot.waveformDuplicate(plotId: Number)→ Number
Duplicate an existing waveform

Parameters
:
plotId (Number) – plot ID

Returns
:
plot ID

Return type
:
Number

TechlogPlot.waveformOpen(n: str, f: str = None)→ Number
Open an existing waveform

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number

TechlogPlot.waveformSpectrumOpen(plotID: Number)→ Number
Open a spectrum plot from a waveform

Parameters
:
plotID (Number) – waveform plot window ID

Returns
:
plot ID

Return type
:
Number

TechlogPlot.wellboreCentricGridOpen(n: str, f: str = None)→ Number
Open an existing wellbore centric grid plot

Parameters
:
n (str) – plot name

f (str) – Optional; folder

Returns
:
plot ID

Return type
:
Number
TechlogQuanti
TechlogQuanti.bQv(por: Number, res: Number, rw: Number, fTemp: Number, equation: str, useFixLine: bool, aStar: Number, mStar: Number)
Compute bQv, Qv and Waxman B

Parameters
:
por (Number) – [v/v] Porosity

res (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

fTemp (Number) – [degF] Formation Temperature

equation (str) – Equation type name {“1978 Waxman B chart”, “1972 Waxman B chart original fit”, “1972 Waxman B chart revised fit”}

useFixLine (bool) – use or not the extended line over 392 degF (200 degC)

aStar (Number) – Waxman-Smits a*

mStar (Number) – Cementation Exponent Star

Returns
:
output dictionary with the following keys: Number: [S/m]: Waxman BQv Number: [L.S/m]: computed Waxman B Number: [1/L]: computed Volumetric CEC

Return type
:
dict

TechlogQuanti.bWaxmanFromRw(rw: Number, fTemp: Number, equation: str = '1978 Waxman B chart')→ Number
Compute Waxman B from Water Resistivity

Parameters
:
rw (Number) – [ohm.m] Water Resistivity

fTemp (Number) – [degF] Formation Temperature

equation (str) – Optional; Equation type name {“1978 Waxman B chart”, “1972 Waxman B chart original fit”, “1972 Waxman B chart revised fit”}

Returns
:
[L.S/m]: computed Waxman B

Return type
:
Number

TechlogQuanti.bWaxmanFromSalinity(salinity: Number, fTemp: Number, equation: str = '1978 Waxman B chart', useFixLine: bool = False)→ Number
Compute Waxman B from Salinity

Parameters
:
salinity (Number) – [ppk] Formation Salinity

fTemp (Number) – [degF] Formation Temperature

equation (str) – Optional; Equation type name {“1978 Waxman B chart”, “1972 Waxman B chart original fit”, “1972 Waxman B chart revised fit”}

useFixLine (bool) – Optional; use or not the extended line over 392 degF (200 degC)

Returns
:
[L.S/m]: computed Waxman B

Return type
:
Number

TechlogQuanti.computeRmf(salinity: Number, fTemp: Number)→ Number
Compute mud filtrate resistivity

Parameters
:
salinity (Number) – [ppm] Mud Salinity

fTemp (Number) – [degF] Formation Temperature

Returns
:
[ohm.m]: Mud Filtrate Resistivity

Return type
:
Number

TechlogQuanti.createDataModel()→ bool
Create a data model

Returns
:
exit status (True if created, False if already exists, or error)

Return type
:
bool

TechlogQuanti.createQuantiElanWorkflow(name: str, bulkDensity: str = '', neutronPorosity: str = '', formationResistivity: str = '', flushedZoneResistivity: str = '', compressionnalSlowness: str = '', velocity: str = '', porosity: str = '', u: str = '', qv: str = '', ui: List[str] = None, groups: str = '')→ int
Create Quanti.Elan Workflow method

Parameters
:
name (str) – Quanti.Elan method name

bulkDensity (str) – Optional; Bulk Density Variable Name

neutronPorosity (str) – Optional; Neutron Porosity Variable Name

formationResistivity (str) – Optional; Formation Resistivity Variable Name

flushedZoneResistivity (str) – Optional; Flushed Zone Resistivity Variable Name

compressionnalSlowness (str) – Optional; Compressional Slowness Variable Name

velocity (str) – Optional; Velocity Variable Name

porosity (str) – Optional; Porosity Variable Name

u (str) – Optional; U Variable Name

qv (str) – Optional; QV Variable Name

ui (List[str]) – Optional; UI Variable Names

groups (str) – Optional; Groups Variable Name

Returns
:
widget Id (-1 if already exists, or error)

Return type
:
int

TechlogQuanti.denCorrectionHydrocarbon(den: Number, por: Number, sxo: Number, salinity: Number, rhoh: Number)→ Number
Compute bulk density hydrocarbon correction

Parameters
:
den (Number) – [g/cm3] Bulk Density

por (Number) – [v/v] Porosity

sxo (Number) – [v/v] Flushed Zone Water Saturation

salinity (Number) – [ppm] Mud Salinity

rhoh (Number) – [g/cm3] Hydrocarbon density

Returns
:
Bulk Density Hydrocarbon Corrected

Return type
:
Number

TechlogQuanti.fPressFromFluidDensity(depth: Number, denFluid: Number)→ Number
Compute the formation pressure from drilling fluid density

Parameters
:
depth (Number) – [m] current depth

denFluid (Number) – [kg/m3] drilling fluid density

Returns
:
[kPa]: Formation pressure

Return type
:
Number

TechlogQuanti.fPressFromGradient(depth: Number, gradient: Number)→ Number
Compute the formation pressure from gradient

Parameters
:
depth (Number) – [m] current depth

gradient (Number) – [kPa/m] pressure gradient value

Returns
:
[kPa]: Formation pressure

Return type
:
Number

TechlogQuanti.fTempFromGradient(depth: Number, topDepth: Number, topTemp: Number, gradient: Number)→ Number
Compute the formation temperature from gradient

Parameters
:
depth (Number) – current depth

topDepth (Number) – top depth

topTemp (Number) – top temperature

gradient (Number) – gradient

Returns
:
Formation temperature

Return type
:
Number

TechlogQuanti.fTempFromInterval(depth: Number, topDepth: Number, bottomDepth: Number, topTemp: Number, bottomTemp: Number)→ Number
Compute the formation temperature from interval

Parameters
:
depth (Number) – current depth

topDepth (Number) – top depth

bottomDepth (Number) – bottom depth

topTemp (Number) – top temperature

bottomTemp (Number) – bottom temperature

Returns
:
Formation temperature

Return type
:
Number

TechlogQuanti.neuCorrectionHydrocarbon(neu: Number, por: Number, sxo: Number, salinity: Number, rhomaa: Number, rhoh: Number, Hig: Number, Hif: Number, excavation: bool = False)→ Number
Compute neutron porosity hydrocarbon correction

Parameters
:
neu (Number) – [v/v] Neutron Porosity

por (Number) – [v/v] Porosity

sxo (Number) – [v/v] Flushed Zone Water Saturation

salinity (Number) – [ppm] Mud Salinity

rhomaa (Number) – [g/cm3] Apparent Matrix Density

rhoh (Number) – [g/cm3] Hydrocarbon density

Hig (Number) – [v/v] HI gas

Hif (Number) – [v/v] HI fluid

excavation (bool) – Optional;

Returns
:
Neutron Porosity Hydrocarbon Corrected

Return type
:
Number

TechlogQuanti.porCoreCalibrated(cpor: Number, slope: Number, constant: Number)→ Number
Compute the computed porosity using core calibrated method

Parameters
:
cpor (Number) – [v/v] Core Porosity

slope (Number) – slope

constant (Number) – [v/v] constant

Returns
:
[v/v]: computed porosity unclipped

Return type
:
Number

TechlogQuanti.porDeep(rt: Number, rw: Number, sw: Number, a: Number, m: Number, n: Number)→ Number
Compute the computed porosity using deep resistivity

Parameters
:
rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

sw (Number) – [v/v] Water Saturation

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

Returns
:
[v/v]: computed porosity

Return type
:
Number

TechlogQuanti.porDensity(den: Number, denMatrix: Number, denFluid: Number)→ Number
Compute the computed porosity unclipped using bulk density

Parameters
:
den (Number) – [g/cm3] Bulk Density

denMatrix (Number) – [g/cm3] Bulk Density matrix

denFluid (Number) – [g/cm3] Bulk Density fluid

Returns
:
[v/v]: computed porosity unclipped

Return type
:
Number

TechlogQuanti.porDielectric(tpl: Number, eatt: Number, tplMatrix: Number, tplFluid: Number)→ Number
Compute the computed porosity using dielectric log

Parameters
:
tpl (Number) – [ns/m] TPL

eatt (Number) – [dB/m] EATT

tplMatrix (Number) – [ns/m] TPL matrix

tplFluid (Number) – [ns/m] TPL fluid

Returns
:
[v/v]: computed porosity

Return type
:
Number

TechlogQuanti.porMicrolog(resShallow: Number, resDeep: Number, rmf: Number, kml: Number)→ Number
Compute the computed porosity using resistivity logs

Parameters
:
resShallow (Number) – [ohm.m] Shallow Resistivity

resDeep (Number) – [ohm.m] Deep Resistivity

rmf (Number) – [ohm.m] Mud Filtrate Resistivity

kml (Number) – [v/v] correction factor for mud cake effect

Returns
:
[v/v]: computed porosity

Return type
:
Number

TechlogQuanti.porNeutron(neu: Number, neuMatrix: Number, neuFluid: Number)→ Number
Compute the unclipped porosity [v/v] using neutron porosity

Parameters
:
neu (Number) – [v/v] Neutron Porosity

neuMatrix (Number) – [v/v] Neutron Porosity matrix

neuFluid (Number) – [v/v] Neutron Porosity fluid

Returns
:
[v/v]: Porosity Unclipped

Return type
:
Number

TechlogQuanti.porNeutronDensity(neu: Number, den: Number, denFluid: Number = 1, tool: str = 'Schlumberger CNL-NPHI', salinity: Number = 0)
Compute the unclipped porosity [v/v] using neutron porosity and bulk density tools values

Parameters
:
neu (Number) – [v/v] Neutron Porosity

den (Number) – [g/cm3] Bulk Density

denFluid (Number) – Optional; [g/cm3]: Fluid Density

tool (str) – Optional; Tool type = {“Schlumberger CNL-NPHI”, “Schlumberger CNL-TNPH”, “Schlumberger SNP”, “Schlumberger APS-APLC”, “Schlumberger APS-FPLC”, “Schlumberger Ecoscope BPHI”, “Schlumberger Ecoscope TNPH”, “Schlumberger adnVISION 825”, “Schlumberger adnVISION 475”, “Schlumberger adnVISION 825s”, “Atlas CN 2418/2420”, “Atlas CN 2435”, “Atlas CN 2446”, “Atlas SN”, “Welex DSN”, “Welex SN”, “Gearhart CNS”, “Gearhart SNP”, “Halliburton DSN-II”, “Halliburton HDSN”, “Halliburton CNT-K”, “Halliburton DSEN”, “Halliburton SNL”, “Schlumberger CDN 650”, “Schlumberger CDN 8”, “Schlumberger adnVISION 675”, “Sperry Sun CNP 6.75 in. collar”, “Sperry Sun CNP 8 in. collar”, “Sperry Sun CTN 4.75 in. collar” , “Anadrill CDN 6.5 in. collar”, “Anadrill CDN 8 in. collar”, “Anadrill ADN 6.75 in. collar” , “Weatherford TNP 475”, “Weatherford TNP 675”, “Weatherford TNP 825”, “Weatherford MDN”, “Weatherford CNT-V”, “Weatherford CNT-S”, “GE Oil & Gas CNL”}

salinity (Number) – Optional; [ppm]: salinity

Returns
:
output dictionary with the following keys: Number: [v/v]: Porosity Unclipped Number: [g/cm3]: Apparent Matrix Density Number: [unitless]: Main Lithology Number: [v/v]: Volume of Sandstone Number: [v/v]: Volume of Limestone Number: [v/v]: Volume of Dolomite Number: [v/v]: Volume of Anhydrite

Return type
:
dict

TechlogQuanti.porNeutronSonic(neu: Number, dt: Number, dtFluid: Number)→ Number
Compute the computed porosity unclipped using neutron porosity and compressional slowness

Parameters
:
neu (Number) – [v/v] Neutron Porosity

dt (Number) – [us/ft] Compressional Slowness

dtFluid (Number) – [us/ft] Compressional Slowness fluid

Returns
:
[v/v]: computed porosity unclipped

Return type
:
Number

TechlogQuanti.porShallow(rmf: Number, rxo: Number, sxo: Number, a: Number, m: Number, n: Number)→ Number
Compute the computed porosity [v/v] using flushed zone resistivity

Parameters
:
rmf (Number) – [ohm.m] Mud Filtrate Resistivity

rxo (Number) – [ohm.m] Flushed Zone Resistivity

sxo (Number) – [v/v] Flushed Zone Water Saturation

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

Returns
:
[v/v]: computed porosity

Return type
:
Number

TechlogQuanti.porSonic(dt: Number, dtMatrix: Number, dtFluid: Number, equation: str = 'Raymer-Hunt-Gardner', equationCoef: Number = MissingValue)→ Number
Compute the computed porosity unclipped using compressional slowness

Parameters
:
dt (Number) – [us/ft] Compressional Slowness

dtMatrix (Number) – [us/ft] Compressional Slowness matrix

dtFluid (Number) – [us/ft] Compressional Slowness fluid

equation (str) – Optional; equation = {“Raymer-Hunt-Gardner”, “Wyllie”, “Raiga-Clemenceau”, “Field Equation”}

equationCoef (Number) – Optional; [unitless]: coefficient to be used by the equation

Returns
:
[v/v]: computed porosity unclipped

Return type
:
Number

TechlogQuanti.porVshCorrected(porMax: Number, por: Number, porShale: Number, vsh: Number, isPore: bool = False)→ Number
Compute the corrected porosity from structured and/or dispersed shale volume

Parameters
:
porMax (Number) – [v/v] Porosity maximum

por (Number) – [v/v] Porosity

porShale (Number) – [v/v] Porosity shale

vsh (Number) – [v/v] Shale Volume

isPore (bool) – Optional; is Effective Porosity {True or False}

Returns
:
[v/v]: the corrected porosity from structured and/or dispersed shale volume

Return type
:
Number

TechlogQuanti.poreDensity(vsh: Number, phit: Number, denShale: Number, denMatrix: Number, denFluid: Number)→ Number
Compute the computed effective porosity unclipped [v/v] using bulk density

Parameters
:
vsh (Number) – [v/v] Shale Volume

phit (Number) – [v/v] Total porosity

denShale (Number) – [g/cm3] Bulk Density shale

denMatrix (Number) – [g/cm3] Bulk Density matrix

denFluid (Number) – [g/cm3] Bulk Density fluid

Returns
:
[v/v]: computed effective porosity unclipped

Return type
:
Number

TechlogQuanti.poreNeutron(neu: Number, vsh: Number, neuShale: Number)→ Number
Compute the computed effective porosity unclipped using neutron porosity

Parameters
:
neu (Number) – [v/v] Neutron Porosity

vsh (Number) – [v/v] Shale Volume

neuShale (Number) – [v/v] Neutron Porosity shale

Returns
:
[v/v]: computed effective porosity unclipped

Return type
:
Number

TechlogQuanti.poreShearSonic(por: Number, vsh: Number, dtMatrix: Number, dtShale: Number, dtFluid: Number)→ Number
Compute the computed effective porosity unclipped using shear slowness parameters

Parameters
:
por (Number) – [v/v] Porosity

vsh (Number) – [v/v] Shale Volume

dtMatrix (Number) – [us/ft] Slowness matrix

dtShale (Number) – [us/ft] Slowness shale

dtFluid (Number) – [us/ft] Slowness fluid

Returns
:
[v/v]: computed effective porosity unclipped

Return type
:
Number

TechlogQuanti.poreSonic(vsh: Number, dt: Number, dtMatrix: Number, dtFluid: Number, dtShale: Number, equation: str = 'Raymer-Hunt-Gardner', equationCoef: Number = MissingValue)→ Number
Compute the computed effective porosity unclipped using compressional slowness

Parameters
:
vsh (Number) – [v/v] Shale Volume

dt (Number) – [us/ft] Compressional Slowness

dtMatrix (Number) – [us/ft] Compressional Slowness matrix

dtFluid (Number) – [us/ft] Compressional Slowness fluid

dtShale (Number) – [us/ft] Compressional Slowness shale

equation (str) – Optional; equation = {“Raymer-Hunt-Gardner”, “Wyllie”, “Raiga-Clemenceau”, “Field Equation”}

equationCoef (Number) – Optional; [unitless]: coefficient to be used by the equation

Returns
:
[v/v]: computed effective porosity unclipped

Return type
:
Number

TechlogQuanti.propGas(fTemp: Number, fPress: Number, gravity: Number)
Compute the gas properties

Parameters
:
fTemp (Number) – [degF] Formation Temperature

fPress (Number) – [psi] Formation Pressure

gravity (Number) – [dAPI] Gas gravity

Returns
:
output dictionary with the following keys: Number: [g/cm3]: Bulk Density of the gas Number: [v/v]: Hydrogen Index of the gas

Return type
:
dict

TechlogQuanti.propMethane(fTemp: Number, fPress: Number)
Compute the methane properties

Parameters
:
fTemp (Number) – [degF] Formation Temperature

fPress (Number) – [psi] Formation Pressure

Returns
:
output dictionary with the following keys: Number: [g/cm3]: Bulk Density of the methane Number: [psi]: Bulk Modulus (Static) of the methane Number: [ft/s]: Velocity of the methane Number: [v/v]: Hydrogen Index of the methane

Return type
:
dict

TechlogQuanti.propMud(fTemp: Number, rms: Number, mst: Number, rmfs: Number, mfst: Number, rmcs: Number, mcst: Number)
Compute the mud properties from formation temperature

Parameters
:
fTemp (Number) – [degC] Formation Temperature

rms (Number) – [ohm.m] Mud sample resistivity

mst (Number) – [degC] Mud sample temperature

rmfs (Number) – [ohm.m] Mud filtrate sample resistivity

mfst (Number) – [degC] Mud filtrate sample temperature

rmcs (Number) – [ohm.m] Mud cake sample resistivity

mcst (Number) – [degC] Mud cake sample temperature

Returns
:
output dictionary with the following keys: Number: [ohm.m]: Mud Resistivity Number: [ohm.m]: Mud Filtrate Resistivity Number: [ohm.m]: Mud Cake Resistivity Number: [ppk]: Mud Salinity Number: [ppk]: Mud Filtrate Salinity

Return type
:
dict

TechlogQuanti.propOil(fTemp: Number, fPress: Number, oilGravity: Number, gasOilRatio: Number, gasGravity: Number)
Compute the formation pressure from drilling fluid density

Parameters
:
fTemp (Number) – [degF] Formation Temperature

fPress (Number) – [psi] Formation Pressure

oilGravity (Number) – [dAPI] Dead oil API gravity

gasOilRatio (Number) – [SCF/B] Gas/Oil ratio

gasGravity (Number) – [v/v] Gas gravity

Returns
:
output dictionary with the following keys: Number: [g/cm3]: Bulk Density of the oil Number: [psi]: Bulk Modulus (Static) of the oil Number: [ft/s]: Velocity of the oil Number: [v/v]: Hydrogen Index of the oil Number: [cP]: Viscosity of the oil Number: [psi]: Oil bubble point pressure

Return type
:
dict

TechlogQuanti.propWater(fTemp: Number, fPress: Number, salinity: Number)
Compute the water properties

Parameters
:
fTemp (Number) – [degF] Formation Temperature

fPress (Number) – [psi] Formation Pressure

salinity (Number) – [ppk] Salinity

Returns
:
output dictionary with the following keys: Number: [g/cm3]: Bulk Density of the water Number: [psi]: Bulk Modulus (Static) of the water Number: [ft/s]: Velocity of the water Number: [v/v]: Hydrogen Index of the water Number: [cP]: Viscosity of the water Number: [s]: T2 time of the water Number: [cm2/s]: Diffusion coefficient of the water

Return type
:
dict

TechlogQuanti.quantiMinWorkflowAddConstraint(id: int, dataset: str, zone: str, uncertainty: float, weight: float, parameters: dict)→ bool
Add a constraint to a Quanti.Elan workflow

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

uncertainty (float) – Uncertainty value

weight (float) – Weight value

parameters (dict) – Dictionary containing constraint parameters

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowAddDataset(id: int, well: str, dataset: str)→ bool
Create Quanti.Elan Workflow method

Parameters
:
id (int) – Quanti.Elan existing widget id

well (str) – Well name

dataset (str) – Dataset Name

Returns
:
exit status (True if created, False if already exists, or error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowSetDeepResistivity(id: int, dataset: str, zone: str, method: str, a: float, m: float, n: float, c: float, Formation_Water_Resistivity: float, Res_UIWA: float, Mud_Filtrate_Resistivity: float, Res_XIWA: float)→ bool
Set deep resistivity parameters to a Quanti.Elan Workflow method

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

method (str) – Method Name

a (float) – a

m (float) – m

n (float) – n

c (float) – c

Formation_Water_Resistivity (float) – Formation Water Resistivity

Res_UIWA (float) – Res UIWA

Mud_Filtrate_Resistivity (float) – Mud Filtrate Resistivity

Res_XIWA (float) – Res XIWA

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowSetInputProperties(id: int, dataset: str, zone: str, family: str, equation: str, constant: str)→ bool
Set Quanti.Elan Workflow method input properties

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

family (str) – Family Name

equation (str) – Equation type

constant (str) – Constant Name

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowSetMineralList(id: int, dataset: str, zone: str, mineralList: List[str])→ bool
Set the activated Minerals for a Quanti.Elan Workflow method

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

mineralList (List[str]) – Activated Minerals Names

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowSetParameter(id: int, dataset: str, zone: str, mineral: str, variable: str, value: float)→ bool
Set a parameter for a Quanti.Elan Workflow method

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

mineral (str) – Mineral Name

variable (str) – Column Name

value (float) – Parameter value

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowSetShallowResistivity(id: int, dataset: str, zone: str, method: str, a: float, m: float, n: float, c: float, Formation_Water_Resistivity: float, Res_UIWA: float, Mud_Filtrate_Resistivity: float, Res_XIWA: float)→ bool
Set shallow resistivity parameters to a Quanti.Elan Workflow method

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

method (str) – Method Name

a (float) – a

m (float) – m

n (float) – n

c (float) – c

Formation_Water_Resistivity (float) – Formation Water Resistivity

Res_UIWA (float) – Res UIWA

Mud_Filtrate_Resistivity (float) – Mud Filtrate Resistivity

Res_XIWA (float) – Res XIWA

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.quantiMinWorkflowSetToolType(id: int, dataset: str, zone: str, toolType: str)→ bool
Set a tool type a Quanti.Elan Workflow method

Parameters
:
id (int) – Quanti.Elan existing widget id

dataset (str) – Well_Dataset name

zone (str) – Zone Name

toolType (str) – Tool type Name

Returns
:
exit status (True if succed, False if error)

Return type
:
bool

TechlogQuanti.qvFromCEC(cec: Number, por: Number, rhoGrain: Number)→ Number
Compute the Qv

Parameters
:
cec (Number) – [1/kg] Cation Exchange Capability

por (Number) – [v/v] Porosity

rhoGrain (Number) – [g/cm3] Grain Density

Returns
:
[1/L]: computed Volumetric CEC

Return type
:
Number

TechlogQuanti.qvn(por: Number, porShale: Number, vsh: Number)→ Number
Compute the normalised Cation Excnhange Capacity (QVn)

Parameters
:
por (Number) – [v/v] Porosity

porShale (Number) – [v/v] Porosity shale

vsh (Number) – [v/v] Shale Volume

Returns
:
[v/v]: Normalized CEC

Return type
:
Number

TechlogQuanti.rwFromFTemp_IonConc(fTemp: Number, sodiumConc: Number, potaConc: Number, calciumConc: Number, chloriteConc: Number, totalIonConc: Number)→ Number
Compute the water resistivity from formation temperature and ion concentration

Parameters
:
fTemp (Number) – [degF] Formation Temperature

sodiumConc (Number) – [ppk] Sodium concentration

potaConc (Number) – [ppk] Potassium concentration

calciumConc (Number) – [ppk] Calcium concentration

chloriteConc (Number) – [ppk] Chlorite concentration

totalIonConc (Number) – [ppk] total ion concentration

Returns
:
[ohm.m]: Water Resistivity

Return type
:
Number

TechlogQuanti.rwFromFTemp_SP(fTemp: Number, sp: Number, rmf: Number, mfTemp: Number)
Compute the water resistivity and salinity from spoteneous potential and temperature

Parameters
:
fTemp (Number) – [degF] Formation Temperature

sp (Number) – [mV] Spoteneous Potential

rmf (Number) – [ohm.m] Mud Filtrate Resistivity

mfTemp (Number) – [degF] Mud Filtrate Temperature

Returns
:
output dictionary with the following keys: Number: [ohm.m]: Water Resistivity Number: [ppk]: Formation Salinity

Return type
:
dict

TechlogQuanti.rwFromFTemp_Salinity(fTemp: Number, salinity: Number)→ Number
Compute the water resistivity from formation temperature and salinity

Parameters
:
fTemp (Number) – [degF] Formation Temperature

salinity (Number) – [ppk] Formation Salinity

Returns
:
[ohm.m]: Water Resistivity

Return type
:
Number

TechlogQuanti.salinityFromFTemp(fTemp: Number)→ Number
Compute the formation salinity

Parameters
:
fTemp (Number) – [degF] Formation Temperature

Returns
:
[ppk]: Formation Salinity

Return type
:
Number

TechlogQuanti.salinityFromFTemp_Rw(fTemp: Number, rw: Number)→ Number
Compute the formation salinity from formation temperature and water resistivity

Parameters
:
fTemp (Number) – [degF] Formation Temperature

rw (Number) – [ohm.m] Water Resistivity

Returns
:
[ppk]: Formation Salinity

Return type
:
Number

TechlogQuanti.shPNC(vsh: Number, por: Number, zg: Number, zgMatrx: Number, zgHC: Number, zgWater: Number, zgShale: Number)
Compute for hydrocarbon saturation using the bulk volume weighted average of components equation for capture cross-sections from PNC logs

Parameters
:
vsh (Number) – [v/v] Bulk Volume Fraction of Shale in the formation

por (Number) – [v/v] Porosity

zg (Number) – [cu] PNC log reading

zgMatrx (Number) – [cu] Capture Cross-section for matrix

zgHC (Number) – [cu] Capture Cross-section for hydrocarbon

zgWater (Number) – [cu] Capture Cross-section for formation water

zgShale (Number) – [cu] Capture Cross-section of reference shale

Returns
:
output dictionary with the following keys: Number: [v/v]: Hydrocarbon Saturation Number: [cu]: Oil line (Sw=0%) Number: [cu]: Water line (Sw=100%)

Return type
:
dict

TechlogQuanti.shRelPNC(zg1: Number, zg2: Number, zgHC: Number, zgWater: Number, por: Number)→ Number
Compute the increase in water saturation seen during a time-lapse waterflood using a PNC log as the monitor log

Parameters
:
zg1 (Number) – [cu] PNC Sigma

zg2 (Number) – [cu] PNC Sigma of the Base PNC log

zgHC (Number) – [cu] Sigma of the formation hydrocarbons

zgWater (Number) – [cu] Sigma of the formation water

por (Number) – [v/v] Porosity

Returns
:
[v/v]: Increase in water saturation

Return type
:
Number

TechlogQuanti.swArchie(res: Number, a: Number, m: Number, n: Number, rw: Number, por: Number)→ Number
Compute the water saturation unclipped computed using the Archie equation

Parameters
:
res (Number) – [ohm.m] Resistivity

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

rw (Number) – [ohm.m] Water Resistivity

por (Number) – [v/v] Porosity

Returns
:
[v/v]: the water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweDispersedShale(resShale: Number, pore: Number, rt: Number, vsh: Number, a: Number, m: Number, n: Number, rw: Number)→ Number
Compute the effective water saturation unclipped computed using the “Dispersed shale” equation

Parameters
:
resShale (Number) – [ohm.m] Resistivity shale

pore (Number) – [v/v] Effective Porosity

rt (Number) – [ohm.m] Formation Resistivity

vsh (Number) – [v/v] Shale Volume

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

rw (Number) – [ohm.m] Water Resistivity

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweEquivalent(pore: Number, por: Number, sw: Number)→ Number
Compute the effective water saturation unclipped computed from water saturation

Parameters
:
pore (Number) – [v/v] Effective Porosity

por (Number) – [v/v] Porosity

sw (Number) – [v/v] Water Saturation

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweIndonesia(resShale: Number, por: Number, rt: Number, vsh: Number, a: Number, m: Number, n: Number, rw: Number)→ Number
Compute the effective water saturation unclipped computed using the Indonesia equation

Parameters
:
resShale (Number) – [ohm.m] Resistivity shale

por (Number) – [ohm.m] Porosity

rt (Number) – [ohm.m] Formation Resistivity

vsh (Number) – [v/v] Shale Volume

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

rw (Number) – [ohm.m] Water Resistivity

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweModifiedSimandoux(rt: Number, rw: Number, pore: Number, vsh: Number, a: Number, m: Number, resShale: Number)→ Number
Compute the effective water saturation unclipped computed using the modified Simandoux equation

Parameters
:
rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

pore (Number) – [v/v] Effective Porosity

vsh (Number) – [v/v] Shale Volume

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

resShale (Number) – [ohm.m] Resistivity shale

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweModifiedSimandouxVarN(rt: Number, rw: Number, pore: Number, vsh: Number, resShale: Number, a: Number, m: Number, n: Number)→ Number
Compute the effective water saturation unclipped computed using the modified Simandoux equation

Parameters
:
rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

pore (Number) – [v/v] Effective Porosity

vsh (Number) – [v/v] Shale Volume

resShale (Number) – [ohm.m] Resistivity shale

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweModifiedTotalShale(resShale: Number, pore: Number, rt: Number, vsh: Number, a: Number, m: Number, n: Number, rw: Number)→ Number
Compute the effective water saturation unclipped computed using the “Modified total shale” equation

Parameters
:
resShale (Number) – [ohm.m] Resistivity shale

pore (Number) – [v/v] Effective Porosity

rt (Number) – [ohm.m] Formation Resistivity

vsh (Number) – [v/v] Shale Volume

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

rw (Number) – [ohm.m] water resistivity

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweSimandoux(rt: Number, rw: Number, pore: Number, vsh: Number, resShale: Number, a: Number, m: Number, n: Number)→ Number
Compute the effective water saturation unclipped computed using the Simandoux equation

Parameters
:
rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

pore (Number) – [v/v] Effective Porosity

vsh (Number) – [v/v] Shale Volume

resShale (Number) – [ohm.m] Resistivity shale

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.sweTotalShale(resShale: Number, pore: Number, rt: Number, vsh: Number, a: Number, m: Number, n: Number, rw: Number)→ Number
Compute the effective water saturation unclipped computed using the “Total shale” equation

Parameters
:
resShale (Number) – [ohm.m] Resistivity shale

pore (Number) – [v/v] Effective Porosity

rt (Number) – [ohm.m] Formation Resistivity

vsh (Number) – [v/v] Shale Volume

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

rw (Number) – [ohm.m] Water Resistivity

Returns
:
[v/v]: the effective water saturation unclipped computed

Return type
:
Number

TechlogQuanti.swtDualWater(rt: Number, rw: Number, por: Number, vsh: Number, a: Number, m: Number, n: Number, porShale: Number, resShale: Number)→ Number
Compute the water saturation unclipped computed using the dual water equation

Parameters
:
rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

por (Number) – [v/v] Porosity

vsh (Number) – [v/v] Shale Volume

a (Number) – [unitless] Tortuosity Factor

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Exponent

porShale (Number) – [v/v] Porosity shale

resShale (Number) – [ohm.m] Resistivity shale

Returns
:
[v/v]: the water saturation unclipped computed

Return type
:
Number

TechlogQuanti.swtEquivalent(pore: Number, por: Number, swe: Number)→ Number
Compute the water saturation unclipped computed from effective water saturation

Parameters
:
pore (Number) – [v/v] Effective Porosity

por (Number) – [v/v] Porosity

swe (Number) – [v/v] Effective Water Saturation

Returns
:
[v/v]: the water saturation unclipped computed

Return type
:
Number

TechlogQuanti.swtJuhasz(rt: Number, rw: Number, por: Number, vsh: Number, porShale: Number, rShale: Number, m: Number, n: Number)→ Number
Compute the water saturation unclipped computed using the Juhasz equation

Parameters
:
rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

por (Number) – [v/v] Porosity

vsh (Number) – [v/v] Shale Volume

porShale (Number) – [v/v] Porosity shale

rShale (Number) – [ohm.m] Resistivity shale

m (Number) – [unitless] Cementation Exponent

n (Number) – [unitless] Saturation Cxponent

Returns
:
[v/v]: the water saturation unclipped computed

Return type
:
Number

TechlogQuanti.swtWaxmanSmits(m: Number, n: Number, rt: Number, rw: Number, por: Number, qv: Number, b: Number)→ Number
Compute the water saturation unclipped computed using the Waxman-Smits equation

Parameters
:
m (Number) – Cementation Exponent

n (Number) – Saturation Exponent

rt (Number) – [ohm.m] Formation Resistivity

rw (Number) – [ohm.m] Water Resistivity

por (Number) – [v/v] Porosity

qv (Number) – [1/L] Volumetric CEC

b (Number) – [L.S/m] Waxman B

Returns
:
[v/v]: the water saturation unclipped

Return type
:
Number

TechlogQuanti.uFromSalinity(salinity: Number)→ Number
Compute the U from salinity

Parameters
:
salinity (Number) – [ppk] Salinity

Returns
:
[b/elec]: U

Return type
:
Number

TechlogQuanti.vshDispersed(porMax: Number, por: Number, porShale: Number, vsh: Number, isPore: bool = False)→ Number
Compute the computed clipped dispersed shale volume

Parameters
:
porMax (Number) – [v/v] Porosity maximum

por (Number) – [v/v] Porosity

porShale (Number) – [v/v] Porosity shale

vsh (Number) – [v/v] Shale Volume

isPore (bool) – Optional; is Effective Porosity {True or False}

Returns
:
[v/v]: the computed clipped dispersed shale volume

Return type
:
Number

TechlogQuanti.vshGammaRay(gr: Number, grMatrix: Number, grShale: Number, equation: str = 'Linear')→ Number
Compute the computed unclipped shale volume using gamma ray

Parameters
:
gr (Number) – [gAPI] Gamma Ray

grMatrix (Number) – [gAPI] Gamma Ray matrix

grShale (Number) – [gAPI] Gamma Ray shale

equation (str) – Optional; Equation {“Linear”, “Clavier”, “Larionov - Tertiary rocks”, “Larionov - older rocks”

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number

TechlogQuanti.vshLaminated(porMax: Number, por: Number, porShale: Number, vsh: Number, pore: bool = False)→ Number
Compute the computed clipped laminated shale volume

Parameters
:
porMax (Number) – [v/v] Porosity maximum

por (Number) – [v/v] Porosity

porShale (Number) – [v/v] Porosity shale

vsh (Number) – [v/v] Shale Volume

pore (bool) – Optional; is Effective Porosity {True or False}

Returns
:
[v/v]: the computed clipped laminated shale volume

Return type
:
Number

TechlogQuanti.vshMN(neu: Number, dt: Number, den: Number, dtShale: Number, dtFluid: Number, denFluid: Number, denShale: Number, neuShale: Number)→ Number
Compute the computed unclipped shale volume using M and N parameters

Parameters
:
neu (Number) – [v/v] Neutron Porosity

dt (Number) – [us/ft] Compressional Slowness

den (Number) – [g/cm3] Bulk Density

dtShale (Number) – [us/ft] Compressional Slowness shale

dtFluid (Number) – [us/ft] Compressional Slowness fluid

denFluid (Number) – [g/cm3] Bulk Density fluid

denShale (Number) – [g/cm3] Bulk Density shale

neuShale (Number) – [v/v] Neutron Porosity shale

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number

TechlogQuanti.vshNeutronDensity(neu: Number, den: Number, denMatrix: Number, denShale: Number, denFluid: Number, neuMatrix: Number, neuShale: Number, neuFluid: Number)→ Number
Compute the computed unclipped shale volume [v/v] using neutron porosity and bulk density

Parameters
:
neu (Number) – [v/v] Neutron Porosity

den (Number) – [g/cm3] Bulk Density

denMatrix (Number) – [g/cm3] Bulk Density matrix

denShale (Number) – [g/cm3] Bulk Density shale

denFluid (Number) – [g/cm3] Bulk Density fluid

neuMatrix (Number) – [v/v] Neutron Porosity matrix

neuShale (Number) – [v/v] Neutron Porosity shale

neuFluid (Number) – [v/v] Neutron Porosity fluid

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number

TechlogQuanti.vshNeutronSonic(neu: Number, dt: Number, dtMatrix: Number, dtShale: Number, dtFluid: Number, neuMatrix: Number, neuShale: Number, neuFluid: Number)→ Number
Compute the computed unclipped shale volume using neutron porosity and compressional slowness

Parameters
:
neu (Number) – [v/v] Neutron Porosity

dt (Number) – [us/ft] Compressional Slowness

dtMatrix (Number) – [us/ft] Compressional Slowness matrix

dtShale (Number) – [us/ft] Compressional Slowness shale

dtFluid (Number) – [us/ft] Compressional Slowness fluid

neuMatrix (Number) – [v/v] Neutron Porosity matrix

neuShale (Number) – [v/v] Neutron Porosity shale

neuFluid (Number) – [v/v] Neutron Porosity fluid

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number

TechlogQuanti.vshPotassium(pota: Number, potaMatrix: Number, potaShale: Number, equation: str = 'Linear')→ Number
Compute the computed unclipped shale volume using potassium

Parameters
:
pota (Number) – [%] Potassium

potaMatrix (Number) – [%] Potassium matrix

potaShale (Number) – [%] Potassium shale

equation (str) – Optional; Equation {“Linear”, “Larionov - Tertiary rocks”, “Larionov - older rocks”}

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number

TechlogQuanti.vshResistivity(res: Number, resLim: Number, resShale: Number, equation: str, bExponentGaymar: Number = 1)→ Number
Compute the computed unclipped shale volume [v/v] using resistivity

Parameters
:
res (Number) – [ohm.m] Resistivity

resLim (Number) – [ohm.m] Resistivity limstone

resShale (Number) – [ohm.m] Resistivity shale

equation (str) – Equation = {“Resistivity log”, “Gaymar”}

bExponentGaymar (Number) – Optional; B variable exponent for Gaymar}

Returns
:
[v/v]: computed unclipped shale volume [v/v]

Return type
:
Number

TechlogQuanti.vshSonicDensity(dt: Number, den: Number, denMatrix: Number, denShale: Number, denFluid: Number, dtMatrix: Number, dtshale: Number, dtFluid: Number)→ Number
Compute the computed unclipped shale volume using compressional slowness and bulk density

Parameters
:
dt (Number) – [us/ft] Compressional Slowness

den (Number) – [g/cm3] Bulk Density

denMatrix (Number) – [g/cm3] Bulk Density matrix

denShale (Number) – [g/cm3] Bulk Density shale

denFluid (Number) – [g/cm3] Bulk Density fluid

dtMatrix (Number) – [us/ft] Compressional Slowness matrix

dtshale (Number) – [us/ft] Compressional Slowness shale

dtFluid (Number) – [us/ft] Compressional Slowness fluid

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number

TechlogQuanti.vshStructured(porMax: Number, por: Number, porShale: Number, vsh: Number, isPore: bool = False)→ Number
Compute the computed clipped structured shale volume

Parameters
:
porMax (Number) – [v/v] Porosity maximum

por (Number) – [v/v] Porosity

porShale (Number) – [v/v] Porosity shale

vsh (Number) – [v/v] Shale Bolume

isPore (bool) – Optional; is effective porosity {True or False}

Returns
:
[v/v]: the computed clipped structured shale volume

Return type
:
Number

TechlogQuanti.vshThorium(thor: Number, thorMatrix: Number, thorShale: Number, equation: str = 'Linear')→ Number
Compute the computed unclipped shale volume using thorium

Parameters
:
thor (Number) – [%] Thorium

thorMatrix (Number) – [%] Thorium matrix

thorShale (Number) – [%] Thorium shale

equation (str) – Optional; Equation {“Linear”, “Larionov - Tertiary rocks”, “Larionov - older rocks”}

Returns
:
[v/v]: computed unclipped shale volume

Return type
:
Number
TechlogRealTime
TechlogRealTime.isRealtimeRunning()
return true if real-time is active

TechlogRealTime.ospreyConnectStart()→ bool
start the osprey connect

Returns
:
operation exit status

Return type
:
bool

TechlogRealTime.ospreyConnectStop()→ bool
stop the osprey connect

Returns
:
operation exit status

Return type
:
bool

TechlogRealTime.realTimeStart(name: str, parameters: list = '', path: str = '', typeOfData: str = '', userDir: str = '')→ bool
start a poller

Parameters
:
name (str) – name of the poller {“RTC poller”, “Basic poller”, “CSV folder poller”, “Import poller”}

parameters (list) – Optional; list of the poller parameters

path (str) – Optional; path where are the variable to poll

typeOfData (str) – Optional; type of the data polled {“arrays”, “string”, “double”, “richtext”}

userDir (str) – Optional;

depthToRead (str) – Optional;

Returns
:
operation exit status

Return type
:
bool

TechlogRealTime.realTimeStop(name: str)→ bool
stop a poller

Parameters
:
name (str) – name of the poller {“RTC poller”, “Basic poller”, “CSV folder poller”, “Import poller”}

Returns
:
operation exit status

Return type
:
bool
TechlogStat
TechlogStat.FFT(reals: list, sign: int, imaginaries: list)→ list
Compute a FFT or Inverse FFT

Parameters
:
reals (list) – real values

sign (int) – 1 = FFT, -1 = inverse FFT

imaginaries (list) – imaginary values

Returns
:
real and imaginary values

Return type
:
list

TechlogStat.autoShiftGetTable(wellsrcO: str, dsetsrcO: str, welldstO: str, dsetdstO: str, varsrc: str, vardst: str, amincorr: float, aderivmask: float, aoutltresh: float, afwsize: float, afshift: float, aswsize: float, asshift: float, aremoveoutshift: bool, aoutshifttresh: float, correlationtype: int)→ list
Return a list of depth shift

Parameters
:
wellsrcO (str) – name of the source well

dsetsrcO (str) – name of the source dataset

welldstO (str) – name of the destination well

dsetdstO (str) – name of the destination dataset

varsrc (str) – name of the source variable

vardst (str) – name of the destination variable

amincorr (float) – mincorr

aderivmask (float) – derivative mask

aoutltresh (float) – threshold for outliers

afwsize (float) – first pass window size

afshift (float) – first pass shift

aswsize (float) – second pass window size

asshift (float) – second pass shift

aremoveoutshift (bool) – remove outlier shift

aoutshifttresh (float) – threshold for outliers

correlationtype (int) – 0 for correlation, 1 for anti-correlation, 2 for both

Returns
:
operation exit status

Return type
:
list

TechlogStat.derivateXonY(x: list, y: list, lgX: bool = False, lgY: bool = False, dim: Number = 1)→ list
Compute the derivative to X axis on Y axis and return a table with the same size as the inputs

Parameters
:
x (list) – X values

y (list) – Y values

lgX (bool) – Optional; logOnX

lgY (bool) – Optional; logOnY

dim (Number) – Optional; dimension

Returns
:
data list

Return type
:
list

TechlogStat.despike(x: list, medianwsize: Number, threshold: Number, transition: bool)→ list
Perform despiking

Parameters
:
x (list) – X values

medianwsize (Number) – smoothing windowsize in depth unit

threshold (Number) – threshold cut-off

transition (bool) – remove transition

Returns
:
data list

Return type
:
list

TechlogStat.flagDespike(depth: list, values: list, medianwsize: Number, threshold: Number, transition: bool)→ list
Flag despiking

Parameters
:
depth (list) – depth values

values (list) – values to despike

medianwsize (Number) – smoothing windowsize in depth unit

threshold (Number) – threshold cut-off

transition (bool) – remove transition

Returns
:
despike flags list

Return type
:
list

TechlogStat.gaussianDerivative(d: list, abscA: list, windowsize: Number)→ list
Return a list of gaussian derivative

Parameters
:
d (list) – data list

abscA (list) – abscissa list

windowsize (Number) – size of the window (must be superior to abscissa sampling rate)

Returns
:
list gaussian derivative

Return type
:
list

TechlogStat.gaussianSmooth(d: list, windowsize: Number)→ list
Return the smoothed list of values

Parameters
:
d (list) – data list (must correspond to equi-distant steps) and

windowsize (Number) – size of the window( number of points)

Returns
:
list gaussian smoothed

Return type
:
list

TechlogStat.gaussianSmoothAngular(d: list, depth: list, windowsize: Number, degree: bool)→ list
Return the smoothed list of values

Parameters
:
d (list) – data list

depth (list) – depth

windowsize (Number) – size of the window( in depth unit)

degree (bool) – degree or radian

Returns
:
list gaussian smoothed

Return type
:
list

TechlogStat.highPassFilter(x: list, rc: Number, sp: Number)→ list
Compute a high pass filter according to RC and the sampling rate of the data and applies it to the input

Parameters
:
x (list) – X values

rc (Number) – RC

sp (Number) – sampling rate

Returns
:
data list

Return type
:
list

TechlogStat.linInterp(ov: list, op: list, np: list, tol: Number = MissingValue)→ list
Return a list of values corresponding to the new positions

Parameters
:
ov (list) – old values

op (list) – old positions THIS LIST MUST BE INCREASING

np (list) – new positions

tol (Number) – Optional; window size tolerance in depth unit

Returns
:
list new values

Return type
:
list

TechlogStat.linear(value: Number, minValue: Number, maxValue: Number, minNorm: Number, maxNorm: Number)→ Number
Return the linearisation of the value

Parameters
:
value (Number) – value to linearise

minValue (Number) – minimum value of the input

maxValue (Number) – maximum value of the input

minNorm (Number) – minimum value of the output

maxNorm (Number) – maximum value of the output

Outputs:
Number: linearised value

TechlogStat.lowPassFilter(x: list, rc: Number, sp: Number)→ list
Compute a low pass filter according to RC and the sampling rate of the data and applies it to the input

Parameters
:
x (list) – X values

rc (Number) – RC

sp (Number) – sampling rate

Returns
:
data list

Return type
:
list

TechlogStat.randomNorm(mean: Number, std: Number, relative: bool)→ Number
Return a normal random deviate

Parameters
:
mean (Number) – mean

std (Number) – std

relative (bool) – relative

Returns
:
normal random deviate

Return type
:
Number

TechlogStat.regression(x: list, y: list, order: Number = 1, regression: str = 'ortho', trX: str = 'none', trY: str = 'none', fixed_point_mode: int = 0, fixed_x: Number = 0.0, fixed_y: Number = 0.0)→ list
Return the coefficient of a regression

Parameters
:
x (list) – X axis

y (list) – Y axis

order (Number) – Optional; order {1, 2, 3 …}

regression (str) – Optional; regression type {‘x/y’, ‘y/x’, ‘ortho’}

trX (str) – Optional; transformation on the X axis {‘none’, ‘log’, ‘exp’, ‘exp10’, ‘inv’}

trY (str) – Optional; transformation on the Y axis {‘none’, ‘log’, ‘exp’, ‘exp10’, ‘inv’}

fixed_point_mode (int) – Optional; 0:none 1:fixed point 2: mean fixed point

fixed_x (Number) – Optional; fixed x

fixed_y (Number) – Optional; fixed y

Returns
:
data list

Return type
:
list

TechlogStat.regressionR2(x: str, y: str, order: Number = 1, regression: str = 'ortho', trX: str = 'none', trY: str = 'none')→ Number
Return the correlation coefficient of a regression

Parameters
:
x (str) – X axis

y (str) – Y axis

order (Number) – Optional; order {1, 2, 3 …}

regression (str) – Optional; regression type {‘x/y’, ‘y/x’, ‘ortho’}

trX (str) – Optional; transformation on the X axis {‘none’, ‘log’, ‘exp’, ‘exp10’, ‘inv’}

trY (str) – Optional; transformation on the Y axis {‘none’, ‘log’, ‘exp’, ‘exp10’, ‘inv’}

Returns
:
correlation coefficient

Return type
:
Number
TechlogStatAdvanced
TechlogStatAdvanced.angularDepthShift(lg1: list, lg, angleShift: Number, ovs: Number)→ Number
BHI procedure find the best depth shift angleshift is in degree and is applied to log1

Parameters
:
lg1 (list) – log 1 values

lg (None) – 2 [list]: log 2 values

angleShift (Number) – angle shift

ovs (Number) – oversamplingnumber

Returns
:
best depth shift angleshift

Return type
:
Number

TechlogStatAdvanced.autoShiftGetTable(wellsrcO: str, dsetsrcO: str, welldstO: str, dsetdstO: str, varsrc: str, vardst: str, amincorr: float, aderivmask: float, aoutltresh: float, afwsize: float, afshift: float, aswsize: float, asshift: float, aremoveoutshift: bool, aoutshifttresh: float, correlationtype: int)→ list
Return a list of depth shift

Parameters
:
wellsrcO (str) – name of the source well

dsetsrcO (str) – name of the source dataset

welldstO (str) – name of the destination well

dsetdstO (str) – name of the destination dataset

varsrc (str) – name of the source variable

vardst (str) – name of the destination variable

amincorr (float) – mincorr

aderivmask (float) – derivative mask

aoutltresh (float) – threshold for outliers

afwsize (float) – first pass window size

afshift (float) – first pass shift

aswsize (float) – second pass window size

asshift (float) – second pass shift

aremoveoutshift (bool) – remove outlier shift

aoutshifttresh (float) – threshold for outliers

correlationtype (int) – 0 for correlation, 1 for anti-correlation, 2 for both

Returns
:
operation exit status

Return type
:
list

TechlogStatAdvanced.cgp(a: list, b: list, n: int, w: list, v: list)→ list
Conjugate gradient Projected

Parameters
:
a (list) – [list] a matrix

b (list) – right hand side vector

n (int) – dimension

w (list) – vectors of the lower box constraint

v (list) – vectors of the upper box constraint

Returns
:
the solution

Return type
:
list

TechlogStatAdvanced.chartInterpolation(dimensionnality, initial, initial, input, optionnal, optionnal)→ List[Number
perform interpolation on Chart data

Parameters
:
dimensionnality (None) – of input data (usually 2 for cross plot)

initial (None) – data : input ( dimensionnality x number of points ) as python list of numbers

initial – data : output ( number of point python list of numbers)

input (None) – points , (dimensionnality x number of query points)

optionnal (None) – variance growth factor and initial variance

optionnal – initial variance

Returns
:
]: returns query output as a python list of numbers

Return type
:
List[Number

TechlogStatAdvanced.logsquarringhinkley(well: str, dset: str, logname: str, top: Number, bot: Number, H: Number, Nu: Number, log: bool, windowsize: Number)→ list
Log Squarring ( Hinkley )

Parameters
:
well (str) – well

dset (str) – dataset

logname (str) – logname

top (Number) – top

bot (Number) – bottom

H (Number) – H

Nu (Number) – Nu

log (bool) – Logarithmique

windowsize (Number) – WindowSize

Returns
:
the solution

Return type
:
list

TechlogStatAdvanced.svdcmp(a: list, m: int, n: int)→ list[list
Singular Value decomposition A = U.W.V

Parameters
:
a (list) – [list] a matrix

m (int) – row

n (int) – col

Returns
:
][list][list[list]]: U matrix ,W array, and V matrix

Return type
:
list[list

TechlogTechcore
TechlogTechcore.capCurveOrderHarmonization(SW: list, PC: list, dim: Number)→ list
This function transforms saturation and pressure curves to have the classic configuration - increasing capilary pressure and decreasing water saturation. return one array with the two curves sticked, first is the water saturation.

Parameters
:
SW (list) – water saturation values

PC (list) – capillary pressure values

dim (Number) – column size

Returns
:
return one array with the two curves sticked, first is the water saturation [sw[0], pc[0], sw[1], pc[1], …]

Return type
:
list

TechlogTechcore.clayBoundWaterCorrectionPC(PC: list, dim: Number, QV: list, sal: list)→ list
This function returns PC reservoir computed values.

Parameters
:
PC (list) – PC laboratory (array)

dim (Number) – PC laboratory dimension

QV (list) – QV (array)

sal (list) – reservoir salinity (array)

Returns
:
PC reservoir computed values

Return type
:
list

TechlogTechcore.clayBoundWaterCorrectionSW(SW: list, dim: Number, QV: list, sal: list)→ list
This function returns SW reservoir computed values.

Parameters
:
SW (list) – SW laboratory (array)

dim (Number) – SW laboratory dimension

QV (list) – QV (array)

sal (list) – reservoir salinity (array)

Returns
:
SW reservoir computed values

Return type
:
list

TechlogTechcore.lambdaMethod(X: list, Y: Number, autoClean: bool = True, initA: bool = False, a: Number = MissingValue, initLambda: bool = False, lambda_: Number = MissingValue, initB: bool = False, b: Number = MissingValue, useWeigth: bool = False, weightTab: list = None)→ list
This function returns the list of the a, lambda and b parameters in the Lambda function ‘Sw = a * PC ** -lambda + b’. If the init value for one of the parameter is set to true the value of the parameter will be used like a initialisation value, if it’s ‘False’ and the parameter has a value this parameter will be fixed to this value, otherwise the initialisation value will be calculated automatically.

Parameters
:
X (list) – [v/v] Water Saturation (v/v)

Y (Number) – [bar] Capillary Pressure (bar)

autoClean (bool) – Optional; automatic clean = True

initA (bool) – Optional; init value for ‘a’ parameter = False

a (Number) – Optional; ‘a’ = MissingValue

initLambda (bool) – Optional; init value for ‘lambda’ parameter = False

lambda (Number) – Optional; ‘lambda’ = MissingValue

initB (bool) – Optional; init value for ‘b’ parameter = False

b (Number) – Optional; ‘b’ = MissingValue

useWeigth (bool) – Optional; use a weight factor = False

weightTab (list) – Optional; weight table

Returns
:
‘a’, ‘lambda’ and ‘b’ parameter list

Return type
:
list

TechlogTechcore.poreThroatDistribution(pcvalues: list, Swvalues: list, nbSamples: Number, interftension: Number = 480, theta: Number = 140)→ list
Compute the pore throat distribution

Parameters
:
pcvalues (list) – core laboratory pressure values (bar)

Swvalues (list) – core water saturation values (v/v)

nbSamples (Number) – number of capillary pressure curves

interftension (Number) – Optional; interfacial tension laboratory in dyne/cm

theta (Number) – Optional; laboratory contact angle in degrees

Returns
:
array where the first element is the PTR list and the second is the PV list

Return type
:
list

TechlogTechcore.stressCorrectionPC(PCLab: list, dim: Number, PorRes: list, PorLab: list)→ bool
This function return True if the PC reservoir is saved or False otherwise.

Parameters
:
PCLab (list) – PC laboratory values

dim (Number) – PC dimension

PorRes (list) – porosity reservoir values

PorLab (list) – porosity laboratory values

Returns
:
operation exit status

Return type
:
bool

TechlogTechcore.stressCorrectionPCvariables(wellName: str, datasetName: str, PCname: str, PorResName: str, PorLabName: str, PCResName: str, verbose: bool = False)→ bool
This function return True if the PC reservoir is saved or False otherwise.

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

PCname (str) – PC laboratory name

PorResName (str) – porosity reservoir name

PorLabName (str) – porosity laboratory name

PCResName (str) – new PC reservoir name

verbose (bool) – Optional; verbose = False

Returns
:
operation exit status

Return type
:
bool

TechlogTechcore.stressCorrectionSW(SWLab: list, dim: Number, PorRes: list, PorLab: list)→ bool
This function return True if the SW reservoir is saved or False otherwise.

Parameters
:
SWLab (list) – SW laboratory values

dim (Number) – SW dimension

PorRes (list) – porosity reservoir values

PorLab (list) – porosity laboratory values

Returns
:
operation exit status

Return type
:
bool

TechlogTechcore.stressCorrectionSWvariables(wellName: str, datasetName: str, SWname: str, PorResName: str, PorLabName: str, SWResName: str, verbose: bool = False)→ bool
This function return True if the SW reservoir is saved or False otherwise.

Parameters
:
wellName (str) – well name

datasetName (str) – dataset name

SWname (str) – SW laboratory name

PorResName (str) – porosity reservoir name

PorLabName (str) – porosity laboratory name

SWResName (str) – new SW reservoir name

verbose (bool) – Optional; verbose = False

Returns
:
operation exit status

Return type
:
bool

TechlogTechcore.thomeerMethod(X: Number, Y: Number, Swi: Number = MissingValue, PCe: Number = MissingValue, G: Number = MissingValue)→ list
This function returns the list of the swi, PCe and G parameters in the Thomeer function ‘SW = SWi + (1-SWi)*(1-exp(G/ln(PCe/PC)))’.

Parameters
:
X (Number) – [v/v] Water Saturation (v/v)

Y (Number) – [bar] Capillary Pressure (bar)

Swi (Number) – Optional; ‘swi’ = Missing Value

PCe (Number) – Optional; ‘PCe’ = Missing Value

G (Number) – Optional; ‘G’ = Missing Value

Returns
:
‘swi’, ‘PCe’ and ‘G’ parameter list

Return type
:
list
TechlogVST
TechlogVST.createPropMergeObject(wellName: str, outputSetName: str, datasetList: list, refStep: float = -1, refUnit: str = '*', overlap: str = 'Position', gap: str = 'Missing', gapConst: float = MissingValue)→ VSTPropMerge
Create a splice tool property object

Parameters
:
wellName (str) – well name

outputSetName (str) – output dataset name

datasetList (list) – input dataset list

refStep (float) – Optional; step of the output dataset (computed automatically if negative)

refUnit (str) – Optional; unit of the output reference (and step)

overlap (str) – Optional; Handling of overlapping merge (alternative: ‘Mean’)

gap (str) – Optional; Gap filling method (alternatives: ‘Interpolation’, ‘Constant’, ‘Top’, ‘Bottom’)

gapConst (float) – Optional; Constant used to fill the gaps if gap==’Constant’

Returns
:
splice property object

Return type
:
VSTPropMerge

TechlogVST.spliceVariables(propMergeObject: VSTPropMerge, varZoneDefs: dict)→ str
Create a splice tool property object

Parameters
:
propMergeObject (VSTPropMerge) – Splice property object

varZoneDefs (dict) – map of variables to a list of tuple (dataset, list of tuple (start, stop)) empty list of range mean take the whole variable range ex: { ‘sinf’: [ (‘dsA’, [(1,20), (40, 500)]), (dsB, []) ], ‘sind’: [(dsB, [])] }

Returns
:
name of the resulting dataset (or None if error)

Return type
:
str

TechlogWBI
TechlogWBI.AutoDip_MSD(toolName: str, well: str, dataset: str, padAAzimuthList: list, relativeBearingList: list, caliperList: list, padsList: list, hazi: str, mincorr: Number, step: Number, searchangle: Number, enddepth: Number)→ bool
MSD autodip

Parameters
:
toolName (str) – name of the tool (currently supported: FMI_8, FMI_SLIM_4, FMS_4, OBMI, STAR, STAR_WIDE, EARTH_IMAGER, GEOXPLORER, XRMI, EMI, OMRI, CMI_8, HMI, 6_ARMS_DIPMETER, 4_ARMS_DIPMETER, SHDT)

well (str) – name of the well

dataset (str) – name of the dataset

padAAzimuthList (list) – list of name of the pad A azimuth variable(s)

relativeBearingList (list) – list of name of the relative bearing variable(s)

caliperList (list) – list of name of the caliper variable(s)

padsList (list) – list of name of the pads variable(s)

hazi (str)

devi (str)

mincorr (Number)

windowsize (Number)

step (Number)

decimation (Number)

searchangle (Number)

startdepth (Number)

enddepth (Number)

varOutName (Number) – name to be given to the output variable

Returns
:
True or False

Return type
:
bool

TechlogWBI.apparentDipComputation(trueDip: Number, trueAzimuth: Number, holeDeviation: Number, holeAzimuth: Number, orientation: str = 'TopOfTheHole')
Apparent Dip Computation

Parameters
:
trueDip (Number) – [rad] true dip

trueAzimuth (Number) – [rad] true azimuth

holeDeviation (Number) – [rad] hole deviation

holeAzimuth (Number) – [rad] hole azimuth

orientation (str) – Optional; orientation ‘TopOfTheHole’ or ‘North’

Outputs:
Number: apparent dip Number: apparent azimuth

TechlogWBI.arrayFlattening(well: str, arrayDataset: str, arrayName: str, dipDataset: str, dipName: str, aimuthName: str, suffix: str = None)→ bool
Array flattening

Parameters
:
well (str) – name of the well

arrayDataset (str) – name of the dataset containing the array

arrayName (str) – name of the array variable

dipDataset (str) – name of the dataset containing the dips

dipName (str) – name of the dip variable to use

aimuthName (str) – name of the azimuth variable to use

suffix (str) – Optional; suffix

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoDip(well: str, arrayDataset: str, arrayName: str, caliperName: str, dipDataset: str, verticalRange: float=5, qualCutoff: float=0.7, valueTol: float=10, highdip: bool, azimuth_resolution: bool)→ bool
auto dip detection

Parameters
:
well (str) – name of the well

arrayDataset (str) – name of the dataset containing the array

arrayName (str) – name of the array variable

caliperName (str) – name of the caliper variable

dipDataset (str) – desired name for the dataset containing the detected dips

verticalRange (float) – Optional; vertical range

qualCutoff (float) – Optional; quality cutoff between [0.0, 1.0]

valueTol (float) – Optional; value tolerance

highdip (bool) – [false] use high dip method

azimuth_resolution (bool) – [true] equalize as a preprocess

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoDipConstrained(well: str, arrayDataset: str, arrayName: str, caliperName: str, constraintDataset: str, dipDataset: str)→ bool
auto dip detection in constrained mode, optional kwd args : qualCutoff, azimuth_resolution, dip_resolution, max_angle, angular_tolerance, valueTol (example: qualCutoff=0.2)

Parameters
:
well (str) – name of the well

arrayDataset (str) – name of the dataset containing the array

arrayName (str) – name of the array variable

caliperName (str) – name of the caliper variable

constraintDataset (str) – dataset containing the constraints, (must have apparent dips in it)

dipDataset (str) – desired name for the output dataset containing the detected dips

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoShiftArray(well: str, dataset: str, array1: str, array2: str, name: str, winsize: Number, maxshift: Number, smoothsize: Number, mincor: Number)→ bool
Auto shift array

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

array1 (str) – name of the variable1

array2 (str) – name of the variable2

name (str) – name of the suffix

winsize (Number) – size of the window

maxshift (Number) – max shift

smoothsize (Number) – smooth size

mincor (Number) – mincor

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoShiftArrayList(well: str, dataset: str, array1list: List[str], array2list: List[str], winsize: Number, maxshift: Number, smoothsize: Number, mincor: Number, suffix: str = '')→ bool
Image Based Speed Correction

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

array1list (List[str]) – namelist of the pad variable

array2list (List[str]) – namelist of the flaps variable

winsize (Number) – correlation windows size in pixels

maxshift (Number) – maximum allowed shift

smoothsize (Number) – smoothing window size ( if < 3 no smooth )

mincor (Number) – min acceptable correlation

suffix (str) – Optional; suffix to the output parameter name

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoShiftButtons(well: str, dataset: str, varname: str, suffix: str, winsize: int, maxshift: int, mincorr: float, majvote: bool, fitapriori: bool)→ bool
Auto shift button

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

varname (str) – name of the variable1

suffix (str) – name of the suffix

winsize (int) – size of the window

maxshift (int) – max shift

mincorr (float) – mincor

majvote (bool) – majvote

fitapriori (bool) – fitapriori

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoShiftDualObmi(well: str, dataset: str, array1list: List[str], array2list: List[str], suffix: str, winsize: Number, maxshift: Number, smoothsize: Number, mincor: float, orienttoshift: str, orienttool: str, addvariablelist: str)→ bool
Auto shift far array list

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

array1list (List[str]) – list of name of the variable1

array2list (List[str]) – list of name of the variable2

suffix (str) – name of the suffix

winsize (Number) – size of the window

maxshift (Number) – max shift

smoothsize (Number) – smooth size

mincor (float) – mincor

orienttoshift (str) – orientation curve of the tool to shift

orienttool (str) – orientation curve of the reference

addvariablelist (str) – additional curves to shift

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.autoShiftFarArrayList(well: str, dataset: str, array1list: List[str], array2list: List[str], suffix: str, winsize: Number, maxshift: Number, smoothsize: Number, mincor: Number)→ bool
Auto shift far array list

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

array1list (List[str]) – list of name of the variable1

array2list (List[str]) – list of name of the variable2

suffix (str) – name of the suffix

winsize (Number) – size of the window

maxshift (Number) – max shift

smoothsize (Number) – smooth size

mincor (Number) – mincor

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.averageFilter2D(well: str, dataset: str, varname: str, suffix: str, winsize: Number, maxshift: Number, replaceMV: bool = False)→ bool
Averaging filter

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

varname (str) – name of the array

suffix (str) – name of the suffix

winsize (Number) – size x of the mask (in number of sample)

maxshift (Number) – size y of the mask (in number of sample)

replaceMV (bool) – Optional; replace missing values

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.butonHarmonisation(w: str, d: str, al: list, arraybyarray: bool, suffix: str = '_H', windowSize: Number = 0)→ bool
Button harmonisation of list of array

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

al (list) – list of arrays

arraybyarray (bool) – [True] equalise arrays independantly

suffix (str) – Optional; suffix to the output array name

windowSize (Number) – Optional; number of samples if 0 not windowed harmonisation

Returns
:
True or False

Return type
:
bool

TechlogWBI.clusterDipAzi(Dip: list, Azimuth: list, degree: bool)→ list
dip clustering

Parameters
:
Dip (list) – dips

Azimuth (list) – azimuths

degree (bool) – in degree or rad

Outputs:
list: list of cluster indexes

TechlogWBI.computeDipAziStats(Dip: list, Azimuth: list, degree: bool)
dip, azimuths mean and mean resultant length computation

Parameters
:
Dip (list) – dips

Azimuth (list) – azimuths

degree (bool) – in degree or rad

Outputs:
Number: mean dip Number: mean azimuth Number: mean resultant

TechlogWBI.computeGpitDepthCorrector(well: str, dataset: str, Zaccelerometer: str, Acquisition, cableFactor: Number, detectionThreshold: Number, recoverySpeedRatio: Number)→ bool
Speed correction process

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

Zaccelerometer (str) – fcaz

Acquisition (None) – Time[string]: ftim

cableFactor (Number) – cableFactor

detectionThreshold (Number) – [m/s2] detectionThreshold

recoverySpeedRatio (Number) – recoverySpeedRatio

Returns
:
True or False

Return type
:
bool

TechlogWBI.computeHistogramArray(w: str, d: str, alist: list, outname: str = 'HistArray', minIn: Number = 0, maxIn: Number = -9999, log: bool = False, winsize: bool = True, useBoxCox: Number = -0.1, bcLambda: Number = 1, beg: Number = -1, end: Number = -1, nbbin: Number = -1)→ bool
Compute a Histogram array

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

alist (list) – list of arrays

outname (str) – Optional; output name of the array

minIn (Number) – Optional; minimum input

maxIn (Number) – Optional; maximum input

log (bool) – Optional; is logarithmic

winsize (bool) – Optional; use or not the Box-Cox

useBoxCox (Number) – Optional; bc Lambda for the Box-Cox

bcLambda (Number) – Optional; window size (in number of samples)

beg (Number) – Optional; begin of the interval

end (Number) – Optional; end of the interval

nbbin (Number) – Optional; number of bins of the histogram

Returns
:
True or False

Return type
:
bool

TechlogWBI.concatenation(toolName: str, well: str, dataset: str, padAAzimuthList: list, relativeBearingList: list, caliperList: list, padsList: list, flapslist: list, tabsInterlaced: bool, reversedArrays: bool, flapFirst: bool, reverseOddPads: bool, inversePadArraysOrder: bool, inverseFlapArraysOrder: bool, offsetOddPads: Number, offsetOddButtons: Number, reverseImage: bool, bitSize: Number, holeCoverage: Number, resolution: Number, angularMode: bool, orientationMode: int, varOutName: Number, swingArmCorrection: bool = False, angularOffset: int = 0)→ bool
Concatenate and orientate several pads/flaps arrays into one single image array

Parameters
:
toolName (str) – name of the tool (currently supported: FMI_16, FMI_8, OBMI, DUALOBMI, FMI_SLIM_8, FMI_SLIM_4, LWD - ROTARY IMAGERS, STAR, STAR_WIDE, EARTH_IMAGER, XRMI, EMI, CBIL, UBI, FMS_4, FMS_8, CMI_16, CMI_8, HMI, OMRI, GEOXPLORER)

well (str) – name of the well

dataset (str) – name of the dataset

padAAzimuthList (list) – list of name of the pad A azimuth variable(s)

relativeBearingList (list) – list of name of the relative bearing variable(s)

caliperList (list) – list of name of the caliper variable(s)

padsList (list) – list of name of the pads variable(s)

flapslist (list) – list of name of the flaps variable(s)

tabsInterlaced (bool) – do the arrays composing pads and flaps need to be interlaced

reversedArrays (bool) – do the arrays need to be reversed before concatenation

flapFirst (bool) – do the flaps need to be placed before pads

reverseOddPads (bool) – do the arrays of odd pads need to be reversed (upside-down pads)

inversePadArraysOrder (bool) – deinterlace traversal order (false means 1-2, true means 2-1)

inverseFlapArraysOrder (bool) – deinterlace traversal order (false means 1-2, true means 2-1)

offsetOddPads (Number) – [in] vertical offset of the odd pads

offsetOddButtons (Number) – [in] vertical offset of the odd buttons

reverseImage (bool) – do the final image need to be reversed

bitSize (Number) – [in] size of the drill bit (will be used instead of calipers if greater than 0)

holeCoverage (Number) – [%] percentage of hole coverage (will be used instead of calipers if greater than 0)

resolution (Number) – [px] desired horizontal resolution of the output (automatic minimal resolution will be computed if value is less or equal than 0)

angularMode (bool) – if true, arrays will be concatenated using the angular mode (unconstant width of the pads)

orientationMode (int) – 0 = North ; 1 = Top of the hole ; 2 = TOH to North ; 3 = North to TOH; 4 = None

varOutName (Number) – name to be given to the output variable

swingArmCorrection (bool) – Optional; set to true will perform swing arm correction

angularOffset (int) – Optional; Constant angular offset for the image

Returns
:
True or False

Return type
:
bool

TechlogWBI.cutOff(w: str, d: str, a: str, suffix: str = '_C', minValue: Number = 0, maxValue: Number = MissingValue)→ bool
Cut-off the array

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

a (str) – name of the array

suffix (str) – Optional; suffix to the output array name

minValue (Number) – Optional; min value if MissingValue no min limit

maxValue (Number) – Optional; max value if MissingValue no max limit

Returns
:
True or False

Return type
:
bool

TechlogWBI.derivativeFilter2D(well: str, dataset: str, varname: str, suffix: str, winsize: Number, maxshift: Number, replaceMV: bool = False)→ bool
gaussian derivative filter

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

varname (str) – name of the array

suffix (str) – name of the suffix

winsize (Number) – size x of the mask (in number of sample)

maxshift (Number) – size y of the mask (in number of sample)

replaceMV (bool) – Optional; replace missing value

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.emexCorrection(well: str, dataset: str, arrayName: str, emexName: str, suffix: str)→ bool
Emex gain correction

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset containing the array

arrayName (str) – name of the array variable

emexName (str) – name of the emex variable

suffix (str) – suffix

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.faultyButtonsCheck(w: str, d: str, al: list, windowSize: Number = 10, tolerance: Number = 1E-5, computeNV: bool = True, removeFaulty: bool = False)→ bool
Faulty buttons check and cleanup there is no duplication or backup the operation is made on the array directly

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

al (list) – list of arrays

windowSize (Number) – Optional; number of samples with faulty button value before define as faulty button

tolerance (Number) – Optional; flatness factor

computeNV (bool) – Optional; count the negative value

removeFaulty (bool) – Optional; replace faulty button value by no value

Returns
:
True or False

Return type
:
bool

TechlogWBI.filterDips(w: str, d: str, dip: str, azi: str, quali: str, degree: bool, sequencesize: int, DepthThreshold: Number)→ bool
Dips Interpolation function

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

dip (str) – dip variable name

azi (str) – Azimuth variable name

quali (str) – Quality variable name

degree (bool) – degree or rad

sequencesize (int)

AngularThreshold (Number)

DepthThreshold (Number)

Returns
:
True or False

Return type
:
bool

TechlogWBI.fitGreatCircleAndAxis(dip_axis: list, azimuth_axis: list, dip_plane: list, azimuth_plane: list)→ tuple
Dual Optimisation pb for Structural dip analysis (all angles in degrees)

Parameters
:
dip_axis (list) – axis points dips

azimuth_axis (list) – axis points azimuths

dip_plane (list) – plane points dips

azimuth_plane (list) – plane points azimuths.

Returns
:
best fit dip and azimuth angles

Return type
:
tuple

TechlogWBI.fractureAperture(well: str, arrayDataset: str, arrayName: str, dipDataset: str, dipVariable: str, mudResistivity: float, B: float, C: float, output_name: str)→ bool
fracture aperture on oriented image

Parameters
:
well (str) – name of the well

arrayDataset (str) – name of the dataset containing the array

arrayName (str) – name of the array variable

dipDataset (str) – name of the dip dataset

dipVariable (str) – name of the TRUE dip variable

mudResistivity (float) – mud resistivity as a constant over the well

B (float) – luthi parameter corresponding to tool model

C (float) – luthi parameter corresponding to tool model

output_name (str) – variable name to store aperture

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.gaussianSmooth(well: str, dataset: str, varname: str, suffix: str, winsize: Number, maxshift: Number, replaceMV: bool)→ bool
gaussianSmooth

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

varname (str) – name of the array

suffix (str) – name of the suffix

winsize (Number) – size x of the window

maxshift (Number) – size y of the window

replaceMV (bool) – replace missing value

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.getBoreholeCenter(array: list, angle: list)
Compute the polar coordinates of the barycenter of the borehole shape

Parameters
:
array (list) – radius of the borehole

angle (list) – angles (degA)

Returns
:
distance to the center Number: angle to the direction towards the center (degA)

Return type
:
Number

TechlogWBI.histogramEqualisation(w: str, d: str, alist: list, suffix: str = '_HQ', minIn: Number = 0, maxIn: Number = -9999, minOut: Number = 0, maxOut: Number = 255, winsize: Number = 1, useBoxCox: bool = True, onbuttons: bool = False, arraybyarray: bool = True, bcLambda: Number = -0.1, beg: Number = -1, end: Number = -1)→ bool
Histogram equalisation of array(s)

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

alist (list) – list of arrays

suffix (str) – Optional; suffix to the output parameter name

minIn (Number) – Optional; minimum input

maxIn (Number) – Optional; maximum input

minOut (Number) – Optional; minimum output

maxOut (Number) – Optional; maximum output

winsize (Number) – Optional; window size (in reference unit) if -1 not windowed histogram equalisation

useBoxCox (bool) – Optional; use or not the Box-Cox

onbuttons (bool) – Optional; equalise button by buttons

arraybyarray (bool) – Optional; equalise arrays independantly

bcLambda (Number) – Optional; bc Lambda for the Box-Cox

beg (Number) – Optional; begin of the interval

end (Number) – Optional; end of the interval

Returns
:
True or False

Return type
:
bool

TechlogWBI.imageFilterWbi(w: str, d: str, a: str, s: str)→ bool
generic Image filter

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

a (str) – name of the array

s (str) – name of the procesing any of ( ‘canny’, ‘Derivative’, ‘Derivative Magnitude’, ‘Contrast Enhance’, ‘shadows’, ‘median’, ‘smooth’, ‘average’)

Keywords parameters for the processing :
size [number] : ( Derivative, Derivative Magnitude, Contrast Enhance, median) size in pixel of the processing kernel xsize, ysize [number] (smooth, average) HORIZONTAL and VERTICAL size of the kernel direction [number] : (Derivative) 0 for vertical and 1 for horizontal derivative angle [number]: (shadows) dega angle direction for shadow filter sensitivity [number]: (canny) sensitivity from 0 to 1 for edge detection

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.interpolateDips(w: str, d: str, dip: str, azi: str, degree: bool, tol: Number)→ bool
Dips Interpolation function

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

dip (str) – dip variable name

azi (str) – Azimuth variable name

degree (bool) – is degree

tol (Number) – tolerance in depth unit

Returns
:
True or False

Return type
:
bool

TechlogWBI.mergeArrays(well: str, dataset: str, array1: List[str], array2: List[str], interlaced: bool, reversed: bool, voffset: Number, suffix: str)→ bool
mergeArrays

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

array1 (List[str]) – list of name of the variable1

array2 (List[str]) – list of name of the variable2

interlaced (bool) – interlaced

reversed (bool) – reverse

voffset (Number) – vertical offset

suffix (str) – suffix

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.padImageCreation(well: str, dataset: str, padList: list, flapList: list, toolName: str, tabsInterlaced: bool, reverseArrays: bool, reverseOddPads: bool, inversePadArraysOrder: bool, inverseFlapArraysOrder: bool, offsetOddPads: Number, offsetOddButtons: Number, suffix: str = None)→ bool
Prepare pad and flap arrays ready for concatenation

Parameters
:
well (str) – name of the well

dataset (str) – name of the dataset

padList (list) – list of name of the pads variable(s)

flapList (list) – list of name of the flaps variable(s)

toolName (str) – name of the tool

(currently supportedFMI_16, FMI_8, FMS_8, OBMI, DUALOBMI, FMI_SLIM_8, FMI_SLIM_4, STAR, STAR_WIDE, EARTH_IMAGER, GEOXPLORER, XRMI, EMI, CMI_16, CMI_8, HMI, OMRI)
tabsInterlaced (bool): do the arrays composing pads and flaps need to be interlaced reverseArrays (bool): do the arrays need to be reversed before concatenation reverseOddPads (bool): do the arrays of odd pads need to be reversed (upside-down pads) inversePadArraysOrder (bool): deinterlace traversal order (false means 1-2, true means 2-1) inverseFlapArraysOrder (bool): deinterlace traversal order (false means 1-2, true means 2-1) offsetOddPads (Number): [in] vertical offset of the odd pads offsetOddButtons (Number): [in] vertical offset of the odd buttons suffix (str): Optional; suffix to be added to the output variable name

Returns
:
True or False

Return type
:
bool

TechlogWBI.parameterExtraction(w: str, d: str, a: str, suffix: str = ' ')→ bool
Paramter extraction (min, max, mean, median, variance) from an array

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

a (str) – name of array

suffix (str) – Optional; suffix to the output parameter name

Returns
:
True or False

Return type
:
bool

TechlogWBI.rasterToArray(well: str, rasterDataset: str, rasterName: str, arrayDataset: str, arrayName: str)→ bool
convert a raster image to an array

Parameters
:
well (str) – name of the well

rasterDataset (str) – name of the dataset containing the raster image

rasterName (str) – name of the raster image

arrayDataset (str) – name of the output dataset for the array

arrayName (str) – name of the output array variable

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.setAzimuthVariable(wellName: str, datasetName: str, varName: str, azimuthName: str)→ bool
associate an azimuth to the given dip

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset containing the dip

varName (str) – name of the dip

azimuthName (str) – name of the azimuth to associate

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.setDipHeightVariable(wellName: str, datasetName: str, varName: str, dipHeightName: str)→ bool
associate a dip height to the given dip

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset containing the dip

varName (str) – name of the dip

dipHeightName (str) – name of the dip height to associate

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.setOrientation(wellName: str, datasetName: str, varName: str, orientation: str = 'Undefined')→ bool
set orientation of the given dip

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset containing the dip

varName (str) – name of the dip

orientation (str) – Optional; type of orientation={‘Top of the hole’, ‘North’, ‘Undefined’}

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.setProperties(wellName: str, datasetName: str, varName: str, azimuthName: str = '', typeName: str = '', qualityName: str = '', orientation: str = '', dipHeightName: str = '')→ bool
associate properties to the given dip if property is not filled in, current variable property will be kept

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset containing the dip

varName (str) – name of the dip

azimuthName (str) – Optional; name of the azimuth to associate

typeName (str) – Optional; name of the type classification

qualityName (str) – Optional; name of the quality to associate

orientation (str) – Optional; type of orientation={‘Top of the hole’, ‘North’, ‘Undefined’}

dipHeightName (str) – Optional; name of the dip height to associate

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.setQualityVariable(wellName: str, datasetName: str, varName: str, qualityName: str)→ bool
associate a quality to the given dip

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset containing the dip

varName (str) – name of the dip

qualityName (str) – name of the quality to associate

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.setTypeVariable(wellName: str, datasetName: str, varName: str, typeName: str)→ bool
associate a type classification to the given dip

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset containing the dip

varName (str) – name of the dip

typeName (str) – name of the type classification

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.shiftArray(w: str, d: str, a: str, depthOriginal: str, depthCorrected: str, suffix: str = '_SCD', gap: Number = 0)→ bool
Apply speed correction to list of arrays

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

a (str) – name of the array

depthOriginal (str) – measured depth variable name before the shift

depthCorrected (str) – measured depth variable name after the speed correction

suffix (str) – Optional; suffix to the output array name

gap (Number) – Optional; [m] gap between the accelorometer and the array to be shifted

Returns
:
True or False

Return type
:
bool

TechlogWBI.shiftArrayByConst(w: str, d: str, a: str, suffix: str, gap_in: Number)→ bool
Apply speed correction to list of arrays

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

a (str) – name of the array

suffix (str) – extention for the new array name

gap_in (Number) – [m] constant shift in inches

Returns
:
True or False

Return type
:
bool

TechlogWBI.smoothHorizontally(w: str, d: str, v: str, wsize: int)→ bool
smoothHorizontally

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

v (str) – name of the variable

wsize (int)

suffix (str) – name of the suffix

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.smoothVertically(w: str, d: str, v: str, wsize: int)→ bool
smoothVertically

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

v (str) – name of the variable

wsize (int)

suffix (str) – name of the suffix

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.speedCorrection(w: str, d: str, cs: str, zAcc: str, devi: str, sprate: Number, winsize: Number, suffix: str = '_SCD')→ bool
Speed correction function

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

cs (str) – cable speed variable name

zAcc (str) – Z acceleration variable name

devi (str) – deviation variable name

sprate (Number) – [m] sampling rate

winsize (Number) – [m]

usemean (bool) – compute the mean of the cs and devie

suffix (str) – Optional;

Returns
:
True or False

Return type
:
bool

TechlogWBI.speedCorrectionBKR(w: str, d: str, Depth: str, Zacc: str, Dev: str, Etime: str, suffix: str = '_S', logDirection: float = 1)→ bool
Speed correction function

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

Depth (str) – Depth curve name

Zacc (str) – Z acceleration variable name

Dev (str) – deviation variable name

Etime (str) – Elapsed time between samples

suffix (str) – Optional; suffix

logDirection (float) – Optional; 1: Up or -1 : Down

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.speedCorrectionwithtime(w: str, d: str, cs: str, zAcc: str, devi: str, sprate: Number, winsize: Number, usemean: bool, suffix: str = '_SCDT')→ bool
Speed correction function

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

cs (str) – time variable name

zAcc (str) – Z acceleration variable name

devi (str) – deviation variable name

sprate (Number) – [m] sampling rate

winsize (Number) – [m] window size

usemean (bool) – compute the mean of the cs and devie

suffix (str) – Optional;

Returns
:
True or False

Return type
:
bool

TechlogWBI.splineBoreholeShape(radius: list, angle: list)→ list
Interpolate the array using spline

Parameters
:
radius (list) – radius of the borehole

angle (list) – angles (degA)

Returns
:
the array interpolated

Return type
:
list

TechlogWBI.structuralDipRemoval(trueDip: Number, trueAzimuth: Number, structuralDip: Number, structuralAzimuth: Number)→ Number
Structural dip removal (relative dip computation)

Parameters
:
trueDip (Number) – [dega] input dip to apply the removal

trueAzimuth (Number) – [dega] input azimuth to apply the removal

structuralDip (Number) – [dega] input structural dip to be removed

structuralAzimuth (Number) – [dega] input structural azimuth to be removed

Outputs:
Number: dip and azimuth value corrected with structural dip - relativeAzimuth [number][dega]: dip and azimuth value corrected with structural dip

TechlogWBI.transformLog10(w: str, d: str, v: str, suffix: str)→ bool
Transform Log 10

Parameters
:
w (str) – name of the well

d (str) – name of the dataset

v (str) – name of the variable

suffix (str) – name of the suffix

Returns
:
operation exit status

Return type
:
bool

TechlogWBI.trueDipComputation(apparentDip: Number, apparentAzimuth: Number, holeDeviation: Number, holeAzimuth: Number, orientation: str = 'TopOfTheHole')
True dip computation

Parameters
:
apparentDip (Number) – [rad] apparent dip

apparentAzimuth (Number) – [rad] apparent azimuth

holeDeviation (Number) – [rad] hole deviation

holeAzimuth (Number) – [rad] hole azimuth

orientation (str) – Optional; orientation ‘TopOfTheHole’ or ‘North’

Outputs:
Number: true dip Number: true azimuth

TechlogWBS
TechlogWBS.MudWeightWindow(boreholeDevi: Number, boreholeAzim: Number, tvd: Number, mudCoeff: Number, alpha: Number, poissonRatio: Number, ucs: Number, tensileStrength: Number, frictionAngle: Number, porePressure: Number, verticalStress: Number, minHorizontalStress: Number, maxHorizontalStress: Number, azimMinHorizontalStress: Number, useThermalCorrection: bool, thermAxialStress: Number, thermTanStress: Number)→ Number, Number, Number, Number, Number, Number
Compute Mudweight window for a given depth

Parameters
:
boreholeDevi (Number) – borehole deviation in degrees

boreholeAzim (Number) – borehole azimuth in degrees

tvd (Number) – TVD in depth

mudCoeff (Number) – mudCoeff (1.0)

alpha (Number) – Biot Coefficient

poissonRatio (Number) – Poisson Ratio

ucs (Number) – UCS in psi

tensileStrength (Number) – TSTR in psi

frictionAngle (Number) – FANG in deg

porePressure (Number) – PPRS in psi

verticalStress (Number) – SigV in psi

minHorizontalStress (Number) – Sigh in psu

maxHorizontalStress (Number) – SigH in psi

azimMinHorizontalStress (Number) – Azimuth of max hor stress in deg

useThermalCorrection (bool) – True to use thermal stress correction

thermAxialStress (Number) – Stress

thermTanStress (Number) – Stress

Returns
:
CMW_MIN_MC, CMW_KICK, CMW_LOSS, CMW_MAX_MTS, CMW_MAX_MC, CMW_MIN_MTS

Return type
:
Number, Number, Number, Number, Number, Number

TechlogWBS.WBSLeModel(boreholeDevi: Number, boreholeAzim: Number, tvd: Number, mudCoeff: Number, alpha: Number, poissonRatio: Number, ucs: Number, tensileStrength: Number, frictionAngle: Number, porePressure: Number, verticalStress: Number, minHorizontalStress: Number, maxHorizontalStress: Number, azimMinHorizontalStress: Number, useThermalCorrection: bool, thermAxialStress: Number, thermTanStress: Number)→ Number, Number, Number, Number, Number, Number
Compute WBS for a given depth

Parameters
:
boreholeDevi (Number) – borehole deviation in degrees

boreholeAzim (Number) – borehole azimuth in degrees

tvd (Number) – TVD in depth

mudCoeff (Number) – mudCoeff (1.0)

alpha (Number) – Biot Coefficient

poissonRatio (Number) – Poisson Ratio

ucs (Number) – UCS in psi

tensileStrength (Number) – TSTR in psi

frictionAngle (Number) – FANG in deg

porePressure (Number) – PPRS in psi

verticalStress (Number) – SigV in psi

minHorizontalStress (Number) – Sigh in psu

maxHorizontalStress (Number) – SigH in psi

azimMinHorizontalStress (Number) – Azimuth of max hor stress in deg

useThermalCorrection (bool) – True to use thermal stress correction

thermAxialStress (Number) – Stress

thermTanStress (Number) – Stress

Returns
:
CMW_MIN_MC, CMW_KICK, CMW_LOSS, CMW_MAX_MTS, CMW_MAX_MC, CMW_MIN_MTS

Return type
:
Number, Number, Number, Number, Number, Number
TechlogWorkflowCreationWizard
TechlogWorkflowCreationWizard.createWizard(wellName: str, datasetName: str, filepath: str, icon: str = '')→ bool
instantiate a workflow creation wizard

Parameters
:
wellName (str) – name of the well

datasetName (str) – name of the dataset you want to process

filepath (str) – fullpath of the file the wizard will use

icon (str) – Optional; icon name

Returns
:
operation exit status

Return type
:
bool
Slb.Techlog.Studio
classSlb.Techlog.Studio.Entity(*args, **kwargs)
Represent a Studio Techlog entity.Studio works with the concept of entity. An entity can be any item you can see in project or repository browser: Well, Dataset, Variable, Group, Layout… are all entities.To get an entity for a specific object, use getEntitiesFromLocalProject() and getEntitiesFromRepository().

getArchetype()→ str
Return entity archetype.

Returns
:
Return archetype of this entity.

Return type
:
str

getAvailablePropertyNames()→ list
Return a list of property names

Returns
:
Return a list of property names

Return type
:
list

getChildren()→ list
Return children of this entity.

Returns
:
Return an empty list when entity is query without its descendants.

Return type
:
list

getCreatedDateTime()→ datetime
Return entity creation date

Returns
:
Return date and time when this entity has been created

Return type
:
datetime

getLockDate()→ datetime
Return when this entity has been locked

Returns
:
Return when this entity has been locked

Return type
:
datetime

getLockType()→ str
Return lock type applied on this entity

Returns
:
Return lock type applied on this entity

Return type
:
str

getLockUserName()→ str
Return user name who lock this entity

Returns
:
Return name of user who lock this entity

Return type
:
str

getName()→ str
Return entity name

Returns
:
Return name of this entity.

Return type
:
str

getProperties()→ list
Return a list of properties

Returns
:
Return A list of properties the first value is name, the second is value, the third is units and fourth is description

Return type
:
list

getPropertyDescription(propertyName: str)→ str
Return description for a property name

Parameters
:
propertyName (str)

Returns
:
Return description for a property name

Return type
:
str

getPropertyUnit(propertyName: str)→ str
Return a unit for a property name

Parameters
:
propertyName (str)

Returns
:
Return a unit for a property name

Return type
:
str

getPropertyValue(propertyName: str)→ str
Return a value for a property name

Parameters
:
propertyName (str)

Returns
:
Return a value for a property name

Return type
:
str

getPublishDateTime()→ datetime
Return entity publication date

Returns
:
Return date and time when this entity has been published

Return type
:
datetime

getSynchronizationStatus()→ str
Return entity synchronization status

Returns
:
Return synchronization status

Return type
:
str

getType()→ str
Return entity type.

Returns
:
Return type of this entity.

Return type
:
str

getUpdatedByUser()→ str
Return name of user who last modify this entity

Returns
:
Return name of user who last modify this entity

Return type
:
str

getUpdatedDateTime()→ datetime
Return entity date corresponding to last modification on this entity

Returns
:
Return date and time when this entity has been modified

Return type
:
datetime

isNull()→ bool
Return true is entity does not contains data

Returns
:
Return true is entity does not contains data

Return type
:
bool

classSlb.Techlog.Studio.Issue(*args, **kwargs)
Contains transfer issue information.

getResolutionPossibilities()→ list
Return list of possible resolutions for this issue

Returns
:
Return list of possible resolutions for this issue

Return type
:
list

getRuleDescription()→ str
Return description of the rule which create this issue

Returns
:
Return description of the rule which create this issue

Return type
:
str

getRuleName()→ str
Return name of the rule which create this issue

Returns
:
Return name of the rule which create this issue

Return type
:
str

getType()→ str
Return issue type

Returns
:
Return type of this issue.

Return type
:
str

classSlb.Techlog.Studio.TransferList(*args, **kwargs)
Structure used to define wich entities are concerned by an action, and get action issues.To transfer, lock or delete a set of entity, you have to add them to a transfer list, call wanted action (publish, retrieve, lock, treeLock, unlock, unlockLockedByMe, deleteEntitiesFromRepository) then check result with hasUnresolvedIssues().To get issues from transfer list, you have to first, get entities with issues, using getEntitiesWithUnresolveIssues(), then get issues entity by entity using getUnresolvedIssuesForEntity(entity).In case of warnings, you can try to ignore them with ignoreAllWarnings() and retry the action. Today, there is no possiblity to resovle warnings and errors specific to Studio, like match or merge. If you want to exclude an entity with error from transfer, you have to create another transfer list, then add only entities without error. For other errors, you have to fix them with standard Techlog API, or by manual action in Studio UI.

addEntity(entity: Entity, includeChildren: bool)
Add an entity to transfer.

Parameters
:
entity (Entity) – Entity to add in this transfer list

includeChildren (bool) – all descendant will be retrieved or published if True

empty()→ bool
Return True if there is no entity in this object

Returns
:
Return True if there is no entity in this object

Return type
:
bool

getEntities()→ list
Return tree of entities concerned by transfer.

Returns
:
Return entities concerned by this transfer

Return type
:
list

getEntitiesWithUnresolvedIssues()→ list
Return entities with issues to resolve to complete a transfer

Returns
:
Return entities with issues to resolve to complete a transfer

Return type
:
list

getUnresolvedIssuesForEntity(entity: Entity)→ list
Get list of unresolved issues for specified entity

Parameters
:
entity (Entity)

Returns
:
Return list of unresolved issues for specified entity

Return type
:
list

hasUnresolvedIssues()→ bool
After a transfer, return False if some entities have issues

Returns
:
Return True if there is at least one unresolved issue

Return type
:
bool

ignoreAllWarnings()
Set “ignore” as resolution for all warnings.

removeIssues()
Remove all issues, resolved or not.

Slb.Techlog.Studio.connectToServer()
Connect Techlog to Studio server defined in current project

Slb.Techlog.Studio.deleteEntities(transferList: TransferList)→ bool
Deprecated. Use deleteEntitiesInRepository() instead.

Parameters
:
transferList (TransferList)

Returns
:
None

Return type
:
bool

Slb.Techlog.Studio.deleteEntitiesInRepository(transferList: TransferList)→ bool
Deletes entities from the repository

Parameters
:
transferList (TransferList) – list of entities to delete

Returns
:
True if there is no issue

Return type
:
bool

Slb.Techlog.Studio.disconnectFromServer()
Disconnect Techlog from Studio server

Slb.Techlog.Studio.getEntitiesFromLocalProject(parent: Entity = Entity(), recursive: bool = False)→ list
Get entities from current project.

Parameters
:
parent (Entity) – Optional; Return children of this entity if specified, first level entities if not specified

recursive (bool) – Optional; Return all descendant if True

Returns
:
Return children of parent entity.

Return type
:
list

Slb.Techlog.Studio.getEntitiesFromRepository(parent: Entity = Entity(), recursive: bool = False)→ list
Get entities from current repository

Parameters
:
parent (Entity) – Optional; Return children of this entity if specified, first level entities if not specified

recursive (bool) – Optional; Return all descendant if True

Returns
:
Return children of parent entity.

Return type
:
list

Slb.Techlog.Studio.getRepositories(serverUrl: str)→ list
Return repositories available in specified server.

Parameters
:
serverUrl (str) – url of the studio server

Returns
:
List of available repositories

Return type
:
list

Slb.Techlog.Studio.getRepositoryName()→ str
Return repository name associated with current project

Returns
:
Return repository name associated to current project

Return type
:
str

Slb.Techlog.Studio.getServerName()→ str
Return server name associated with current project

Returns
:
Return server name associated to current project

Return type
:
str

Slb.Techlog.Studio.getServerUrl()→ str
Return server url associated with current project

Returns
:
Return server URL associated to current project

Return type
:
str

Slb.Techlog.Studio.isConnectedToServer()→ bool
Return true if Techlog is connected to a Studio server

Returns
:
Return true if current project is connected to Studio

Return type
:
bool

Slb.Techlog.Studio.isLinkedToStudio()→ bool
Return true if current project is linked with a Studio repository

Returns
:
Return true if current project is linked to Studio

Return type
:
bool

Slb.Techlog.Studio.linkToStudio(serverUrl: str, repositoryName: str)
Link current project with specified repository in specified server.

Parameters
:
serverUrl (str) – url of the studio server

repositoryName (str) – name of the repository

Slb.Techlog.Studio.lock(transferList: TransferList)→ bool
Set a lock to each entities provided.

Parameters
:
transferList (TransferList) – list of entities to lock

Returns
:
True if there is no issue

Return type
:
bool

Slb.Techlog.Studio.publish(transferList: TransferList)→ bool
Publish entities defined in TransferList

Parameters
:
transferList (TransferList) – list of entities to transfer

Returns
:
True if publish succeed, false if it failed because of entities with issues

Return type
:
bool

Slb.Techlog.Studio.retrieve(transferList: TransferList)→ bool
Retrieve entities defined in TransferList

Parameters
:
transferList (TransferList) – list of entities to transfer

Returns
:
True if publish succeed, false if it failed because of entities with issues

Return type
:
bool

Slb.Techlog.Studio.treeLock(transferList: TransferList)→ bool
Set a tree lock to each entities provided.

Parameters
:
transferList (TransferList) – list of entities to lock

Returns
:
True if there is no issue

Return type
:
bool

Slb.Techlog.Studio.unlinkFromStudio()
Unlink current project from Studio.

Slb.Techlog.Studio.unlock(transferList: TransferList)→ bool
Remove lock to each entities provided.

Parameters
:
transferList (TransferList) – list of entities to unlock

Returns
:
True if there is no issue

Return type
:
bool

Slb.Techlog.Studio.unlockLockedByMe(transferList: TransferList)→ bool
Remove all lock set by current user on entities provided

Parameters
:
transferList (TransferList)

Returns
:
True if there is no issue

Return type
:
bool
Binder API
The Binder API enables you to assign a variable produced by one AWI method (referred to as the producer) as an input parameter for another AWI method (referred to as the consumer). Specifically, the consumer AWI method utilizes the assigned variable depth by depth during computation, replacing the need for a constant parameter. This connection between the producer’s variable and the consumer’s parameter is established through the mapping configuration. With this API, you can define and manage all three components: producer, consumer, and mapping configurations.

../_images/Binder.png
The configuration files can be deployed at User and Company levels under ApplicationWorkflowInterface folder. Producer, Consumer and Mapping configuration files could reside at different levels. ​

Mapping configuration file should have the same name as consumer file.​

Example of a default configuration files are deployed at Techlog level under ApplicationWorkflowInterface folder:
- QuantiElan.consumer
- KerogenProperties.producer
- PreSaltTemp.producer
- QuantiElan.mapping​
Getting started with AWI files handling
This documentation page explains how to read and modify AWI files with Python.

It introduces the following classes:

AWI consumer,

AWI producer,

AWI mapping,

Version.

AWI consumer
An AWI consumer defines a list of parameters that can be used as input to an AWI method.
These parameters are grouped together in tables.

For more details see AWI consumer class.
Load an AWI consumer from a file
import Binder

# Define a function that will print the content of an AWI consumer.
def printConsumer(consumer:Binder.AwiConsumer):
  tables = consumer.get_parameter_tables()
  print(f"The AWI consumer \"{consumer}\" has {len(tables)} tables:")
  for table in tables:
    parameters = table.get_parameters()
    print(f"\t- Table \"{table}\" has {len(parameters)} parameters:")
    for parameter in parameters:
      print(f"\t\t- Parameter \"{parameter}\"")

# Load the AWI consumer and display all of the parameters.
quantiElan = Binder.AwiConsumer.load(r"..\ApplicationWorkflowInterface\QuantiElan.consumer")
printConsumer(quantiElan)

# Get a specific parameter table.
deepResistivityTable = quantiElan.get_parameter_table_from_name("DeepResistivity")
print(f"\nThe table \"{deepResistivityTable}\" contains {len(deepResistivityTable.get_parameters())} parameters.")
# Get a specific parameter.
shallowFormationParameter = quantiElan.get_parameter_table_from_name("ShallowResistivity").get_parameter_from_name("Shallow_Formation_Water_Resistivity")
print(f"\nThe parameter \"{shallowFormationParameter}\" is in the table \"{shallowFormationParameter.get_parent()}\".")
AWI producer
An AWI producer defines a list of outputs that represent the results of computations from an external method.

For more details see AWI producer class.
Load an AWI producer from a file
import Binder

# Define a function that will print the content of an AWI producer.
def printProducer(producer:Binder.AwiProducer):
    outputs = producer.get_outputs()
    print(f"The AWI producer \"{producer}\" has {len(outputs)} outputs:")
    for output in outputs:
        print(f"\t- Output \"{output.get_default_variable_name()}\" @ {output.get_index()}")

# Load the AWI producers and display all of the outputs.
kerogenProperties = Binder.AwiProducer.load(r"..\ApplicationWorkflowInterface\KerogenProperties.producer")
printProducer(kerogenProperties)
preSaltTemp = Binder.AwiProducer.load(r"..\ApplicationWorkflowInterface\PreSaltTemp.producer")
printProducer(preSaltTemp)

# Get a specific output.
rhok = kerogenProperties.get_output_from_index(1)
print(f"\nThe output \"{rhok}\" belongs to the AWI producer \"{rhok.get_parent()}\".")
Create an AWI producer from scratch
import Binder

# Create an AWI producer with 3 outputs.
myProducer = Binder.AwiProducer("MyProducerId", "My beautiful producer")
myProducer.add_output(0, "GR")
myProducer.add_output(1, "POTA")
myProducer.add_output(2, "TH")
myProducer.save_as(r"D:\My User Folder\My AWI Files\MyBeautifulProducer.producer", Binder.Version(1))

# Remove the 2nd output and save.
myProducer.remove_output_from_index(1)
myProducer.save(Binder.Version(2))
AWI mapping
An AWI mapping binds some outputs, defined by one or several AWI producer (s), to the parameters defined by an AWI consumer.
It allows to specify, for each input parameter of an AWI method, the possible source of the values.

For more details see AWI mapping class.
Note

As an AWI mapping is tightly coupled with an AWI consumer, the related files are stored in the same folder, sharing the same filename but having a different file extension (“.consumer” and “.mapping”). For this reason, the path is not needed when saving the mapping file.

Load an AWI mapping from a file
import Binder

# Define a function that will print the content of an AWI producer.
def printMapping(mapping:Binder.AwiMapping):
  bindings = mapping.get_bindings()
  print(f"The AWI mapping \"{mapping}\" has {len(bindings)} bindings:")
  for binding in bindings:
    output_full_name = f"{binding.get_output().get_parent()}.{binding.get_output()}"
    parameter = binding.get_parameter()
    parameter_full_name = f"{parameter.get_parent().get_parent()}.{parameter.get_parent()}.{parameter}"
    print(f"\t- {output_full_name} --> {parameter_full_name}")

# Load the AWI consumer and the AWI producers used for the mapping.
quantiElan = Binder.AwiConsumer.load(r"..\ApplicationWorkflowInterface\QuantiElan.consumer")
kerogenProperties = Binder.AwiProducer.load(r"..\ApplicationWorkflowInterface\KerogenProperties.producer")
preSaltTemp = Binder.AwiProducer.load(r"..\ApplicationWorkflowInterface\PreSaltTemp.producer")
quantiElanMapping = Binder.AwiMapping.load(quantiElan, { kerogenProperties, preSaltTemp })
printMapping(quantiElanMapping)
Create an AWI mapping from scratch
import Binder

# Get the consumer and the producers that will be bound together.
quantiElan = Binder.AwiConsumer.load(r"..\ApplicationWorkflowInterface\QuantiElan.consumer")
kerogenProperties = Binder.AwiProducer.load(r"..\ApplicationWorkflowInterface\KerogenProperties.producer")
myProducer = Binder.AwiProducer.load(r"D:\My User Folder\My AWI Files\MyBeautifulProducer.producer")

# Create the mapping.
myMapping = Binder.AwiMapping()

# Bind 3 outputs to 2 parameters.
xiWaterSalinity = quantiElan.get_parameter_table_from_name("Minerals").get_parameter_from_name("XIWater_Salinity")
myMapping.bind(myProducer.get_output_from_index(0), xiWaterSalinity)
myMapping.bind(kerogenProperties.get_output_from_index(2), xiWaterSalinity)
uiWaterSalinity = quantiElan.get_parameter_table_from_name("Minerals").get_parameter_from_name("UIWater_Salinity")
myMapping.bind(kerogenProperties.get_output_from_index(1), uiWaterSalinity)

# Save the mapping, version 1.2.3.
myMapping.save_as(r"D:\My User Folder\My AWI Files", Binder.Version(1, 2, 3))
Version
A simple class that handles a version number.

Versions handling
from Binder import Version, VersionPart

# Fixed versions.
print(f"version 1: {Version(1)}")
print(f"version 1.2: {Version(1, 2)}")
print(f"version 1.2.3: {Version(1, 2, 3)}")
v234 = Version.parse("2.3.4")
print(f"Parsed version \"2.3.4\": {v234}")

# Increase version numbers.
print(f"Next major version after 1.2.3: {Version(1, 2, 3).increase(VersionPart.Major)}")
print(f"Next minor version after 1.2.3: {Version(1, 2, 3).increase(VersionPart.Minor)}")
print(f"Next patch version after 1.2.3: {Version(1, 2, 3).increase(VersionPart.Patch)}")
For more details see Version class and VersionPart enumeration.

Using a Python AWI as an AWI producer
The Binder API can be used, for instance, to bind the outputs of a Python AWI with the parameters of an AWI method. Note: Currently, the only AWI method supporting the Binder API is Quanti.Elan.

1. Create a Python AWI by clicking on the command “Python editor for AWI”, in the menu “Utility”.

2. Define your output variables.

3. Set up the function which will perform the desired computation.
Hint

Here is an example of a Python AWI defining one output variable PI and setting its content to the constant value 3.14159:

../_images/Binder_PythonAwiExample.png
4. Save the Python AWI at the desired level (Project, Company or User)
Hint

The previous Python AWI is saved as PiComputation.py at Project level:

../_images/Binder_PythonAwiSave.png
5. Using the Binder API, create a new AWI producer.
Define the outputs.
Use the function set_python_script(…) to define the file name of the associated Python script.
Create an AWI producer associated to a Python script.
from Binder import *

USER_FOLDER = "C:\\Users\\MyUserName\\AppData\\Roaming\\Schlumberger\\Techlog\\"
TARGET_FOLDER = USER_FOLDER + "ApplicationWorkflowInterface\\"

# Create a new Awi Producer associated to the Python script 'PiComputation.py'.
piConstantProducer = AwiProducer("PiConstant", "Pi constant value")
piConstantProducer.set_python_script("PiComputation.py")
piConstantProducer.add_output(0, "PI")

# Save it into the subdirectory `ApplicationWorkflowInterface` of the User folder.
piConstantProducer.save_as(TARGET_FOLDER + "PiConstant.producer", Version(1))
6. Load the current AWI mapping.
Bind the new outputs to the desired parameters.
Save the AWI mapping.
Bind the output “PI” to the parameter “Kerogen / Bulk Density” of Quanti.Elan.
# Load the AWI consumer, the AWI producers and the AWI mapping.
quantiElan = AwiConsumer.load(r"..\ApplicationWorkflowInterface\QuantiElan.consumer")
kerogenProperties = AwiProducer.load(r"..\ApplicationWorkflowInterface\KerogenProperties.producer")
preSaltTemp = AwiProducer.load(r"..\ApplicationWorkflowInterface\PreSaltTemp.producer")
quantiElanMapping = AwiMapping.load(quantiElan, { kerogenProperties, preSaltTemp })

# Replace the outputs bound with the parameter "Kerogen / Bulk Density", and bind this parameter to the output "PI".
kerogenBulkDensity = quantiElan.get_parameter_table_from_name("Minerals").get_parameter_from_name("Kerogen_Bulk_Density")
quantiElanMapping.unbind(None, kerogenBulkDensity)    # Remove any output bound to the parameter
piOutput = piConstantProducer.get_output_from_index(0)
quantiElanMapping.bind(piOutput, kerogenBulkDensity)

# Save the modified AWI mapping in the user folder.
quantiElanMapping.save_as(TARGET_FOLDER, quantiElanMapping.get_version().increase(None))
7. Start Techlog.

8. From the Project Browser, in the Python scripts folder, right click on your Python AWI and select Open with workflow.
⟹ A new workflow should be created with a method “Python: …”.

9. Set the Apply Mode either to save or save and display.

10. Run the method.

11. Open the Quanti.Elan method, located in the submenu “Quanti.Elan” of the menu “Petrophysics”.
⟹ The method “Quanti.Elan” should be added to your workflow.

12. Open the parameters tab and check if the outputs of your Python AWI have been bound properly.
Hint

Example of an AWI workflow with the Python AWI “PiComputation” defined above, and a Quanti.Elan method:

../_images/Binder_QuantiElanWorkflow.png
Class details
API
Binder.API.get_version()→ Version
Gets the version of the Binder API.

Returns
:
Version of the Binder API.

Return type
:
Version

AWI consumer class
classBinder.AwiConsumer(private, consumer: PreInitializationDataConsumer, file_path: str)
A consumer for an AWI method.

classParameter(parent: ParameterTable, parameter: Parameter)
A parameter in an AWI consumer.

get_id()→ UUID
Gets the unique identifier of the current AWI consumer’s parameter.

Returns
:
Unique identifier.

Return type
:
uuid.UUID

get_name()→ str
Gets the name of the parameter.

If the name is not set, the function will return the identifier of the parameter.

Returns
:
Name or identifier of the current parameter.

Return type
:
str

get_parent()→ ParameterTable
Gets the parent object.

Returns
:
Parent object.

Return type
:
AwiConsumer.ParameterTable

classParameterTable(parent: AwiConsumer, table: Table)
A table of parameters in an AWI consumer.

get_id()→ UUID
Gets the unique identifier of the current AWI consumer’s table.

Returns
:
Unique identifier.

Return type
:
uuid.UUID

get_name()→ str
Gets the name of the current table.

If the name is not set, the function will return the identifier of the table.

Returns
:
Name or identifier of the current table.

Return type
:
str

get_parameter_from_name(parameter_name: str)→ Parameter
Looks for a parameter.

Parameters
:
parameter_name (str) – Name of the parameter to look for.

Raises
:
ValueError – The current table does not contain the parameter with the given name.

Returns
:
Parameter in the current table.

Return type
:
AwiConsumer.Parameter

get_parameters()→ list[Parameter]
Gets the list of the parameters in the current table.

Returns
:
List of parameters stored in the current table.

Return type
:
List[‘AwiConsumer.Parameter’]

get_parent()→ AwiConsumer
Gets the parent object.

Returns
:
Parent object.

Return type
:
AwiConsumer

get_binder_api_version()→ Version
Gets the version of the Binder API used to create the current AWI consumer.

Returns
:
Version of the Binder API. None if the AWI consumer is not saved.

Return type
:
Version

get_file_path()→ str
Gets the full path of the file storing the current AWI consumer.

Returns
:
Full path of the AWI consumer file.

Return type
:
str

get_method_id()→ str
Gets the identifier of the AWI method.

Returns
:
Identifier of the AWI method which will consume the data.

Return type
:
str

get_method_name()→ str
Gets the name of the AWI method.

If the name is not set, the function will return the identifier of the AWI method.

Returns
:
Name or identifier of the AWI method which will consume the data.

Return type
:
str

get_parameter_table_from_name(table_name: str)→ ParameterTable
Looks for a table.

Parameters
:
table_name (str) – Name of the table to look for.

Raises
:
ValueError – The current AWI consumer does not contain the table.

Returns
:
Table of parameters in the current AWI consumer.

Return type
:
AwiConsumer.ParameterTable

get_parameter_tables()→ list[ParameterTable]
Gets the list of the tables defined in the current AWI consumer.

Returns
:
List of the parameter tables in the current AWI consumer.

Return type
:
List[‘AwiConsumer.ParameterTable’]

get_version()→ Version
Gets the version of the AWI consumer.

Returns
:
Version of the saved AWI consumer. None if the AWI consumer is not saved.

Return type
:
Version

staticload(awi_consumer_file_path: str)→ AwiConsumer
Loads an AWI consumer from an existing file.

Parameters
:
awi_consumer_file_path (str) – Path of the file storing the AWI consumer.

Raises
:
FileNotFoundError – awi_consumer_file_path is not a valid file path.

AssertionError – awi_consumer_file_path is not a valid consumer file.

Returns
:
AWI consumer.

Return type
:
AwiConsumer

AWI producer class
classBinder.AwiProducer(method_id: str, method_name: str | None = None, producer: PreInitializationDataProducer = None, file_path: str = None)
Represents a method producing some outputs that can be consumed by an AWI method.

classOutput(parent: AwiProducer, output: Output)
An output of an AWI producer.

get_default_variable_name()→ str
Gets the name of the variable used by default.

Returns
:
Name of the variable by default.

Return type
:
str

get_id()→ UUID
Gets the unique identifier of the current AWI producer’s output.

Returns
:
Unique identifier.

Return type
:
uuid.UUID

get_index()→ int
Gets the index of the current output.

Returns
:
Index of the current output. Should be greater or equal to 0.

Return type
:
int

get_parent()→ AwiProducer
Gets the parent object.

Returns
:
Parent object.

Return type
:
AwiConsumer.ParameterTable

add_output(index: int, default_variable_name: str)→ Output
Adds an output to the current producer.

Parameters
:
index (int) – Index of the output variable. Must be greater or equal to 0.

default_variable_name (str) – Name of the variable used by default.

Raises
:
ValueError – if the index is a negative number.

ValueError – if the default_variable_name is empty or is not valid.

ValueError – if another output has the same variable name.

ValueError – if another output has the same index.

Returns
:
Added output.

Return type
:
AwiProducer.Output

get_binder_api_version()→ Version
Gets the version of the Binder API used to create the current AWI producer.

Returns
:
Version of the Binder API. None if the AWI producer is not saved.

Return type
:
Version

get_file_path()→ str
Gets the full path of the file storing the current AWI producer.

Returns
:
Full path of the AWI producer file.

Return type
:
str

get_method_id()→ str
Gets the identifier of the method producing outputs.

Returns
:
Identifier of the method which produce outputs for AWI methods.

Return type
:
str

get_method_name()→ str
Gets the name of the method producing outputs.

If the name is not set, the function will return the identifier of the AWI method.

Returns
:
Name of the method producing outputs.

Return type
:
str

get_output_from_index(index: int)→ Output
Looks for an output.

Parameters
:
index (int) – Index (int) of the variable to look for.

Raises
:
ValueError – The current AWI producer does not contain the output.

Returns
:
Output in the current AWI producer.

Return type
:
AwiProducer.Output

get_outputs()→ list[Output]
Gets the list of the outputs.

Returns
:
List of the outputs available from the current AWI producer.

Return type
:
List[‘AwiProducer.Output’]

get_python_script()→ str
Gets the Python script associated with the current AWI producer.

Returns
:
File name of the Python script. None if not set.

Return type
:
str

get_version()→ Version
Gets the version of the AWI producer.

Returns
:
Version of the saved AWI producer. None if the AWI producer is not saved.

Return type
:
Version

is_modified()→ bool
Gets whether the current AWI producer has been modified.

Returns
:
True if current AWI producer has been modified and so should be saved; False if it has not been modified.

Return type
:
bool

staticload(awi_producer_file_path: str)→ AwiProducer
Loads an AWI producer from an existing file.

Parameters
:
awi_producer_file_path (str) – Path of the file storing the AWI producer.

Raises
:
FileNotFoundError – awi_producer_file_path is not a valid file path.

AssertionError – awi_producer_file_path is not a valid producer file.

Returns
:
AWI producer.

Return type
:
AwiProducer

remove_output_from_index(index: int)
Removes an existing output for the current AWI producer.

Parameters
:
index (int) – Index of the output to remove.

Raises
:
ValueError – The output does not exist.

save(version: Version = None)
Saves the current AWI producer into the current file.

Parameters
:
version (Version) –

New version of the AWI producer (must be greater than the current one).

If the version is unset (None), then the version of the current AWI producer will be increased on the meaningful part (ex: 1 → 2, 1.2 → 1.3, 1.2.3 → 1.2.4).

Raises
:
RuntimeError – The file path is not known, the object should be saved by calling the save_as function.

OSError – The path of the file is not valid.

ValueError – The version is lower or equal to the current version.

save_as(awi_producer_file_path: str, version: Version)
Saves the current AWI producer into a file.

Parameters
:
awi_producer_file_path (str) – Path of the destination file.

version (Version) – New version of the AWI producer (must be greater than the current one).

Raises
:
OSError – The path of the file is not valid.

ValueError – The version is lower or equal to the current version.

set_python_script(python_script: str)
Sets the Python script associated with the current AWI producer.

Parameters
:
python_script (str) –

Relative path of the Python script associated with the current AWI producer.

When used for Techlog, the file name must be relative to a known folder: the User folder, the Company folder or the Project folder.

Most of the time, it just contains the file name of the Python script. (ex: “MyPythonAwiMethod.py”).

Raises
:
ValueError – The file name is not valid.

AWI mapping class
classBinder.AwiMapping(mapping: PreInitializationDataMapping = None)
Connects outputs from AWI producers to parameters defined in an AWI consumer.

classBinding(parent: AwiMapping, output: AwiProducer.Output, parameter: AwiConsumer.Parameter)
Connects an output, from an AWI producer, to a parameter of an AWI consumer.

get_output()→ AwiProducer.Output
Gets the output of an AWI producer.

Returns
:
Output of an AWI producer.

Return type
:
AwiProducer.Output

get_parameter()→ Parameter
Gets the parameter of an AWI consumer.

Returns
:
Parameter of an AWI consumer.

Return type
:
AwiConsumer.Parameter

get_parent()→ AwiMapping
Gets the parent object.

Returns
:
Parent object.

Return type
:
AwiMapping

bind(output: AwiProducer.Output, parameter: AwiConsumer.Parameter)→ AwiMapping.Binding
Binds an AWI producer’s output with an AWI consumer’s parameter.

Parameters
:
output (AwiProducer.Output) – Output from an AWI producer.

parameter (AwiConsumer.Parameter) – Parameter from an AWI consumer.

Raises
:
ValueError – The output is not set.

ValueError – The parameter is not set.

ValueError – The parameter belongs to a different AWI consumer.

ValueError – The output and the parameter are already bound.

Returns
:
Added binding.

Return type
:
AwiMapping.Binding

get_binder_api_version()→ Version
Gets the version of the Binder API used to create the current AWI mapping.

Returns
:
Version of the Binder API. None if the AWI mapping is not saved.

Return type
:
Version

get_bindings()→ list[Binding]
Gets the bindings between the outputs of the registered AWI producers and the parameter of the AWI consumer.

Returns
:
List of bindings.

Return type
:
list[‘AwiMapping.Binding’]

Raises
:
ValueError – if the consumer is not valid.

ValueError – if the producer of an output is missing.

get_consumer()→ AwiConsumer
Gets the consumer.

Returns
:
AWI consumer.

Return type
:
AwiConsumer

get_file_path()→ str
Gets the full path of the file storing the current AWI mapping.

Returns
:
Full path of the AWI mapping file.

Return type
:
str

get_folder()→ str
Gets the folder storing the file of the current AWI mapping.

Returns
:
Path of the folder.

Return type
:
str

get_producers()→ set
Gets the set of the AWI producers.

Returns
:
AWI producers.

Return type
:
set[AwiProducer]

get_version()→ Version
Gets the version of the AWI mapping.

Returns
:
Version of the saved AWI mapping. None if the AWI mapping is not saved.

Return type
:
Version

is_modified()→ bool
Gets whether the current AWI mapping has been modified.

Returns
:
True if current AWI mapping has been modified and so should be saved; False if it has not been modified.

Return type
:
bool

staticload(consumer: AwiConsumer, producers: set, folder: str = None)→ AwiMapping
Loads an AWI mapping from an existing file.

Parameters
:
consumer (AwiConsumer) – AWI consumer.

producers (set[AwiProducer]) – AWI producers.

folder (str) – Path of the folder which store the AWI mapping file. If unset, the function will look into the same folder as the AWI consumer.

Raises
:
AssertionError – The AWI mapping file is not a valid mapping file.

FileNotFoundError – The AWI mapping file corresponding to consumer does not exist..

OSError – The folder does not exist.

ValueError – consumer is not a valid AWI consumer.

Returns
:
AWI mapping.

Return type
:
AwiMapping

save(version: Version = None)
Saves the current AWI mapping.

Parameters
:
version (Version) –

New version of the AWI mapping (must be greater than the current one).

If the version is not specified (None), then the version of the current AWI mapping will be increased on the meaningful part (ex: 1 → 2, 1.2 → 1.3, 1.2.3 → 1.2.4).

Raises
:
OSError – The path of the current AWI mapping file is not valid.

OSError – At least one of the bound AWI producers has not been saved.

RuntimeError – The file path of the AWI consumer is not valid.

ValueError – The version is lower or equal to the current version.

ValueError – There is no binding in the current mapping.

ValueError – The file extension of the AWI consumer is not valid.

save_as(folder: str, version: Version)
Saves the current AWI mapping in the given folder.

Parameters
:
folder (str) – Path of the folder which will store the AWI mapping file. If unset, the function will store the file into the same folder as the AWI consumer.

version (Version) – New version of the AWI mapping (must be greater than the current one).

Raises
:
OSError – The destination folder does not exist.

OSError – The path of the current AWI mapping file is not valid.

OSError – At least one of the bound AWI producers has not been saved.

RuntimeError – The file path of the AWI consumer is not valid.

ValueError – The version is lower or equal to the current version.

ValueError – There is no binding in the current mapping.

ValueError – The file extension of the AWI consumer is not valid.

unbind(output: AwiProducer.Output, parameter: AwiConsumer.Parameter)→ int
Removes the binding(s) between an AWI producer’s output and an AWI consumer’s parameter.

If output is None, then all the bindings with the given parameter will be removed. If parameter is None, then all the bindings with the given output will be removed. If both output and parameter are None, all of the bindings will be removed.

Parameters
:
output (AwiProducer.Output) – Output from an AWI producer.

parameter (AwiConsumer.Parameter) – Parameter of an AWI consumer.

Returns
:
Number of removed bindings.

Return type
:
int

Version class
classBinder.Version(major: int, minor: int = -1, patch: int = -1)
Represents a version number.

compare_to(other: Version)→ int
Compares the current version with another one.

Parameters
:
other (Version) – Version to compare to.

Returns
:
-1/0/+1 if the current version is lower/equal/greater than other.

Return type
:
int

get_major()→ int
Gets the value of the major component of the version number for the current Version object.

Returns
:
The major version number.

Return type
:
int

get_minor()→ int
Gets the value of the minor component of the version number for the current Version object.

Returns
:
The minor version number.

Return type
:
int

get_patch()→ int
Gets the value of the patch component of the version number for the current Version object.

Returns
:
The build/patch version number.

Return type
:
int

increase(part: VersionPart)→ Version
Increase a component of the current version.

Parameters
:
part (VersionPart) –

Indicates which part (Major, Minor or Patch) of the version number is going to be increased.

If the part is not specified (None) then the last meaningful part of the version will incremented:

If the version only consists of a major part, then it will be the next major version (ex: 2 → 3).

If the version is composed of a major and a minor parts, then the minor part will be incremented (ex: 1.2 → 1.3).

If the version is fully defined (major, minor and patch parts), then the patch part will be incremented (ex: 1.2.3 → 1.2.4).

Raises
:
ValueError – The part is not valid.

Returns
:
Increased version number.

Return type
:
Version

staticparse(version: str)→ Version
Converts a string into a Version object.

Parameters
:
version (str) – A version number composed of 1, 2 or 3 integers separated by a dot ‘.’ character.

Raises
:
ValueError – The version is empty or is not a valid version number.

Returns
:
Version object.

Return type
:
Version

VersionPart enumeration
classBinder.VersionPart(value, names=None, *values, module=None, qualname=None, type=None, start=1, boundary=None)
Identifies the component of a version number.

